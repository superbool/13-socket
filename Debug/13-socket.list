
13-socket.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a3a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f34  0801a530  0801a530  0002a530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e464  0801e464  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  0801e464  0801e464  0002e464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e46c  0801e46c  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e46c  0801e46c  0002e46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e470  0801e470  0002e470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0801e474  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030098  2**0
                  CONTENTS
 10 .bss          0000d084  20000098  20000098  00030098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000d11c  2000d11c  00030098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003a30e  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008508  00000000  00000000  0006a3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002868  00000000  00000000  000728e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002718  00000000  00000000  00075148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000358ef  00000000  00000000  00077860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f821  00000000  00000000  000ad14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4f60  00000000  00000000  000ec970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001e18d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b010  00000000  00000000  001e1920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a518 	.word	0x0801a518

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0801a518 	.word	0x0801a518

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000578:	4a05      	ldr	r2, [pc, #20]	; (8000590 <MX_FREERTOS_Init+0x1c>)
 800057a:	2100      	movs	r1, #0
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_FREERTOS_Init+0x20>)
 800057e:	f004 fc12 	bl	8004da6 <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <MX_FREERTOS_Init+0x24>)
 8000586:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    tcpecho_init();
 8000588:	f000 fb8a 	bl	8000ca0 <tcpecho_init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	0801e154 	.word	0x0801e154
 8000594:	0800059d 	.word	0x0800059d
 8000598:	200000b4 	.word	0x200000b4

0800059c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80005a4:	f003 fe2e 	bl	8004204 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
    /* Infinite loop */
    for (;;) {
        if (netif_is_up(&gnetif)) {
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <StartDefaultTask+0x48>)
 80005aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d008      	beq.n	80005ca <StartDefaultTask+0x2e>
            printf("ip address: %s\n", ip4addr_ntoa(&gnetif.ip_addr));
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <StartDefaultTask+0x4c>)
 80005ba:	f017 fcd7 	bl	8017f6c <ip4addr_ntoa>
 80005be:	4603      	mov	r3, r0
 80005c0:	4619      	mov	r1, r3
 80005c2:	480a      	ldr	r0, [pc, #40]	; (80005ec <StartDefaultTask+0x50>)
 80005c4:	f019 f858 	bl	8019678 <iprintf>
 80005c8:	e002      	b.n	80005d0 <StartDefaultTask+0x34>
        } else {
            printf("netif not up\n");
 80005ca:	4809      	ldr	r0, [pc, #36]	; (80005f0 <StartDefaultTask+0x54>)
 80005cc:	f019 f8da 	bl	8019784 <puts>
        }
        //vTaskDelay(1000);

        HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80005d0:	2110      	movs	r1, #16
 80005d2:	4808      	ldr	r0, [pc, #32]	; (80005f4 <StartDefaultTask+0x58>)
 80005d4:	f002 fac1 	bl	8002b5a <HAL_GPIO_TogglePin>
        osDelay(500);
 80005d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005dc:	f004 fc75 	bl	8004eca <osDelay>
        if (netif_is_up(&gnetif)) {
 80005e0:	e7e2      	b.n	80005a8 <StartDefaultTask+0xc>
 80005e2:	bf00      	nop
 80005e4:	2000014c 	.word	0x2000014c
 80005e8:	20000150 	.word	0x20000150
 80005ec:	0801a53c 	.word	0x0801a53c
 80005f0:	0801a54c 	.word	0x0801a54c
 80005f4:	40021000 	.word	0x40021000

080005f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	; 0x28
 80005fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
 8000612:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <MX_GPIO_Init+0xd0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <MX_GPIO_Init+0xd0>)
 8000618:	f043 0310 	orr.w	r3, r3, #16
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <MX_GPIO_Init+0xd0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0310 	and.w	r3, r3, #16
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <MX_GPIO_Init+0xd0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a25      	ldr	r2, [pc, #148]	; (80006c8 <MX_GPIO_Init+0xd0>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <MX_GPIO_Init+0xd0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_GPIO_Init+0xd0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <MX_GPIO_Init+0xd0>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_GPIO_Init+0xd0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_GPIO_Init+0xd0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <MX_GPIO_Init+0xd0>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_GPIO_Init+0xd0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_GPIO_Init+0xd0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a10      	ldr	r2, [pc, #64]	; (80006c8 <MX_GPIO_Init+0xd0>)
 8000688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_GPIO_Init+0xd0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ETH_RESET_Pin|LED1_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2114      	movs	r1, #20
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <MX_GPIO_Init+0xd4>)
 80006a0:	f002 fa42 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ETH_RESET_Pin|LED1_Pin;
 80006a4:	2314      	movs	r3, #20
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2300      	movs	r3, #0
 80006b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4619      	mov	r1, r3
 80006ba:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_GPIO_Init+0xd4>)
 80006bc:	f002 f898 	bl	80027f0 <HAL_GPIO_Init>

}
 80006c0:	bf00      	nop
 80006c2:	3728      	adds	r7, #40	; 0x28
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40021000 	.word	0x40021000

080006d0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

//重定向printf函数
PUTCHAR_PROTOTYPE {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0xFFFF);//输出指向串口USART1
 80006d8:	1d39      	adds	r1, r7, #4
 80006da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006de:	2201      	movs	r2, #1
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <__io_putchar+0x20>)
 80006e2:	f003 fa1a 	bl	8003b1a <HAL_UART_Transmit>
    return ch;
 80006e6:	687b      	ldr	r3, [r7, #4]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000104 	.word	0x20000104

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fce2 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f80c 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f7ff ff7a 	bl	80005f8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000704:	f000 fae0 	bl	8000cc8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000708:	f004 faee 	bl	8004ce8 <osKernelInitialize>
  MX_FREERTOS_Init();
 800070c:	f7ff ff32 	bl	8000574 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000710:	f004 fb0e 	bl	8004d30 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000714:	e7fe      	b.n	8000714 <main+0x20>
	...

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	2230      	movs	r2, #48	; 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f018 febe 	bl	80194a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <SystemClock_Config+0xcc>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a27      	ldr	r2, [pc, #156]	; (80007e4 <SystemClock_Config+0xcc>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <SystemClock_Config+0xcc>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <SystemClock_Config+0xd0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <SystemClock_Config+0xd0>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <SystemClock_Config+0xd0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000774:	2301      	movs	r3, #1
 8000776:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000788:	2304      	movs	r3, #4
 800078a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800078c:	23a8      	movs	r3, #168	; 0xa8
 800078e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000794:	2304      	movs	r3, #4
 8000796:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 0320 	add.w	r3, r7, #32
 800079c:	4618      	mov	r0, r3
 800079e:	f002 f9f7 	bl	8002b90 <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a8:	f000 f832 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	2302      	movs	r3, #2
 80007b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2105      	movs	r1, #5
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 fc58 	bl	8003080 <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007d6:	f000 f81b 	bl	8000810 <Error_Handler>
  }
}
 80007da:	bf00      	nop
 80007dc:	3750      	adds	r7, #80	; 0x50
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d101      	bne.n	8000802 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007fe:	f000 fc81 	bl	8001104 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40001000 	.word	0x40001000

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_MspInit+0x54>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	4a11      	ldr	r2, [pc, #68]	; (8000870 <HAL_MspInit+0x54>)
 800082c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000830:	6453      	str	r3, [r2, #68]	; 0x44
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_MspInit+0x54>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <HAL_MspInit+0x54>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <HAL_MspInit+0x54>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_MspInit+0x54>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	210f      	movs	r1, #15
 800085e:	f06f 0001 	mvn.w	r0, #1
 8000862:	f000 fd4b 	bl	80012fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08e      	sub	sp, #56	; 0x38
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4b33      	ldr	r3, [pc, #204]	; (8000958 <HAL_InitTick+0xe4>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	4a32      	ldr	r2, [pc, #200]	; (8000958 <HAL_InitTick+0xe4>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6413      	str	r3, [r2, #64]	; 0x40
 8000894:	4b30      	ldr	r3, [pc, #192]	; (8000958 <HAL_InitTick+0xe4>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	f003 0310 	and.w	r3, r3, #16
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a0:	f107 0210 	add.w	r2, r7, #16
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 fe08 	bl	80034c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d103      	bne.n	80008c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008ba:	f002 fdd9 	bl	8003470 <HAL_RCC_GetPCLK1Freq>
 80008be:	6378      	str	r0, [r7, #52]	; 0x34
 80008c0:	e004      	b.n	80008cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008c2:	f002 fdd5 	bl	8003470 <HAL_RCC_GetPCLK1Freq>
 80008c6:	4603      	mov	r3, r0
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ce:	4a23      	ldr	r2, [pc, #140]	; (800095c <HAL_InitTick+0xe8>)
 80008d0:	fba2 2303 	umull	r2, r3, r2, r3
 80008d4:	0c9b      	lsrs	r3, r3, #18
 80008d6:	3b01      	subs	r3, #1
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <HAL_InitTick+0xec>)
 80008dc:	4a21      	ldr	r2, [pc, #132]	; (8000964 <HAL_InitTick+0xf0>)
 80008de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <HAL_InitTick+0xec>)
 80008e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008e8:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <HAL_InitTick+0xec>)
 80008ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_InitTick+0xec>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <HAL_InitTick+0xec>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <HAL_InitTick+0xec>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000900:	4817      	ldr	r0, [pc, #92]	; (8000960 <HAL_InitTick+0xec>)
 8000902:	f002 fe0f 	bl	8003524 <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800090c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000910:	2b00      	cmp	r3, #0
 8000912:	d11b      	bne.n	800094c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000914:	4812      	ldr	r0, [pc, #72]	; (8000960 <HAL_InitTick+0xec>)
 8000916:	f002 fe5f 	bl	80035d8 <HAL_TIM_Base_Start_IT>
 800091a:	4603      	mov	r3, r0
 800091c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000920:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000924:	2b00      	cmp	r3, #0
 8000926:	d111      	bne.n	800094c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000928:	2036      	movs	r0, #54	; 0x36
 800092a:	f000 fd03 	bl	8001334 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b0f      	cmp	r3, #15
 8000932:	d808      	bhi.n	8000946 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	2036      	movs	r0, #54	; 0x36
 800093a:	f000 fcdf 	bl	80012fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_InitTick+0xf4>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	e002      	b.n	800094c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800094c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000950:	4618      	mov	r0, r3
 8000952:	3738      	adds	r7, #56	; 0x38
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	431bde83 	.word	0x431bde83
 8000960:	200000b8 	.word	0x200000b8
 8000964:	40001000 	.word	0x40001000
 8000968:	20000004 	.word	0x20000004

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <TIM6_DAC_IRQHandler+0x10>)
 800099e:	f002 fe8b 	bl	80036b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000b8 	.word	0x200000b8

080009ac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <ETH_IRQHandler+0x10>)
 80009b2:	f001 f847 	bl	8001a44 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20004c88 	.word	0x20004c88

080009c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return 1;
 80009c4:	2301      	movs	r3, #1
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <_kill>:

int _kill(int pid, int sig)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <_kill+0x20>)
 80009dc:	2216      	movs	r2, #22
 80009de:	601a      	str	r2, [r3, #0]
  return -1;
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	2000d118 	.word	0x2000d118

080009f4 <_exit>:

void _exit (int status)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80009fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ffe5 	bl	80009d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a06:	e7fe      	b.n	8000a06 <_exit+0x12>

08000a08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	e00a      	b.n	8000a30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a1a:	f3af 8000 	nop.w
 8000a1e:	4601      	mov	r1, r0
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	60ba      	str	r2, [r7, #8]
 8000a26:	b2ca      	uxtb	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	dbf0      	blt.n	8000a1a <_read+0x12>
  }

  return len;
 8000a38:	687b      	ldr	r3, [r7, #4]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	e009      	b.n	8000a68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fe37 	bl	80006d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	dbf1      	blt.n	8000a54 <_write+0x12>
  }
  return len;
 8000a70:	687b      	ldr	r3, [r7, #4]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_close>:

int _close(int file)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa2:	605a      	str	r2, [r3, #4]
  return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_isatty>:

int _isatty(int file)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b087      	sub	sp, #28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aec:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <_sbrk+0x5c>)
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <_sbrk+0x60>)
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <_sbrk+0x64>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <_sbrk+0x68>)
 8000b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d205      	bcs.n	8000b20 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <_sbrk+0x6c>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1e:	e009      	b.n	8000b34 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <_sbrk+0x64>)
 8000b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	371c      	adds	r7, #28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	20020000 	.word	0x20020000
 8000b44:	00000400 	.word	0x00000400
 8000b48:	20000100 	.word	0x20000100
 8000b4c:	2000d120 	.word	0x2000d120
 8000b50:	2000d118 	.word	0x2000d118

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <http_server_serve>:
/**
  * @brief serve tcp connection
  * @param conn: connection socket
  * @retval None
  */
void http_server_serve(int conn) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	f5ad 6dbe 	sub.w	sp, sp, #1520	; 0x5f0
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000b84:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8000b88:	6018      	str	r0, [r3, #0]
    int buflen = 1500;
 8000b8a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000b8e:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
    int ret;

    unsigned char recv_buffer[1500];

    /* Read in the request */
    ret = read(conn, recv_buffer, buflen);
 8000b92:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 8000b96:	f107 010c 	add.w	r1, r7, #12
 8000b9a:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000b9e:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8000ba2:	6818      	ldr	r0, [r3, #0]
 8000ba4:	f00a fe0e 	bl	800b7c4 <lwip_read>
 8000ba8:	f8c7 05e8 	str.w	r0, [r7, #1512]	; 0x5e8
    if (ret < 0) return;
 8000bac:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db07      	blt.n	8000bc4 <http_server_serve+0x4c>

    //write(conn, recv_buffer, buflen);
    /* Close connection socket */
    close(conn);
 8000bb4:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000bb8:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8000bbc:	6818      	ldr	r0, [r3, #0]
 8000bbe:	f00a fa41 	bl	800b044 <lwip_close>
 8000bc2:	e000      	b.n	8000bc6 <http_server_serve+0x4e>
    if (ret < 0) return;
 8000bc4:	bf00      	nop
}
 8000bc6:	f507 67be 	add.w	r7, r7, #1520	; 0x5f0
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <http_server_socket_thread>:
/**
  * @brief  http server thread
  * @param arg: pointer on argument(not used here)
  * @retval None
  */
static void http_server_socket_thread(void *argument) {
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b08f      	sub	sp, #60	; 0x3c
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
    int sock, newconn, size;
    struct sockaddr_in address, remotehost;
    /* bind to port 80 at any interface */
    address.sin_family = AF_INET;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	777b      	strb	r3, [r7, #29]
    address.sin_port = htons(80);
 8000bdc:	2050      	movs	r0, #80	; 0x50
 8000bde:	f00b f9bd 	bl	800bf5c <lwip_htons>
 8000be2:	4603      	mov	r3, r0
 8000be4:	83fb      	strh	r3, [r7, #30]
    address.sin_addr.s_addr = INADDR_ANY;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]

    /* create a TCP socket */
    do {
        sock = socket(AF_INET, SOCK_STREAM, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2101      	movs	r1, #1
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f00a fdfe 	bl	800b7f0 <lwip_socket>
 8000bf4:	6378      	str	r0, [r7, #52]	; 0x34
        if (sock < 0) {
 8000bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	da03      	bge.n	8000c04 <http_server_socket_thread+0x34>
            printf("Socket error\n");
 8000bfc:	4823      	ldr	r0, [pc, #140]	; (8000c8c <http_server_socket_thread+0xbc>)
 8000bfe:	f018 fdc1 	bl	8019784 <puts>
 8000c02:	e016      	b.n	8000c32 <http_server_socket_thread+0x62>
        } else {
            if (bind(sock, (struct sockaddr *) &address, sizeof(address)) < 0) {
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	2210      	movs	r2, #16
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c0e:	f00a f9ab 	bl	800af68 <lwip_bind>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	da02      	bge.n	8000c1e <http_server_socket_thread+0x4e>
                printf("Unable to bind\n");
 8000c18:	481d      	ldr	r0, [pc, #116]	; (8000c90 <http_server_socket_thread+0xc0>)
 8000c1a:	f018 fdb3 	bl	8019784 <puts>
            }
            /* listen for incoming connections (TCP listen backlog = 5) */
            if (listen(sock, 5) < 0) {
 8000c1e:	2105      	movs	r1, #5
 8000c20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c22:	f00a fa65 	bl	800b0f0 <lwip_listen>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	da02      	bge.n	8000c32 <http_server_socket_thread+0x62>
                printf("Listen error\n");
 8000c2c:	4819      	ldr	r0, [pc, #100]	; (8000c94 <http_server_socket_thread+0xc4>)
 8000c2e:	f018 fda9 	bl	8019784 <puts>
            }
        }
        osDelay(100);
 8000c32:	2064      	movs	r0, #100	; 0x64
 8000c34:	f004 f949 	bl	8004eca <osDelay>
    } while (sock < 0);
 8000c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	dbd5      	blt.n	8000bea <http_server_socket_thread+0x1a>

    printf("Socket bind to 80 success\n");
 8000c3e:	4816      	ldr	r0, [pc, #88]	; (8000c98 <http_server_socket_thread+0xc8>)
 8000c40:	f018 fda0 	bl	8019784 <puts>
    size = sizeof(remotehost);
 8000c44:	2310      	movs	r3, #16
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c

    for (;;) {
        newconn = accept(sock, (struct sockaddr *) &remotehost, (socklen_t *) &size);
 8000c48:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	4619      	mov	r1, r3
 8000c52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c54:	f00a f86a 	bl	800ad2c <lwip_accept>
 8000c58:	6338      	str	r0, [r7, #48]	; 0x30
        printf("my new client connected from (%s, %d)\n", inet_ntoa(remotehost.sin_addr), ntohs(remotehost.sin_port));
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	3304      	adds	r3, #4
 8000c60:	4618      	mov	r0, r3
 8000c62:	f017 f983 	bl	8017f6c <ip4addr_ntoa>
 8000c66:	4604      	mov	r4, r0
 8000c68:	89fb      	ldrh	r3, [r7, #14]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f00b f976 	bl	800bf5c <lwip_htons>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	4621      	mov	r1, r4
 8000c76:	4809      	ldr	r0, [pc, #36]	; (8000c9c <http_server_socket_thread+0xcc>)
 8000c78:	f018 fcfe 	bl	8019678 <iprintf>
        http_server_serve(newconn);
 8000c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c7e:	f7ff ff7b 	bl	8000b78 <http_server_serve>
        osDelay(1);
 8000c82:	2001      	movs	r0, #1
 8000c84:	f004 f921 	bl	8004eca <osDelay>
        newconn = accept(sock, (struct sockaddr *) &remotehost, (socklen_t *) &size);
 8000c88:	e7de      	b.n	8000c48 <http_server_socket_thread+0x78>
 8000c8a:	bf00      	nop
 8000c8c:	0801a55c 	.word	0x0801a55c
 8000c90:	0801a56c 	.word	0x0801a56c
 8000c94:	0801a57c 	.word	0x0801a57c
 8000c98:	0801a58c 	.word	0x0801a58c
 8000c9c:	0801a5a8 	.word	0x0801a5a8

08000ca0 <tcpecho_init>:
    __exit:
    if (sock >= 0) closesocket(sock);
    if (recv_data) free(recv_data);
}

void tcpecho_init(void) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af02      	add	r7, sp, #8
    sys_thread_new("tcpecho_thread", http_server_socket_thread, NULL, 2048, osPriorityNormal);
 8000ca6:	2318      	movs	r3, #24
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cae:	2200      	movs	r2, #0
 8000cb0:	4903      	ldr	r1, [pc, #12]	; (8000cc0 <tcpecho_init+0x20>)
 8000cb2:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <tcpecho_init+0x24>)
 8000cb4:	f018 fa76 	bl	80191a4 <sys_thread_new>
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	08000bd1 	.word	0x08000bd1
 8000cc4:	0801a614 	.word	0x0801a614

08000cc8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <MX_USART1_UART_Init+0x50>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000d00:	f002 febe 	bl	8003a80 <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d0a:	f7ff fd81 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000104 	.word	0x20000104
 8000d18:	40011000 	.word	0x40011000

08000d1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a19      	ldr	r2, [pc, #100]	; (8000da0 <HAL_UART_MspInit+0x84>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d12c      	bne.n	8000d98 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d48:	f043 0310 	orr.w	r3, r3, #16
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d76:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d88:	2307      	movs	r3, #7
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <HAL_UART_MspInit+0x8c>)
 8000d94:	f001 fd2c 	bl	80027f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	; 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40011000 	.word	0x40011000
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020000 	.word	0x40020000

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000db2:	490e      	ldr	r1, [pc, #56]	; (8000dec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db4:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc8:	4c0b      	ldr	r4, [pc, #44]	; (8000df8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dd6:	f7ff febd 	bl	8000b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dda:	f018 fb17 	bl	801940c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fc89 	bl	80006f4 <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000df0:	0801e474 	.word	0x0801e474
  ldr r2, =_sbss
 8000df4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000df8:	2000d11c 	.word	0x2000d11c

08000dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>

08000dfe <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00b      	beq.n	8000e26 <LAN8742_RegisterBusIO+0x28>
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d007      	beq.n	8000e26 <LAN8742_RegisterBusIO+0x28>
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <LAN8742_RegisterBusIO+0x28>
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d102      	bne.n	8000e2c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e2a:	e014      	b.n	8000e56 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d17c      	bne.n	8000f7c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2220      	movs	r2, #32
 8000e94:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	e01c      	b.n	8000ed6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	f107 0208 	add.w	r2, r7, #8
 8000ea4:	2112      	movs	r1, #18
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	4798      	blx	r3
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	da03      	bge.n	8000eb8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000eb0:	f06f 0304 	mvn.w	r3, #4
 8000eb4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000eb6:	e00b      	b.n	8000ed0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	f003 031f 	and.w	r3, r3, #31
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d105      	bne.n	8000ed0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
         break;
 8000ece:	e005      	b.n	8000edc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	2b1f      	cmp	r3, #31
 8000eda:	d9df      	bls.n	8000e9c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b1f      	cmp	r3, #31
 8000ee2:	d902      	bls.n	8000eea <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000ee4:	f06f 0302 	mvn.w	r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d145      	bne.n	8000f7c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	6810      	ldr	r0, [r2, #0]
 8000ef8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000efc:	2100      	movs	r1, #0
 8000efe:	4798      	blx	r3
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db37      	blt.n	8000f76 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	6810      	ldr	r0, [r2, #0]
 8000f0e:	f107 0208 	add.w	r2, r7, #8
 8000f12:	2100      	movs	r1, #0
 8000f14:	4798      	blx	r3
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db28      	blt.n	8000f6e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4798      	blx	r3
 8000f22:	4603      	mov	r3, r0
 8000f24:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f26:	e01c      	b.n	8000f62 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4798      	blx	r3
 8000f2e:	4603      	mov	r3, r0
 8000f30:	461a      	mov	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f3a:	d80e      	bhi.n	8000f5a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	6810      	ldr	r0, [r2, #0]
 8000f44:	f107 0208 	add.w	r2, r7, #8
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4798      	blx	r3
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	da07      	bge.n	8000f62 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000f52:	f06f 0304 	mvn.w	r3, #4
 8000f56:	613b      	str	r3, [r7, #16]
                 break;
 8000f58:	e010      	b.n	8000f7c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000f5a:	f06f 0301 	mvn.w	r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
               break;
 8000f60:	e00c      	b.n	8000f7c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1dd      	bne.n	8000f28 <LAN8742_Init+0xc6>
 8000f6c:	e006      	b.n	8000f7c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000f6e:	f06f 0304 	mvn.w	r3, #4
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	e002      	b.n	8000f7c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000f76:	f06f 0303 	mvn.w	r3, #3
 8000f7a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d112      	bne.n	8000fa8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	4798      	blx	r3
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000f8c:	bf00      	nop
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4798      	blx	r3
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fa0:	d9f5      	bls.n	8000f8e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000fa8:	693b      	ldr	r3, [r7, #16]
 }
 8000faa:	4618      	mov	r0, r3
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	6810      	ldr	r0, [r2, #0]
 8000fc6:	f107 020c 	add.w	r2, r7, #12
 8000fca:	2101      	movs	r1, #1
 8000fcc:	4798      	blx	r3
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	da02      	bge.n	8000fda <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000fd4:	f06f 0304 	mvn.w	r3, #4
 8000fd8:	e06e      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	6810      	ldr	r0, [r2, #0]
 8000fe2:	f107 020c 	add.w	r2, r7, #12
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4798      	blx	r3
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da02      	bge.n	8000ff6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ff0:	f06f 0304 	mvn.w	r3, #4
 8000ff4:	e060      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001000:	2301      	movs	r3, #1
 8001002:	e059      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	6810      	ldr	r0, [r2, #0]
 800100c:	f107 020c 	add.w	r2, r7, #12
 8001010:	2100      	movs	r1, #0
 8001012:	4798      	blx	r3
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	da02      	bge.n	8001020 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800101a:	f06f 0304 	mvn.w	r3, #4
 800101e:	e04b      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d11b      	bne.n	8001062 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d006      	beq.n	8001042 <LAN8742_GetLinkState+0x90>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800103e:	2302      	movs	r3, #2
 8001040:	e03a      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800104c:	2303      	movs	r3, #3
 800104e:	e033      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800105a:	2304      	movs	r3, #4
 800105c:	e02c      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800105e:	2305      	movs	r3, #5
 8001060:	e02a      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	6810      	ldr	r0, [r2, #0]
 800106a:	f107 020c 	add.w	r2, r7, #12
 800106e:	211f      	movs	r1, #31
 8001070:	4798      	blx	r3
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	da02      	bge.n	800107e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001078:	f06f 0304 	mvn.w	r3, #4
 800107c:	e01c      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001088:	2306      	movs	r3, #6
 800108a:	e015      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 031c 	and.w	r3, r3, #28
 8001092:	2b18      	cmp	r3, #24
 8001094:	d101      	bne.n	800109a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001096:	2302      	movs	r3, #2
 8001098:	e00e      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f003 031c 	and.w	r3, r3, #28
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d101      	bne.n	80010a8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e007      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 031c 	and.w	r3, r3, #28
 80010ae:	2b14      	cmp	r3, #20
 80010b0:	d101      	bne.n	80010b6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010b2:	2304      	movs	r3, #4
 80010b4:	e000      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010b6:	2305      	movs	r3, #5
    }				
  }
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <HAL_Init+0x40>)
 80010ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <HAL_Init+0x40>)
 80010d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_Init+0x40>)
 80010e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 f8fc 	bl	80012e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ee:	200f      	movs	r0, #15
 80010f0:	f7ff fbc0 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f4:	f7ff fb92 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023c00 	.word	0x40023c00

08001104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x20>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x24>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <HAL_IncTick+0x24>)
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000008 	.word	0x20000008
 8001128:	20000148 	.word	0x20000148

0800112c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <HAL_GetTick+0x14>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000148 	.word	0x20000148

08001144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800114c:	f7ff ffee 	bl	800112c <HAL_GetTick>
 8001150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800115c:	d005      	beq.n	800116a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_Delay+0x44>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800116a:	bf00      	nop
 800116c:	f7ff ffde 	bl	800112c <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	429a      	cmp	r2, r3
 800117a:	d8f7      	bhi.n	800116c <HAL_Delay+0x28>
  {
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000008 	.word	0x20000008

0800118c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <__NVIC_GetPriorityGrouping+0x18>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	f003 0307 	and.w	r3, r3, #7
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db0b      	blt.n	800121a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4907      	ldr	r1, [pc, #28]	; (8001228 <__NVIC_EnableIRQ+0x38>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	; (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	; (800127c <__NVIC_SetPriority+0x50>)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ff4c 	bl	800118c <__NVIC_SetPriorityGrouping>
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130e:	f7ff ff61 	bl	80011d4 <__NVIC_GetPriorityGrouping>
 8001312:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	68b9      	ldr	r1, [r7, #8]
 8001318:	6978      	ldr	r0, [r7, #20]
 800131a:	f7ff ffb1 	bl	8001280 <NVIC_EncodePriority>
 800131e:	4602      	mov	r2, r0
 8001320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff80 	bl	800122c <__NVIC_SetPriority>
}
 800132c:	bf00      	nop
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff54 	bl	80011f0 <__NVIC_EnableIRQ>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e06c      	b.n	800143c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001368:	2b00      	cmp	r3, #0
 800136a:	d106      	bne.n	800137a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2223      	movs	r2, #35	; 0x23
 8001370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f003 fa5b 	bl	8004830 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b31      	ldr	r3, [pc, #196]	; (8001444 <HAL_ETH_Init+0xf4>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a30      	ldr	r2, [pc, #192]	; (8001444 <HAL_ETH_Init+0xf4>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <HAL_ETH_Init+0xf4>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001396:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <HAL_ETH_Init+0xf8>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4a2b      	ldr	r2, [pc, #172]	; (8001448 <HAL_ETH_Init+0xf8>)
 800139c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013a0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013a2:	4b29      	ldr	r3, [pc, #164]	; (8001448 <HAL_ETH_Init+0xf8>)
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	4927      	ldr	r1, [pc, #156]	; (8001448 <HAL_ETH_Init+0xf8>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <HAL_ETH_Init+0xf8>)
 80013b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013cc:	f7ff feae 	bl	800112c <HAL_GetTick>
 80013d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013d2:	e011      	b.n	80013f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013d4:	f7ff feaa 	bl	800112c <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013e2:	d909      	bls.n	80013f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2204      	movs	r2, #4
 80013e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	22e0      	movs	r2, #224	; 0xe0
 80013f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e021      	b.n	800143c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1e4      	bne.n	80013d4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 ff4a 	bl	80022a4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 fff1 	bl	80023f8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f001 f847 	bl	80024aa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	461a      	mov	r2, r3
 8001422:	2100      	movs	r1, #0
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 ffaf 	bl	8002388 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2210      	movs	r2, #16
 8001436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	40013800 	.word	0x40013800

0800144c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800145a:	2b10      	cmp	r3, #16
 800145c:	d17f      	bne.n	800155e <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2223      	movs	r2, #35	; 0x23
 8001462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800147a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001490:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80014a4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2204      	movs	r2, #4
 80014ac:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f9f8 	bl	80018a4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0208 	orr.w	r2, r2, #8
 80014c2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7ff fe39 	bl	8001144 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0204 	orr.w	r2, r2, #4
 80014e8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014f2:	2001      	movs	r0, #1
 80014f4:	f7ff fe26 	bl	8001144 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 fd70 	bl	8001fe6 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001518:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800151c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001534:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001548:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 800154c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001550:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2223      	movs	r2, #35	; 0x23
 8001556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e000      	b.n	8001560 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
  }
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001576:	2b23      	cmp	r3, #35	; 0x23
 8001578:	d170      	bne.n	800165c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2223      	movs	r2, #35	; 0x23
 800157e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001594:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001598:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800159c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015b4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	f023 0302 	bic.w	r3, r3, #2
 80015c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015cc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0204 	bic.w	r2, r2, #4
 80015dc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff fdac 	bl	8001144 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 fcf6 	bl	8001fe6 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0208 	bic.w	r2, r2, #8
 8001608:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001612:	2001      	movs	r0, #1
 8001614:	f7ff fd96 	bl	8001144 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	e00e      	b.n	8001644 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	3212      	adds	r2, #18
 800162c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001630:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2b03      	cmp	r3, #3
 8001648:	d9ed      	bls.n	8001626 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2210      	movs	r2, #16
 8001654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	e000      	b.n	800165e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
  }
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d109      	bne.n	800168a <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167c:	f043 0201 	orr.w	r2, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e045      	b.n	8001716 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001690:	2b23      	cmp	r3, #35	; 0x23
 8001692:	d13f      	bne.n	8001714 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800169c:	2201      	movs	r2, #1
 800169e:	6839      	ldr	r1, [r7, #0]
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 ff6f 	bl	8002584 <ETH_Prepare_Tx_Descriptors>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d009      	beq.n	80016c0 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b2:	f043 0202 	orr.w	r2, r3, #2
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e02a      	b.n	8001716 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016c0:	f3bf 8f4f 	dsb	sy
}
 80016c4:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d904      	bls.n	80016e2 <HAL_ETH_Transmit_IT+0x7c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	1f1a      	subs	r2, r3, #4
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00d      	beq.n	8001710 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016fc:	461a      	mov	r2, r3
 80016fe:	2304      	movs	r3, #4
 8001700:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800170a:	461a      	mov	r2, r3
 800170c:	2300      	movs	r3, #0
 800170e:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	e000      	b.n	8001716 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
  }
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b088      	sub	sp, #32
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d109      	bne.n	800174a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173c:	f043 0201 	orr.w	r2, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e0a8      	b.n	800189c <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001750:	2b23      	cmp	r3, #35	; 0x23
 8001752:	d001      	beq.n	8001758 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0a1      	b.n	800189c <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	3212      	adds	r2, #18
 8001764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001768:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800176e:	f1c3 0304 	rsb	r3, r3, #4
 8001772:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001774:	e06a      	b.n	800184c <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	699a      	ldr	r2, [r3, #24]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	69da      	ldr	r2, [r3, #28]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800179a:	2b00      	cmp	r3, #0
 800179c:	d103      	bne.n	80017a6 <HAL_ETH_ReadData+0x88>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d040      	beq.n	8001828 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00c      	beq.n	80017ea <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	0c1b      	lsrs	r3, r3, #16
 80017d6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80017da:	3b04      	subs	r3, #4
 80017dc:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001802:	461a      	mov	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	b29b      	uxth	r3, r3
 8001808:	f003 f9de 	bl	8004bc8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	441a      	add	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	3301      	adds	r3, #1
 800182c:	61fb      	str	r3, [r7, #28]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d902      	bls.n	800183a <HAL_ETH_ReadData+0x11c>
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	3b04      	subs	r3, #4
 8001838:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	3212      	adds	r2, #18
 8001840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001844:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db06      	blt.n	8001862 <HAL_ETH_ReadData+0x144>
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	429a      	cmp	r2, r3
 800185a:	d202      	bcs.n	8001862 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d089      	beq.n	8001776 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	441a      	add	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f814 	bl	80018a4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d108      	bne.n	800189a <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e000      	b.n	800189c <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3720      	adds	r7, #32
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80018b0:	2301      	movs	r3, #1
 80018b2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018b8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	3212      	adds	r2, #18
 80018c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018ca:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80018cc:	e040      	b.n	8001950 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d112      	bne.n	80018fc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 f944 	bl	8004b68 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d102      	bne.n	80018ec <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	74fb      	strb	r3, [r7, #19]
 80018ea:	e007      	b.n	80018fc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	461a      	mov	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	461a      	mov	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80018fc:	7cfb      	ldrb	r3, [r7, #19]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d026      	beq.n	8001950 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	2b00      	cmp	r3, #0
 8001908:	d103      	bne.n	8001912 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	4a1e      	ldr	r2, [pc, #120]	; (8001988 <ETH_UpdateDescriptor+0xe4>)
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	e003      	b.n	800191a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001918:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800191a:	f3bf 8f5f 	dmb	sy
}
 800191e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	3301      	adds	r3, #1
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	2b03      	cmp	r3, #3
 8001936:	d902      	bls.n	800193e <ETH_UpdateDescriptor+0x9a>
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	3b04      	subs	r3, #4
 800193c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	3212      	adds	r2, #18
 8001944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001948:	617b      	str	r3, [r7, #20]
      desccount--;
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	3b01      	subs	r3, #1
 800194e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <ETH_UpdateDescriptor+0xb8>
 8001956:	7cfb      	ldrb	r3, [r7, #19]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1b8      	bne.n	80018ce <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	429a      	cmp	r2, r3
 8001964:	d00c      	beq.n	8001980 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196e:	461a      	mov	r2, r3
 8001970:	2300      	movs	r3, #0
 8001972:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001980:	bf00      	nop
 8001982:	3720      	adds	r7, #32
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	80004600 	.word	0x80004600

0800198c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3318      	adds	r3, #24
 8001998:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80019a6:	2301      	movs	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80019aa:	e03f      	b.n	8001a2c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	3304      	adds	r3, #4
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	3301      	adds	r3, #1
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80019d4:	7bbb      	ldrb	r3, [r7, #14]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d028      	beq.n	8001a2c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68d9      	ldr	r1, [r3, #12]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db1b      	blt.n	8001a28 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	3304      	adds	r3, #4
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 f923 	bl	8004c48 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	3304      	adds	r3, #4
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	3301      	adds	r3, #1
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a26:	e001      	b.n	8001a2c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <HAL_ETH_ReleaseTxPacket+0xac>
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1b9      	bne.n	80019ac <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5a:	2b40      	cmp	r3, #64	; 0x40
 8001a5c:	d112      	bne.n	8001a84 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6c:	2b40      	cmp	r3, #64	; 0x40
 8001a6e:	d109      	bne.n	8001a84 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b50      	ldr	r3, [pc, #320]	; (8001bbc <HAL_ETH_IRQHandler+0x178>)
 8001a7c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f002 fc38 	bl	80042f4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d113      	bne.n	8001abe <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d10a      	bne.n	8001abe <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001ab6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f002 fc2b 	bl	8004314 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ad0:	d14c      	bne.n	8001b6c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ae4:	d142      	bne.n	8001b6c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aec:	f043 0208 	orr.w	r2, r3, #8
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b08:	d11a      	bne.n	8001b40 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_ETH_IRQHandler+0x17c>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001b30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b34:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	22e0      	movs	r2, #224	; 0xe0
 8001b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001b3e:	e012      	b.n	8001b66 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	f248 6380 	movw	r3, #34432	; 0x8680
 8001b4e:	4013      	ands	r3, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f248 6380 	movw	r3, #34432	; 0x8680
 8001b64:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f002 fbe4 	bl	8004334 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d10e      	bne.n	8001b98 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f81c 	bl	8001bc8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001b98:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_ETH_IRQHandler+0x180>)
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_ETH_IRQHandler+0x180>)
 8001ba6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001baa:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f815 	bl	8001bdc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	00010040 	.word	0x00010040
 8001bc0:	007e2000 	.word	0x007e2000
 8001bc4:	40013c00 	.word	0x40013c00

08001bc8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 031c 	and.w	r3, r3, #28
 8001c0c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	02db      	lsls	r3, r3, #11
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	019b      	lsls	r3, r3, #6
 8001c1e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f023 0302 	bic.w	r3, r3, #2
 8001c2e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001c40:	f7ff fa74 	bl	800112c <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c46:	e00d      	b.n	8001c64 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001c48:	f7ff fa70 	bl	800112c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c56:	d301      	bcc.n	8001c5c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e010      	b.n	8001c7e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1ec      	bne.n	8001c48 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f003 031c 	and.w	r3, r3, #28
 8001ca2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	02db      	lsls	r3, r3, #11
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	019b      	lsls	r3, r3, #6
 8001cb4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ce0:	f7ff fa24 	bl	800112c <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ce6:	e00d      	b.n	8001d04 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001ce8:	f7ff fa20 	bl	800112c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf6:	d301      	bcc.n	8001cfc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e009      	b.n	8001d10 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ec      	bne.n	8001ce8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0d9      	b.n	8001ee0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	bf14      	ite	ne
 8001d3a:	2301      	movne	r3, #1
 8001d3c:	2300      	moveq	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bf14      	ite	ne
 8001d80:	2301      	movne	r3, #1
 8001d82:	2300      	moveq	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	bf0c      	ite	eq
 8001d9a:	2301      	moveq	r3, #1
 8001d9c:	2300      	movne	r3, #0
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf14      	ite	ne
 8001db4:	2301      	movne	r3, #1
 8001db6:	2300      	moveq	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf0c      	ite	eq
 8001dea:	2301      	moveq	r3, #1
 8001dec:	2300      	movne	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bf14      	ite	ne
 8001e1e:	2301      	movne	r3, #1
 8001e20:	2300      	moveq	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	bf14      	ite	ne
 8001e46:	2301      	movne	r3, #1
 8001e48:	2300      	moveq	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf14      	ite	ne
 8001e60:	2301      	movne	r3, #1
 8001e62:	2300      	moveq	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	bf0c      	ite	eq
 8001e7c:	2301      	moveq	r3, #1
 8001e7e:	2300      	movne	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	0c1b      	lsrs	r3, r3, #16
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bf14      	ite	ne
 8001ed0:	2301      	movne	r3, #1
 8001ed2:	2300      	moveq	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e00b      	b.n	8001f18 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d105      	bne.n	8001f16 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001f0a:	6839      	ldr	r1, [r7, #0]
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f88f 	bl	8002030 <ETH_SetMACConfig>

    return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e000      	b.n	8001f18 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
  }
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f023 031c 	bic.w	r3, r3, #28
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f38:	f001 fa8e 	bl	8003458 <HAL_RCC_GetHCLKFreq>
 8001f3c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	4a1d      	ldr	r2, [pc, #116]	; (8001fb8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d908      	bls.n	8001f58 <HAL_ETH_SetMDIOClockRange+0x38>
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4a1c      	ldr	r2, [pc, #112]	; (8001fbc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d804      	bhi.n	8001f58 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f043 0308 	orr.w	r3, r3, #8
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	e027      	b.n	8001fa8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d908      	bls.n	8001f72 <HAL_ETH_SetMDIOClockRange+0x52>
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d204      	bcs.n	8001f72 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f043 030c 	orr.w	r3, r3, #12
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	e01a      	b.n	8001fa8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d303      	bcc.n	8001f82 <HAL_ETH_SetMDIOClockRange+0x62>
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d911      	bls.n	8001fa6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d908      	bls.n	8001f9c <HAL_ETH_SetMDIOClockRange+0x7c>
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	4a0e      	ldr	r2, [pc, #56]	; (8001fc8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d804      	bhi.n	8001f9c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	e005      	b.n	8001fa8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f043 0310 	orr.w	r3, r3, #16
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	e000      	b.n	8001fa8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001fa6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	611a      	str	r2, [r3, #16]
}
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	01312cff 	.word	0x01312cff
 8001fbc:	02160ebf 	.word	0x02160ebf
 8001fc0:	03938700 	.word	0x03938700
 8001fc4:	05f5e0ff 	.word	0x05f5e0ff
 8001fc8:	08f0d17f 	.word	0x08f0d17f

08001fcc <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002004:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002008:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002016:	2001      	movs	r0, #1
 8002018:	f7ff f894 	bl	8001144 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002026:	6193      	str	r3, [r2, #24]
}
 8002028:	bf00      	nop
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4b51      	ldr	r3, [pc, #324]	; (800218c <ETH_SetMACConfig+0x15c>)
 8002046:	4013      	ands	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	7c1b      	ldrb	r3, [r3, #16]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <ETH_SetMACConfig+0x28>
 8002052:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002056:	e000      	b.n	800205a <ETH_SetMACConfig+0x2a>
 8002058:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	7c5b      	ldrb	r3, [r3, #17]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <ETH_SetMACConfig+0x38>
 8002062:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002066:	e000      	b.n	800206a <ETH_SetMACConfig+0x3a>
 8002068:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800206a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002070:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	7fdb      	ldrb	r3, [r3, #31]
 8002076:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002078:	431a      	orrs	r2, r3
                        macconf->Speed |
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800207e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	7f92      	ldrb	r2, [r2, #30]
 8002084:	2a00      	cmp	r2, #0
 8002086:	d102      	bne.n	800208e <ETH_SetMACConfig+0x5e>
 8002088:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800208c:	e000      	b.n	8002090 <ETH_SetMACConfig+0x60>
 800208e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002090:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	7f1b      	ldrb	r3, [r3, #28]
 8002096:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002098:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800209e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	791b      	ldrb	r3, [r3, #4]
 80020a4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80020a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80020ae:	2a00      	cmp	r2, #0
 80020b0:	d102      	bne.n	80020b8 <ETH_SetMACConfig+0x88>
 80020b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b6:	e000      	b.n	80020ba <ETH_SetMACConfig+0x8a>
 80020b8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	7bdb      	ldrb	r3, [r3, #15]
 80020c0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020c2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020d0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020d2:	4313      	orrs	r3, r2
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ea:	2001      	movs	r0, #1
 80020ec:	f7ff f82a 	bl	8001144 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002106:	4013      	ands	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002116:	2a00      	cmp	r2, #0
 8002118:	d101      	bne.n	800211e <ETH_SetMACConfig+0xee>
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	e000      	b.n	8002120 <ETH_SetMACConfig+0xf0>
 800211e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002120:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002126:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800212e:	2a01      	cmp	r2, #1
 8002130:	d101      	bne.n	8002136 <ETH_SetMACConfig+0x106>
 8002132:	2208      	movs	r2, #8
 8002134:	e000      	b.n	8002138 <ETH_SetMACConfig+0x108>
 8002136:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002138:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002140:	2a01      	cmp	r2, #1
 8002142:	d101      	bne.n	8002148 <ETH_SetMACConfig+0x118>
 8002144:	2204      	movs	r2, #4
 8002146:	e000      	b.n	800214a <ETH_SetMACConfig+0x11a>
 8002148:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800214a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002152:	2a01      	cmp	r2, #1
 8002154:	d101      	bne.n	800215a <ETH_SetMACConfig+0x12a>
 8002156:	2202      	movs	r2, #2
 8002158:	e000      	b.n	800215c <ETH_SetMACConfig+0x12c>
 800215a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800215c:	4313      	orrs	r3, r2
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4313      	orrs	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002174:	2001      	movs	r0, #1
 8002176:	f7fe ffe5 	bl	8001144 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	619a      	str	r2, [r3, #24]
}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	ff20810f 	.word	0xff20810f

08002190 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4b3d      	ldr	r3, [pc, #244]	; (80022a0 <ETH_SetDMAConfig+0x110>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	7b1b      	ldrb	r3, [r3, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d102      	bne.n	80021bc <ETH_SetDMAConfig+0x2c>
 80021b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021ba:	e000      	b.n	80021be <ETH_SetDMAConfig+0x2e>
 80021bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	7b5b      	ldrb	r3, [r3, #13]
 80021c2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021c4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	7f52      	ldrb	r2, [r2, #29]
 80021ca:	2a00      	cmp	r2, #0
 80021cc:	d102      	bne.n	80021d4 <ETH_SetDMAConfig+0x44>
 80021ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021d2:	e000      	b.n	80021d6 <ETH_SetDMAConfig+0x46>
 80021d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	7b9b      	ldrb	r3, [r3, #14]
 80021dc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021de:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	7f1b      	ldrb	r3, [r3, #28]
 80021ea:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80021ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	7f9b      	ldrb	r3, [r3, #30]
 80021f2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021f4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002202:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002204:	4313      	orrs	r3, r2
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002214:	461a      	mov	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002226:	2001      	movs	r0, #1
 8002228:	f7fe ff8c 	bl	8001144 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002234:	461a      	mov	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	791b      	ldrb	r3, [r3, #4]
 800223e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002244:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800224a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002250:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002258:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800225a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002262:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002268:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002272:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002276:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002284:	2001      	movs	r0, #1
 8002286:	f7fe ff5d 	bl	8001144 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6013      	str	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	f8de3f23 	.word	0xf8de3f23

080022a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b0a6      	sub	sp, #152	; 0x98
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80022ac:	2301      	movs	r3, #1
 80022ae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80022b2:	2301      	movs	r3, #1
 80022b4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80022b8:	2300      	movs	r3, #0
 80022ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022bc:	2300      	movs	r3, #0
 80022be:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80022c2:	2301      	movs	r3, #1
 80022c4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022e0:	2300      	movs	r3, #0
 80022e2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002306:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800230a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800230c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002310:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002318:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800231c:	4619      	mov	r1, r3
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff fe86 	bl	8002030 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002324:	2301      	movs	r3, #1
 8002326:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002328:	2301      	movs	r3, #1
 800232a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800232c:	2301      	movs	r3, #1
 800232e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002332:	2301      	movs	r3, #1
 8002334:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800233a:	2300      	movs	r3, #0
 800233c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002346:	2300      	movs	r3, #0
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800234a:	2301      	movs	r3, #1
 800234c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002350:	2301      	movs	r3, #1
 8002352:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002354:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002358:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800235a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800235e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002364:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002366:	2301      	movs	r3, #1
 8002368:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800236c:	2300      	movs	r3, #0
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002370:	2300      	movs	r3, #0
 8002372:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002374:	f107 0308 	add.w	r3, r7, #8
 8002378:	4619      	mov	r1, r3
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ff08 	bl	8002190 <ETH_SetDMAConfig>
}
 8002380:	bf00      	nop
 8002382:	3798      	adds	r7, #152	; 0x98
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3305      	adds	r3, #5
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	3204      	adds	r2, #4
 80023a0:	7812      	ldrb	r2, [r2, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <ETH_MACAddressConfig+0x68>)
 80023aa:	4413      	add	r3, r2
 80023ac:	461a      	mov	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3303      	adds	r3, #3
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	061a      	lsls	r2, r3, #24
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3302      	adds	r3, #2
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	041b      	lsls	r3, r3, #16
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3301      	adds	r3, #1
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	4313      	orrs	r3, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <ETH_MACAddressConfig+0x6c>)
 80023da:	4413      	add	r3, r2
 80023dc:	461a      	mov	r2, r3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	6013      	str	r3, [r2, #0]
}
 80023e2:	bf00      	nop
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40028040 	.word	0x40028040
 80023f4:	40028044 	.word	0x40028044

080023f8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	e03e      	b.n	8002484 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68d9      	ldr	r1, [r3, #12]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	440b      	add	r3, r1
 8002416:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2200      	movs	r2, #0
 8002422:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2200      	movs	r2, #0
 800242e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	3206      	adds	r2, #6
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d80c      	bhi.n	8002468 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68d9      	ldr	r1, [r3, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	440b      	add	r3, r1
 8002460:	461a      	mov	r2, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	e004      	b.n	8002472 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	461a      	mov	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3301      	adds	r3, #1
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d9bd      	bls.n	8002406 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800249c:	611a      	str	r2, [r3, #16]
}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	e046      	b.n	8002546 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6919      	ldr	r1, [r3, #16]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	440b      	add	r3, r1
 80024c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2200      	movs	r2, #0
 80024d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2200      	movs	r2, #0
 80024e6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2200      	movs	r2, #0
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80024f4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80024fc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	3212      	adds	r2, #18
 8002512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d80c      	bhi.n	8002536 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6919      	ldr	r1, [r3, #16]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	440b      	add	r3, r1
 800252e:	461a      	mov	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	60da      	str	r2, [r3, #12]
 8002534:	e004      	b.n	8002540 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	461a      	mov	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3301      	adds	r3, #1
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d9b5      	bls.n	80024b8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002576:	60da      	str	r2, [r3, #12]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002584:	b480      	push	{r7}
 8002586:	b08d      	sub	sp, #52	; 0x34
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	3318      	adds	r3, #24
 8002594:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ae:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025c6:	d007      	beq.n	80025d8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	3304      	adds	r3, #4
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80025d8:	2302      	movs	r3, #2
 80025da:	e103      	b.n	80027e4 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	3301      	adds	r3, #1
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80025f4:	f023 031f 	bic.w	r3, r3, #31
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	6852      	ldr	r2, [r2, #4]
 80025fc:	431a      	orrs	r2, r3
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	431a      	orrs	r2, r3
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	431a      	orrs	r2, r3
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002662:	f3bf 8f5f 	dmb	sy
}
 8002666:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002674:	e084      	b.n	8002780 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d006      	beq.n	8002696 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e005      	b.n	80026a2 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a4:	3301      	adds	r3, #1
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d902      	bls.n	80026b4 <ETH_Prepare_Tx_Descriptors+0x130>
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	3b04      	subs	r3, #4
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026bc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026d6:	d007      	beq.n	80026e8 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	3304      	adds	r3, #4
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d029      	beq.n	800273c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026fa:	e019      	b.n	8002730 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80026fc:	f3bf 8f5f 	dmb	sy
}
 8002700:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	3301      	adds	r3, #1
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	2b03      	cmp	r3, #3
 8002718:	d902      	bls.n	8002720 <ETH_Prepare_Tx_Descriptors+0x19c>
 800271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271c:	3b04      	subs	r3, #4
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002728:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	3301      	adds	r3, #1
 800272e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	429a      	cmp	r2, r3
 8002736:	d3e1      	bcc.n	80026fc <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002738:	2302      	movs	r3, #2
 800273a:	e053      	b.n	80027e4 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	3301      	adds	r3, #1
 8002740:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800275a:	f023 031f 	bic.w	r3, r3, #31
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	6852      	ldr	r2, [r2, #4]
 8002762:	431a      	orrs	r2, r3
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	3301      	adds	r3, #1
 800276c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800276e:	f3bf 8f5f 	dmb	sy
}
 8002772:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	f47f af76 	bne.w	8002676 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d006      	beq.n	800279e <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	e005      	b.n	80027aa <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ba:	6979      	ldr	r1, [r7, #20]
 80027bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027be:	3304      	adds	r3, #4
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ca:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80027cc:	b672      	cpsid	i
}
 80027ce:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4413      	add	r3, r2
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80027de:	b662      	cpsie	i
}
 80027e0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3734      	adds	r7, #52	; 0x34
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	e16b      	b.n	8002ae4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800280c:	2201      	movs	r2, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	429a      	cmp	r2, r3
 8002826:	f040 815a 	bne.w	8002ade <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d005      	beq.n	8002842 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283e:	2b02      	cmp	r3, #2
 8002840:	d130      	bne.n	80028a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	2203      	movs	r2, #3
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002878:	2201      	movs	r2, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 0201 	and.w	r2, r3, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d017      	beq.n	80028e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d123      	bne.n	8002934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	08da      	lsrs	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3208      	adds	r2, #8
 80028f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	220f      	movs	r2, #15
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	08da      	lsrs	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3208      	adds	r2, #8
 800292e:	69b9      	ldr	r1, [r7, #24]
 8002930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0203 	and.w	r2, r3, #3
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80b4 	beq.w	8002ade <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	4b60      	ldr	r3, [pc, #384]	; (8002afc <HAL_GPIO_Init+0x30c>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	4a5f      	ldr	r2, [pc, #380]	; (8002afc <HAL_GPIO_Init+0x30c>)
 8002980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002984:	6453      	str	r3, [r2, #68]	; 0x44
 8002986:	4b5d      	ldr	r3, [pc, #372]	; (8002afc <HAL_GPIO_Init+0x30c>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002992:	4a5b      	ldr	r2, [pc, #364]	; (8002b00 <HAL_GPIO_Init+0x310>)
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	220f      	movs	r2, #15
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a52      	ldr	r2, [pc, #328]	; (8002b04 <HAL_GPIO_Init+0x314>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d02b      	beq.n	8002a16 <HAL_GPIO_Init+0x226>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <HAL_GPIO_Init+0x318>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d025      	beq.n	8002a12 <HAL_GPIO_Init+0x222>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a50      	ldr	r2, [pc, #320]	; (8002b0c <HAL_GPIO_Init+0x31c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01f      	beq.n	8002a0e <HAL_GPIO_Init+0x21e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4f      	ldr	r2, [pc, #316]	; (8002b10 <HAL_GPIO_Init+0x320>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d019      	beq.n	8002a0a <HAL_GPIO_Init+0x21a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4e      	ldr	r2, [pc, #312]	; (8002b14 <HAL_GPIO_Init+0x324>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_GPIO_Init+0x216>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4d      	ldr	r2, [pc, #308]	; (8002b18 <HAL_GPIO_Init+0x328>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00d      	beq.n	8002a02 <HAL_GPIO_Init+0x212>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4c      	ldr	r2, [pc, #304]	; (8002b1c <HAL_GPIO_Init+0x32c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <HAL_GPIO_Init+0x20e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4b      	ldr	r2, [pc, #300]	; (8002b20 <HAL_GPIO_Init+0x330>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d101      	bne.n	80029fa <HAL_GPIO_Init+0x20a>
 80029f6:	2307      	movs	r3, #7
 80029f8:	e00e      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 80029fa:	2308      	movs	r3, #8
 80029fc:	e00c      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 80029fe:	2306      	movs	r3, #6
 8002a00:	e00a      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a02:	2305      	movs	r3, #5
 8002a04:	e008      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a06:	2304      	movs	r3, #4
 8002a08:	e006      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e004      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e002      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a16:	2300      	movs	r3, #0
 8002a18:	69fa      	ldr	r2, [r7, #28]
 8002a1a:	f002 0203 	and.w	r2, r2, #3
 8002a1e:	0092      	lsls	r2, r2, #2
 8002a20:	4093      	lsls	r3, r2
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a28:	4935      	ldr	r1, [pc, #212]	; (8002b00 <HAL_GPIO_Init+0x310>)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	089b      	lsrs	r3, r3, #2
 8002a2e:	3302      	adds	r3, #2
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a36:	4b3b      	ldr	r3, [pc, #236]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a5a:	4a32      	ldr	r2, [pc, #200]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a60:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a84:	4a27      	ldr	r2, [pc, #156]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a8a:	4b26      	ldr	r3, [pc, #152]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aae:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad8:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	61fb      	str	r3, [r7, #28]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b0f      	cmp	r3, #15
 8002ae8:	f67f ae90 	bls.w	800280c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3724      	adds	r7, #36	; 0x24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40013800 	.word	0x40013800
 8002b04:	40020000 	.word	0x40020000
 8002b08:	40020400 	.word	0x40020400
 8002b0c:	40020800 	.word	0x40020800
 8002b10:	40020c00 	.word	0x40020c00
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40021400 	.word	0x40021400
 8002b1c:	40021800 	.word	0x40021800
 8002b20:	40021c00 	.word	0x40021c00
 8002b24:	40013c00 	.word	0x40013c00

08002b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
 8002b34:	4613      	mov	r3, r2
 8002b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b38:	787b      	ldrb	r3, [r7, #1]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b44:	e003      	b.n	8002b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b46:	887b      	ldrh	r3, [r7, #2]
 8002b48:	041a      	lsls	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	619a      	str	r2, [r3, #24]
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b085      	sub	sp, #20
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	460b      	mov	r3, r1
 8002b64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b6c:	887a      	ldrh	r2, [r7, #2]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4013      	ands	r3, r2
 8002b72:	041a      	lsls	r2, r3, #16
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	887b      	ldrh	r3, [r7, #2]
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	619a      	str	r2, [r3, #24]
}
 8002b82:	bf00      	nop
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e267      	b.n	8003072 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d075      	beq.n	8002c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bae:	4b88      	ldr	r3, [pc, #544]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d00c      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bba:	4b85      	ldr	r3, [pc, #532]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d112      	bne.n	8002bec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc6:	4b82      	ldr	r3, [pc, #520]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd2:	d10b      	bne.n	8002bec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd4:	4b7e      	ldr	r3, [pc, #504]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d05b      	beq.n	8002c98 <HAL_RCC_OscConfig+0x108>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d157      	bne.n	8002c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e242      	b.n	8003072 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf4:	d106      	bne.n	8002c04 <HAL_RCC_OscConfig+0x74>
 8002bf6:	4b76      	ldr	r3, [pc, #472]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a75      	ldr	r2, [pc, #468]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e01d      	b.n	8002c40 <HAL_RCC_OscConfig+0xb0>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x98>
 8002c0e:	4b70      	ldr	r3, [pc, #448]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a6f      	ldr	r2, [pc, #444]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b6d      	ldr	r3, [pc, #436]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a6c      	ldr	r2, [pc, #432]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0xb0>
 8002c28:	4b69      	ldr	r3, [pc, #420]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a68      	ldr	r2, [pc, #416]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	4b66      	ldr	r3, [pc, #408]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a65      	ldr	r2, [pc, #404]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d013      	beq.n	8002c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fe fa70 	bl	800112c <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c50:	f7fe fa6c 	bl	800112c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	; 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e207      	b.n	8003072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	4b5b      	ldr	r3, [pc, #364]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0xc0>
 8002c6e:	e014      	b.n	8002c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7fe fa5c 	bl	800112c <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c78:	f7fe fa58 	bl	800112c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	; 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e1f3      	b.n	8003072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8a:	4b51      	ldr	r3, [pc, #324]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0xe8>
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d063      	beq.n	8002d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ca6:	4b4a      	ldr	r3, [pc, #296]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb2:	4b47      	ldr	r3, [pc, #284]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d11c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cbe:	4b44      	ldr	r3, [pc, #272]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d116      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	4b41      	ldr	r3, [pc, #260]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x152>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e1c7      	b.n	8003072 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce2:	4b3b      	ldr	r3, [pc, #236]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4937      	ldr	r1, [pc, #220]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	e03a      	b.n	8002d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d020      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d00:	4b34      	ldr	r3, [pc, #208]	; (8002dd4 <HAL_RCC_OscConfig+0x244>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d06:	f7fe fa11 	bl	800112c <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0e:	f7fe fa0d 	bl	800112c <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e1a8      	b.n	8003072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d20:	4b2b      	ldr	r3, [pc, #172]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2c:	4b28      	ldr	r3, [pc, #160]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4925      	ldr	r1, [pc, #148]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]
 8002d40:	e015      	b.n	8002d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d42:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <HAL_RCC_OscConfig+0x244>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe f9f0 	bl	800112c <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d50:	f7fe f9ec 	bl	800112c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e187      	b.n	8003072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d62:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d036      	beq.n	8002de8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d016      	beq.n	8002db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_RCC_OscConfig+0x248>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7fe f9d0 	bl	800112c <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fe f9cc 	bl	800112c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e167      	b.n	8003072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da2:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <HAL_RCC_OscConfig+0x240>)
 8002da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x200>
 8002dae:	e01b      	b.n	8002de8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db0:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_RCC_OscConfig+0x248>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db6:	f7fe f9b9 	bl	800112c <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dbc:	e00e      	b.n	8002ddc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dbe:	f7fe f9b5 	bl	800112c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d907      	bls.n	8002ddc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e150      	b.n	8003072 <HAL_RCC_OscConfig+0x4e2>
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	42470000 	.word	0x42470000
 8002dd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ddc:	4b88      	ldr	r3, [pc, #544]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ea      	bne.n	8002dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 8097 	beq.w	8002f24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfa:	4b81      	ldr	r3, [pc, #516]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10f      	bne.n	8002e26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	4b7d      	ldr	r3, [pc, #500]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	4a7c      	ldr	r2, [pc, #496]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e14:	6413      	str	r3, [r2, #64]	; 0x40
 8002e16:	4b7a      	ldr	r3, [pc, #488]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e22:	2301      	movs	r3, #1
 8002e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e26:	4b77      	ldr	r3, [pc, #476]	; (8003004 <HAL_RCC_OscConfig+0x474>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d118      	bne.n	8002e64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e32:	4b74      	ldr	r3, [pc, #464]	; (8003004 <HAL_RCC_OscConfig+0x474>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a73      	ldr	r2, [pc, #460]	; (8003004 <HAL_RCC_OscConfig+0x474>)
 8002e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3e:	f7fe f975 	bl	800112c <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e46:	f7fe f971 	bl	800112c <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e10c      	b.n	8003072 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e58:	4b6a      	ldr	r3, [pc, #424]	; (8003004 <HAL_RCC_OscConfig+0x474>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f0      	beq.n	8002e46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d106      	bne.n	8002e7a <HAL_RCC_OscConfig+0x2ea>
 8002e6c:	4b64      	ldr	r3, [pc, #400]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	4a63      	ldr	r2, [pc, #396]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	6713      	str	r3, [r2, #112]	; 0x70
 8002e78:	e01c      	b.n	8002eb4 <HAL_RCC_OscConfig+0x324>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b05      	cmp	r3, #5
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCC_OscConfig+0x30c>
 8002e82:	4b5f      	ldr	r3, [pc, #380]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e86:	4a5e      	ldr	r2, [pc, #376]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8e:	4b5c      	ldr	r3, [pc, #368]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e92:	4a5b      	ldr	r2, [pc, #364]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9a:	e00b      	b.n	8002eb4 <HAL_RCC_OscConfig+0x324>
 8002e9c:	4b58      	ldr	r3, [pc, #352]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	4a57      	ldr	r2, [pc, #348]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	f023 0301 	bic.w	r3, r3, #1
 8002ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea8:	4b55      	ldr	r3, [pc, #340]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	4a54      	ldr	r2, [pc, #336]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002eae:	f023 0304 	bic.w	r3, r3, #4
 8002eb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d015      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebc:	f7fe f936 	bl	800112c <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec4:	f7fe f932 	bl	800112c <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e0cb      	b.n	8003072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eda:	4b49      	ldr	r3, [pc, #292]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0ee      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x334>
 8002ee6:	e014      	b.n	8002f12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee8:	f7fe f920 	bl	800112c <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef0:	f7fe f91c 	bl	800112c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e0b5      	b.n	8003072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f06:	4b3e      	ldr	r3, [pc, #248]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1ee      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d105      	bne.n	8002f24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f18:	4b39      	ldr	r3, [pc, #228]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	4a38      	ldr	r2, [pc, #224]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80a1 	beq.w	8003070 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f2e:	4b34      	ldr	r3, [pc, #208]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d05c      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d141      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f42:	4b31      	ldr	r3, [pc, #196]	; (8003008 <HAL_RCC_OscConfig+0x478>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fe f8f0 	bl	800112c <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe f8ec 	bl	800112c <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e087      	b.n	8003072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f62:	4b27      	ldr	r3, [pc, #156]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69da      	ldr	r2, [r3, #28]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	019b      	lsls	r3, r3, #6
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	085b      	lsrs	r3, r3, #1
 8002f86:	3b01      	subs	r3, #1
 8002f88:	041b      	lsls	r3, r3, #16
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	061b      	lsls	r3, r3, #24
 8002f92:	491b      	ldr	r1, [pc, #108]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f98:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <HAL_RCC_OscConfig+0x478>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9e:	f7fe f8c5 	bl	800112c <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7fe f8c1 	bl	800112c <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e05c      	b.n	8003072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb8:	4b11      	ldr	r3, [pc, #68]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x416>
 8002fc4:	e054      	b.n	8003070 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <HAL_RCC_OscConfig+0x478>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fe f8ae 	bl	800112c <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7fe f8aa 	bl	800112c <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e045      	b.n	8003072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x444>
 8002ff2:	e03d      	b.n	8003070 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d107      	bne.n	800300c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e038      	b.n	8003072 <HAL_RCC_OscConfig+0x4e2>
 8003000:	40023800 	.word	0x40023800
 8003004:	40007000 	.word	0x40007000
 8003008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <HAL_RCC_OscConfig+0x4ec>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d028      	beq.n	800306c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d121      	bne.n	800306c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003032:	429a      	cmp	r2, r3
 8003034:	d11a      	bne.n	800306c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800303c:	4013      	ands	r3, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003044:	4293      	cmp	r3, r2
 8003046:	d111      	bne.n	800306c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	3b01      	subs	r3, #1
 8003056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d107      	bne.n	800306c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800

08003080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0cc      	b.n	800322e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003094:	4b68      	ldr	r3, [pc, #416]	; (8003238 <HAL_RCC_ClockConfig+0x1b8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d90c      	bls.n	80030bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b65      	ldr	r3, [pc, #404]	; (8003238 <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b63      	ldr	r3, [pc, #396]	; (8003238 <HAL_RCC_ClockConfig+0x1b8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0b8      	b.n	800322e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d020      	beq.n	800310a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d4:	4b59      	ldr	r3, [pc, #356]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	4a58      	ldr	r2, [pc, #352]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ec:	4b53      	ldr	r3, [pc, #332]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4a52      	ldr	r2, [pc, #328]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f8:	4b50      	ldr	r3, [pc, #320]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	494d      	ldr	r1, [pc, #308]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d044      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d107      	bne.n	800312e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311e:	4b47      	ldr	r3, [pc, #284]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d119      	bne.n	800315e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e07f      	b.n	800322e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d003      	beq.n	800313e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313a:	2b03      	cmp	r3, #3
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313e:	4b3f      	ldr	r3, [pc, #252]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e06f      	b.n	800322e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314e:	4b3b      	ldr	r3, [pc, #236]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e067      	b.n	800322e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800315e:	4b37      	ldr	r3, [pc, #220]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f023 0203 	bic.w	r2, r3, #3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4934      	ldr	r1, [pc, #208]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	4313      	orrs	r3, r2
 800316e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003170:	f7fd ffdc 	bl	800112c <HAL_GetTick>
 8003174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003176:	e00a      	b.n	800318e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003178:	f7fd ffd8 	bl	800112c <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f241 3288 	movw	r2, #5000	; 0x1388
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e04f      	b.n	800322e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	4b2b      	ldr	r3, [pc, #172]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 020c 	and.w	r2, r3, #12
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	429a      	cmp	r2, r3
 800319e:	d1eb      	bne.n	8003178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a0:	4b25      	ldr	r3, [pc, #148]	; (8003238 <HAL_RCC_ClockConfig+0x1b8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d20c      	bcs.n	80031c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b22      	ldr	r3, [pc, #136]	; (8003238 <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b20      	ldr	r3, [pc, #128]	; (8003238 <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e032      	b.n	800322e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d4:	4b19      	ldr	r3, [pc, #100]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	4916      	ldr	r1, [pc, #88]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d009      	beq.n	8003206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031f2:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	490e      	ldr	r1, [pc, #56]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003206:	f000 f821 	bl	800324c <HAL_RCC_GetSysClockFreq>
 800320a:	4602      	mov	r2, r0
 800320c:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	490a      	ldr	r1, [pc, #40]	; (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	5ccb      	ldrb	r3, [r1, r3]
 800321a:	fa22 f303 	lsr.w	r3, r2, r3
 800321e:	4a09      	ldr	r2, [pc, #36]	; (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <HAL_RCC_ClockConfig+0x1c8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd fb24 	bl	8000874 <HAL_InitTick>

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40023c00 	.word	0x40023c00
 800323c:	40023800 	.word	0x40023800
 8003240:	0801e178 	.word	0x0801e178
 8003244:	20000000 	.word	0x20000000
 8003248:	20000004 	.word	0x20000004

0800324c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800324c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003250:	b094      	sub	sp, #80	; 0x50
 8003252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	647b      	str	r3, [r7, #68]	; 0x44
 8003258:	2300      	movs	r3, #0
 800325a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800325c:	2300      	movs	r3, #0
 800325e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003264:	4b79      	ldr	r3, [pc, #484]	; (800344c <HAL_RCC_GetSysClockFreq+0x200>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 030c 	and.w	r3, r3, #12
 800326c:	2b08      	cmp	r3, #8
 800326e:	d00d      	beq.n	800328c <HAL_RCC_GetSysClockFreq+0x40>
 8003270:	2b08      	cmp	r3, #8
 8003272:	f200 80e1 	bhi.w	8003438 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x34>
 800327a:	2b04      	cmp	r3, #4
 800327c:	d003      	beq.n	8003286 <HAL_RCC_GetSysClockFreq+0x3a>
 800327e:	e0db      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003280:	4b73      	ldr	r3, [pc, #460]	; (8003450 <HAL_RCC_GetSysClockFreq+0x204>)
 8003282:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003284:	e0db      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003286:	4b73      	ldr	r3, [pc, #460]	; (8003454 <HAL_RCC_GetSysClockFreq+0x208>)
 8003288:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800328a:	e0d8      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800328c:	4b6f      	ldr	r3, [pc, #444]	; (800344c <HAL_RCC_GetSysClockFreq+0x200>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003294:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003296:	4b6d      	ldr	r3, [pc, #436]	; (800344c <HAL_RCC_GetSysClockFreq+0x200>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d063      	beq.n	800336a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a2:	4b6a      	ldr	r3, [pc, #424]	; (800344c <HAL_RCC_GetSysClockFreq+0x200>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	099b      	lsrs	r3, r3, #6
 80032a8:	2200      	movs	r2, #0
 80032aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80032ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b4:	633b      	str	r3, [r7, #48]	; 0x30
 80032b6:	2300      	movs	r3, #0
 80032b8:	637b      	str	r3, [r7, #52]	; 0x34
 80032ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032be:	4622      	mov	r2, r4
 80032c0:	462b      	mov	r3, r5
 80032c2:	f04f 0000 	mov.w	r0, #0
 80032c6:	f04f 0100 	mov.w	r1, #0
 80032ca:	0159      	lsls	r1, r3, #5
 80032cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032d0:	0150      	lsls	r0, r2, #5
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4621      	mov	r1, r4
 80032d8:	1a51      	subs	r1, r2, r1
 80032da:	6139      	str	r1, [r7, #16]
 80032dc:	4629      	mov	r1, r5
 80032de:	eb63 0301 	sbc.w	r3, r3, r1
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032f0:	4659      	mov	r1, fp
 80032f2:	018b      	lsls	r3, r1, #6
 80032f4:	4651      	mov	r1, sl
 80032f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032fa:	4651      	mov	r1, sl
 80032fc:	018a      	lsls	r2, r1, #6
 80032fe:	4651      	mov	r1, sl
 8003300:	ebb2 0801 	subs.w	r8, r2, r1
 8003304:	4659      	mov	r1, fp
 8003306:	eb63 0901 	sbc.w	r9, r3, r1
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800331a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800331e:	4690      	mov	r8, r2
 8003320:	4699      	mov	r9, r3
 8003322:	4623      	mov	r3, r4
 8003324:	eb18 0303 	adds.w	r3, r8, r3
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	462b      	mov	r3, r5
 800332c:	eb49 0303 	adc.w	r3, r9, r3
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800333e:	4629      	mov	r1, r5
 8003340:	024b      	lsls	r3, r1, #9
 8003342:	4621      	mov	r1, r4
 8003344:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003348:	4621      	mov	r1, r4
 800334a:	024a      	lsls	r2, r1, #9
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003352:	2200      	movs	r2, #0
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
 8003356:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003358:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800335c:	f7fc ff88 	bl	8000270 <__aeabi_uldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4613      	mov	r3, r2
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003368:	e058      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800336a:	4b38      	ldr	r3, [pc, #224]	; (800344c <HAL_RCC_GetSysClockFreq+0x200>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	099b      	lsrs	r3, r3, #6
 8003370:	2200      	movs	r2, #0
 8003372:	4618      	mov	r0, r3
 8003374:	4611      	mov	r1, r2
 8003376:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800337a:	623b      	str	r3, [r7, #32]
 800337c:	2300      	movs	r3, #0
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
 8003380:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003384:	4642      	mov	r2, r8
 8003386:	464b      	mov	r3, r9
 8003388:	f04f 0000 	mov.w	r0, #0
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	0159      	lsls	r1, r3, #5
 8003392:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003396:	0150      	lsls	r0, r2, #5
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4641      	mov	r1, r8
 800339e:	ebb2 0a01 	subs.w	sl, r2, r1
 80033a2:	4649      	mov	r1, r9
 80033a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033bc:	ebb2 040a 	subs.w	r4, r2, sl
 80033c0:	eb63 050b 	sbc.w	r5, r3, fp
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	00eb      	lsls	r3, r5, #3
 80033ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033d2:	00e2      	lsls	r2, r4, #3
 80033d4:	4614      	mov	r4, r2
 80033d6:	461d      	mov	r5, r3
 80033d8:	4643      	mov	r3, r8
 80033da:	18e3      	adds	r3, r4, r3
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	464b      	mov	r3, r9
 80033e0:	eb45 0303 	adc.w	r3, r5, r3
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033f2:	4629      	mov	r1, r5
 80033f4:	028b      	lsls	r3, r1, #10
 80033f6:	4621      	mov	r1, r4
 80033f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033fc:	4621      	mov	r1, r4
 80033fe:	028a      	lsls	r2, r1, #10
 8003400:	4610      	mov	r0, r2
 8003402:	4619      	mov	r1, r3
 8003404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003406:	2200      	movs	r2, #0
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	61fa      	str	r2, [r7, #28]
 800340c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003410:	f7fc ff2e 	bl	8000270 <__aeabi_uldivmod>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4613      	mov	r3, r2
 800341a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_RCC_GetSysClockFreq+0x200>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	0c1b      	lsrs	r3, r3, #16
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	3301      	adds	r3, #1
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800342c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800342e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003436:	e002      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003438:	4b05      	ldr	r3, [pc, #20]	; (8003450 <HAL_RCC_GetSysClockFreq+0x204>)
 800343a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800343c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800343e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003440:	4618      	mov	r0, r3
 8003442:	3750      	adds	r7, #80	; 0x50
 8003444:	46bd      	mov	sp, r7
 8003446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800
 8003450:	00f42400 	.word	0x00f42400
 8003454:	007a1200 	.word	0x007a1200

08003458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800345c:	4b03      	ldr	r3, [pc, #12]	; (800346c <HAL_RCC_GetHCLKFreq+0x14>)
 800345e:	681b      	ldr	r3, [r3, #0]
}
 8003460:	4618      	mov	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	20000000 	.word	0x20000000

08003470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003474:	f7ff fff0 	bl	8003458 <HAL_RCC_GetHCLKFreq>
 8003478:	4602      	mov	r2, r0
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	0a9b      	lsrs	r3, r3, #10
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	4903      	ldr	r1, [pc, #12]	; (8003494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003486:	5ccb      	ldrb	r3, [r1, r3]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40023800 	.word	0x40023800
 8003494:	0801e188 	.word	0x0801e188

08003498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800349c:	f7ff ffdc 	bl	8003458 <HAL_RCC_GetHCLKFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	0b5b      	lsrs	r3, r3, #13
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4903      	ldr	r1, [pc, #12]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40023800 	.word	0x40023800
 80034bc:	0801e188 	.word	0x0801e188

080034c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	220f      	movs	r2, #15
 80034ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_RCC_GetClockConfig+0x5c>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 0203 	and.w	r2, r3, #3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034dc:	4b0f      	ldr	r3, [pc, #60]	; (800351c <HAL_RCC_GetClockConfig+0x5c>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <HAL_RCC_GetClockConfig+0x5c>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <HAL_RCC_GetClockConfig+0x5c>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	08db      	lsrs	r3, r3, #3
 80034fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003502:	4b07      	ldr	r3, [pc, #28]	; (8003520 <HAL_RCC_GetClockConfig+0x60>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0207 	and.w	r2, r3, #7
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	601a      	str	r2, [r3, #0]
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800
 8003520:	40023c00 	.word	0x40023c00

08003524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e041      	b.n	80035ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f839 	bl	80035c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	4619      	mov	r1, r3
 8003562:	4610      	mov	r0, r2
 8003564:	f000 f9d8 	bl	8003918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
	...

080035d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d001      	beq.n	80035f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e04e      	b.n	800368e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a23      	ldr	r2, [pc, #140]	; (800369c <HAL_TIM_Base_Start_IT+0xc4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d022      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x80>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361a:	d01d      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x80>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1f      	ldr	r2, [pc, #124]	; (80036a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d018      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x80>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1e      	ldr	r2, [pc, #120]	; (80036a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d013      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x80>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00e      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x80>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1b      	ldr	r2, [pc, #108]	; (80036ac <HAL_TIM_Base_Start_IT+0xd4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d009      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x80>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d004      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x80>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a18      	ldr	r2, [pc, #96]	; (80036b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d111      	bne.n	800367c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b06      	cmp	r3, #6
 8003668:	d010      	beq.n	800368c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0201 	orr.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367a:	e007      	b.n	800368c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40010000 	.word	0x40010000
 80036a0:	40000400 	.word	0x40000400
 80036a4:	40000800 	.word	0x40000800
 80036a8:	40000c00 	.word	0x40000c00
 80036ac:	40010400 	.word	0x40010400
 80036b0:	40014000 	.word	0x40014000
 80036b4:	40001800 	.word	0x40001800

080036b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d122      	bne.n	8003714 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d11b      	bne.n	8003714 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0202 	mvn.w	r2, #2
 80036e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f8ee 	bl	80038dc <HAL_TIM_IC_CaptureCallback>
 8003700:	e005      	b.n	800370e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8e0 	bl	80038c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f8f1 	bl	80038f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b04      	cmp	r3, #4
 8003720:	d122      	bne.n	8003768 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b04      	cmp	r3, #4
 800372e:	d11b      	bne.n	8003768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0204 	mvn.w	r2, #4
 8003738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f8c4 	bl	80038dc <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f8b6 	bl	80038c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f8c7 	bl	80038f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b08      	cmp	r3, #8
 8003774:	d122      	bne.n	80037bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b08      	cmp	r3, #8
 8003782:	d11b      	bne.n	80037bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0208 	mvn.w	r2, #8
 800378c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2204      	movs	r2, #4
 8003792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f89a 	bl	80038dc <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f88c 	bl	80038c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f89d 	bl	80038f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d122      	bne.n	8003810 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d11b      	bne.n	8003810 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0210 	mvn.w	r2, #16
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2208      	movs	r2, #8
 80037e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f870 	bl	80038dc <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f862 	bl	80038c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f873 	bl	80038f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b01      	cmp	r3, #1
 800381c:	d10e      	bne.n	800383c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b01      	cmp	r3, #1
 800382a:	d107      	bne.n	800383c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0201 	mvn.w	r2, #1
 8003834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fc ffd8 	bl	80007ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003846:	2b80      	cmp	r3, #128	; 0x80
 8003848:	d10e      	bne.n	8003868 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003854:	2b80      	cmp	r3, #128	; 0x80
 8003856:	d107      	bne.n	8003868 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f902 	bl	8003a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b40      	cmp	r3, #64	; 0x40
 8003874:	d10e      	bne.n	8003894 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003880:	2b40      	cmp	r3, #64	; 0x40
 8003882:	d107      	bne.n	8003894 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800388c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f838 	bl	8003904 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d10e      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d107      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0220 	mvn.w	r2, #32
 80038b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f8cc 	bl	8003a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a40      	ldr	r2, [pc, #256]	; (8003a2c <TIM_Base_SetConfig+0x114>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d013      	beq.n	8003958 <TIM_Base_SetConfig+0x40>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003936:	d00f      	beq.n	8003958 <TIM_Base_SetConfig+0x40>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a3d      	ldr	r2, [pc, #244]	; (8003a30 <TIM_Base_SetConfig+0x118>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00b      	beq.n	8003958 <TIM_Base_SetConfig+0x40>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a3c      	ldr	r2, [pc, #240]	; (8003a34 <TIM_Base_SetConfig+0x11c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d007      	beq.n	8003958 <TIM_Base_SetConfig+0x40>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a3b      	ldr	r2, [pc, #236]	; (8003a38 <TIM_Base_SetConfig+0x120>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_Base_SetConfig+0x40>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a3a      	ldr	r2, [pc, #232]	; (8003a3c <TIM_Base_SetConfig+0x124>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d108      	bne.n	800396a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a2f      	ldr	r2, [pc, #188]	; (8003a2c <TIM_Base_SetConfig+0x114>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d02b      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003978:	d027      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a2c      	ldr	r2, [pc, #176]	; (8003a30 <TIM_Base_SetConfig+0x118>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d023      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a2b      	ldr	r2, [pc, #172]	; (8003a34 <TIM_Base_SetConfig+0x11c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01f      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a2a      	ldr	r2, [pc, #168]	; (8003a38 <TIM_Base_SetConfig+0x120>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d01b      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a29      	ldr	r2, [pc, #164]	; (8003a3c <TIM_Base_SetConfig+0x124>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d017      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a28      	ldr	r2, [pc, #160]	; (8003a40 <TIM_Base_SetConfig+0x128>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d013      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a27      	ldr	r2, [pc, #156]	; (8003a44 <TIM_Base_SetConfig+0x12c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00f      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a26      	ldr	r2, [pc, #152]	; (8003a48 <TIM_Base_SetConfig+0x130>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00b      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a25      	ldr	r2, [pc, #148]	; (8003a4c <TIM_Base_SetConfig+0x134>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a24      	ldr	r2, [pc, #144]	; (8003a50 <TIM_Base_SetConfig+0x138>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d003      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a23      	ldr	r2, [pc, #140]	; (8003a54 <TIM_Base_SetConfig+0x13c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d108      	bne.n	80039dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <TIM_Base_SetConfig+0x114>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d003      	beq.n	8003a10 <TIM_Base_SetConfig+0xf8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a0c      	ldr	r2, [pc, #48]	; (8003a3c <TIM_Base_SetConfig+0x124>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d103      	bne.n	8003a18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	615a      	str	r2, [r3, #20]
}
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40010000 	.word	0x40010000
 8003a30:	40000400 	.word	0x40000400
 8003a34:	40000800 	.word	0x40000800
 8003a38:	40000c00 	.word	0x40000c00
 8003a3c:	40010400 	.word	0x40010400
 8003a40:	40014000 	.word	0x40014000
 8003a44:	40014400 	.word	0x40014400
 8003a48:	40014800 	.word	0x40014800
 8003a4c:	40001800 	.word	0x40001800
 8003a50:	40001c00 	.word	0x40001c00
 8003a54:	40002000 	.word	0x40002000

08003a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e03f      	b.n	8003b12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fd f938 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2224      	movs	r2, #36	; 0x24
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ac2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f929 	bl	8003d1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b08a      	sub	sp, #40	; 0x28
 8003b1e:	af02      	add	r7, sp, #8
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	603b      	str	r3, [r7, #0]
 8003b26:	4613      	mov	r3, r2
 8003b28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d17c      	bne.n	8003c34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <HAL_UART_Transmit+0x2c>
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e075      	b.n	8003c36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_UART_Transmit+0x3e>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e06e      	b.n	8003c36 <HAL_UART_Transmit+0x11c>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2221      	movs	r2, #33	; 0x21
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b6e:	f7fd fadd 	bl	800112c <HAL_GetTick>
 8003b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	88fa      	ldrh	r2, [r7, #6]
 8003b78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	88fa      	ldrh	r2, [r7, #6]
 8003b7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b88:	d108      	bne.n	8003b9c <HAL_UART_Transmit+0x82>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d104      	bne.n	8003b9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	e003      	b.n	8003ba4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bac:	e02a      	b.n	8003c04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2180      	movs	r1, #128	; 0x80
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f840 	bl	8003c3e <UART_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e036      	b.n	8003c36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10b      	bne.n	8003be6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	3302      	adds	r3, #2
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	e007      	b.n	8003bf6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	781a      	ldrb	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1cf      	bne.n	8003bae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2140      	movs	r1, #64	; 0x40
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f810 	bl	8003c3e <UART_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e006      	b.n	8003c36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e000      	b.n	8003c36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3720      	adds	r7, #32
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b090      	sub	sp, #64	; 0x40
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	603b      	str	r3, [r7, #0]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4e:	e050      	b.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c56:	d04c      	beq.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c5e:	f7fd fa65 	bl	800112c <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d241      	bcs.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	330c      	adds	r3, #12
 8003c74:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	330c      	adds	r3, #12
 8003c8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c8e:	637a      	str	r2, [r7, #52]	; 0x34
 8003c90:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c96:	e841 2300 	strex	r3, r2, [r1]
 8003c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1e5      	bne.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3314      	adds	r3, #20
 8003ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3314      	adds	r3, #20
 8003cc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cc2:	623a      	str	r2, [r7, #32]
 8003cc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc6:	69f9      	ldr	r1, [r7, #28]
 8003cc8:	6a3a      	ldr	r2, [r7, #32]
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e5      	bne.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e00f      	b.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	bf0c      	ite	eq
 8003d02:	2301      	moveq	r3, #1
 8003d04:	2300      	movne	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d09f      	beq.n	8003c50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3740      	adds	r7, #64	; 0x40
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d20:	b0c0      	sub	sp, #256	; 0x100
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d38:	68d9      	ldr	r1, [r3, #12]
 8003d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	ea40 0301 	orr.w	r3, r0, r1
 8003d44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d74:	f021 010c 	bic.w	r1, r1, #12
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d82:	430b      	orrs	r3, r1
 8003d84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d96:	6999      	ldr	r1, [r3, #24]
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	ea40 0301 	orr.w	r3, r0, r1
 8003da2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	4b8f      	ldr	r3, [pc, #572]	; (8003fe8 <UART_SetConfig+0x2cc>)
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d005      	beq.n	8003dbc <UART_SetConfig+0xa0>
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4b8d      	ldr	r3, [pc, #564]	; (8003fec <UART_SetConfig+0x2d0>)
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d104      	bne.n	8003dc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dbc:	f7ff fb6c 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 8003dc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003dc4:	e003      	b.n	8003dce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dc6:	f7ff fb53 	bl	8003470 <HAL_RCC_GetPCLK1Freq>
 8003dca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd8:	f040 810c 	bne.w	8003ff4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de0:	2200      	movs	r2, #0
 8003de2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003de6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003dea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003dee:	4622      	mov	r2, r4
 8003df0:	462b      	mov	r3, r5
 8003df2:	1891      	adds	r1, r2, r2
 8003df4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003df6:	415b      	adcs	r3, r3
 8003df8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dfe:	4621      	mov	r1, r4
 8003e00:	eb12 0801 	adds.w	r8, r2, r1
 8003e04:	4629      	mov	r1, r5
 8003e06:	eb43 0901 	adc.w	r9, r3, r1
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e1e:	4690      	mov	r8, r2
 8003e20:	4699      	mov	r9, r3
 8003e22:	4623      	mov	r3, r4
 8003e24:	eb18 0303 	adds.w	r3, r8, r3
 8003e28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e2c:	462b      	mov	r3, r5
 8003e2e:	eb49 0303 	adc.w	r3, r9, r3
 8003e32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	18db      	adds	r3, r3, r3
 8003e4e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e50:	4613      	mov	r3, r2
 8003e52:	eb42 0303 	adc.w	r3, r2, r3
 8003e56:	657b      	str	r3, [r7, #84]	; 0x54
 8003e58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e60:	f7fc fa06 	bl	8000270 <__aeabi_uldivmod>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4b61      	ldr	r3, [pc, #388]	; (8003ff0 <UART_SetConfig+0x2d4>)
 8003e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	011c      	lsls	r4, r3, #4
 8003e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e84:	4642      	mov	r2, r8
 8003e86:	464b      	mov	r3, r9
 8003e88:	1891      	adds	r1, r2, r2
 8003e8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e8c:	415b      	adcs	r3, r3
 8003e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e94:	4641      	mov	r1, r8
 8003e96:	eb12 0a01 	adds.w	sl, r2, r1
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	eb43 0b01 	adc.w	fp, r3, r1
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003eac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003eb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eb4:	4692      	mov	sl, r2
 8003eb6:	469b      	mov	fp, r3
 8003eb8:	4643      	mov	r3, r8
 8003eba:	eb1a 0303 	adds.w	r3, sl, r3
 8003ebe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ec2:	464b      	mov	r3, r9
 8003ec4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ec8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ed8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003edc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	18db      	adds	r3, r3, r3
 8003ee4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	eb42 0303 	adc.w	r3, r2, r3
 8003eec:	647b      	str	r3, [r7, #68]	; 0x44
 8003eee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ef2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ef6:	f7fc f9bb 	bl	8000270 <__aeabi_uldivmod>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4611      	mov	r1, r2
 8003f00:	4b3b      	ldr	r3, [pc, #236]	; (8003ff0 <UART_SetConfig+0x2d4>)
 8003f02:	fba3 2301 	umull	r2, r3, r3, r1
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	2264      	movs	r2, #100	; 0x64
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	1acb      	subs	r3, r1, r3
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f16:	4b36      	ldr	r3, [pc, #216]	; (8003ff0 <UART_SetConfig+0x2d4>)
 8003f18:	fba3 2302 	umull	r2, r3, r3, r2
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f24:	441c      	add	r4, r3
 8003f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f38:	4642      	mov	r2, r8
 8003f3a:	464b      	mov	r3, r9
 8003f3c:	1891      	adds	r1, r2, r2
 8003f3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f40:	415b      	adcs	r3, r3
 8003f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f48:	4641      	mov	r1, r8
 8003f4a:	1851      	adds	r1, r2, r1
 8003f4c:	6339      	str	r1, [r7, #48]	; 0x30
 8003f4e:	4649      	mov	r1, r9
 8003f50:	414b      	adcs	r3, r1
 8003f52:	637b      	str	r3, [r7, #52]	; 0x34
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f60:	4659      	mov	r1, fp
 8003f62:	00cb      	lsls	r3, r1, #3
 8003f64:	4651      	mov	r1, sl
 8003f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f6a:	4651      	mov	r1, sl
 8003f6c:	00ca      	lsls	r2, r1, #3
 8003f6e:	4610      	mov	r0, r2
 8003f70:	4619      	mov	r1, r3
 8003f72:	4603      	mov	r3, r0
 8003f74:	4642      	mov	r2, r8
 8003f76:	189b      	adds	r3, r3, r2
 8003f78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f7c:	464b      	mov	r3, r9
 8003f7e:	460a      	mov	r2, r1
 8003f80:	eb42 0303 	adc.w	r3, r2, r3
 8003f84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	18db      	adds	r3, r3, r3
 8003fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	eb42 0303 	adc.w	r3, r2, r3
 8003fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003faa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fb2:	f7fc f95d 	bl	8000270 <__aeabi_uldivmod>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <UART_SetConfig+0x2d4>)
 8003fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc0:	095b      	lsrs	r3, r3, #5
 8003fc2:	2164      	movs	r1, #100	; 0x64
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	3332      	adds	r3, #50	; 0x32
 8003fce:	4a08      	ldr	r2, [pc, #32]	; (8003ff0 <UART_SetConfig+0x2d4>)
 8003fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd4:	095b      	lsrs	r3, r3, #5
 8003fd6:	f003 0207 	and.w	r2, r3, #7
 8003fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4422      	add	r2, r4
 8003fe2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fe4:	e105      	b.n	80041f2 <UART_SetConfig+0x4d6>
 8003fe6:	bf00      	nop
 8003fe8:	40011000 	.word	0x40011000
 8003fec:	40011400 	.word	0x40011400
 8003ff0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ffe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004002:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004006:	4642      	mov	r2, r8
 8004008:	464b      	mov	r3, r9
 800400a:	1891      	adds	r1, r2, r2
 800400c:	6239      	str	r1, [r7, #32]
 800400e:	415b      	adcs	r3, r3
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
 8004012:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004016:	4641      	mov	r1, r8
 8004018:	1854      	adds	r4, r2, r1
 800401a:	4649      	mov	r1, r9
 800401c:	eb43 0501 	adc.w	r5, r3, r1
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	00eb      	lsls	r3, r5, #3
 800402a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800402e:	00e2      	lsls	r2, r4, #3
 8004030:	4614      	mov	r4, r2
 8004032:	461d      	mov	r5, r3
 8004034:	4643      	mov	r3, r8
 8004036:	18e3      	adds	r3, r4, r3
 8004038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800403c:	464b      	mov	r3, r9
 800403e:	eb45 0303 	adc.w	r3, r5, r3
 8004042:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004052:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004062:	4629      	mov	r1, r5
 8004064:	008b      	lsls	r3, r1, #2
 8004066:	4621      	mov	r1, r4
 8004068:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800406c:	4621      	mov	r1, r4
 800406e:	008a      	lsls	r2, r1, #2
 8004070:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004074:	f7fc f8fc 	bl	8000270 <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4b60      	ldr	r3, [pc, #384]	; (8004200 <UART_SetConfig+0x4e4>)
 800407e:	fba3 2302 	umull	r2, r3, r3, r2
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	011c      	lsls	r4, r3, #4
 8004086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800408a:	2200      	movs	r2, #0
 800408c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004090:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004094:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004098:	4642      	mov	r2, r8
 800409a:	464b      	mov	r3, r9
 800409c:	1891      	adds	r1, r2, r2
 800409e:	61b9      	str	r1, [r7, #24]
 80040a0:	415b      	adcs	r3, r3
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040a8:	4641      	mov	r1, r8
 80040aa:	1851      	adds	r1, r2, r1
 80040ac:	6139      	str	r1, [r7, #16]
 80040ae:	4649      	mov	r1, r9
 80040b0:	414b      	adcs	r3, r1
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040c0:	4659      	mov	r1, fp
 80040c2:	00cb      	lsls	r3, r1, #3
 80040c4:	4651      	mov	r1, sl
 80040c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ca:	4651      	mov	r1, sl
 80040cc:	00ca      	lsls	r2, r1, #3
 80040ce:	4610      	mov	r0, r2
 80040d0:	4619      	mov	r1, r3
 80040d2:	4603      	mov	r3, r0
 80040d4:	4642      	mov	r2, r8
 80040d6:	189b      	adds	r3, r3, r2
 80040d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040dc:	464b      	mov	r3, r9
 80040de:	460a      	mov	r2, r1
 80040e0:	eb42 0303 	adc.w	r3, r2, r3
 80040e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80040f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004100:	4649      	mov	r1, r9
 8004102:	008b      	lsls	r3, r1, #2
 8004104:	4641      	mov	r1, r8
 8004106:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800410a:	4641      	mov	r1, r8
 800410c:	008a      	lsls	r2, r1, #2
 800410e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004112:	f7fc f8ad 	bl	8000270 <__aeabi_uldivmod>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4b39      	ldr	r3, [pc, #228]	; (8004200 <UART_SetConfig+0x4e4>)
 800411c:	fba3 1302 	umull	r1, r3, r3, r2
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	2164      	movs	r1, #100	; 0x64
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	3332      	adds	r3, #50	; 0x32
 800412e:	4a34      	ldr	r2, [pc, #208]	; (8004200 <UART_SetConfig+0x4e4>)
 8004130:	fba2 2303 	umull	r2, r3, r2, r3
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800413a:	441c      	add	r4, r3
 800413c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004140:	2200      	movs	r2, #0
 8004142:	673b      	str	r3, [r7, #112]	; 0x70
 8004144:	677a      	str	r2, [r7, #116]	; 0x74
 8004146:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800414a:	4642      	mov	r2, r8
 800414c:	464b      	mov	r3, r9
 800414e:	1891      	adds	r1, r2, r2
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	415b      	adcs	r3, r3
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800415a:	4641      	mov	r1, r8
 800415c:	1851      	adds	r1, r2, r1
 800415e:	6039      	str	r1, [r7, #0]
 8004160:	4649      	mov	r1, r9
 8004162:	414b      	adcs	r3, r1
 8004164:	607b      	str	r3, [r7, #4]
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004172:	4659      	mov	r1, fp
 8004174:	00cb      	lsls	r3, r1, #3
 8004176:	4651      	mov	r1, sl
 8004178:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800417c:	4651      	mov	r1, sl
 800417e:	00ca      	lsls	r2, r1, #3
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	4603      	mov	r3, r0
 8004186:	4642      	mov	r2, r8
 8004188:	189b      	adds	r3, r3, r2
 800418a:	66bb      	str	r3, [r7, #104]	; 0x68
 800418c:	464b      	mov	r3, r9
 800418e:	460a      	mov	r2, r1
 8004190:	eb42 0303 	adc.w	r3, r2, r3
 8004194:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	663b      	str	r3, [r7, #96]	; 0x60
 80041a0:	667a      	str	r2, [r7, #100]	; 0x64
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041ae:	4649      	mov	r1, r9
 80041b0:	008b      	lsls	r3, r1, #2
 80041b2:	4641      	mov	r1, r8
 80041b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041b8:	4641      	mov	r1, r8
 80041ba:	008a      	lsls	r2, r1, #2
 80041bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041c0:	f7fc f856 	bl	8000270 <__aeabi_uldivmod>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4b0d      	ldr	r3, [pc, #52]	; (8004200 <UART_SetConfig+0x4e4>)
 80041ca:	fba3 1302 	umull	r1, r3, r3, r2
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2164      	movs	r1, #100	; 0x64
 80041d2:	fb01 f303 	mul.w	r3, r1, r3
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	3332      	adds	r3, #50	; 0x32
 80041dc:	4a08      	ldr	r2, [pc, #32]	; (8004200 <UART_SetConfig+0x4e4>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	f003 020f 	and.w	r2, r3, #15
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4422      	add	r2, r4
 80041f0:	609a      	str	r2, [r3, #8]
}
 80041f2:	bf00      	nop
 80041f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041f8:	46bd      	mov	sp, r7
 80041fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041fe:	bf00      	nop
 8004200:	51eb851f 	.word	0x51eb851f

08004204 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800420a:	2100      	movs	r1, #0
 800420c:	2000      	movs	r0, #0
 800420e:	f007 fe5b 	bl	800bec8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004212:	4b21      	ldr	r3, [pc, #132]	; (8004298 <MX_LWIP_Init+0x94>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004218:	4b20      	ldr	r3, [pc, #128]	; (800429c <MX_LWIP_Init+0x98>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <MX_LWIP_Init+0x9c>)
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004224:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <MX_LWIP_Init+0xa0>)
 8004226:	9302      	str	r3, [sp, #8]
 8004228:	4b1f      	ldr	r3, [pc, #124]	; (80042a8 <MX_LWIP_Init+0xa4>)
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	2300      	movs	r3, #0
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <MX_LWIP_Init+0x9c>)
 8004232:	4a1a      	ldr	r2, [pc, #104]	; (800429c <MX_LWIP_Init+0x98>)
 8004234:	4918      	ldr	r1, [pc, #96]	; (8004298 <MX_LWIP_Init+0x94>)
 8004236:	481d      	ldr	r0, [pc, #116]	; (80042ac <MX_LWIP_Init+0xa8>)
 8004238:	f008 fc10 	bl	800ca5c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800423c:	481b      	ldr	r0, [pc, #108]	; (80042ac <MX_LWIP_Init+0xa8>)
 800423e:	f008 fdc7 	bl	800cdd0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004242:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <MX_LWIP_Init+0xa8>)
 8004244:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004248:	089b      	lsrs	r3, r3, #2
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004254:	4815      	ldr	r0, [pc, #84]	; (80042ac <MX_LWIP_Init+0xa8>)
 8004256:	f008 fdcb 	bl	800cdf0 <netif_set_up>
 800425a:	e002      	b.n	8004262 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800425c:	4813      	ldr	r0, [pc, #76]	; (80042ac <MX_LWIP_Init+0xa8>)
 800425e:	f008 fe33 	bl	800cec8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004262:	4913      	ldr	r1, [pc, #76]	; (80042b0 <MX_LWIP_Init+0xac>)
 8004264:	4811      	ldr	r0, [pc, #68]	; (80042ac <MX_LWIP_Init+0xa8>)
 8004266:	f008 fec9 	bl	800cffc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800426a:	2224      	movs	r2, #36	; 0x24
 800426c:	2100      	movs	r1, #0
 800426e:	4811      	ldr	r0, [pc, #68]	; (80042b4 <MX_LWIP_Init+0xb0>)
 8004270:	f015 f91a 	bl	80194a8 <memset>
  attributes.name = "EthLink";
 8004274:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <MX_LWIP_Init+0xb0>)
 8004276:	4a10      	ldr	r2, [pc, #64]	; (80042b8 <MX_LWIP_Init+0xb4>)
 8004278:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800427a:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <MX_LWIP_Init+0xb0>)
 800427c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004280:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004282:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <MX_LWIP_Init+0xb0>)
 8004284:	2210      	movs	r2, #16
 8004286:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004288:	4a0a      	ldr	r2, [pc, #40]	; (80042b4 <MX_LWIP_Init+0xb0>)
 800428a:	4908      	ldr	r1, [pc, #32]	; (80042ac <MX_LWIP_Init+0xa8>)
 800428c:	480b      	ldr	r0, [pc, #44]	; (80042bc <MX_LWIP_Init+0xb8>)
 800428e:	f000 fd8a 	bl	8004da6 <osThreadNew>
  /* Start DHCP negotiation for a network interface (IPv4) */
  //dhcp_start(&gnetif);

/* USER CODE BEGIN 3 */
/* USER CODE END 3 */
}
 8004292:	bf00      	nop
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000184 	.word	0x20000184
 800429c:	20000188 	.word	0x20000188
 80042a0:	2000018c 	.word	0x2000018c
 80042a4:	0800bdd9 	.word	0x0800bdd9
 80042a8:	08004785 	.word	0x08004785
 80042ac:	2000014c 	.word	0x2000014c
 80042b0:	080042c1 	.word	0x080042c1
 80042b4:	20000190 	.word	0x20000190
 80042b8:	0801a624 	.word	0x0801a624
 80042bc:	08004a4d 	.word	0x08004a4d

080042c0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <ethernet_link_status_updated+0x24>
  {
/* USER CODE BEGIN 5 */
      printf("netif_is_up\n");
 80042d8:	4804      	ldr	r0, [pc, #16]	; (80042ec <ethernet_link_status_updated+0x2c>)
 80042da:	f015 fa53 	bl	8019784 <puts>
      dhcp_start(&gnetif);
 80042de:	4804      	ldr	r0, [pc, #16]	; (80042f0 <ethernet_link_status_updated+0x30>)
 80042e0:	f010 ff5a 	bl	8015198 <dhcp_start>
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	0801a62c 	.word	0x0801a62c
 80042f0:	2000014c 	.word	0x2000014c

080042f4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80042fc:	4b04      	ldr	r3, [pc, #16]	; (8004310 <HAL_ETH_RxCpltCallback+0x1c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f000 ffe7 	bl	80052d4 <osSemaphoreRelease>
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20004c80 	.word	0x20004c80

08004314 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800431c:	4b04      	ldr	r3, [pc, #16]	; (8004330 <HAL_ETH_TxCpltCallback+0x1c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f000 ffd7 	bl	80052d4 <osSemaphoreRelease>
}
 8004326:	bf00      	nop
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20004c84 	.word	0x20004c84

08004334 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7fd fe45 	bl	8001fcc <HAL_ETH_GetDMAError>
 8004342:	4603      	mov	r3, r0
 8004344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004348:	2b80      	cmp	r3, #128	; 0x80
 800434a:	d104      	bne.n	8004356 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <HAL_ETH_ErrorCallback+0x2c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f000 ffbf 	bl	80052d4 <osSemaphoreRelease>
  }
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20004c80 	.word	0x20004c80

08004364 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b0aa      	sub	sp, #168	; 0xa8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800437e:	f107 0310 	add.w	r3, r7, #16
 8004382:	2264      	movs	r2, #100	; 0x64
 8004384:	2100      	movs	r1, #0
 8004386:	4618      	mov	r0, r3
 8004388:	f015 f88e 	bl	80194a8 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800438c:	4b85      	ldr	r3, [pc, #532]	; (80045a4 <low_level_init+0x240>)
 800438e:	4a86      	ldr	r2, [pc, #536]	; (80045a8 <low_level_init+0x244>)
 8004390:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004392:	2300      	movs	r3, #0
 8004394:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004396:	2380      	movs	r3, #128	; 0x80
 8004398:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800439a:	23e1      	movs	r3, #225	; 0xe1
 800439c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800439e:	2300      	movs	r3, #0
 80043a0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80043a2:	2300      	movs	r3, #0
 80043a4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80043a6:	2300      	movs	r3, #0
 80043a8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80043aa:	4a7e      	ldr	r2, [pc, #504]	; (80045a4 <low_level_init+0x240>)
 80043ac:	f107 0308 	add.w	r3, r7, #8
 80043b0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80043b2:	4b7c      	ldr	r3, [pc, #496]	; (80045a4 <low_level_init+0x240>)
 80043b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80043b8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80043ba:	4b7a      	ldr	r3, [pc, #488]	; (80045a4 <low_level_init+0x240>)
 80043bc:	4a7b      	ldr	r2, [pc, #492]	; (80045ac <low_level_init+0x248>)
 80043be:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80043c0:	4b78      	ldr	r3, [pc, #480]	; (80045a4 <low_level_init+0x240>)
 80043c2:	4a7b      	ldr	r2, [pc, #492]	; (80045b0 <low_level_init+0x24c>)
 80043c4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80043c6:	4b77      	ldr	r3, [pc, #476]	; (80045a4 <low_level_init+0x240>)
 80043c8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80043cc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80043ce:	4875      	ldr	r0, [pc, #468]	; (80045a4 <low_level_init+0x240>)
 80043d0:	f7fc ffbe 	bl	8001350 <HAL_ETH_Init>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80043da:	2238      	movs	r2, #56	; 0x38
 80043dc:	2100      	movs	r1, #0
 80043de:	4875      	ldr	r0, [pc, #468]	; (80045b4 <low_level_init+0x250>)
 80043e0:	f015 f862 	bl	80194a8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80043e4:	4b73      	ldr	r3, [pc, #460]	; (80045b4 <low_level_init+0x250>)
 80043e6:	2221      	movs	r2, #33	; 0x21
 80043e8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80043ea:	4b72      	ldr	r3, [pc, #456]	; (80045b4 <low_level_init+0x250>)
 80043ec:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80043f0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80043f2:	4b70      	ldr	r3, [pc, #448]	; (80045b4 <low_level_init+0x250>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80043f8:	486f      	ldr	r0, [pc, #444]	; (80045b8 <low_level_init+0x254>)
 80043fa:	f008 f9e9 	bl	800c7d0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2206      	movs	r2, #6
 8004402:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004406:	4b67      	ldr	r3, [pc, #412]	; (80045a4 <low_level_init+0x240>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	781a      	ldrb	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004412:	4b64      	ldr	r3, [pc, #400]	; (80045a4 <low_level_init+0x240>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	785a      	ldrb	r2, [r3, #1]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800441e:	4b61      	ldr	r3, [pc, #388]	; (80045a4 <low_level_init+0x240>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	789a      	ldrb	r2, [r3, #2]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800442a:	4b5e      	ldr	r3, [pc, #376]	; (80045a4 <low_level_init+0x240>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	78da      	ldrb	r2, [r3, #3]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004436:	4b5b      	ldr	r3, [pc, #364]	; (80045a4 <low_level_init+0x240>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	791a      	ldrb	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004442:	4b58      	ldr	r3, [pc, #352]	; (80045a4 <low_level_init+0x240>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	795a      	ldrb	r2, [r3, #5]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004454:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800445c:	f043 030a 	orr.w	r3, r3, #10
 8004460:	b2da      	uxtb	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004468:	2200      	movs	r2, #0
 800446a:	2101      	movs	r1, #1
 800446c:	2001      	movs	r0, #1
 800446e:	f000 fe55 	bl	800511c <osSemaphoreNew>
 8004472:	4603      	mov	r3, r0
 8004474:	4a51      	ldr	r2, [pc, #324]	; (80045bc <low_level_init+0x258>)
 8004476:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004478:	2200      	movs	r2, #0
 800447a:	2101      	movs	r1, #1
 800447c:	2001      	movs	r0, #1
 800447e:	f000 fe4d 	bl	800511c <osSemaphoreNew>
 8004482:	4603      	mov	r3, r0
 8004484:	4a4e      	ldr	r2, [pc, #312]	; (80045c0 <low_level_init+0x25c>)
 8004486:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004488:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800448c:	2224      	movs	r2, #36	; 0x24
 800448e:	2100      	movs	r1, #0
 8004490:	4618      	mov	r0, r3
 8004492:	f015 f809 	bl	80194a8 <memset>
  attributes.name = "EthIf";
 8004496:	4b4b      	ldr	r3, [pc, #300]	; (80045c4 <low_level_init+0x260>)
 8004498:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800449a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800449e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 80044a2:	2330      	movs	r3, #48	; 0x30
 80044a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 80044a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80044ac:	461a      	mov	r2, r3
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4845      	ldr	r0, [pc, #276]	; (80045c8 <low_level_init+0x264>)
 80044b2:	f000 fc78 	bl	8004da6 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80044b6:	4945      	ldr	r1, [pc, #276]	; (80045cc <low_level_init+0x268>)
 80044b8:	4845      	ldr	r0, [pc, #276]	; (80045d0 <low_level_init+0x26c>)
 80044ba:	f7fc fca0 	bl	8000dfe <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80044be:	4844      	ldr	r0, [pc, #272]	; (80045d0 <low_level_init+0x26c>)
 80044c0:	f7fc fccf 	bl	8000e62 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80044c4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d164      	bne.n	8004596 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80044cc:	4840      	ldr	r0, [pc, #256]	; (80045d0 <low_level_init+0x26c>)
 80044ce:	f7fc fd70 	bl	8000fb2 <LAN8742_GetLinkState>
 80044d2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80044d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044da:	2b01      	cmp	r3, #1
 80044dc:	dc06      	bgt.n	80044ec <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f008 fd5c 	bl	800cf9c <netif_set_link_down>
      netif_set_down(netif);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f008 fcef 	bl	800cec8 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80044ea:	e056      	b.n	800459a <low_level_init+0x236>
      switch (PHYLinkState)
 80044ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044f0:	3b02      	subs	r3, #2
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d82a      	bhi.n	800454c <low_level_init+0x1e8>
 80044f6:	a201      	add	r2, pc, #4	; (adr r2, 80044fc <low_level_init+0x198>)
 80044f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fc:	0800450d 	.word	0x0800450d
 8004500:	0800451f 	.word	0x0800451f
 8004504:	0800452f 	.word	0x0800452f
 8004508:	0800453f 	.word	0x0800453f
        duplex = ETH_FULLDUPLEX_MODE;
 800450c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004510:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004514:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004518:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800451c:	e01f      	b.n	800455e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800451e:	2300      	movs	r3, #0
 8004520:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004524:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004528:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800452c:	e017      	b.n	800455e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800452e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004532:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8004536:	2300      	movs	r3, #0
 8004538:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800453c:	e00f      	b.n	800455e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800453e:	2300      	movs	r3, #0
 8004540:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8004544:	2300      	movs	r3, #0
 8004546:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800454a:	e008      	b.n	800455e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800454c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004554:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004558:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800455c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800455e:	f107 0310 	add.w	r3, r7, #16
 8004562:	4619      	mov	r1, r3
 8004564:	480f      	ldr	r0, [pc, #60]	; (80045a4 <low_level_init+0x240>)
 8004566:	f7fd fbd7 	bl	8001d18 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800456a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8004570:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004576:	f107 0310 	add.w	r3, r7, #16
 800457a:	4619      	mov	r1, r3
 800457c:	4809      	ldr	r0, [pc, #36]	; (80045a4 <low_level_init+0x240>)
 800457e:	f7fd fcb5 	bl	8001eec <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004582:	4808      	ldr	r0, [pc, #32]	; (80045a4 <low_level_init+0x240>)
 8004584:	f7fc ff62 	bl	800144c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f008 fc31 	bl	800cdf0 <netif_set_up>
    netif_set_link_up(netif);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f008 fccc 	bl	800cf2c <netif_set_link_up>
}
 8004594:	e001      	b.n	800459a <low_level_init+0x236>
    Error_Handler();
 8004596:	f7fc f93b 	bl	8000810 <Error_Handler>
}
 800459a:	bf00      	nop
 800459c:	37a8      	adds	r7, #168	; 0xa8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20004c88 	.word	0x20004c88
 80045a8:	40028000 	.word	0x40028000
 80045ac:	20004be0 	.word	0x20004be0
 80045b0:	20004b40 	.word	0x20004b40
 80045b4:	20004d38 	.word	0x20004d38
 80045b8:	0801e190 	.word	0x0801e190
 80045bc:	20004c80 	.word	0x20004c80
 80045c0:	20004c84 	.word	0x20004c84
 80045c4:	0801a638 	.word	0x0801a638
 80045c8:	08004731 	.word	0x08004731
 80045cc:	2000000c 	.word	0x2000000c
 80045d0:	20004d70 	.word	0x20004d70

080045d4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b092      	sub	sp, #72	; 0x48
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80045ec:	f107 030c 	add.w	r3, r7, #12
 80045f0:	2230      	movs	r2, #48	; 0x30
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f014 ff57 	bl	80194a8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80045fa:	f107 030c 	add.w	r3, r7, #12
 80045fe:	2230      	movs	r2, #48	; 0x30
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f014 ff50 	bl	80194a8 <memset>

  for(q = p; q != NULL; q = q->next)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	643b      	str	r3, [r7, #64]	; 0x40
 800460c:	e045      	b.n	800469a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800460e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004610:	2b03      	cmp	r3, #3
 8004612:	d902      	bls.n	800461a <low_level_output+0x46>
      return ERR_IF;
 8004614:	f06f 030b 	mvn.w	r3, #11
 8004618:	e065      	b.n	80046e6 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800461a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800461c:	6859      	ldr	r1, [r3, #4]
 800461e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004620:	4613      	mov	r3, r2
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	3348      	adds	r3, #72	; 0x48
 800462a:	443b      	add	r3, r7
 800462c:	3b3c      	subs	r3, #60	; 0x3c
 800462e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004632:	895b      	ldrh	r3, [r3, #10]
 8004634:	4619      	mov	r1, r3
 8004636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004638:	4613      	mov	r3, r2
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	3348      	adds	r3, #72	; 0x48
 8004642:	443b      	add	r3, r7
 8004644:	3b38      	subs	r3, #56	; 0x38
 8004646:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800464a:	2b00      	cmp	r3, #0
 800464c:	d011      	beq.n	8004672 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800464e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004650:	1e5a      	subs	r2, r3, #1
 8004652:	f107 000c 	add.w	r0, r7, #12
 8004656:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004658:	460b      	mov	r3, r1
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	440b      	add	r3, r1
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	18c1      	adds	r1, r0, r3
 8004662:	4613      	mov	r3, r2
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	3348      	adds	r3, #72	; 0x48
 800466c:	443b      	add	r3, r7
 800466e:	3b34      	subs	r3, #52	; 0x34
 8004670:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800467a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800467c:	4613      	mov	r3, r2
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	3348      	adds	r3, #72	; 0x48
 8004686:	443b      	add	r3, r7
 8004688:	3b34      	subs	r3, #52	; 0x34
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800468e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004690:	3301      	adds	r3, #1
 8004692:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	643b      	str	r3, [r7, #64]	; 0x40
 800469a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1b6      	bne.n	800460e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	891b      	ldrh	r3, [r3, #8]
 80046a4:	461a      	mov	r2, r3
 80046a6:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <low_level_output+0x11c>)
 80046a8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80046aa:	4a11      	ldr	r2, [pc, #68]	; (80046f0 <low_level_output+0x11c>)
 80046ac:	f107 030c 	add.w	r3, r7, #12
 80046b0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80046b2:	4a0f      	ldr	r2, [pc, #60]	; (80046f0 <low_level_output+0x11c>)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80046b8:	6838      	ldr	r0, [r7, #0]
 80046ba:	f009 f925 	bl	800d908 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80046be:	490c      	ldr	r1, [pc, #48]	; (80046f0 <low_level_output+0x11c>)
 80046c0:	480c      	ldr	r0, [pc, #48]	; (80046f4 <low_level_output+0x120>)
 80046c2:	f7fc ffd0 	bl	8001666 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80046c6:	bf00      	nop
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <low_level_output+0x124>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fdad 	bl	8005230 <osSemaphoreAcquire>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1f5      	bne.n	80046c8 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80046dc:	4805      	ldr	r0, [pc, #20]	; (80046f4 <low_level_output+0x120>)
 80046de:	f7fd f955 	bl	800198c <HAL_ETH_ReleaseTxPacket>

  return errval;
 80046e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3748      	adds	r7, #72	; 0x48
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20004d38 	.word	0x20004d38
 80046f4:	20004c88 	.word	0x20004c88
 80046f8:	20004c84 	.word	0x20004c84

080046fc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004708:	4b07      	ldr	r3, [pc, #28]	; (8004728 <low_level_input+0x2c>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d105      	bne.n	800471c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004710:	f107 030c 	add.w	r3, r7, #12
 8004714:	4619      	mov	r1, r3
 8004716:	4805      	ldr	r0, [pc, #20]	; (800472c <low_level_input+0x30>)
 8004718:	f7fd f801 	bl	800171e <HAL_ETH_ReadData>
  }

  return p;
 800471c:	68fb      	ldr	r3, [r7, #12]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20004b3c 	.word	0x20004b3c
 800472c:	20004c88 	.word	0x20004c88

08004730 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004740:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <ethernetif_input+0x50>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fd71 	bl	8005230 <osSemaphoreAcquire>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f5      	bne.n	8004740 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004754:	68b8      	ldr	r0, [r7, #8]
 8004756:	f7ff ffd1 	bl	80046fc <low_level_input>
 800475a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	4798      	blx	r3
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f009 f822 	bl	800d7bc <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1ea      	bne.n	8004754 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800477e:	e7df      	b.n	8004740 <ethernetif_input+0x10>
 8004780:	20004c80 	.word	0x20004c80

08004784 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <ethernetif_init+0x1c>
 8004792:	4b0e      	ldr	r3, [pc, #56]	; (80047cc <ethernetif_init+0x48>)
 8004794:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004798:	490d      	ldr	r1, [pc, #52]	; (80047d0 <ethernetif_init+0x4c>)
 800479a:	480e      	ldr	r0, [pc, #56]	; (80047d4 <ethernetif_init+0x50>)
 800479c:	f014 ff6c 	bl	8019678 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2273      	movs	r2, #115	; 0x73
 80047a4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2274      	movs	r2, #116	; 0x74
 80047ac:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a09      	ldr	r2, [pc, #36]	; (80047d8 <ethernetif_init+0x54>)
 80047b4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a08      	ldr	r2, [pc, #32]	; (80047dc <ethernetif_init+0x58>)
 80047ba:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff fdd1 	bl	8004364 <low_level_init>

  return ERR_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	0801a640 	.word	0x0801a640
 80047d0:	0801a65c 	.word	0x0801a65c
 80047d4:	0801a66c 	.word	0x0801a66c
 80047d8:	08017065 	.word	0x08017065
 80047dc:	080045d5 	.word	0x080045d5

080047e0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80047ec:	68f9      	ldr	r1, [r7, #12]
 80047ee:	4809      	ldr	r0, [pc, #36]	; (8004814 <pbuf_free_custom+0x34>)
 80047f0:	f008 f8de 	bl	800c9b0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80047f4:	4b08      	ldr	r3, [pc, #32]	; (8004818 <pbuf_free_custom+0x38>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d107      	bne.n	800480c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <pbuf_free_custom+0x38>)
 80047fe:	2200      	movs	r2, #0
 8004800:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <pbuf_free_custom+0x3c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fd64 	bl	80052d4 <osSemaphoreRelease>
  }
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	0801e190 	.word	0x0801e190
 8004818:	20004b3c 	.word	0x20004b3c
 800481c:	20004c80 	.word	0x20004c80

08004820 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004824:	f7fc fc82 	bl	800112c <HAL_GetTick>
 8004828:	4603      	mov	r3, r0
}
 800482a:	4618      	mov	r0, r3
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08e      	sub	sp, #56	; 0x38
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	605a      	str	r2, [r3, #4]
 8004842:	609a      	str	r2, [r3, #8]
 8004844:	60da      	str	r2, [r3, #12]
 8004846:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a52      	ldr	r2, [pc, #328]	; (8004998 <HAL_ETH_MspInit+0x168>)
 800484e:	4293      	cmp	r3, r2
 8004850:	f040 809d 	bne.w	800498e <HAL_ETH_MspInit+0x15e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004854:	2300      	movs	r3, #0
 8004856:	623b      	str	r3, [r7, #32]
 8004858:	4b50      	ldr	r3, [pc, #320]	; (800499c <HAL_ETH_MspInit+0x16c>)
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	4a4f      	ldr	r2, [pc, #316]	; (800499c <HAL_ETH_MspInit+0x16c>)
 800485e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004862:	6313      	str	r3, [r2, #48]	; 0x30
 8004864:	4b4d      	ldr	r3, [pc, #308]	; (800499c <HAL_ETH_MspInit+0x16c>)
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486c:	623b      	str	r3, [r7, #32]
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	2300      	movs	r3, #0
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	4b49      	ldr	r3, [pc, #292]	; (800499c <HAL_ETH_MspInit+0x16c>)
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	4a48      	ldr	r2, [pc, #288]	; (800499c <HAL_ETH_MspInit+0x16c>)
 800487a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800487e:	6313      	str	r3, [r2, #48]	; 0x30
 8004880:	4b46      	ldr	r3, [pc, #280]	; (800499c <HAL_ETH_MspInit+0x16c>)
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004888:	61fb      	str	r3, [r7, #28]
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	2300      	movs	r3, #0
 800488e:	61bb      	str	r3, [r7, #24]
 8004890:	4b42      	ldr	r3, [pc, #264]	; (800499c <HAL_ETH_MspInit+0x16c>)
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	4a41      	ldr	r2, [pc, #260]	; (800499c <HAL_ETH_MspInit+0x16c>)
 8004896:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800489a:	6313      	str	r3, [r2, #48]	; 0x30
 800489c:	4b3f      	ldr	r3, [pc, #252]	; (800499c <HAL_ETH_MspInit+0x16c>)
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	4b3b      	ldr	r3, [pc, #236]	; (800499c <HAL_ETH_MspInit+0x16c>)
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	4a3a      	ldr	r2, [pc, #232]	; (800499c <HAL_ETH_MspInit+0x16c>)
 80048b2:	f043 0304 	orr.w	r3, r3, #4
 80048b6:	6313      	str	r3, [r2, #48]	; 0x30
 80048b8:	4b38      	ldr	r3, [pc, #224]	; (800499c <HAL_ETH_MspInit+0x16c>)
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048c4:	2300      	movs	r3, #0
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	4b34      	ldr	r3, [pc, #208]	; (800499c <HAL_ETH_MspInit+0x16c>)
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	4a33      	ldr	r2, [pc, #204]	; (800499c <HAL_ETH_MspInit+0x16c>)
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	6313      	str	r3, [r2, #48]	; 0x30
 80048d4:	4b31      	ldr	r3, [pc, #196]	; (800499c <HAL_ETH_MspInit+0x16c>)
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	4b2d      	ldr	r3, [pc, #180]	; (800499c <HAL_ETH_MspInit+0x16c>)
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	4a2c      	ldr	r2, [pc, #176]	; (800499c <HAL_ETH_MspInit+0x16c>)
 80048ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ee:	6313      	str	r3, [r2, #48]	; 0x30
 80048f0:	4b2a      	ldr	r3, [pc, #168]	; (800499c <HAL_ETH_MspInit+0x16c>)
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80048fc:	2332      	movs	r3, #50	; 0x32
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004900:	2302      	movs	r3, #2
 8004902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004904:	2300      	movs	r3, #0
 8004906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004908:	2303      	movs	r3, #3
 800490a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800490c:	230b      	movs	r3, #11
 800490e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004914:	4619      	mov	r1, r3
 8004916:	4822      	ldr	r0, [pc, #136]	; (80049a0 <HAL_ETH_MspInit+0x170>)
 8004918:	f7fd ff6a 	bl	80027f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800491c:	2386      	movs	r3, #134	; 0x86
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004920:	2302      	movs	r3, #2
 8004922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004924:	2300      	movs	r3, #0
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004928:	2303      	movs	r3, #3
 800492a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800492c:	230b      	movs	r3, #11
 800492e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004934:	4619      	mov	r1, r3
 8004936:	481b      	ldr	r0, [pc, #108]	; (80049a4 <HAL_ETH_MspInit+0x174>)
 8004938:	f7fd ff5a 	bl	80027f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800493c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004942:	2302      	movs	r3, #2
 8004944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004946:	2300      	movs	r3, #0
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800494a:	2303      	movs	r3, #3
 800494c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800494e:	230b      	movs	r3, #11
 8004950:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004956:	4619      	mov	r1, r3
 8004958:	4813      	ldr	r0, [pc, #76]	; (80049a8 <HAL_ETH_MspInit+0x178>)
 800495a:	f7fd ff49 	bl	80027f0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800495e:	2200      	movs	r2, #0
 8004960:	2105      	movs	r1, #5
 8004962:	203d      	movs	r0, #61	; 0x3d
 8004964:	f7fc fcca 	bl	80012fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004968:	203d      	movs	r0, #61	; 0x3d
 800496a:	f7fc fce3 	bl	8001334 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */
      HAL_GPIO_WritePin(ETH_RESET_GPIO_Port,ETH_RESET_Pin,GPIO_PIN_RESET);
 800496e:	2200      	movs	r2, #0
 8004970:	2104      	movs	r1, #4
 8004972:	480e      	ldr	r0, [pc, #56]	; (80049ac <HAL_ETH_MspInit+0x17c>)
 8004974:	f7fe f8d8 	bl	8002b28 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8004978:	2064      	movs	r0, #100	; 0x64
 800497a:	f7fc fbe3 	bl	8001144 <HAL_Delay>
      HAL_GPIO_WritePin(ETH_RESET_GPIO_Port,ETH_RESET_Pin,GPIO_PIN_SET);
 800497e:	2201      	movs	r2, #1
 8004980:	2104      	movs	r1, #4
 8004982:	480a      	ldr	r0, [pc, #40]	; (80049ac <HAL_ETH_MspInit+0x17c>)
 8004984:	f7fe f8d0 	bl	8002b28 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8004988:	2064      	movs	r0, #100	; 0x64
 800498a:	f7fc fbdb 	bl	8001144 <HAL_Delay>
  /* USER CODE END ETH_MspInit 1 */
  }
}
 800498e:	bf00      	nop
 8004990:	3738      	adds	r7, #56	; 0x38
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40028000 	.word	0x40028000
 800499c:	40023800 	.word	0x40023800
 80049a0:	40020800 	.word	0x40020800
 80049a4:	40020000 	.word	0x40020000
 80049a8:	40021800 	.word	0x40021800
 80049ac:	40021000 	.word	0x40021000

080049b0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80049b4:	4802      	ldr	r0, [pc, #8]	; (80049c0 <ETH_PHY_IO_Init+0x10>)
 80049b6:	f7fd fab3 	bl	8001f20 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20004c88 	.word	0x20004c88

080049c4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  return 0;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	68f9      	ldr	r1, [r7, #12]
 80049e6:	4807      	ldr	r0, [pc, #28]	; (8004a04 <ETH_PHY_IO_ReadReg+0x30>)
 80049e8:	f7fd f902 	bl	8001bf0 <HAL_ETH_ReadPHYRegister>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80049f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049f6:	e000      	b.n	80049fa <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20004c88 	.word	0x20004c88

08004a08 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	68f9      	ldr	r1, [r7, #12]
 8004a1a:	4807      	ldr	r0, [pc, #28]	; (8004a38 <ETH_PHY_IO_WriteReg+0x30>)
 8004a1c:	f7fd f933 	bl	8001c86 <HAL_ETH_WritePHYRegister>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a2a:	e000      	b.n	8004a2e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20004c88 	.word	0x20004c88

08004a3c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004a40:	f7fc fb74 	bl	800112c <HAL_GetTick>
 8004a44:	4603      	mov	r3, r0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b0a0      	sub	sp, #128	; 0x80
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004a54:	f107 0308 	add.w	r3, r7, #8
 8004a58:	2264      	movs	r2, #100	; 0x64
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f014 fd23 	bl	80194a8 <memset>
  int32_t PHYLinkState = 0;
 8004a62:	2300      	movs	r3, #0
 8004a64:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a6e:	2300      	movs	r3, #0
 8004a70:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004a76:	483a      	ldr	r0, [pc, #232]	; (8004b60 <ethernet_link_thread+0x114>)
 8004a78:	f7fc fa9b 	bl	8000fb2 <LAN8742_GetLinkState>
 8004a7c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a84:	089b      	lsrs	r3, r3, #2
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00c      	beq.n	8004aaa <ethernet_link_thread+0x5e>
 8004a90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	dc09      	bgt.n	8004aaa <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004a96:	4833      	ldr	r0, [pc, #204]	; (8004b64 <ethernet_link_thread+0x118>)
 8004a98:	f7fc fd66 	bl	8001568 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004a9c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a9e:	f008 fa13 	bl	800cec8 <netif_set_down>
    netif_set_link_down(netif);
 8004aa2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004aa4:	f008 fa7a 	bl	800cf9c <netif_set_link_down>
 8004aa8:	e055      	b.n	8004b56 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d14e      	bne.n	8004b56 <ethernet_link_thread+0x10a>
 8004ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	dd4b      	ble.n	8004b56 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ac0:	3b02      	subs	r3, #2
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d82a      	bhi.n	8004b1c <ethernet_link_thread+0xd0>
 8004ac6:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <ethernet_link_thread+0x80>)
 8004ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004acc:	08004add 	.word	0x08004add
 8004ad0:	08004aef 	.word	0x08004aef
 8004ad4:	08004aff 	.word	0x08004aff
 8004ad8:	08004b0f 	.word	0x08004b0f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004adc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ae0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004ae2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ae6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004aec:	e017      	b.n	8004b1e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004aee:	2300      	movs	r3, #0
 8004af0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004af2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004af6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004af8:	2301      	movs	r3, #1
 8004afa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004afc:	e00f      	b.n	8004b1e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004afe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b02:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004b04:	2300      	movs	r3, #0
 8004b06:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004b0c:	e007      	b.n	8004b1e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004b12:	2300      	movs	r3, #0
 8004b14:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004b16:	2301      	movs	r3, #1
 8004b18:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004b1a:	e000      	b.n	8004b1e <ethernet_link_thread+0xd2>
    default:
      break;
 8004b1c:	bf00      	nop
    }

    if(linkchanged)
 8004b1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d018      	beq.n	8004b56 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004b24:	f107 0308 	add.w	r3, r7, #8
 8004b28:	4619      	mov	r1, r3
 8004b2a:	480e      	ldr	r0, [pc, #56]	; (8004b64 <ethernet_link_thread+0x118>)
 8004b2c:	f7fd f8f4 	bl	8001d18 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b32:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b36:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004b38:	f107 0308 	add.w	r3, r7, #8
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4809      	ldr	r0, [pc, #36]	; (8004b64 <ethernet_link_thread+0x118>)
 8004b40:	f7fd f9d4 	bl	8001eec <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8004b44:	4807      	ldr	r0, [pc, #28]	; (8004b64 <ethernet_link_thread+0x118>)
 8004b46:	f7fc fc81 	bl	800144c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8004b4a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b4c:	f008 f950 	bl	800cdf0 <netif_set_up>
      netif_set_link_up(netif);
 8004b50:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b52:	f008 f9eb 	bl	800cf2c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004b56:	2064      	movs	r0, #100	; 0x64
 8004b58:	f000 f9b7 	bl	8004eca <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004b5c:	e78b      	b.n	8004a76 <ethernet_link_thread+0x2a>
 8004b5e:	bf00      	nop
 8004b60:	20004d70 	.word	0x20004d70
 8004b64:	20004c88 	.word	0x20004c88

08004b68 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004b70:	4812      	ldr	r0, [pc, #72]	; (8004bbc <HAL_ETH_RxAllocateCallback+0x54>)
 8004b72:	f007 fea9 	bl	800c8c8 <memp_malloc_pool>
 8004b76:	60f8      	str	r0, [r7, #12]
  if (p)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d014      	beq.n	8004ba8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f103 0220 	add.w	r2, r3, #32
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4a0d      	ldr	r2, [pc, #52]	; (8004bc0 <HAL_ETH_RxAllocateCallback+0x58>)
 8004b8c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004b96:	9201      	str	r2, [sp, #4]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2241      	movs	r2, #65	; 0x41
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	f008 fc1f 	bl	800d3e4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004ba6:	e005      	b.n	8004bb4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	0801e190 	.word	0x0801e190
 8004bc0:	080047e1 	.word	0x080047e1
 8004bc4:	20004b3c 	.word	0x20004b3c

08004bc8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b089      	sub	sp, #36	; 0x24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3b20      	subs	r3, #32
 8004be6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	887a      	ldrh	r2, [r7, #2]
 8004bf8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d103      	bne.n	8004c0a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	69fa      	ldr	r2, [r7, #28]
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	e003      	b.n	8004c12 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	69fa      	ldr	r2, [r7, #28]
 8004c16:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	61fb      	str	r3, [r7, #28]
 8004c1e:	e009      	b.n	8004c34 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	891a      	ldrh	r2, [r3, #8]
 8004c24:	887b      	ldrh	r3, [r7, #2]
 8004c26:	4413      	add	r3, r2
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f2      	bne.n	8004c20 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004c3a:	bf00      	nop
 8004c3c:	bf00      	nop
 8004c3e:	3724      	adds	r7, #36	; 0x24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f008 fdb3 	bl	800d7bc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <__NVIC_SetPriority>:
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4603      	mov	r3, r0
 8004c68:	6039      	str	r1, [r7, #0]
 8004c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	db0a      	blt.n	8004c8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	490c      	ldr	r1, [pc, #48]	; (8004cac <__NVIC_SetPriority+0x4c>)
 8004c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7e:	0112      	lsls	r2, r2, #4
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	440b      	add	r3, r1
 8004c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c88:	e00a      	b.n	8004ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	4908      	ldr	r1, [pc, #32]	; (8004cb0 <__NVIC_SetPriority+0x50>)
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	3b04      	subs	r3, #4
 8004c98:	0112      	lsls	r2, r2, #4
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	761a      	strb	r2, [r3, #24]
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	e000e100 	.word	0xe000e100
 8004cb0:	e000ed00 	.word	0xe000ed00

08004cb4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <SysTick_Handler+0x1c>)
 8004cba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004cbc:	f002 fd3a 	bl	8007734 <xTaskGetSchedulerState>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d001      	beq.n	8004cca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004cc6:	f003 fc1f 	bl	8008508 <xPortSysTickHandler>
  }
}
 8004cca:	bf00      	nop
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	e000e010 	.word	0xe000e010

08004cd4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004cd8:	2100      	movs	r1, #0
 8004cda:	f06f 0004 	mvn.w	r0, #4
 8004cde:	f7ff ffbf 	bl	8004c60 <__NVIC_SetPriority>
#endif
}
 8004ce2:	bf00      	nop
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cee:	f3ef 8305 	mrs	r3, IPSR
 8004cf2:	603b      	str	r3, [r7, #0]
  return(result);
 8004cf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004cfa:	f06f 0305 	mvn.w	r3, #5
 8004cfe:	607b      	str	r3, [r7, #4]
 8004d00:	e00c      	b.n	8004d1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004d02:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <osKernelInitialize+0x44>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d105      	bne.n	8004d16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004d0a:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <osKernelInitialize+0x44>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	e002      	b.n	8004d1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d1c:	687b      	ldr	r3, [r7, #4]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	20004d90 	.word	0x20004d90

08004d30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d36:	f3ef 8305 	mrs	r3, IPSR
 8004d3a:	603b      	str	r3, [r7, #0]
  return(result);
 8004d3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004d42:	f06f 0305 	mvn.w	r3, #5
 8004d46:	607b      	str	r3, [r7, #4]
 8004d48:	e010      	b.n	8004d6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <osKernelStart+0x48>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d109      	bne.n	8004d66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d52:	f7ff ffbf 	bl	8004cd4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d56:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <osKernelStart+0x48>)
 8004d58:	2202      	movs	r2, #2
 8004d5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d5c:	f002 f86c 	bl	8006e38 <vTaskStartScheduler>
      stat = osOK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	607b      	str	r3, [r7, #4]
 8004d64:	e002      	b.n	8004d6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d6c:	687b      	ldr	r3, [r7, #4]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20004d90 	.word	0x20004d90

08004d7c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d82:	f3ef 8305 	mrs	r3, IPSR
 8004d86:	603b      	str	r3, [r7, #0]
  return(result);
 8004d88:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8004d8e:	f002 f97f 	bl	8007090 <xTaskGetTickCountFromISR>
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	e002      	b.n	8004d9c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8004d96:	f002 f96b 	bl	8007070 <xTaskGetTickCount>
 8004d9a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8004d9c:	687b      	ldr	r3, [r7, #4]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b08e      	sub	sp, #56	; 0x38
 8004daa:	af04      	add	r7, sp, #16
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004db6:	f3ef 8305 	mrs	r3, IPSR
 8004dba:	617b      	str	r3, [r7, #20]
  return(result);
 8004dbc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d17e      	bne.n	8004ec0 <osThreadNew+0x11a>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d07b      	beq.n	8004ec0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004dc8:	2380      	movs	r3, #128	; 0x80
 8004dca:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004dcc:	2318      	movs	r3, #24
 8004dce:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dd8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d045      	beq.n	8004e6c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <osThreadNew+0x48>
        name = attr->name;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <osThreadNew+0x6e>
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	2b38      	cmp	r3, #56	; 0x38
 8004e06:	d805      	bhi.n	8004e14 <osThreadNew+0x6e>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <osThreadNew+0x72>
        return (NULL);
 8004e14:	2300      	movs	r3, #0
 8004e16:	e054      	b.n	8004ec2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	089b      	lsrs	r3, r3, #2
 8004e26:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00e      	beq.n	8004e4e <osThreadNew+0xa8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2bbb      	cmp	r3, #187	; 0xbb
 8004e36:	d90a      	bls.n	8004e4e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d006      	beq.n	8004e4e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <osThreadNew+0xa8>
        mem = 1;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	61bb      	str	r3, [r7, #24]
 8004e4c:	e010      	b.n	8004e70 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10c      	bne.n	8004e70 <osThreadNew+0xca>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d108      	bne.n	8004e70 <osThreadNew+0xca>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d104      	bne.n	8004e70 <osThreadNew+0xca>
          mem = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	e001      	b.n	8004e70 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d110      	bne.n	8004e98 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e7e:	9202      	str	r2, [sp, #8]
 8004e80:	9301      	str	r3, [sp, #4]
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	6a3a      	ldr	r2, [r7, #32]
 8004e8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f001 fde7 	bl	8006a60 <xTaskCreateStatic>
 8004e92:	4603      	mov	r3, r0
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	e013      	b.n	8004ec0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d110      	bne.n	8004ec0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	f107 0310 	add.w	r3, r7, #16
 8004ea6:	9301      	str	r3, [sp, #4]
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f001 fe32 	bl	8006b1a <xTaskCreate>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d001      	beq.n	8004ec0 <osThreadNew+0x11a>
            hTask = NULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ec0:	693b      	ldr	r3, [r7, #16]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3728      	adds	r7, #40	; 0x28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ed2:	f3ef 8305 	mrs	r3, IPSR
 8004ed6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <osDelay+0x1c>
    stat = osErrorISR;
 8004ede:	f06f 0305 	mvn.w	r3, #5
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	e007      	b.n	8004ef6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f001 ff6d 	bl	8006dd0 <vTaskDelay>
    }
  }

  return (stat);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b088      	sub	sp, #32
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f0c:	f3ef 8305 	mrs	r3, IPSR
 8004f10:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f12:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d174      	bne.n	8005002 <osMutexNew+0x102>
    if (attr != NULL) {
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	e001      	b.n	8004f2a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <osMutexNew+0x3a>
      rmtx = 1U;
 8004f34:	2301      	movs	r3, #1
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	e001      	b.n	8004f3e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d15c      	bne.n	8005002 <osMutexNew+0x102>
      mem = -1;
 8004f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f4c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d015      	beq.n	8004f80 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d006      	beq.n	8004f6a <osMutexNew+0x6a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	2b4f      	cmp	r3, #79	; 0x4f
 8004f62:	d902      	bls.n	8004f6a <osMutexNew+0x6a>
          mem = 1;
 8004f64:	2301      	movs	r3, #1
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	e00c      	b.n	8004f84 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d108      	bne.n	8004f84 <osMutexNew+0x84>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d104      	bne.n	8004f84 <osMutexNew+0x84>
            mem = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	e001      	b.n	8004f84 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d112      	bne.n	8004fb0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	4619      	mov	r1, r3
 8004f96:	2004      	movs	r0, #4
 8004f98:	f000 fdd1 	bl	8005b3e <xQueueCreateMutexStatic>
 8004f9c:	61f8      	str	r0, [r7, #28]
 8004f9e:	e016      	b.n	8004fce <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	f000 fdc9 	bl	8005b3e <xQueueCreateMutexStatic>
 8004fac:	61f8      	str	r0, [r7, #28]
 8004fae:	e00e      	b.n	8004fce <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10b      	bne.n	8004fce <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004fbc:	2004      	movs	r0, #4
 8004fbe:	f000 fda6 	bl	8005b0e <xQueueCreateMutex>
 8004fc2:	61f8      	str	r0, [r7, #28]
 8004fc4:	e003      	b.n	8004fce <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004fc6:	2001      	movs	r0, #1
 8004fc8:	f000 fda1 	bl	8005b0e <xQueueCreateMutex>
 8004fcc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00c      	beq.n	8004fee <osMutexNew+0xee>
        if (attr != NULL) {
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <osMutexNew+0xe2>
          name = attr->name;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	e001      	b.n	8004fe6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004fe6:	68f9      	ldr	r1, [r7, #12]
 8004fe8:	69f8      	ldr	r0, [r7, #28]
 8004fea:	f001 fcb1 	bl	8006950 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d006      	beq.n	8005002 <osMutexNew+0x102>
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	f043 0301 	orr.w	r3, r3, #1
 8005000:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005002:	69fb      	ldr	r3, [r7, #28]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3720      	adds	r7, #32
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f023 0301 	bic.w	r3, r3, #1
 800501c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800502a:	f3ef 8305 	mrs	r3, IPSR
 800502e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005030:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005036:	f06f 0305 	mvn.w	r3, #5
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	e02c      	b.n	8005098 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d103      	bne.n	800504c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005044:	f06f 0303 	mvn.w	r3, #3
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	e025      	b.n	8005098 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d011      	beq.n	8005076 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005052:	6839      	ldr	r1, [r7, #0]
 8005054:	6938      	ldr	r0, [r7, #16]
 8005056:	f000 fdc1 	bl	8005bdc <xQueueTakeMutexRecursive>
 800505a:	4603      	mov	r3, r0
 800505c:	2b01      	cmp	r3, #1
 800505e:	d01b      	beq.n	8005098 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005066:	f06f 0301 	mvn.w	r3, #1
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	e014      	b.n	8005098 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800506e:	f06f 0302 	mvn.w	r3, #2
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	e010      	b.n	8005098 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005076:	6839      	ldr	r1, [r7, #0]
 8005078:	6938      	ldr	r0, [r7, #16]
 800507a:	f001 f955 	bl	8006328 <xQueueSemaphoreTake>
 800507e:	4603      	mov	r3, r0
 8005080:	2b01      	cmp	r3, #1
 8005082:	d009      	beq.n	8005098 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800508a:	f06f 0301 	mvn.w	r3, #1
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e002      	b.n	8005098 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005092:	f06f 0302 	mvn.w	r3, #2
 8005096:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005098:	697b      	ldr	r3, [r7, #20]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b086      	sub	sp, #24
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f023 0301 	bic.w	r3, r3, #1
 80050b0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050be:	f3ef 8305 	mrs	r3, IPSR
 80050c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80050c4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <osMutexRelease+0x30>
    stat = osErrorISR;
 80050ca:	f06f 0305 	mvn.w	r3, #5
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	e01f      	b.n	8005112 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d103      	bne.n	80050e0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80050d8:	f06f 0303 	mvn.w	r3, #3
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	e018      	b.n	8005112 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d009      	beq.n	80050fa <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80050e6:	6938      	ldr	r0, [r7, #16]
 80050e8:	f000 fd44 	bl	8005b74 <xQueueGiveMutexRecursive>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d00f      	beq.n	8005112 <osMutexRelease+0x70>
        stat = osErrorResource;
 80050f2:	f06f 0302 	mvn.w	r3, #2
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	e00b      	b.n	8005112 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80050fa:	2300      	movs	r3, #0
 80050fc:	2200      	movs	r2, #0
 80050fe:	2100      	movs	r1, #0
 8005100:	6938      	ldr	r0, [r7, #16]
 8005102:	f000 fe0b 	bl	8005d1c <xQueueGenericSend>
 8005106:	4603      	mov	r3, r0
 8005108:	2b01      	cmp	r3, #1
 800510a:	d002      	beq.n	8005112 <osMutexRelease+0x70>
        stat = osErrorResource;
 800510c:	f06f 0302 	mvn.w	r3, #2
 8005110:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005112:	697b      	ldr	r3, [r7, #20]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b08a      	sub	sp, #40	; 0x28
 8005120:	af02      	add	r7, sp, #8
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005128:	2300      	movs	r3, #0
 800512a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800512c:	f3ef 8305 	mrs	r3, IPSR
 8005130:	613b      	str	r3, [r7, #16]
  return(result);
 8005132:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005134:	2b00      	cmp	r3, #0
 8005136:	d175      	bne.n	8005224 <osSemaphoreNew+0x108>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d072      	beq.n	8005224 <osSemaphoreNew+0x108>
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	429a      	cmp	r2, r3
 8005144:	d86e      	bhi.n	8005224 <osSemaphoreNew+0x108>
    mem = -1;
 8005146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800514a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d015      	beq.n	800517e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d006      	beq.n	8005168 <osSemaphoreNew+0x4c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2b4f      	cmp	r3, #79	; 0x4f
 8005160:	d902      	bls.n	8005168 <osSemaphoreNew+0x4c>
        mem = 1;
 8005162:	2301      	movs	r3, #1
 8005164:	61bb      	str	r3, [r7, #24]
 8005166:	e00c      	b.n	8005182 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d108      	bne.n	8005182 <osSemaphoreNew+0x66>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d104      	bne.n	8005182 <osSemaphoreNew+0x66>
          mem = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	61bb      	str	r3, [r7, #24]
 800517c:	e001      	b.n	8005182 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005188:	d04c      	beq.n	8005224 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d128      	bne.n	80051e2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d10a      	bne.n	80051ac <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2203      	movs	r2, #3
 800519c:	9200      	str	r2, [sp, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	2100      	movs	r1, #0
 80051a2:	2001      	movs	r0, #1
 80051a4:	f000 fbc4 	bl	8005930 <xQueueGenericCreateStatic>
 80051a8:	61f8      	str	r0, [r7, #28]
 80051aa:	e005      	b.n	80051b8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80051ac:	2203      	movs	r2, #3
 80051ae:	2100      	movs	r1, #0
 80051b0:	2001      	movs	r0, #1
 80051b2:	f000 fc35 	bl	8005a20 <xQueueGenericCreate>
 80051b6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d022      	beq.n	8005204 <osSemaphoreNew+0xe8>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01f      	beq.n	8005204 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80051c4:	2300      	movs	r3, #0
 80051c6:	2200      	movs	r2, #0
 80051c8:	2100      	movs	r1, #0
 80051ca:	69f8      	ldr	r0, [r7, #28]
 80051cc:	f000 fda6 	bl	8005d1c <xQueueGenericSend>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d016      	beq.n	8005204 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80051d6:	69f8      	ldr	r0, [r7, #28]
 80051d8:	f001 fa6e 	bl	80066b8 <vQueueDelete>
            hSemaphore = NULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	61fb      	str	r3, [r7, #28]
 80051e0:	e010      	b.n	8005204 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d108      	bne.n	80051fa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	461a      	mov	r2, r3
 80051ee:	68b9      	ldr	r1, [r7, #8]
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 fd29 	bl	8005c48 <xQueueCreateCountingSemaphoreStatic>
 80051f6:	61f8      	str	r0, [r7, #28]
 80051f8:	e004      	b.n	8005204 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 fd5a 	bl	8005cb6 <xQueueCreateCountingSemaphore>
 8005202:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00c      	beq.n	8005224 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	e001      	b.n	800521c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800521c:	6979      	ldr	r1, [r7, #20]
 800521e:	69f8      	ldr	r0, [r7, #28]
 8005220:	f001 fb96 	bl	8006950 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005224:	69fb      	ldr	r3, [r7, #28]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d103      	bne.n	8005250 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005248:	f06f 0303 	mvn.w	r3, #3
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	e039      	b.n	80052c4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005250:	f3ef 8305 	mrs	r3, IPSR
 8005254:	60fb      	str	r3, [r7, #12]
  return(result);
 8005256:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005258:	2b00      	cmp	r3, #0
 800525a:	d022      	beq.n	80052a2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005262:	f06f 0303 	mvn.w	r3, #3
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	e02c      	b.n	80052c4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800526a:	2300      	movs	r3, #0
 800526c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800526e:	f107 0308 	add.w	r3, r7, #8
 8005272:	461a      	mov	r2, r3
 8005274:	2100      	movs	r1, #0
 8005276:	6938      	ldr	r0, [r7, #16]
 8005278:	f001 f962 	bl	8006540 <xQueueReceiveFromISR>
 800527c:	4603      	mov	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d003      	beq.n	800528a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005282:	f06f 0302 	mvn.w	r3, #2
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	e01c      	b.n	80052c4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d019      	beq.n	80052c4 <osSemaphoreAcquire+0x94>
 8005290:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <osSemaphoreAcquire+0xa0>)
 8005292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	e010      	b.n	80052c4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80052a2:	6839      	ldr	r1, [r7, #0]
 80052a4:	6938      	ldr	r0, [r7, #16]
 80052a6:	f001 f83f 	bl	8006328 <xQueueSemaphoreTake>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d009      	beq.n	80052c4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80052b6:	f06f 0301 	mvn.w	r3, #1
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	e002      	b.n	80052c4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80052be:	f06f 0302 	mvn.w	r3, #2
 80052c2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80052c4:	697b      	ldr	r3, [r7, #20]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	e000ed04 	.word	0xe000ed04

080052d4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d103      	bne.n	80052f2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80052ea:	f06f 0303 	mvn.w	r3, #3
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e02c      	b.n	800534c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052f2:	f3ef 8305 	mrs	r3, IPSR
 80052f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80052f8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d01a      	beq.n	8005334 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80052fe:	2300      	movs	r3, #0
 8005300:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005302:	f107 0308 	add.w	r3, r7, #8
 8005306:	4619      	mov	r1, r3
 8005308:	6938      	ldr	r0, [r7, #16]
 800530a:	f000 fea0 	bl	800604e <xQueueGiveFromISR>
 800530e:	4603      	mov	r3, r0
 8005310:	2b01      	cmp	r3, #1
 8005312:	d003      	beq.n	800531c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005314:	f06f 0302 	mvn.w	r3, #2
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	e017      	b.n	800534c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d014      	beq.n	800534c <osSemaphoreRelease+0x78>
 8005322:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <osSemaphoreRelease+0x84>)
 8005324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	e00b      	b.n	800534c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005334:	2300      	movs	r3, #0
 8005336:	2200      	movs	r2, #0
 8005338:	2100      	movs	r1, #0
 800533a:	6938      	ldr	r0, [r7, #16]
 800533c:	f000 fcee 	bl	8005d1c <xQueueGenericSend>
 8005340:	4603      	mov	r3, r0
 8005342:	2b01      	cmp	r3, #1
 8005344:	d002      	beq.n	800534c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005346:	f06f 0302 	mvn.w	r3, #2
 800534a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800534c:	697b      	ldr	r3, [r7, #20]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005368:	f3ef 8305 	mrs	r3, IPSR
 800536c:	60fb      	str	r3, [r7, #12]
  return(result);
 800536e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8005374:	f06f 0305 	mvn.w	r3, #5
 8005378:	617b      	str	r3, [r7, #20]
 800537a:	e00e      	b.n	800539a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d103      	bne.n	800538a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8005382:	f06f 0303 	mvn.w	r3, #3
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	e007      	b.n	800539a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800538a:	6938      	ldr	r0, [r7, #16]
 800538c:	f001 fb0a 	bl	80069a4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005390:	2300      	movs	r3, #0
 8005392:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8005394:	6938      	ldr	r0, [r7, #16]
 8005396:	f001 f98f 	bl	80066b8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800539a:	697b      	ldr	r3, [r7, #20]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	; 0x28
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80053b0:	2300      	movs	r3, #0
 80053b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053b4:	f3ef 8305 	mrs	r3, IPSR
 80053b8:	613b      	str	r3, [r7, #16]
  return(result);
 80053ba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d15f      	bne.n	8005480 <osMessageQueueNew+0xdc>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d05c      	beq.n	8005480 <osMessageQueueNew+0xdc>
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d059      	beq.n	8005480 <osMessageQueueNew+0xdc>
    mem = -1;
 80053cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d029      	beq.n	800542c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d012      	beq.n	8005406 <osMessageQueueNew+0x62>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b4f      	cmp	r3, #79	; 0x4f
 80053e6:	d90e      	bls.n	8005406 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d302      	bcc.n	8005406 <osMessageQueueNew+0x62>
        mem = 1;
 8005400:	2301      	movs	r3, #1
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	e014      	b.n	8005430 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d110      	bne.n	8005430 <osMessageQueueNew+0x8c>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10c      	bne.n	8005430 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800541a:	2b00      	cmp	r3, #0
 800541c:	d108      	bne.n	8005430 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d104      	bne.n	8005430 <osMessageQueueNew+0x8c>
          mem = 0;
 8005426:	2300      	movs	r3, #0
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	e001      	b.n	8005430 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d10b      	bne.n	800544e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2100      	movs	r1, #0
 8005440:	9100      	str	r1, [sp, #0]
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 fa73 	bl	8005930 <xQueueGenericCreateStatic>
 800544a:	61f8      	str	r0, [r7, #28]
 800544c:	e008      	b.n	8005460 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d105      	bne.n	8005460 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005454:	2200      	movs	r2, #0
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 fae1 	bl	8005a20 <xQueueGenericCreate>
 800545e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00c      	beq.n	8005480 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <osMessageQueueNew+0xd0>
        name = attr->name;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e001      	b.n	8005478 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005478:	6979      	ldr	r1, [r7, #20]
 800547a:	69f8      	ldr	r0, [r7, #28]
 800547c:	f001 fa68 	bl	8006950 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005480:	69fb      	ldr	r3, [r7, #28]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3720      	adds	r7, #32
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054a4:	f3ef 8305 	mrs	r3, IPSR
 80054a8:	617b      	str	r3, [r7, #20]
  return(result);
 80054aa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d028      	beq.n	8005502 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <osMessageQueuePut+0x36>
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <osMessageQueuePut+0x36>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80054c2:	f06f 0303 	mvn.w	r3, #3
 80054c6:	61fb      	str	r3, [r7, #28]
 80054c8:	e038      	b.n	800553c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80054ca:	2300      	movs	r3, #0
 80054cc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80054ce:	f107 0210 	add.w	r2, r7, #16
 80054d2:	2300      	movs	r3, #0
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	69b8      	ldr	r0, [r7, #24]
 80054d8:	f000 fd1e 	bl	8005f18 <xQueueGenericSendFromISR>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d003      	beq.n	80054ea <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80054e2:	f06f 0302 	mvn.w	r3, #2
 80054e6:	61fb      	str	r3, [r7, #28]
 80054e8:	e028      	b.n	800553c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d025      	beq.n	800553c <osMessageQueuePut+0xb0>
 80054f0:	4b15      	ldr	r3, [pc, #84]	; (8005548 <osMessageQueuePut+0xbc>)
 80054f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	e01c      	b.n	800553c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <osMessageQueuePut+0x82>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d103      	bne.n	8005516 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800550e:	f06f 0303 	mvn.w	r3, #3
 8005512:	61fb      	str	r3, [r7, #28]
 8005514:	e012      	b.n	800553c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005516:	2300      	movs	r3, #0
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	69b8      	ldr	r0, [r7, #24]
 800551e:	f000 fbfd 	bl	8005d1c <xQueueGenericSend>
 8005522:	4603      	mov	r3, r0
 8005524:	2b01      	cmp	r3, #1
 8005526:	d009      	beq.n	800553c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800552e:	f06f 0301 	mvn.w	r3, #1
 8005532:	61fb      	str	r3, [r7, #28]
 8005534:	e002      	b.n	800553c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005536:	f06f 0302 	mvn.w	r3, #2
 800553a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800553c:	69fb      	ldr	r3, [r7, #28]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3720      	adds	r7, #32
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	e000ed04 	.word	0xe000ed04

0800554c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800555e:	2300      	movs	r3, #0
 8005560:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005562:	f3ef 8305 	mrs	r3, IPSR
 8005566:	617b      	str	r3, [r7, #20]
  return(result);
 8005568:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800556a:	2b00      	cmp	r3, #0
 800556c:	d028      	beq.n	80055c0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <osMessageQueueGet+0x34>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <osMessageQueueGet+0x34>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005580:	f06f 0303 	mvn.w	r3, #3
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	e037      	b.n	80055f8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005588:	2300      	movs	r3, #0
 800558a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800558c:	f107 0310 	add.w	r3, r7, #16
 8005590:	461a      	mov	r2, r3
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	69b8      	ldr	r0, [r7, #24]
 8005596:	f000 ffd3 	bl	8006540 <xQueueReceiveFromISR>
 800559a:	4603      	mov	r3, r0
 800559c:	2b01      	cmp	r3, #1
 800559e:	d003      	beq.n	80055a8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80055a0:	f06f 0302 	mvn.w	r3, #2
 80055a4:	61fb      	str	r3, [r7, #28]
 80055a6:	e027      	b.n	80055f8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d024      	beq.n	80055f8 <osMessageQueueGet+0xac>
 80055ae:	4b15      	ldr	r3, [pc, #84]	; (8005604 <osMessageQueueGet+0xb8>)
 80055b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	e01b      	b.n	80055f8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <osMessageQueueGet+0x80>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d103      	bne.n	80055d4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80055cc:	f06f 0303 	mvn.w	r3, #3
 80055d0:	61fb      	str	r3, [r7, #28]
 80055d2:	e011      	b.n	80055f8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	69b8      	ldr	r0, [r7, #24]
 80055da:	f000 fdc5 	bl	8006168 <xQueueReceive>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d009      	beq.n	80055f8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80055ea:	f06f 0301 	mvn.w	r3, #1
 80055ee:	61fb      	str	r3, [r7, #28]
 80055f0:	e002      	b.n	80055f8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80055f2:	f06f 0302 	mvn.w	r3, #2
 80055f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80055f8:	69fb      	ldr	r3, [r7, #28]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	e000ed04 	.word	0xe000ed04

08005608 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d102      	bne.n	8005620 <osMessageQueueGetCount+0x18>
    count = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	e00e      	b.n	800563e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005620:	f3ef 8305 	mrs	r3, IPSR
 8005624:	60fb      	str	r3, [r7, #12]
  return(result);
 8005626:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005628:	2b00      	cmp	r3, #0
 800562a:	d004      	beq.n	8005636 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800562c:	6938      	ldr	r0, [r7, #16]
 800562e:	f001 f825 	bl	800667c <uxQueueMessagesWaitingFromISR>
 8005632:	6178      	str	r0, [r7, #20]
 8005634:	e003      	b.n	800563e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005636:	6938      	ldr	r0, [r7, #16]
 8005638:	f001 f802 	bl	8006640 <uxQueueMessagesWaiting>
 800563c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800563e:	697b      	ldr	r3, [r7, #20]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005654:	f3ef 8305 	mrs	r3, IPSR
 8005658:	60fb      	str	r3, [r7, #12]
  return(result);
 800565a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8005660:	f06f 0305 	mvn.w	r3, #5
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	e00e      	b.n	8005686 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d103      	bne.n	8005676 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800566e:	f06f 0303 	mvn.w	r3, #3
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	e007      	b.n	8005686 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8005676:	6938      	ldr	r0, [r7, #16]
 8005678:	f001 f994 	bl	80069a4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8005680:	6938      	ldr	r0, [r7, #16]
 8005682:	f001 f819 	bl	80066b8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005686:	697b      	ldr	r3, [r7, #20]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4a07      	ldr	r2, [pc, #28]	; (80056bc <vApplicationGetIdleTaskMemory+0x2c>)
 80056a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4a06      	ldr	r2, [pc, #24]	; (80056c0 <vApplicationGetIdleTaskMemory+0x30>)
 80056a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2280      	movs	r2, #128	; 0x80
 80056ac:	601a      	str	r2, [r3, #0]
}
 80056ae:	bf00      	nop
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	20004d94 	.word	0x20004d94
 80056c0:	20004e50 	.word	0x20004e50

080056c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4a07      	ldr	r2, [pc, #28]	; (80056f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80056d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	4a06      	ldr	r2, [pc, #24]	; (80056f4 <vApplicationGetTimerTaskMemory+0x30>)
 80056da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	20005050 	.word	0x20005050
 80056f4:	2000510c 	.word	0x2000510c

080056f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f103 0208 	add.w	r2, r3, #8
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005710:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f103 0208 	add.w	r2, r3, #8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f103 0208 	add.w	r2, r3, #8
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005752:	b480      	push	{r7}
 8005754:	b085      	sub	sp, #20
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	601a      	str	r2, [r3, #0]
}
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800579a:	b480      	push	{r7}
 800579c:	b085      	sub	sp, #20
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057b0:	d103      	bne.n	80057ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	e00c      	b.n	80057d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3308      	adds	r3, #8
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	e002      	b.n	80057c8 <vListInsert+0x2e>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d2f6      	bcs.n	80057c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	601a      	str	r2, [r3, #0]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6892      	ldr	r2, [r2, #8]
 8005822:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6852      	ldr	r2, [r2, #4]
 800582c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	429a      	cmp	r2, r3
 8005836:	d103      	bne.n	8005840 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	1e5a      	subs	r2, r3, #1
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10a      	bne.n	800588a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005886:	bf00      	nop
 8005888:	e7fe      	b.n	8005888 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800588a:	f002 fdab 	bl	80083e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005896:	68f9      	ldr	r1, [r7, #12]
 8005898:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800589a:	fb01 f303 	mul.w	r3, r1, r3
 800589e:	441a      	add	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ba:	3b01      	subs	r3, #1
 80058bc:	68f9      	ldr	r1, [r7, #12]
 80058be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	441a      	add	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	22ff      	movs	r2, #255	; 0xff
 80058ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	22ff      	movs	r2, #255	; 0xff
 80058d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d114      	bne.n	800590a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01a      	beq.n	800591e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3310      	adds	r3, #16
 80058ec:	4618      	mov	r0, r3
 80058ee:	f001 fd4f 	bl	8007390 <xTaskRemoveFromEventList>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d012      	beq.n	800591e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058f8:	4b0c      	ldr	r3, [pc, #48]	; (800592c <xQueueGenericReset+0xcc>)
 80058fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	e009      	b.n	800591e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	3310      	adds	r3, #16
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff fef2 	bl	80056f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3324      	adds	r3, #36	; 0x24
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff feed 	bl	80056f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800591e:	f002 fd91 	bl	8008444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005922:	2301      	movs	r3, #1
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	e000ed04 	.word	0xe000ed04

08005930 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08e      	sub	sp, #56	; 0x38
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005956:	bf00      	nop
 8005958:	e7fe      	b.n	8005958 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005972:	bf00      	nop
 8005974:	e7fe      	b.n	8005974 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <xQueueGenericCreateStatic+0x52>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <xQueueGenericCreateStatic+0x56>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <xQueueGenericCreateStatic+0x58>
 8005986:	2300      	movs	r3, #0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	623b      	str	r3, [r7, #32]
}
 800599e:	bf00      	nop
 80059a0:	e7fe      	b.n	80059a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d102      	bne.n	80059ae <xQueueGenericCreateStatic+0x7e>
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <xQueueGenericCreateStatic+0x82>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <xQueueGenericCreateStatic+0x84>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	61fb      	str	r3, [r7, #28]
}
 80059ca:	bf00      	nop
 80059cc:	e7fe      	b.n	80059cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059ce:	2350      	movs	r3, #80	; 0x50
 80059d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b50      	cmp	r3, #80	; 0x50
 80059d6:	d00a      	beq.n	80059ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	61bb      	str	r3, [r7, #24]
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00d      	beq.n	8005a16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f83f 	bl	8005a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3730      	adds	r7, #48	; 0x30
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	; 0x28
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	613b      	str	r3, [r7, #16]
}
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	fb02 f303 	mul.w	r3, r2, r3
 8005a52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	3350      	adds	r3, #80	; 0x50
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f002 fde5 	bl	8008628 <pvPortMalloc>
 8005a5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d011      	beq.n	8005a8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	3350      	adds	r3, #80	; 0x50
 8005a6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a78:	79fa      	ldrb	r2, [r7, #7]
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f805 	bl	8005a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a8a:	69bb      	ldr	r3, [r7, #24]
	}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3720      	adds	r7, #32
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d103      	bne.n	8005ab0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	e002      	b.n	8005ab6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	69b8      	ldr	r0, [r7, #24]
 8005ac6:	f7ff fecb 	bl	8005860 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	78fa      	ldrb	r2, [r7, #3]
 8005ace:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ad2:	bf00      	nop
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b082      	sub	sp, #8
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00e      	beq.n	8005b06 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005afa:	2300      	movs	r3, #0
 8005afc:	2200      	movs	r2, #0
 8005afe:	2100      	movs	r1, #0
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f90b 	bl	8005d1c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005b06:	bf00      	nop
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b086      	sub	sp, #24
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	4603      	mov	r3, r0
 8005b16:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	617b      	str	r3, [r7, #20]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	461a      	mov	r2, r3
 8005b24:	6939      	ldr	r1, [r7, #16]
 8005b26:	6978      	ldr	r0, [r7, #20]
 8005b28:	f7ff ff7a 	bl	8005a20 <xQueueGenericCreate>
 8005b2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f7ff ffd3 	bl	8005ada <prvInitialiseMutex>

		return xNewQueue;
 8005b34:	68fb      	ldr	r3, [r7, #12]
	}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b088      	sub	sp, #32
 8005b42:	af02      	add	r7, sp, #8
 8005b44:	4603      	mov	r3, r0
 8005b46:	6039      	str	r1, [r7, #0]
 8005b48:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	6939      	ldr	r1, [r7, #16]
 8005b5c:	6978      	ldr	r0, [r7, #20]
 8005b5e:	f7ff fee7 	bl	8005930 <xQueueGenericCreateStatic>
 8005b62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f7ff ffb8 	bl	8005ada <prvInitialiseMutex>

		return xNewQueue;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
	}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005b74:	b590      	push	{r4, r7, lr}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10a      	bne.n	8005b9c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	60fb      	str	r3, [r7, #12]
}
 8005b98:	bf00      	nop
 8005b9a:	e7fe      	b.n	8005b9a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	689c      	ldr	r4, [r3, #8]
 8005ba0:	f001 fdb8 	bl	8007714 <xTaskGetCurrentTaskHandle>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	429c      	cmp	r4, r3
 8005ba8:	d111      	bne.n	8005bce <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	1e5a      	subs	r2, r3, #1
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d105      	bne.n	8005bc8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	6938      	ldr	r0, [r7, #16]
 8005bc4:	f000 f8aa 	bl	8005d1c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	e001      	b.n	8005bd2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005bd2:	697b      	ldr	r3, [r7, #20]
	}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	371c      	adds	r7, #28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd90      	pop	{r4, r7, pc}

08005bdc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	60fb      	str	r3, [r7, #12]
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	689c      	ldr	r4, [r3, #8]
 8005c0a:	f001 fd83 	bl	8007714 <xTaskGetCurrentTaskHandle>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	429c      	cmp	r4, r3
 8005c12:	d107      	bne.n	8005c24 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	e00c      	b.n	8005c3e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6938      	ldr	r0, [r7, #16]
 8005c28:	f000 fb7e 	bl	8006328 <xQueueSemaphoreTake>
 8005c2c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d004      	beq.n	8005c3e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005c3e:	697b      	ldr	r3, [r7, #20]
	}
 8005c40:	4618      	mov	r0, r3
 8005c42:	371c      	adds	r7, #28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd90      	pop	{r4, r7, pc}

08005c48 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	; 0x28
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10a      	bne.n	8005c70 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	61bb      	str	r3, [r7, #24]
}
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d90a      	bls.n	8005c8e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	617b      	str	r3, [r7, #20]
}
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005c8e:	2302      	movs	r3, #2
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	2100      	movs	r1, #0
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f7ff fe49 	bl	8005930 <xQueueGenericCreateStatic>
 8005c9e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005cac:	69fb      	ldr	r3, [r7, #28]
	}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3720      	adds	r7, #32
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b086      	sub	sp, #24
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10a      	bne.n	8005cdc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	613b      	str	r3, [r7, #16]
}
 8005cd8:	bf00      	nop
 8005cda:	e7fe      	b.n	8005cda <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d90a      	bls.n	8005cfa <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	60fb      	str	r3, [r7, #12]
}
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff fe8e 	bl	8005a20 <xQueueGenericCreate>
 8005d04:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005d12:	697b      	ldr	r3, [r7, #20]
	}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08e      	sub	sp, #56	; 0x38
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <xQueueGenericSend+0x32>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d4a:	bf00      	nop
 8005d4c:	e7fe      	b.n	8005d4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d103      	bne.n	8005d5c <xQueueGenericSend+0x40>
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <xQueueGenericSend+0x44>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e000      	b.n	8005d62 <xQueueGenericSend+0x46>
 8005d60:	2300      	movs	r3, #0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10a      	bne.n	8005d7c <xQueueGenericSend+0x60>
	__asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d103      	bne.n	8005d8a <xQueueGenericSend+0x6e>
 8005d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <xQueueGenericSend+0x72>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <xQueueGenericSend+0x74>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <xQueueGenericSend+0x8e>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	623b      	str	r3, [r7, #32]
}
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005daa:	f001 fcc3 	bl	8007734 <xTaskGetSchedulerState>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d102      	bne.n	8005dba <xQueueGenericSend+0x9e>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <xQueueGenericSend+0xa2>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <xQueueGenericSend+0xa4>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <xQueueGenericSend+0xbe>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	61fb      	str	r3, [r7, #28]
}
 8005dd6:	bf00      	nop
 8005dd8:	e7fe      	b.n	8005dd8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dda:	f002 fb03 	bl	80083e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d302      	bcc.n	8005df0 <xQueueGenericSend+0xd4>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d129      	bne.n	8005e44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	68b9      	ldr	r1, [r7, #8]
 8005df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005df6:	f000 fc9a 	bl	800672e <prvCopyDataToQueue>
 8005dfa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d010      	beq.n	8005e26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	3324      	adds	r3, #36	; 0x24
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f001 fac1 	bl	8007390 <xTaskRemoveFromEventList>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d013      	beq.n	8005e3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e14:	4b3f      	ldr	r3, [pc, #252]	; (8005f14 <xQueueGenericSend+0x1f8>)
 8005e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	e00a      	b.n	8005e3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e2c:	4b39      	ldr	r3, [pc, #228]	; (8005f14 <xQueueGenericSend+0x1f8>)
 8005e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e3c:	f002 fb02 	bl	8008444 <vPortExitCritical>
				return pdPASS;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e063      	b.n	8005f0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d103      	bne.n	8005e52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e4a:	f002 fafb 	bl	8008444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e05c      	b.n	8005f0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d106      	bne.n	8005e66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e58:	f107 0314 	add.w	r3, r7, #20
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 fafb 	bl	8007458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e62:	2301      	movs	r3, #1
 8005e64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e66:	f002 faed 	bl	8008444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e6a:	f001 f855 	bl	8006f18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e6e:	f002 fab9 	bl	80083e4 <vPortEnterCritical>
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e78:	b25b      	sxtb	r3, r3
 8005e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e7e:	d103      	bne.n	8005e88 <xQueueGenericSend+0x16c>
 8005e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e8e:	b25b      	sxtb	r3, r3
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e94:	d103      	bne.n	8005e9e <xQueueGenericSend+0x182>
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e9e:	f002 fad1 	bl	8008444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ea2:	1d3a      	adds	r2, r7, #4
 8005ea4:	f107 0314 	add.w	r3, r7, #20
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 faea 	bl	8007484 <xTaskCheckForTimeOut>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d124      	bne.n	8005f00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005eb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eb8:	f000 fd31 	bl	800691e <prvIsQueueFull>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d018      	beq.n	8005ef4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	3310      	adds	r3, #16
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f001 fa10 	bl	80072f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ed2:	f000 fcbc 	bl	800684e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ed6:	f001 f82d 	bl	8006f34 <xTaskResumeAll>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f47f af7c 	bne.w	8005dda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005ee2:	4b0c      	ldr	r3, [pc, #48]	; (8005f14 <xQueueGenericSend+0x1f8>)
 8005ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	e772      	b.n	8005dda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ef6:	f000 fcaa 	bl	800684e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005efa:	f001 f81b 	bl	8006f34 <xTaskResumeAll>
 8005efe:	e76c      	b.n	8005dda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f02:	f000 fca4 	bl	800684e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f06:	f001 f815 	bl	8006f34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3738      	adds	r7, #56	; 0x38
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	e000ed04 	.word	0xe000ed04

08005f18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b090      	sub	sp, #64	; 0x40
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10a      	bne.n	8005f46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f42:	bf00      	nop
 8005f44:	e7fe      	b.n	8005f44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d103      	bne.n	8005f54 <xQueueGenericSendFromISR+0x3c>
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <xQueueGenericSendFromISR+0x40>
 8005f54:	2301      	movs	r3, #1
 8005f56:	e000      	b.n	8005f5a <xQueueGenericSendFromISR+0x42>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10a      	bne.n	8005f74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f70:	bf00      	nop
 8005f72:	e7fe      	b.n	8005f72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d103      	bne.n	8005f82 <xQueueGenericSendFromISR+0x6a>
 8005f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d101      	bne.n	8005f86 <xQueueGenericSendFromISR+0x6e>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e000      	b.n	8005f88 <xQueueGenericSendFromISR+0x70>
 8005f86:	2300      	movs	r3, #0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10a      	bne.n	8005fa2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	623b      	str	r3, [r7, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fa2:	f002 fb01 	bl	80085a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005fa6:	f3ef 8211 	mrs	r2, BASEPRI
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	61fa      	str	r2, [r7, #28]
 8005fbc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005fbe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d302      	bcc.n	8005fd4 <xQueueGenericSendFromISR+0xbc>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d12f      	bne.n	8006034 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	68b9      	ldr	r1, [r7, #8]
 8005fe8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fea:	f000 fba0 	bl	800672e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ff6:	d112      	bne.n	800601e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d016      	beq.n	800602e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006002:	3324      	adds	r3, #36	; 0x24
 8006004:	4618      	mov	r0, r3
 8006006:	f001 f9c3 	bl	8007390 <xTaskRemoveFromEventList>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00e      	beq.n	800602e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00b      	beq.n	800602e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	e007      	b.n	800602e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800601e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006022:	3301      	adds	r3, #1
 8006024:	b2db      	uxtb	r3, r3
 8006026:	b25a      	sxtb	r2, r3
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800602e:	2301      	movs	r3, #1
 8006030:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006032:	e001      	b.n	8006038 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006034:	2300      	movs	r3, #0
 8006036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006042:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006046:	4618      	mov	r0, r3
 8006048:	3740      	adds	r7, #64	; 0x40
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b08e      	sub	sp, #56	; 0x38
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10a      	bne.n	8006078 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	623b      	str	r3, [r7, #32]
}
 8006074:	bf00      	nop
 8006076:	e7fe      	b.n	8006076 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00a      	beq.n	8006096 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	61fb      	str	r3, [r7, #28]
}
 8006092:	bf00      	nop
 8006094:	e7fe      	b.n	8006094 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d103      	bne.n	80060a6 <xQueueGiveFromISR+0x58>
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <xQueueGiveFromISR+0x5c>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <xQueueGiveFromISR+0x5e>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	61bb      	str	r3, [r7, #24]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060c6:	f002 fa6f 	bl	80085a8 <vPortValidateInterruptPriority>
	__asm volatile
 80060ca:	f3ef 8211 	mrs	r2, BASEPRI
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	617a      	str	r2, [r7, #20]
 80060e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80060e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d22b      	bcs.n	800614e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006108:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800610c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006110:	d112      	bne.n	8006138 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	2b00      	cmp	r3, #0
 8006118:	d016      	beq.n	8006148 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	3324      	adds	r3, #36	; 0x24
 800611e:	4618      	mov	r0, r3
 8006120:	f001 f936 	bl	8007390 <xTaskRemoveFromEventList>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00e      	beq.n	8006148 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00b      	beq.n	8006148 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2201      	movs	r2, #1
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	e007      	b.n	8006148 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800613c:	3301      	adds	r3, #1
 800613e:	b2db      	uxtb	r3, r3
 8006140:	b25a      	sxtb	r2, r3
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006148:	2301      	movs	r3, #1
 800614a:	637b      	str	r3, [r7, #52]	; 0x34
 800614c:	e001      	b.n	8006152 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800614e:	2300      	movs	r3, #0
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f383 8811 	msr	BASEPRI, r3
}
 800615c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006160:	4618      	mov	r0, r3
 8006162:	3738      	adds	r7, #56	; 0x38
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08c      	sub	sp, #48	; 0x30
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006174:	2300      	movs	r3, #0
 8006176:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10a      	bne.n	8006198 <xQueueReceive+0x30>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	623b      	str	r3, [r7, #32]
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d103      	bne.n	80061a6 <xQueueReceive+0x3e>
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <xQueueReceive+0x42>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e000      	b.n	80061ac <xQueueReceive+0x44>
 80061aa:	2300      	movs	r3, #0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <xQueueReceive+0x5e>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	61fb      	str	r3, [r7, #28]
}
 80061c2:	bf00      	nop
 80061c4:	e7fe      	b.n	80061c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061c6:	f001 fab5 	bl	8007734 <xTaskGetSchedulerState>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d102      	bne.n	80061d6 <xQueueReceive+0x6e>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <xQueueReceive+0x72>
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <xQueueReceive+0x74>
 80061da:	2300      	movs	r3, #0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <xQueueReceive+0x8e>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	61bb      	str	r3, [r7, #24]
}
 80061f2:	bf00      	nop
 80061f4:	e7fe      	b.n	80061f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061f6:	f002 f8f5 	bl	80083e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01f      	beq.n	8006246 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800620a:	f000 fafa 	bl	8006802 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	1e5a      	subs	r2, r3, #1
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00f      	beq.n	800623e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	3310      	adds	r3, #16
 8006222:	4618      	mov	r0, r3
 8006224:	f001 f8b4 	bl	8007390 <xTaskRemoveFromEventList>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d007      	beq.n	800623e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800622e:	4b3d      	ldr	r3, [pc, #244]	; (8006324 <xQueueReceive+0x1bc>)
 8006230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800623e:	f002 f901 	bl	8008444 <vPortExitCritical>
				return pdPASS;
 8006242:	2301      	movs	r3, #1
 8006244:	e069      	b.n	800631a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d103      	bne.n	8006254 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800624c:	f002 f8fa 	bl	8008444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006250:	2300      	movs	r3, #0
 8006252:	e062      	b.n	800631a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d106      	bne.n	8006268 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800625a:	f107 0310 	add.w	r3, r7, #16
 800625e:	4618      	mov	r0, r3
 8006260:	f001 f8fa 	bl	8007458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006264:	2301      	movs	r3, #1
 8006266:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006268:	f002 f8ec 	bl	8008444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800626c:	f000 fe54 	bl	8006f18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006270:	f002 f8b8 	bl	80083e4 <vPortEnterCritical>
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800627a:	b25b      	sxtb	r3, r3
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006280:	d103      	bne.n	800628a <xQueueReceive+0x122>
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006290:	b25b      	sxtb	r3, r3
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006296:	d103      	bne.n	80062a0 <xQueueReceive+0x138>
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062a0:	f002 f8d0 	bl	8008444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062a4:	1d3a      	adds	r2, r7, #4
 80062a6:	f107 0310 	add.w	r3, r7, #16
 80062aa:	4611      	mov	r1, r2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f001 f8e9 	bl	8007484 <xTaskCheckForTimeOut>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d123      	bne.n	8006300 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ba:	f000 fb1a 	bl	80068f2 <prvIsQueueEmpty>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d017      	beq.n	80062f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	3324      	adds	r3, #36	; 0x24
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	4611      	mov	r1, r2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f001 f80f 	bl	80072f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062d4:	f000 fabb 	bl	800684e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062d8:	f000 fe2c 	bl	8006f34 <xTaskResumeAll>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d189      	bne.n	80061f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80062e2:	4b10      	ldr	r3, [pc, #64]	; (8006324 <xQueueReceive+0x1bc>)
 80062e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	e780      	b.n	80061f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062f6:	f000 faaa 	bl	800684e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062fa:	f000 fe1b 	bl	8006f34 <xTaskResumeAll>
 80062fe:	e77a      	b.n	80061f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006302:	f000 faa4 	bl	800684e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006306:	f000 fe15 	bl	8006f34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800630a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800630c:	f000 faf1 	bl	80068f2 <prvIsQueueEmpty>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	f43f af6f 	beq.w	80061f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006318:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800631a:	4618      	mov	r0, r3
 800631c:	3730      	adds	r7, #48	; 0x30
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	e000ed04 	.word	0xe000ed04

08006328 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08e      	sub	sp, #56	; 0x38
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006332:	2300      	movs	r3, #0
 8006334:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800633a:	2300      	movs	r3, #0
 800633c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	623b      	str	r3, [r7, #32]
}
 8006356:	bf00      	nop
 8006358:	e7fe      	b.n	8006358 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800635a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	61fb      	str	r3, [r7, #28]
}
 8006374:	bf00      	nop
 8006376:	e7fe      	b.n	8006376 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006378:	f001 f9dc 	bl	8007734 <xTaskGetSchedulerState>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d102      	bne.n	8006388 <xQueueSemaphoreTake+0x60>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <xQueueSemaphoreTake+0x64>
 8006388:	2301      	movs	r3, #1
 800638a:	e000      	b.n	800638e <xQueueSemaphoreTake+0x66>
 800638c:	2300      	movs	r3, #0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	61bb      	str	r3, [r7, #24]
}
 80063a4:	bf00      	nop
 80063a6:	e7fe      	b.n	80063a6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063a8:	f002 f81c 	bl	80083e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d024      	beq.n	8006402 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	1e5a      	subs	r2, r3, #1
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d104      	bne.n	80063d2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80063c8:	f001 fb2a 	bl	8007a20 <pvTaskIncrementMutexHeldCount>
 80063cc:	4602      	mov	r2, r0
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00f      	beq.n	80063fa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063dc:	3310      	adds	r3, #16
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 ffd6 	bl	8007390 <xTaskRemoveFromEventList>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063ea:	4b54      	ldr	r3, [pc, #336]	; (800653c <xQueueSemaphoreTake+0x214>)
 80063ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063fa:	f002 f823 	bl	8008444 <vPortExitCritical>
				return pdPASS;
 80063fe:	2301      	movs	r3, #1
 8006400:	e097      	b.n	8006532 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d111      	bne.n	800642c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	617b      	str	r3, [r7, #20]
}
 8006420:	bf00      	nop
 8006422:	e7fe      	b.n	8006422 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006424:	f002 f80e 	bl	8008444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006428:	2300      	movs	r3, #0
 800642a:	e082      	b.n	8006532 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800642c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642e:	2b00      	cmp	r3, #0
 8006430:	d106      	bne.n	8006440 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006432:	f107 030c 	add.w	r3, r7, #12
 8006436:	4618      	mov	r0, r3
 8006438:	f001 f80e 	bl	8007458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800643c:	2301      	movs	r3, #1
 800643e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006440:	f002 f800 	bl	8008444 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006444:	f000 fd68 	bl	8006f18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006448:	f001 ffcc 	bl	80083e4 <vPortEnterCritical>
 800644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006452:	b25b      	sxtb	r3, r3
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006458:	d103      	bne.n	8006462 <xQueueSemaphoreTake+0x13a>
 800645a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006468:	b25b      	sxtb	r3, r3
 800646a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800646e:	d103      	bne.n	8006478 <xQueueSemaphoreTake+0x150>
 8006470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006478:	f001 ffe4 	bl	8008444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800647c:	463a      	mov	r2, r7
 800647e:	f107 030c 	add.w	r3, r7, #12
 8006482:	4611      	mov	r1, r2
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fffd 	bl	8007484 <xTaskCheckForTimeOut>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d132      	bne.n	80064f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006492:	f000 fa2e 	bl	80068f2 <prvIsQueueEmpty>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d026      	beq.n	80064ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d109      	bne.n	80064b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80064a4:	f001 ff9e 	bl	80083e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f001 f95f 	bl	8007770 <xTaskPriorityInherit>
 80064b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80064b4:	f001 ffc6 	bl	8008444 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ba:	3324      	adds	r3, #36	; 0x24
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	4611      	mov	r1, r2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 ff15 	bl	80072f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064c8:	f000 f9c1 	bl	800684e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064cc:	f000 fd32 	bl	8006f34 <xTaskResumeAll>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f47f af68 	bne.w	80063a8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80064d8:	4b18      	ldr	r3, [pc, #96]	; (800653c <xQueueSemaphoreTake+0x214>)
 80064da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	e75e      	b.n	80063a8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80064ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064ec:	f000 f9af 	bl	800684e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064f0:	f000 fd20 	bl	8006f34 <xTaskResumeAll>
 80064f4:	e758      	b.n	80063a8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80064f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064f8:	f000 f9a9 	bl	800684e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064fc:	f000 fd1a 	bl	8006f34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006500:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006502:	f000 f9f6 	bl	80068f2 <prvIsQueueEmpty>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	f43f af4d 	beq.w	80063a8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00d      	beq.n	8006530 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006514:	f001 ff66 	bl	80083e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800651a:	f000 f8f0 	bl	80066fe <prvGetDisinheritPriorityAfterTimeout>
 800651e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006526:	4618      	mov	r0, r3
 8006528:	f001 f9f8 	bl	800791c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800652c:	f001 ff8a 	bl	8008444 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006530:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006532:	4618      	mov	r0, r3
 8006534:	3738      	adds	r7, #56	; 0x38
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	e000ed04 	.word	0xe000ed04

08006540 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08e      	sub	sp, #56	; 0x38
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	623b      	str	r3, [r7, #32]
}
 8006568:	bf00      	nop
 800656a:	e7fe      	b.n	800656a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <xQueueReceiveFromISR+0x3a>
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <xQueueReceiveFromISR+0x3e>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <xQueueReceiveFromISR+0x40>
 800657e:	2300      	movs	r3, #0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	61fb      	str	r3, [r7, #28]
}
 8006596:	bf00      	nop
 8006598:	e7fe      	b.n	8006598 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800659a:	f002 f805 	bl	80085a8 <vPortValidateInterruptPriority>
	__asm volatile
 800659e:	f3ef 8211 	mrs	r2, BASEPRI
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	61ba      	str	r2, [r7, #24]
 80065b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80065b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d02f      	beq.n	8006626 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065d4:	f000 f915 	bl	8006802 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	1e5a      	subs	r2, r3, #1
 80065dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80065e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065e8:	d112      	bne.n	8006610 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d016      	beq.n	8006620 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	3310      	adds	r3, #16
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 feca 	bl	8007390 <xTaskRemoveFromEventList>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00e      	beq.n	8006620 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00b      	beq.n	8006620 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	e007      	b.n	8006620 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006614:	3301      	adds	r3, #1
 8006616:	b2db      	uxtb	r3, r3
 8006618:	b25a      	sxtb	r2, r3
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006620:	2301      	movs	r3, #1
 8006622:	637b      	str	r3, [r7, #52]	; 0x34
 8006624:	e001      	b.n	800662a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006626:	2300      	movs	r3, #0
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
 800662a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f383 8811 	msr	BASEPRI, r3
}
 8006634:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006638:	4618      	mov	r0, r3
 800663a:	3738      	adds	r7, #56	; 0x38
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	60bb      	str	r3, [r7, #8]
}
 8006660:	bf00      	nop
 8006662:	e7fe      	b.n	8006662 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006664:	f001 febe 	bl	80083e4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800666e:	f001 fee9 	bl	8008444 <vPortExitCritical>

	return uxReturn;
 8006672:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10a      	bne.n	80066a4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	60fb      	str	r3, [r7, #12]
}
 80066a0:	bf00      	nop
 80066a2:	e7fe      	b.n	80066a2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80066aa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80066ac:	4618      	mov	r0, r3
 80066ae:	371c      	adds	r7, #28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10a      	bne.n	80066e0 <vQueueDelete+0x28>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	60bb      	str	r3, [r7, #8]
}
 80066dc:	bf00      	nop
 80066de:	e7fe      	b.n	80066de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 f95f 	bl	80069a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d102      	bne.n	80066f6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f002 f865 	bl	80087c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80066f6:	bf00      	nop
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	2b00      	cmp	r3, #0
 800670c:	d006      	beq.n	800671c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	e001      	b.n	8006720 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006720:	68fb      	ldr	r3, [r7, #12]
	}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b086      	sub	sp, #24
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006742:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10d      	bne.n	8006768 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d14d      	bne.n	80067f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	4618      	mov	r0, r3
 800675a:	f001 f871 	bl	8007840 <xTaskPriorityDisinherit>
 800675e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	609a      	str	r2, [r3, #8]
 8006766:	e043      	b.n	80067f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d119      	bne.n	80067a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6858      	ldr	r0, [r3, #4]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	461a      	mov	r2, r3
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	f012 fe87 	bl	801948c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	441a      	add	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	429a      	cmp	r2, r3
 8006796:	d32b      	bcc.n	80067f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	605a      	str	r2, [r3, #4]
 80067a0:	e026      	b.n	80067f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	68d8      	ldr	r0, [r3, #12]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	461a      	mov	r2, r3
 80067ac:	68b9      	ldr	r1, [r7, #8]
 80067ae:	f012 fe6d 	bl	801948c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	425b      	negs	r3, r3
 80067bc:	441a      	add	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d207      	bcs.n	80067de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	689a      	ldr	r2, [r3, #8]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	425b      	negs	r3, r3
 80067d8:	441a      	add	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d105      	bne.n	80067f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80067f8:	697b      	ldr	r3, [r7, #20]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d018      	beq.n	8006846 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681c:	441a      	add	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	429a      	cmp	r2, r3
 800682c:	d303      	bcc.n	8006836 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68d9      	ldr	r1, [r3, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	461a      	mov	r2, r3
 8006840:	6838      	ldr	r0, [r7, #0]
 8006842:	f012 fe23 	bl	801948c <memcpy>
	}
}
 8006846:	bf00      	nop
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006856:	f001 fdc5 	bl	80083e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006860:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006862:	e011      	b.n	8006888 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	2b00      	cmp	r3, #0
 800686a:	d012      	beq.n	8006892 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3324      	adds	r3, #36	; 0x24
 8006870:	4618      	mov	r0, r3
 8006872:	f000 fd8d 	bl	8007390 <xTaskRemoveFromEventList>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800687c:	f000 fe64 	bl	8007548 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	3b01      	subs	r3, #1
 8006884:	b2db      	uxtb	r3, r3
 8006886:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800688c:	2b00      	cmp	r3, #0
 800688e:	dce9      	bgt.n	8006864 <prvUnlockQueue+0x16>
 8006890:	e000      	b.n	8006894 <prvUnlockQueue+0x46>
					break;
 8006892:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	22ff      	movs	r2, #255	; 0xff
 8006898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800689c:	f001 fdd2 	bl	8008444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068a0:	f001 fda0 	bl	80083e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068ac:	e011      	b.n	80068d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d012      	beq.n	80068dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	3310      	adds	r3, #16
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fd68 	bl	8007390 <xTaskRemoveFromEventList>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068c6:	f000 fe3f 	bl	8007548 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068ca:	7bbb      	ldrb	r3, [r7, #14]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	dce9      	bgt.n	80068ae <prvUnlockQueue+0x60>
 80068da:	e000      	b.n	80068de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	22ff      	movs	r2, #255	; 0xff
 80068e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80068e6:	f001 fdad 	bl	8008444 <vPortExitCritical>
}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068fa:	f001 fd73 	bl	80083e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006902:	2b00      	cmp	r3, #0
 8006904:	d102      	bne.n	800690c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006906:	2301      	movs	r3, #1
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	e001      	b.n	8006910 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006910:	f001 fd98 	bl	8008444 <vPortExitCritical>

	return xReturn;
 8006914:	68fb      	ldr	r3, [r7, #12]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006926:	f001 fd5d 	bl	80083e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006932:	429a      	cmp	r2, r3
 8006934:	d102      	bne.n	800693c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006936:	2301      	movs	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	e001      	b.n	8006940 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800693c:	2300      	movs	r3, #0
 800693e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006940:	f001 fd80 	bl	8008444 <vPortExitCritical>

	return xReturn;
 8006944:	68fb      	ldr	r3, [r7, #12]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	e014      	b.n	800698a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006960:	4a0f      	ldr	r2, [pc, #60]	; (80069a0 <vQueueAddToRegistry+0x50>)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10b      	bne.n	8006984 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800696c:	490c      	ldr	r1, [pc, #48]	; (80069a0 <vQueueAddToRegistry+0x50>)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006976:	4a0a      	ldr	r2, [pc, #40]	; (80069a0 <vQueueAddToRegistry+0x50>)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	4413      	add	r3, r2
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006982:	e006      	b.n	8006992 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3301      	adds	r3, #1
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b07      	cmp	r3, #7
 800698e:	d9e7      	bls.n	8006960 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006990:	bf00      	nop
 8006992:	bf00      	nop
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	2000550c 	.word	0x2000550c

080069a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	e016      	b.n	80069e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80069b2:	4a10      	ldr	r2, [pc, #64]	; (80069f4 <vQueueUnregisterQueue+0x50>)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	4413      	add	r3, r2
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d10b      	bne.n	80069da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80069c2:	4a0c      	ldr	r2, [pc, #48]	; (80069f4 <vQueueUnregisterQueue+0x50>)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2100      	movs	r1, #0
 80069c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80069cc:	4a09      	ldr	r2, [pc, #36]	; (80069f4 <vQueueUnregisterQueue+0x50>)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	4413      	add	r3, r2
 80069d4:	2200      	movs	r2, #0
 80069d6:	605a      	str	r2, [r3, #4]
				break;
 80069d8:	e006      	b.n	80069e8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3301      	adds	r3, #1
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2b07      	cmp	r3, #7
 80069e4:	d9e5      	bls.n	80069b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80069e6:	bf00      	nop
 80069e8:	bf00      	nop
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	2000550c 	.word	0x2000550c

080069f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a08:	f001 fcec 	bl	80083e4 <vPortEnterCritical>
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a12:	b25b      	sxtb	r3, r3
 8006a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a18:	d103      	bne.n	8006a22 <vQueueWaitForMessageRestricted+0x2a>
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a28:	b25b      	sxtb	r3, r3
 8006a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a2e:	d103      	bne.n	8006a38 <vQueueWaitForMessageRestricted+0x40>
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a38:	f001 fd04 	bl	8008444 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d106      	bne.n	8006a52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	3324      	adds	r3, #36	; 0x24
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	68b9      	ldr	r1, [r7, #8]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 fc73 	bl	8007338 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a52:	6978      	ldr	r0, [r7, #20]
 8006a54:	f7ff fefb 	bl	800684e <prvUnlockQueue>
	}
 8006a58:	bf00      	nop
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08e      	sub	sp, #56	; 0x38
 8006a64:	af04      	add	r7, sp, #16
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
 8006a6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10a      	bne.n	8006a8a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	623b      	str	r3, [r7, #32]
}
 8006a86:	bf00      	nop
 8006a88:	e7fe      	b.n	8006a88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d10a      	bne.n	8006aa6 <xTaskCreateStatic+0x46>
	__asm volatile
 8006a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	61fb      	str	r3, [r7, #28]
}
 8006aa2:	bf00      	nop
 8006aa4:	e7fe      	b.n	8006aa4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006aa6:	23bc      	movs	r3, #188	; 0xbc
 8006aa8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2bbc      	cmp	r3, #188	; 0xbc
 8006aae:	d00a      	beq.n	8006ac6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	61bb      	str	r3, [r7, #24]
}
 8006ac2:	bf00      	nop
 8006ac4:	e7fe      	b.n	8006ac4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ac6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d01e      	beq.n	8006b0c <xTaskCreateStatic+0xac>
 8006ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d01b      	beq.n	8006b0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006adc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	9303      	str	r3, [sp, #12]
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	9302      	str	r3, [sp, #8]
 8006aee:	f107 0314 	add.w	r3, r7, #20
 8006af2:	9301      	str	r3, [sp, #4]
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	68b9      	ldr	r1, [r7, #8]
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 f850 	bl	8006ba4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b06:	f000 f8f3 	bl	8006cf0 <prvAddNewTaskToReadyList>
 8006b0a:	e001      	b.n	8006b10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b10:	697b      	ldr	r3, [r7, #20]
	}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3728      	adds	r7, #40	; 0x28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b08c      	sub	sp, #48	; 0x30
 8006b1e:	af04      	add	r7, sp, #16
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	603b      	str	r3, [r7, #0]
 8006b26:	4613      	mov	r3, r2
 8006b28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b2a:	88fb      	ldrh	r3, [r7, #6]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f001 fd7a 	bl	8008628 <pvPortMalloc>
 8006b34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00e      	beq.n	8006b5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b3c:	20bc      	movs	r0, #188	; 0xbc
 8006b3e:	f001 fd73 	bl	8008628 <pvPortMalloc>
 8006b42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	631a      	str	r2, [r3, #48]	; 0x30
 8006b50:	e005      	b.n	8006b5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b52:	6978      	ldr	r0, [r7, #20]
 8006b54:	f001 fe34 	bl	80087c0 <vPortFree>
 8006b58:	e001      	b.n	8006b5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d017      	beq.n	8006b94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b6c:	88fa      	ldrh	r2, [r7, #6]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9303      	str	r3, [sp, #12]
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	9302      	str	r3, [sp, #8]
 8006b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	68b9      	ldr	r1, [r7, #8]
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f000 f80e 	bl	8006ba4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b88:	69f8      	ldr	r0, [r7, #28]
 8006b8a:	f000 f8b1 	bl	8006cf0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	e002      	b.n	8006b9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b9a:	69bb      	ldr	r3, [r7, #24]
	}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3720      	adds	r7, #32
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b088      	sub	sp, #32
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	461a      	mov	r2, r3
 8006bbc:	21a5      	movs	r1, #165	; 0xa5
 8006bbe:	f012 fc73 	bl	80194a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	f023 0307 	bic.w	r3, r3, #7
 8006bda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00a      	beq.n	8006bfc <prvInitialiseNewTask+0x58>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	617b      	str	r3, [r7, #20]
}
 8006bf8:	bf00      	nop
 8006bfa:	e7fe      	b.n	8006bfa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d01f      	beq.n	8006c42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c02:	2300      	movs	r3, #0
 8006c04:	61fb      	str	r3, [r7, #28]
 8006c06:	e012      	b.n	8006c2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	7819      	ldrb	r1, [r3, #0]
 8006c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	4413      	add	r3, r2
 8006c16:	3334      	adds	r3, #52	; 0x34
 8006c18:	460a      	mov	r2, r1
 8006c1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	4413      	add	r3, r2
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d006      	beq.n	8006c36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	2b0f      	cmp	r3, #15
 8006c32:	d9e9      	bls.n	8006c08 <prvInitialiseNewTask+0x64>
 8006c34:	e000      	b.n	8006c38 <prvInitialiseNewTask+0x94>
			{
				break;
 8006c36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c40:	e003      	b.n	8006c4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	2b37      	cmp	r3, #55	; 0x37
 8006c4e:	d901      	bls.n	8006c54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c50:	2337      	movs	r3, #55	; 0x37
 8006c52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	2200      	movs	r2, #0
 8006c64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	3304      	adds	r3, #4
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe fd64 	bl	8005738 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	3318      	adds	r3, #24
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fe fd5f 	bl	8005738 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca2:	3354      	adds	r3, #84	; 0x54
 8006ca4:	2260      	movs	r2, #96	; 0x60
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f012 fbfd 	bl	80194a8 <memset>
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	4a0c      	ldr	r2, [pc, #48]	; (8006ce4 <prvInitialiseNewTask+0x140>)
 8006cb2:	659a      	str	r2, [r3, #88]	; 0x58
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	4a0c      	ldr	r2, [pc, #48]	; (8006ce8 <prvInitialiseNewTask+0x144>)
 8006cb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	4a0b      	ldr	r2, [pc, #44]	; (8006cec <prvInitialiseNewTask+0x148>)
 8006cbe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	68f9      	ldr	r1, [r7, #12]
 8006cc4:	69b8      	ldr	r0, [r7, #24]
 8006cc6:	f001 fa61 	bl	800818c <pxPortInitialiseStack>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cdc:	bf00      	nop
 8006cde:	3720      	adds	r7, #32
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	0801e33c 	.word	0x0801e33c
 8006ce8:	0801e35c 	.word	0x0801e35c
 8006cec:	0801e31c 	.word	0x0801e31c

08006cf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006cf8:	f001 fb74 	bl	80083e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006cfc:	4b2d      	ldr	r3, [pc, #180]	; (8006db4 <prvAddNewTaskToReadyList+0xc4>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3301      	adds	r3, #1
 8006d02:	4a2c      	ldr	r2, [pc, #176]	; (8006db4 <prvAddNewTaskToReadyList+0xc4>)
 8006d04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d06:	4b2c      	ldr	r3, [pc, #176]	; (8006db8 <prvAddNewTaskToReadyList+0xc8>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d109      	bne.n	8006d22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d0e:	4a2a      	ldr	r2, [pc, #168]	; (8006db8 <prvAddNewTaskToReadyList+0xc8>)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d14:	4b27      	ldr	r3, [pc, #156]	; (8006db4 <prvAddNewTaskToReadyList+0xc4>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d110      	bne.n	8006d3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d1c:	f000 fc38 	bl	8007590 <prvInitialiseTaskLists>
 8006d20:	e00d      	b.n	8006d3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d22:	4b26      	ldr	r3, [pc, #152]	; (8006dbc <prvAddNewTaskToReadyList+0xcc>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d109      	bne.n	8006d3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d2a:	4b23      	ldr	r3, [pc, #140]	; (8006db8 <prvAddNewTaskToReadyList+0xc8>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d802      	bhi.n	8006d3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d38:	4a1f      	ldr	r2, [pc, #124]	; (8006db8 <prvAddNewTaskToReadyList+0xc8>)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d3e:	4b20      	ldr	r3, [pc, #128]	; (8006dc0 <prvAddNewTaskToReadyList+0xd0>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3301      	adds	r3, #1
 8006d44:	4a1e      	ldr	r2, [pc, #120]	; (8006dc0 <prvAddNewTaskToReadyList+0xd0>)
 8006d46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d48:	4b1d      	ldr	r3, [pc, #116]	; (8006dc0 <prvAddNewTaskToReadyList+0xd0>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d54:	4b1b      	ldr	r3, [pc, #108]	; (8006dc4 <prvAddNewTaskToReadyList+0xd4>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d903      	bls.n	8006d64 <prvAddNewTaskToReadyList+0x74>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d60:	4a18      	ldr	r2, [pc, #96]	; (8006dc4 <prvAddNewTaskToReadyList+0xd4>)
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4a15      	ldr	r2, [pc, #84]	; (8006dc8 <prvAddNewTaskToReadyList+0xd8>)
 8006d72:	441a      	add	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3304      	adds	r3, #4
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	f7fe fce9 	bl	8005752 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d80:	f001 fb60 	bl	8008444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d84:	4b0d      	ldr	r3, [pc, #52]	; (8006dbc <prvAddNewTaskToReadyList+0xcc>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00e      	beq.n	8006daa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <prvAddNewTaskToReadyList+0xc8>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d207      	bcs.n	8006daa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d9a:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <prvAddNewTaskToReadyList+0xdc>)
 8006d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da0:	601a      	str	r2, [r3, #0]
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006daa:	bf00      	nop
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20005a20 	.word	0x20005a20
 8006db8:	2000554c 	.word	0x2000554c
 8006dbc:	20005a2c 	.word	0x20005a2c
 8006dc0:	20005a3c 	.word	0x20005a3c
 8006dc4:	20005a28 	.word	0x20005a28
 8006dc8:	20005550 	.word	0x20005550
 8006dcc:	e000ed04 	.word	0xe000ed04

08006dd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d017      	beq.n	8006e12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006de2:	4b13      	ldr	r3, [pc, #76]	; (8006e30 <vTaskDelay+0x60>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <vTaskDelay+0x30>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	60bb      	str	r3, [r7, #8]
}
 8006dfc:	bf00      	nop
 8006dfe:	e7fe      	b.n	8006dfe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e00:	f000 f88a 	bl	8006f18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e04:	2100      	movs	r1, #0
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fe1e 	bl	8007a48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e0c:	f000 f892 	bl	8006f34 <xTaskResumeAll>
 8006e10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d107      	bne.n	8006e28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006e18:	4b06      	ldr	r3, [pc, #24]	; (8006e34 <vTaskDelay+0x64>)
 8006e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e28:	bf00      	nop
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	20005a48 	.word	0x20005a48
 8006e34:	e000ed04 	.word	0xe000ed04

08006e38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08a      	sub	sp, #40	; 0x28
 8006e3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e46:	463a      	mov	r2, r7
 8006e48:	1d39      	adds	r1, r7, #4
 8006e4a:	f107 0308 	add.w	r3, r7, #8
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe fc1e 	bl	8005690 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	9202      	str	r2, [sp, #8]
 8006e5c:	9301      	str	r3, [sp, #4]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	2300      	movs	r3, #0
 8006e64:	460a      	mov	r2, r1
 8006e66:	4924      	ldr	r1, [pc, #144]	; (8006ef8 <vTaskStartScheduler+0xc0>)
 8006e68:	4824      	ldr	r0, [pc, #144]	; (8006efc <vTaskStartScheduler+0xc4>)
 8006e6a:	f7ff fdf9 	bl	8006a60 <xTaskCreateStatic>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	4a23      	ldr	r2, [pc, #140]	; (8006f00 <vTaskStartScheduler+0xc8>)
 8006e72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e74:	4b22      	ldr	r3, [pc, #136]	; (8006f00 <vTaskStartScheduler+0xc8>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	e001      	b.n	8006e86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d102      	bne.n	8006e92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e8c:	f000 fe30 	bl	8007af0 <xTimerCreateTimerTask>
 8006e90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d11b      	bne.n	8006ed0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	613b      	str	r3, [r7, #16]
}
 8006eaa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006eac:	4b15      	ldr	r3, [pc, #84]	; (8006f04 <vTaskStartScheduler+0xcc>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3354      	adds	r3, #84	; 0x54
 8006eb2:	4a15      	ldr	r2, [pc, #84]	; (8006f08 <vTaskStartScheduler+0xd0>)
 8006eb4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006eb6:	4b15      	ldr	r3, [pc, #84]	; (8006f0c <vTaskStartScheduler+0xd4>)
 8006eb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ebc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ebe:	4b14      	ldr	r3, [pc, #80]	; (8006f10 <vTaskStartScheduler+0xd8>)
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ec4:	4b13      	ldr	r3, [pc, #76]	; (8006f14 <vTaskStartScheduler+0xdc>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006eca:	f001 f9e9 	bl	80082a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ece:	e00e      	b.n	8006eee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ed6:	d10a      	bne.n	8006eee <vTaskStartScheduler+0xb6>
	__asm volatile
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	60fb      	str	r3, [r7, #12]
}
 8006eea:	bf00      	nop
 8006eec:	e7fe      	b.n	8006eec <vTaskStartScheduler+0xb4>
}
 8006eee:	bf00      	nop
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	0801a694 	.word	0x0801a694
 8006efc:	08007561 	.word	0x08007561
 8006f00:	20005a44 	.word	0x20005a44
 8006f04:	2000554c 	.word	0x2000554c
 8006f08:	20000034 	.word	0x20000034
 8006f0c:	20005a40 	.word	0x20005a40
 8006f10:	20005a2c 	.word	0x20005a2c
 8006f14:	20005a24 	.word	0x20005a24

08006f18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f18:	b480      	push	{r7}
 8006f1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f1c:	4b04      	ldr	r3, [pc, #16]	; (8006f30 <vTaskSuspendAll+0x18>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3301      	adds	r3, #1
 8006f22:	4a03      	ldr	r2, [pc, #12]	; (8006f30 <vTaskSuspendAll+0x18>)
 8006f24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f26:	bf00      	nop
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	20005a48 	.word	0x20005a48

08006f34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f42:	4b42      	ldr	r3, [pc, #264]	; (800704c <xTaskResumeAll+0x118>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10a      	bne.n	8006f60 <xTaskResumeAll+0x2c>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	603b      	str	r3, [r7, #0]
}
 8006f5c:	bf00      	nop
 8006f5e:	e7fe      	b.n	8006f5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f60:	f001 fa40 	bl	80083e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f64:	4b39      	ldr	r3, [pc, #228]	; (800704c <xTaskResumeAll+0x118>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	4a38      	ldr	r2, [pc, #224]	; (800704c <xTaskResumeAll+0x118>)
 8006f6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f6e:	4b37      	ldr	r3, [pc, #220]	; (800704c <xTaskResumeAll+0x118>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d162      	bne.n	800703c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f76:	4b36      	ldr	r3, [pc, #216]	; (8007050 <xTaskResumeAll+0x11c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d05e      	beq.n	800703c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f7e:	e02f      	b.n	8006fe0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f80:	4b34      	ldr	r3, [pc, #208]	; (8007054 <xTaskResumeAll+0x120>)
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3318      	adds	r3, #24
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe fc3d 	bl	800580c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3304      	adds	r3, #4
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fe fc38 	bl	800580c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa0:	4b2d      	ldr	r3, [pc, #180]	; (8007058 <xTaskResumeAll+0x124>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d903      	bls.n	8006fb0 <xTaskResumeAll+0x7c>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	4a2a      	ldr	r2, [pc, #168]	; (8007058 <xTaskResumeAll+0x124>)
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4a27      	ldr	r2, [pc, #156]	; (800705c <xTaskResumeAll+0x128>)
 8006fbe:	441a      	add	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	f7fe fbc3 	bl	8005752 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd0:	4b23      	ldr	r3, [pc, #140]	; (8007060 <xTaskResumeAll+0x12c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d302      	bcc.n	8006fe0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006fda:	4b22      	ldr	r3, [pc, #136]	; (8007064 <xTaskResumeAll+0x130>)
 8006fdc:	2201      	movs	r2, #1
 8006fde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fe0:	4b1c      	ldr	r3, [pc, #112]	; (8007054 <xTaskResumeAll+0x120>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1cb      	bne.n	8006f80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fee:	f000 fb71 	bl	80076d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ff2:	4b1d      	ldr	r3, [pc, #116]	; (8007068 <xTaskResumeAll+0x134>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d010      	beq.n	8007020 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ffe:	f000 f859 	bl	80070b4 <xTaskIncrementTick>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007008:	4b16      	ldr	r3, [pc, #88]	; (8007064 <xTaskResumeAll+0x130>)
 800700a:	2201      	movs	r2, #1
 800700c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	3b01      	subs	r3, #1
 8007012:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1f1      	bne.n	8006ffe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800701a:	4b13      	ldr	r3, [pc, #76]	; (8007068 <xTaskResumeAll+0x134>)
 800701c:	2200      	movs	r2, #0
 800701e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007020:	4b10      	ldr	r3, [pc, #64]	; (8007064 <xTaskResumeAll+0x130>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d009      	beq.n	800703c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007028:	2301      	movs	r3, #1
 800702a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800702c:	4b0f      	ldr	r3, [pc, #60]	; (800706c <xTaskResumeAll+0x138>)
 800702e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800703c:	f001 fa02 	bl	8008444 <vPortExitCritical>

	return xAlreadyYielded;
 8007040:	68bb      	ldr	r3, [r7, #8]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20005a48 	.word	0x20005a48
 8007050:	20005a20 	.word	0x20005a20
 8007054:	200059e0 	.word	0x200059e0
 8007058:	20005a28 	.word	0x20005a28
 800705c:	20005550 	.word	0x20005550
 8007060:	2000554c 	.word	0x2000554c
 8007064:	20005a34 	.word	0x20005a34
 8007068:	20005a30 	.word	0x20005a30
 800706c:	e000ed04 	.word	0xe000ed04

08007070 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007076:	4b05      	ldr	r3, [pc, #20]	; (800708c <xTaskGetTickCount+0x1c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800707c:	687b      	ldr	r3, [r7, #4]
}
 800707e:	4618      	mov	r0, r3
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	20005a24 	.word	0x20005a24

08007090 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007096:	f001 fa87 	bl	80085a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800709a:	2300      	movs	r3, #0
 800709c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800709e:	4b04      	ldr	r3, [pc, #16]	; (80070b0 <xTaskGetTickCountFromISR+0x20>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070a4:	683b      	ldr	r3, [r7, #0]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	20005a24 	.word	0x20005a24

080070b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070ba:	2300      	movs	r3, #0
 80070bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070be:	4b4f      	ldr	r3, [pc, #316]	; (80071fc <xTaskIncrementTick+0x148>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f040 808f 	bne.w	80071e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070c8:	4b4d      	ldr	r3, [pc, #308]	; (8007200 <xTaskIncrementTick+0x14c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3301      	adds	r3, #1
 80070ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070d0:	4a4b      	ldr	r2, [pc, #300]	; (8007200 <xTaskIncrementTick+0x14c>)
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d120      	bne.n	800711e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80070dc:	4b49      	ldr	r3, [pc, #292]	; (8007204 <xTaskIncrementTick+0x150>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <xTaskIncrementTick+0x48>
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	603b      	str	r3, [r7, #0]
}
 80070f8:	bf00      	nop
 80070fa:	e7fe      	b.n	80070fa <xTaskIncrementTick+0x46>
 80070fc:	4b41      	ldr	r3, [pc, #260]	; (8007204 <xTaskIncrementTick+0x150>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	60fb      	str	r3, [r7, #12]
 8007102:	4b41      	ldr	r3, [pc, #260]	; (8007208 <xTaskIncrementTick+0x154>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a3f      	ldr	r2, [pc, #252]	; (8007204 <xTaskIncrementTick+0x150>)
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	4a3f      	ldr	r2, [pc, #252]	; (8007208 <xTaskIncrementTick+0x154>)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6013      	str	r3, [r2, #0]
 8007110:	4b3e      	ldr	r3, [pc, #248]	; (800720c <xTaskIncrementTick+0x158>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3301      	adds	r3, #1
 8007116:	4a3d      	ldr	r2, [pc, #244]	; (800720c <xTaskIncrementTick+0x158>)
 8007118:	6013      	str	r3, [r2, #0]
 800711a:	f000 fadb 	bl	80076d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800711e:	4b3c      	ldr	r3, [pc, #240]	; (8007210 <xTaskIncrementTick+0x15c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	429a      	cmp	r2, r3
 8007126:	d349      	bcc.n	80071bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007128:	4b36      	ldr	r3, [pc, #216]	; (8007204 <xTaskIncrementTick+0x150>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d104      	bne.n	800713c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007132:	4b37      	ldr	r3, [pc, #220]	; (8007210 <xTaskIncrementTick+0x15c>)
 8007134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007138:	601a      	str	r2, [r3, #0]
					break;
 800713a:	e03f      	b.n	80071bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800713c:	4b31      	ldr	r3, [pc, #196]	; (8007204 <xTaskIncrementTick+0x150>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	429a      	cmp	r2, r3
 8007152:	d203      	bcs.n	800715c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007154:	4a2e      	ldr	r2, [pc, #184]	; (8007210 <xTaskIncrementTick+0x15c>)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800715a:	e02f      	b.n	80071bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	3304      	adds	r3, #4
 8007160:	4618      	mov	r0, r3
 8007162:	f7fe fb53 	bl	800580c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716a:	2b00      	cmp	r3, #0
 800716c:	d004      	beq.n	8007178 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	3318      	adds	r3, #24
 8007172:	4618      	mov	r0, r3
 8007174:	f7fe fb4a 	bl	800580c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717c:	4b25      	ldr	r3, [pc, #148]	; (8007214 <xTaskIncrementTick+0x160>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	429a      	cmp	r2, r3
 8007182:	d903      	bls.n	800718c <xTaskIncrementTick+0xd8>
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	4a22      	ldr	r2, [pc, #136]	; (8007214 <xTaskIncrementTick+0x160>)
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007190:	4613      	mov	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4a1f      	ldr	r2, [pc, #124]	; (8007218 <xTaskIncrementTick+0x164>)
 800719a:	441a      	add	r2, r3
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	3304      	adds	r3, #4
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f7fe fad5 	bl	8005752 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ac:	4b1b      	ldr	r3, [pc, #108]	; (800721c <xTaskIncrementTick+0x168>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d3b8      	bcc.n	8007128 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80071b6:	2301      	movs	r3, #1
 80071b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071ba:	e7b5      	b.n	8007128 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071bc:	4b17      	ldr	r3, [pc, #92]	; (800721c <xTaskIncrementTick+0x168>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c2:	4915      	ldr	r1, [pc, #84]	; (8007218 <xTaskIncrementTick+0x164>)
 80071c4:	4613      	mov	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	440b      	add	r3, r1
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d901      	bls.n	80071d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80071d4:	2301      	movs	r3, #1
 80071d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80071d8:	4b11      	ldr	r3, [pc, #68]	; (8007220 <xTaskIncrementTick+0x16c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d007      	beq.n	80071f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80071e0:	2301      	movs	r3, #1
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	e004      	b.n	80071f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80071e6:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <xTaskIncrementTick+0x170>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3301      	adds	r3, #1
 80071ec:	4a0d      	ldr	r2, [pc, #52]	; (8007224 <xTaskIncrementTick+0x170>)
 80071ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80071f0:	697b      	ldr	r3, [r7, #20]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	20005a48 	.word	0x20005a48
 8007200:	20005a24 	.word	0x20005a24
 8007204:	200059d8 	.word	0x200059d8
 8007208:	200059dc 	.word	0x200059dc
 800720c:	20005a38 	.word	0x20005a38
 8007210:	20005a40 	.word	0x20005a40
 8007214:	20005a28 	.word	0x20005a28
 8007218:	20005550 	.word	0x20005550
 800721c:	2000554c 	.word	0x2000554c
 8007220:	20005a34 	.word	0x20005a34
 8007224:	20005a30 	.word	0x20005a30

08007228 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800722e:	4b2a      	ldr	r3, [pc, #168]	; (80072d8 <vTaskSwitchContext+0xb0>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007236:	4b29      	ldr	r3, [pc, #164]	; (80072dc <vTaskSwitchContext+0xb4>)
 8007238:	2201      	movs	r2, #1
 800723a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800723c:	e046      	b.n	80072cc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800723e:	4b27      	ldr	r3, [pc, #156]	; (80072dc <vTaskSwitchContext+0xb4>)
 8007240:	2200      	movs	r2, #0
 8007242:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007244:	4b26      	ldr	r3, [pc, #152]	; (80072e0 <vTaskSwitchContext+0xb8>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	e010      	b.n	800726e <vTaskSwitchContext+0x46>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10a      	bne.n	8007268 <vTaskSwitchContext+0x40>
	__asm volatile
 8007252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007256:	f383 8811 	msr	BASEPRI, r3
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	607b      	str	r3, [r7, #4]
}
 8007264:	bf00      	nop
 8007266:	e7fe      	b.n	8007266 <vTaskSwitchContext+0x3e>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3b01      	subs	r3, #1
 800726c:	60fb      	str	r3, [r7, #12]
 800726e:	491d      	ldr	r1, [pc, #116]	; (80072e4 <vTaskSwitchContext+0xbc>)
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	440b      	add	r3, r1
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0e4      	beq.n	800724c <vTaskSwitchContext+0x24>
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4613      	mov	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4a15      	ldr	r2, [pc, #84]	; (80072e4 <vTaskSwitchContext+0xbc>)
 800728e:	4413      	add	r3, r2
 8007290:	60bb      	str	r3, [r7, #8]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	605a      	str	r2, [r3, #4]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	3308      	adds	r3, #8
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d104      	bne.n	80072b2 <vTaskSwitchContext+0x8a>
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	605a      	str	r2, [r3, #4]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	4a0b      	ldr	r2, [pc, #44]	; (80072e8 <vTaskSwitchContext+0xc0>)
 80072ba:	6013      	str	r3, [r2, #0]
 80072bc:	4a08      	ldr	r2, [pc, #32]	; (80072e0 <vTaskSwitchContext+0xb8>)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072c2:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <vTaskSwitchContext+0xc0>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3354      	adds	r3, #84	; 0x54
 80072c8:	4a08      	ldr	r2, [pc, #32]	; (80072ec <vTaskSwitchContext+0xc4>)
 80072ca:	6013      	str	r3, [r2, #0]
}
 80072cc:	bf00      	nop
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	20005a48 	.word	0x20005a48
 80072dc:	20005a34 	.word	0x20005a34
 80072e0:	20005a28 	.word	0x20005a28
 80072e4:	20005550 	.word	0x20005550
 80072e8:	2000554c 	.word	0x2000554c
 80072ec:	20000034 	.word	0x20000034

080072f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10a      	bne.n	8007316 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	60fb      	str	r3, [r7, #12]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007316:	4b07      	ldr	r3, [pc, #28]	; (8007334 <vTaskPlaceOnEventList+0x44>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	3318      	adds	r3, #24
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7fe fa3b 	bl	800579a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007324:	2101      	movs	r1, #1
 8007326:	6838      	ldr	r0, [r7, #0]
 8007328:	f000 fb8e 	bl	8007a48 <prvAddCurrentTaskToDelayedList>
}
 800732c:	bf00      	nop
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	2000554c 	.word	0x2000554c

08007338 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10a      	bne.n	8007360 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	617b      	str	r3, [r7, #20]
}
 800735c:	bf00      	nop
 800735e:	e7fe      	b.n	800735e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007360:	4b0a      	ldr	r3, [pc, #40]	; (800738c <vTaskPlaceOnEventListRestricted+0x54>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3318      	adds	r3, #24
 8007366:	4619      	mov	r1, r3
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f7fe f9f2 	bl	8005752 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d002      	beq.n	800737a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007378:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800737a:	6879      	ldr	r1, [r7, #4]
 800737c:	68b8      	ldr	r0, [r7, #8]
 800737e:	f000 fb63 	bl	8007a48 <prvAddCurrentTaskToDelayedList>
	}
 8007382:	bf00      	nop
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	2000554c 	.word	0x2000554c

08007390 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10a      	bne.n	80073bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	60fb      	str	r3, [r7, #12]
}
 80073b8:	bf00      	nop
 80073ba:	e7fe      	b.n	80073ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	3318      	adds	r3, #24
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fe fa23 	bl	800580c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073c6:	4b1e      	ldr	r3, [pc, #120]	; (8007440 <xTaskRemoveFromEventList+0xb0>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d11d      	bne.n	800740a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	3304      	adds	r3, #4
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe fa1a 	bl	800580c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073dc:	4b19      	ldr	r3, [pc, #100]	; (8007444 <xTaskRemoveFromEventList+0xb4>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d903      	bls.n	80073ec <xTaskRemoveFromEventList+0x5c>
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	4a16      	ldr	r2, [pc, #88]	; (8007444 <xTaskRemoveFromEventList+0xb4>)
 80073ea:	6013      	str	r3, [r2, #0]
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f0:	4613      	mov	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4a13      	ldr	r2, [pc, #76]	; (8007448 <xTaskRemoveFromEventList+0xb8>)
 80073fa:	441a      	add	r2, r3
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	3304      	adds	r3, #4
 8007400:	4619      	mov	r1, r3
 8007402:	4610      	mov	r0, r2
 8007404:	f7fe f9a5 	bl	8005752 <vListInsertEnd>
 8007408:	e005      	b.n	8007416 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3318      	adds	r3, #24
 800740e:	4619      	mov	r1, r3
 8007410:	480e      	ldr	r0, [pc, #56]	; (800744c <xTaskRemoveFromEventList+0xbc>)
 8007412:	f7fe f99e 	bl	8005752 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741a:	4b0d      	ldr	r3, [pc, #52]	; (8007450 <xTaskRemoveFromEventList+0xc0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007420:	429a      	cmp	r2, r3
 8007422:	d905      	bls.n	8007430 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007424:	2301      	movs	r3, #1
 8007426:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007428:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <xTaskRemoveFromEventList+0xc4>)
 800742a:	2201      	movs	r2, #1
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	e001      	b.n	8007434 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007430:	2300      	movs	r3, #0
 8007432:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007434:	697b      	ldr	r3, [r7, #20]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20005a48 	.word	0x20005a48
 8007444:	20005a28 	.word	0x20005a28
 8007448:	20005550 	.word	0x20005550
 800744c:	200059e0 	.word	0x200059e0
 8007450:	2000554c 	.word	0x2000554c
 8007454:	20005a34 	.word	0x20005a34

08007458 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007460:	4b06      	ldr	r3, [pc, #24]	; (800747c <vTaskInternalSetTimeOutState+0x24>)
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007468:	4b05      	ldr	r3, [pc, #20]	; (8007480 <vTaskInternalSetTimeOutState+0x28>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	605a      	str	r2, [r3, #4]
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	20005a38 	.word	0x20005a38
 8007480:	20005a24 	.word	0x20005a24

08007484 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10a      	bne.n	80074aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	613b      	str	r3, [r7, #16]
}
 80074a6:	bf00      	nop
 80074a8:	e7fe      	b.n	80074a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10a      	bne.n	80074c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	60fb      	str	r3, [r7, #12]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80074c6:	f000 ff8d 	bl	80083e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074ca:	4b1d      	ldr	r3, [pc, #116]	; (8007540 <xTaskCheckForTimeOut+0xbc>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074e2:	d102      	bne.n	80074ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074e4:	2300      	movs	r3, #0
 80074e6:	61fb      	str	r3, [r7, #28]
 80074e8:	e023      	b.n	8007532 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	4b15      	ldr	r3, [pc, #84]	; (8007544 <xTaskCheckForTimeOut+0xc0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d007      	beq.n	8007506 <xTaskCheckForTimeOut+0x82>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	69ba      	ldr	r2, [r7, #24]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d302      	bcc.n	8007506 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007500:	2301      	movs	r3, #1
 8007502:	61fb      	str	r3, [r7, #28]
 8007504:	e015      	b.n	8007532 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	429a      	cmp	r2, r3
 800750e:	d20b      	bcs.n	8007528 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	1ad2      	subs	r2, r2, r3
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7ff ff9b 	bl	8007458 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007522:	2300      	movs	r3, #0
 8007524:	61fb      	str	r3, [r7, #28]
 8007526:	e004      	b.n	8007532 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2200      	movs	r2, #0
 800752c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800752e:	2301      	movs	r3, #1
 8007530:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007532:	f000 ff87 	bl	8008444 <vPortExitCritical>

	return xReturn;
 8007536:	69fb      	ldr	r3, [r7, #28]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3720      	adds	r7, #32
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	20005a24 	.word	0x20005a24
 8007544:	20005a38 	.word	0x20005a38

08007548 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007548:	b480      	push	{r7}
 800754a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800754c:	4b03      	ldr	r3, [pc, #12]	; (800755c <vTaskMissedYield+0x14>)
 800754e:	2201      	movs	r2, #1
 8007550:	601a      	str	r2, [r3, #0]
}
 8007552:	bf00      	nop
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	20005a34 	.word	0x20005a34

08007560 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007568:	f000 f852 	bl	8007610 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800756c:	4b06      	ldr	r3, [pc, #24]	; (8007588 <prvIdleTask+0x28>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d9f9      	bls.n	8007568 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007574:	4b05      	ldr	r3, [pc, #20]	; (800758c <prvIdleTask+0x2c>)
 8007576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007584:	e7f0      	b.n	8007568 <prvIdleTask+0x8>
 8007586:	bf00      	nop
 8007588:	20005550 	.word	0x20005550
 800758c:	e000ed04 	.word	0xe000ed04

08007590 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007596:	2300      	movs	r3, #0
 8007598:	607b      	str	r3, [r7, #4]
 800759a:	e00c      	b.n	80075b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	4613      	mov	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4a12      	ldr	r2, [pc, #72]	; (80075f0 <prvInitialiseTaskLists+0x60>)
 80075a8:	4413      	add	r3, r2
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fe f8a4 	bl	80056f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3301      	adds	r3, #1
 80075b4:	607b      	str	r3, [r7, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b37      	cmp	r3, #55	; 0x37
 80075ba:	d9ef      	bls.n	800759c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075bc:	480d      	ldr	r0, [pc, #52]	; (80075f4 <prvInitialiseTaskLists+0x64>)
 80075be:	f7fe f89b 	bl	80056f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075c2:	480d      	ldr	r0, [pc, #52]	; (80075f8 <prvInitialiseTaskLists+0x68>)
 80075c4:	f7fe f898 	bl	80056f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075c8:	480c      	ldr	r0, [pc, #48]	; (80075fc <prvInitialiseTaskLists+0x6c>)
 80075ca:	f7fe f895 	bl	80056f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075ce:	480c      	ldr	r0, [pc, #48]	; (8007600 <prvInitialiseTaskLists+0x70>)
 80075d0:	f7fe f892 	bl	80056f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075d4:	480b      	ldr	r0, [pc, #44]	; (8007604 <prvInitialiseTaskLists+0x74>)
 80075d6:	f7fe f88f 	bl	80056f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075da:	4b0b      	ldr	r3, [pc, #44]	; (8007608 <prvInitialiseTaskLists+0x78>)
 80075dc:	4a05      	ldr	r2, [pc, #20]	; (80075f4 <prvInitialiseTaskLists+0x64>)
 80075de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075e0:	4b0a      	ldr	r3, [pc, #40]	; (800760c <prvInitialiseTaskLists+0x7c>)
 80075e2:	4a05      	ldr	r2, [pc, #20]	; (80075f8 <prvInitialiseTaskLists+0x68>)
 80075e4:	601a      	str	r2, [r3, #0]
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	20005550 	.word	0x20005550
 80075f4:	200059b0 	.word	0x200059b0
 80075f8:	200059c4 	.word	0x200059c4
 80075fc:	200059e0 	.word	0x200059e0
 8007600:	200059f4 	.word	0x200059f4
 8007604:	20005a0c 	.word	0x20005a0c
 8007608:	200059d8 	.word	0x200059d8
 800760c:	200059dc 	.word	0x200059dc

08007610 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007616:	e019      	b.n	800764c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007618:	f000 fee4 	bl	80083e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800761c:	4b10      	ldr	r3, [pc, #64]	; (8007660 <prvCheckTasksWaitingTermination+0x50>)
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3304      	adds	r3, #4
 8007628:	4618      	mov	r0, r3
 800762a:	f7fe f8ef 	bl	800580c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800762e:	4b0d      	ldr	r3, [pc, #52]	; (8007664 <prvCheckTasksWaitingTermination+0x54>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3b01      	subs	r3, #1
 8007634:	4a0b      	ldr	r2, [pc, #44]	; (8007664 <prvCheckTasksWaitingTermination+0x54>)
 8007636:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007638:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <prvCheckTasksWaitingTermination+0x58>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3b01      	subs	r3, #1
 800763e:	4a0a      	ldr	r2, [pc, #40]	; (8007668 <prvCheckTasksWaitingTermination+0x58>)
 8007640:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007642:	f000 feff 	bl	8008444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f810 	bl	800766c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800764c:	4b06      	ldr	r3, [pc, #24]	; (8007668 <prvCheckTasksWaitingTermination+0x58>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1e1      	bne.n	8007618 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	200059f4 	.word	0x200059f4
 8007664:	20005a20 	.word	0x20005a20
 8007668:	20005a08 	.word	0x20005a08

0800766c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3354      	adds	r3, #84	; 0x54
 8007678:	4618      	mov	r0, r3
 800767a:	f012 f8d7 	bl	801982c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007684:	2b00      	cmp	r3, #0
 8007686:	d108      	bne.n	800769a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768c:	4618      	mov	r0, r3
 800768e:	f001 f897 	bl	80087c0 <vPortFree>
				vPortFree( pxTCB );
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 f894 	bl	80087c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007698:	e018      	b.n	80076cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d103      	bne.n	80076ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 f88b 	bl	80087c0 <vPortFree>
	}
 80076aa:	e00f      	b.n	80076cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d00a      	beq.n	80076cc <prvDeleteTCB+0x60>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	60fb      	str	r3, [r7, #12]
}
 80076c8:	bf00      	nop
 80076ca:	e7fe      	b.n	80076ca <prvDeleteTCB+0x5e>
	}
 80076cc:	bf00      	nop
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076da:	4b0c      	ldr	r3, [pc, #48]	; (800770c <prvResetNextTaskUnblockTime+0x38>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d104      	bne.n	80076ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076e4:	4b0a      	ldr	r3, [pc, #40]	; (8007710 <prvResetNextTaskUnblockTime+0x3c>)
 80076e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076ec:	e008      	b.n	8007700 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ee:	4b07      	ldr	r3, [pc, #28]	; (800770c <prvResetNextTaskUnblockTime+0x38>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	4a04      	ldr	r2, [pc, #16]	; (8007710 <prvResetNextTaskUnblockTime+0x3c>)
 80076fe:	6013      	str	r3, [r2, #0]
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	200059d8 	.word	0x200059d8
 8007710:	20005a40 	.word	0x20005a40

08007714 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800771a:	4b05      	ldr	r3, [pc, #20]	; (8007730 <xTaskGetCurrentTaskHandle+0x1c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007720:	687b      	ldr	r3, [r7, #4]
	}
 8007722:	4618      	mov	r0, r3
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	2000554c 	.word	0x2000554c

08007734 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800773a:	4b0b      	ldr	r3, [pc, #44]	; (8007768 <xTaskGetSchedulerState+0x34>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d102      	bne.n	8007748 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007742:	2301      	movs	r3, #1
 8007744:	607b      	str	r3, [r7, #4]
 8007746:	e008      	b.n	800775a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007748:	4b08      	ldr	r3, [pc, #32]	; (800776c <xTaskGetSchedulerState+0x38>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d102      	bne.n	8007756 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007750:	2302      	movs	r3, #2
 8007752:	607b      	str	r3, [r7, #4]
 8007754:	e001      	b.n	800775a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007756:	2300      	movs	r3, #0
 8007758:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800775a:	687b      	ldr	r3, [r7, #4]
	}
 800775c:	4618      	mov	r0, r3
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	20005a2c 	.word	0x20005a2c
 800776c:	20005a48 	.word	0x20005a48

08007770 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800777c:	2300      	movs	r3, #0
 800777e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d051      	beq.n	800782a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778a:	4b2a      	ldr	r3, [pc, #168]	; (8007834 <xTaskPriorityInherit+0xc4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007790:	429a      	cmp	r2, r3
 8007792:	d241      	bcs.n	8007818 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	2b00      	cmp	r3, #0
 800779a:	db06      	blt.n	80077aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800779c:	4b25      	ldr	r3, [pc, #148]	; (8007834 <xTaskPriorityInherit+0xc4>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	6959      	ldr	r1, [r3, #20]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b2:	4613      	mov	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4a1f      	ldr	r2, [pc, #124]	; (8007838 <xTaskPriorityInherit+0xc8>)
 80077bc:	4413      	add	r3, r2
 80077be:	4299      	cmp	r1, r3
 80077c0:	d122      	bne.n	8007808 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	3304      	adds	r3, #4
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fe f820 	bl	800580c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80077cc:	4b19      	ldr	r3, [pc, #100]	; (8007834 <xTaskPriorityInherit+0xc4>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077da:	4b18      	ldr	r3, [pc, #96]	; (800783c <xTaskPriorityInherit+0xcc>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d903      	bls.n	80077ea <xTaskPriorityInherit+0x7a>
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	4a15      	ldr	r2, [pc, #84]	; (800783c <xTaskPriorityInherit+0xcc>)
 80077e8:	6013      	str	r3, [r2, #0]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ee:	4613      	mov	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4a10      	ldr	r2, [pc, #64]	; (8007838 <xTaskPriorityInherit+0xc8>)
 80077f8:	441a      	add	r2, r3
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	3304      	adds	r3, #4
 80077fe:	4619      	mov	r1, r3
 8007800:	4610      	mov	r0, r2
 8007802:	f7fd ffa6 	bl	8005752 <vListInsertEnd>
 8007806:	e004      	b.n	8007812 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007808:	4b0a      	ldr	r3, [pc, #40]	; (8007834 <xTaskPriorityInherit+0xc4>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007812:	2301      	movs	r3, #1
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	e008      	b.n	800782a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800781c:	4b05      	ldr	r3, [pc, #20]	; (8007834 <xTaskPriorityInherit+0xc4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007822:	429a      	cmp	r2, r3
 8007824:	d201      	bcs.n	800782a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007826:	2301      	movs	r3, #1
 8007828:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800782a:	68fb      	ldr	r3, [r7, #12]
	}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	2000554c 	.word	0x2000554c
 8007838:	20005550 	.word	0x20005550
 800783c:	20005a28 	.word	0x20005a28

08007840 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800784c:	2300      	movs	r3, #0
 800784e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d056      	beq.n	8007904 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007856:	4b2e      	ldr	r3, [pc, #184]	; (8007910 <xTaskPriorityDisinherit+0xd0>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	429a      	cmp	r2, r3
 800785e:	d00a      	beq.n	8007876 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	60fb      	str	r3, [r7, #12]
}
 8007872:	bf00      	nop
 8007874:	e7fe      	b.n	8007874 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10a      	bne.n	8007894 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	60bb      	str	r3, [r7, #8]
}
 8007890:	bf00      	nop
 8007892:	e7fe      	b.n	8007892 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007898:	1e5a      	subs	r2, r3, #1
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d02c      	beq.n	8007904 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d128      	bne.n	8007904 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	3304      	adds	r3, #4
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fd ffa8 	bl	800580c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d4:	4b0f      	ldr	r3, [pc, #60]	; (8007914 <xTaskPriorityDisinherit+0xd4>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d903      	bls.n	80078e4 <xTaskPriorityDisinherit+0xa4>
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e0:	4a0c      	ldr	r2, [pc, #48]	; (8007914 <xTaskPriorityDisinherit+0xd4>)
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e8:	4613      	mov	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4a09      	ldr	r2, [pc, #36]	; (8007918 <xTaskPriorityDisinherit+0xd8>)
 80078f2:	441a      	add	r2, r3
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	3304      	adds	r3, #4
 80078f8:	4619      	mov	r1, r3
 80078fa:	4610      	mov	r0, r2
 80078fc:	f7fd ff29 	bl	8005752 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007900:	2301      	movs	r3, #1
 8007902:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007904:	697b      	ldr	r3, [r7, #20]
	}
 8007906:	4618      	mov	r0, r3
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	2000554c 	.word	0x2000554c
 8007914:	20005a28 	.word	0x20005a28
 8007918:	20005550 	.word	0x20005550

0800791c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800792a:	2301      	movs	r3, #1
 800792c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d06a      	beq.n	8007a0a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10a      	bne.n	8007952 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	60fb      	str	r3, [r7, #12]
}
 800794e:	bf00      	nop
 8007950:	e7fe      	b.n	8007950 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	429a      	cmp	r2, r3
 800795a:	d902      	bls.n	8007962 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	61fb      	str	r3, [r7, #28]
 8007960:	e002      	b.n	8007968 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007966:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	69fa      	ldr	r2, [r7, #28]
 800796e:	429a      	cmp	r2, r3
 8007970:	d04b      	beq.n	8007a0a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	429a      	cmp	r2, r3
 800797a:	d146      	bne.n	8007a0a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800797c:	4b25      	ldr	r3, [pc, #148]	; (8007a14 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	429a      	cmp	r2, r3
 8007984:	d10a      	bne.n	800799c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	60bb      	str	r3, [r7, #8]
}
 8007998:	bf00      	nop
 800799a:	e7fe      	b.n	800799a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	69fa      	ldr	r2, [r7, #28]
 80079a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	db04      	blt.n	80079ba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	6959      	ldr	r1, [r3, #20]
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	4613      	mov	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4a13      	ldr	r2, [pc, #76]	; (8007a18 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80079ca:	4413      	add	r3, r2
 80079cc:	4299      	cmp	r1, r3
 80079ce:	d11c      	bne.n	8007a0a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	3304      	adds	r3, #4
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fd ff19 	bl	800580c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079de:	4b0f      	ldr	r3, [pc, #60]	; (8007a1c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d903      	bls.n	80079ee <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ea:	4a0c      	ldr	r2, [pc, #48]	; (8007a1c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4a07      	ldr	r2, [pc, #28]	; (8007a18 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80079fc:	441a      	add	r2, r3
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	3304      	adds	r3, #4
 8007a02:	4619      	mov	r1, r3
 8007a04:	4610      	mov	r0, r2
 8007a06:	f7fd fea4 	bl	8005752 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a0a:	bf00      	nop
 8007a0c:	3720      	adds	r7, #32
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	2000554c 	.word	0x2000554c
 8007a18:	20005550 	.word	0x20005550
 8007a1c:	20005a28 	.word	0x20005a28

08007a20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007a20:	b480      	push	{r7}
 8007a22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007a24:	4b07      	ldr	r3, [pc, #28]	; (8007a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d004      	beq.n	8007a36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a2c:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a32:	3201      	adds	r2, #1
 8007a34:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007a36:	4b03      	ldr	r3, [pc, #12]	; (8007a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a38:	681b      	ldr	r3, [r3, #0]
	}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	2000554c 	.word	0x2000554c

08007a48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a52:	4b21      	ldr	r3, [pc, #132]	; (8007ad8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a58:	4b20      	ldr	r3, [pc, #128]	; (8007adc <prvAddCurrentTaskToDelayedList+0x94>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fd fed4 	bl	800580c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a6a:	d10a      	bne.n	8007a82 <prvAddCurrentTaskToDelayedList+0x3a>
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d007      	beq.n	8007a82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a72:	4b1a      	ldr	r3, [pc, #104]	; (8007adc <prvAddCurrentTaskToDelayedList+0x94>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3304      	adds	r3, #4
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4819      	ldr	r0, [pc, #100]	; (8007ae0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007a7c:	f7fd fe69 	bl	8005752 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a80:	e026      	b.n	8007ad0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4413      	add	r3, r2
 8007a88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a8a:	4b14      	ldr	r3, [pc, #80]	; (8007adc <prvAddCurrentTaskToDelayedList+0x94>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d209      	bcs.n	8007aae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a9a:	4b12      	ldr	r3, [pc, #72]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	4b0f      	ldr	r3, [pc, #60]	; (8007adc <prvAddCurrentTaskToDelayedList+0x94>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	f7fd fe77 	bl	800579a <vListInsert>
}
 8007aac:	e010      	b.n	8007ad0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aae:	4b0e      	ldr	r3, [pc, #56]	; (8007ae8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <prvAddCurrentTaskToDelayedList+0x94>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	4619      	mov	r1, r3
 8007aba:	4610      	mov	r0, r2
 8007abc:	f7fd fe6d 	bl	800579a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ac0:	4b0a      	ldr	r3, [pc, #40]	; (8007aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d202      	bcs.n	8007ad0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007aca:	4a08      	ldr	r2, [pc, #32]	; (8007aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	6013      	str	r3, [r2, #0]
}
 8007ad0:	bf00      	nop
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	20005a24 	.word	0x20005a24
 8007adc:	2000554c 	.word	0x2000554c
 8007ae0:	20005a0c 	.word	0x20005a0c
 8007ae4:	200059dc 	.word	0x200059dc
 8007ae8:	200059d8 	.word	0x200059d8
 8007aec:	20005a40 	.word	0x20005a40

08007af0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08a      	sub	sp, #40	; 0x28
 8007af4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007af6:	2300      	movs	r3, #0
 8007af8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007afa:	f000 fb07 	bl	800810c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007afe:	4b1c      	ldr	r3, [pc, #112]	; (8007b70 <xTimerCreateTimerTask+0x80>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d021      	beq.n	8007b4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b0e:	1d3a      	adds	r2, r7, #4
 8007b10:	f107 0108 	add.w	r1, r7, #8
 8007b14:	f107 030c 	add.w	r3, r7, #12
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fd fdd3 	bl	80056c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	9202      	str	r2, [sp, #8]
 8007b26:	9301      	str	r3, [sp, #4]
 8007b28:	2302      	movs	r3, #2
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	460a      	mov	r2, r1
 8007b30:	4910      	ldr	r1, [pc, #64]	; (8007b74 <xTimerCreateTimerTask+0x84>)
 8007b32:	4811      	ldr	r0, [pc, #68]	; (8007b78 <xTimerCreateTimerTask+0x88>)
 8007b34:	f7fe ff94 	bl	8006a60 <xTaskCreateStatic>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	4a10      	ldr	r2, [pc, #64]	; (8007b7c <xTimerCreateTimerTask+0x8c>)
 8007b3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b3e:	4b0f      	ldr	r3, [pc, #60]	; (8007b7c <xTimerCreateTimerTask+0x8c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d001      	beq.n	8007b4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b46:	2301      	movs	r3, #1
 8007b48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10a      	bne.n	8007b66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	613b      	str	r3, [r7, #16]
}
 8007b62:	bf00      	nop
 8007b64:	e7fe      	b.n	8007b64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007b66:	697b      	ldr	r3, [r7, #20]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	20005a7c 	.word	0x20005a7c
 8007b74:	0801a69c 	.word	0x0801a69c
 8007b78:	08007cb5 	.word	0x08007cb5
 8007b7c:	20005a80 	.word	0x20005a80

08007b80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b08a      	sub	sp, #40	; 0x28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10a      	bne.n	8007bae <xTimerGenericCommand+0x2e>
	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	623b      	str	r3, [r7, #32]
}
 8007baa:	bf00      	nop
 8007bac:	e7fe      	b.n	8007bac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007bae:	4b1a      	ldr	r3, [pc, #104]	; (8007c18 <xTimerGenericCommand+0x98>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d02a      	beq.n	8007c0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b05      	cmp	r3, #5
 8007bc6:	dc18      	bgt.n	8007bfa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007bc8:	f7ff fdb4 	bl	8007734 <xTaskGetSchedulerState>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d109      	bne.n	8007be6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007bd2:	4b11      	ldr	r3, [pc, #68]	; (8007c18 <xTimerGenericCommand+0x98>)
 8007bd4:	6818      	ldr	r0, [r3, #0]
 8007bd6:	f107 0110 	add.w	r1, r7, #16
 8007bda:	2300      	movs	r3, #0
 8007bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bde:	f7fe f89d 	bl	8005d1c <xQueueGenericSend>
 8007be2:	6278      	str	r0, [r7, #36]	; 0x24
 8007be4:	e012      	b.n	8007c0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007be6:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <xTimerGenericCommand+0x98>)
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	f107 0110 	add.w	r1, r7, #16
 8007bee:	2300      	movs	r3, #0
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f7fe f893 	bl	8005d1c <xQueueGenericSend>
 8007bf6:	6278      	str	r0, [r7, #36]	; 0x24
 8007bf8:	e008      	b.n	8007c0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007bfa:	4b07      	ldr	r3, [pc, #28]	; (8007c18 <xTimerGenericCommand+0x98>)
 8007bfc:	6818      	ldr	r0, [r3, #0]
 8007bfe:	f107 0110 	add.w	r1, r7, #16
 8007c02:	2300      	movs	r3, #0
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	f7fe f987 	bl	8005f18 <xQueueGenericSendFromISR>
 8007c0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3728      	adds	r7, #40	; 0x28
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20005a7c 	.word	0x20005a7c

08007c1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c26:	4b22      	ldr	r3, [pc, #136]	; (8007cb0 <prvProcessExpiredTimer+0x94>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7fd fde9 	bl	800580c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d022      	beq.n	8007c8e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	699a      	ldr	r2, [r3, #24]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	18d1      	adds	r1, r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	6978      	ldr	r0, [r7, #20]
 8007c56:	f000 f8d1 	bl	8007dfc <prvInsertTimerInActiveList>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01f      	beq.n	8007ca0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c60:	2300      	movs	r3, #0
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	2300      	movs	r3, #0
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	2100      	movs	r1, #0
 8007c6a:	6978      	ldr	r0, [r7, #20]
 8007c6c:	f7ff ff88 	bl	8007b80 <xTimerGenericCommand>
 8007c70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d113      	bne.n	8007ca0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	60fb      	str	r3, [r7, #12]
}
 8007c8a:	bf00      	nop
 8007c8c:	e7fe      	b.n	8007c8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c94:	f023 0301 	bic.w	r3, r3, #1
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	6978      	ldr	r0, [r7, #20]
 8007ca6:	4798      	blx	r3
}
 8007ca8:	bf00      	nop
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20005a74 	.word	0x20005a74

08007cb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cbc:	f107 0308 	add.w	r3, r7, #8
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 f857 	bl	8007d74 <prvGetNextExpireTime>
 8007cc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 f803 	bl	8007cd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007cd2:	f000 f8d5 	bl	8007e80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cd6:	e7f1      	b.n	8007cbc <prvTimerTask+0x8>

08007cd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ce2:	f7ff f919 	bl	8006f18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ce6:	f107 0308 	add.w	r3, r7, #8
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 f866 	bl	8007dbc <prvSampleTimeNow>
 8007cf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d130      	bne.n	8007d5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10a      	bne.n	8007d14 <prvProcessTimerOrBlockTask+0x3c>
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d806      	bhi.n	8007d14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d06:	f7ff f915 	bl	8006f34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d0a:	68f9      	ldr	r1, [r7, #12]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7ff ff85 	bl	8007c1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d12:	e024      	b.n	8007d5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d008      	beq.n	8007d2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d1a:	4b13      	ldr	r3, [pc, #76]	; (8007d68 <prvProcessTimerOrBlockTask+0x90>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <prvProcessTimerOrBlockTask+0x50>
 8007d24:	2301      	movs	r3, #1
 8007d26:	e000      	b.n	8007d2a <prvProcessTimerOrBlockTask+0x52>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d2c:	4b0f      	ldr	r3, [pc, #60]	; (8007d6c <prvProcessTimerOrBlockTask+0x94>)
 8007d2e:	6818      	ldr	r0, [r3, #0]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	f7fe fe5d 	bl	80069f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d3e:	f7ff f8f9 	bl	8006f34 <xTaskResumeAll>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10a      	bne.n	8007d5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d48:	4b09      	ldr	r3, [pc, #36]	; (8007d70 <prvProcessTimerOrBlockTask+0x98>)
 8007d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	f3bf 8f6f 	isb	sy
}
 8007d58:	e001      	b.n	8007d5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007d5a:	f7ff f8eb 	bl	8006f34 <xTaskResumeAll>
}
 8007d5e:	bf00      	nop
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20005a78 	.word	0x20005a78
 8007d6c:	20005a7c 	.word	0x20005a7c
 8007d70:	e000ed04 	.word	0xe000ed04

08007d74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007d7c:	4b0e      	ldr	r3, [pc, #56]	; (8007db8 <prvGetNextExpireTime+0x44>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <prvGetNextExpireTime+0x16>
 8007d86:	2201      	movs	r2, #1
 8007d88:	e000      	b.n	8007d8c <prvGetNextExpireTime+0x18>
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d105      	bne.n	8007da4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d98:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <prvGetNextExpireTime+0x44>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	60fb      	str	r3, [r7, #12]
 8007da2:	e001      	b.n	8007da8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007da8:	68fb      	ldr	r3, [r7, #12]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	20005a74 	.word	0x20005a74

08007dbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007dc4:	f7ff f954 	bl	8007070 <xTaskGetTickCount>
 8007dc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007dca:	4b0b      	ldr	r3, [pc, #44]	; (8007df8 <prvSampleTimeNow+0x3c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d205      	bcs.n	8007de0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007dd4:	f000 f936 	bl	8008044 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	e002      	b.n	8007de6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007de6:	4a04      	ldr	r2, [pc, #16]	; (8007df8 <prvSampleTimeNow+0x3c>)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007dec:	68fb      	ldr	r3, [r7, #12]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20005a84 	.word	0x20005a84

08007dfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d812      	bhi.n	8007e48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	1ad2      	subs	r2, r2, r3
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d302      	bcc.n	8007e36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e30:	2301      	movs	r3, #1
 8007e32:	617b      	str	r3, [r7, #20]
 8007e34:	e01b      	b.n	8007e6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e36:	4b10      	ldr	r3, [pc, #64]	; (8007e78 <prvInsertTimerInActiveList+0x7c>)
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4610      	mov	r0, r2
 8007e42:	f7fd fcaa 	bl	800579a <vListInsert>
 8007e46:	e012      	b.n	8007e6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d206      	bcs.n	8007e5e <prvInsertTimerInActiveList+0x62>
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d302      	bcc.n	8007e5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	e007      	b.n	8007e6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e5e:	4b07      	ldr	r3, [pc, #28]	; (8007e7c <prvInsertTimerInActiveList+0x80>)
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3304      	adds	r3, #4
 8007e66:	4619      	mov	r1, r3
 8007e68:	4610      	mov	r0, r2
 8007e6a:	f7fd fc96 	bl	800579a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007e6e:	697b      	ldr	r3, [r7, #20]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3718      	adds	r7, #24
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	20005a78 	.word	0x20005a78
 8007e7c:	20005a74 	.word	0x20005a74

08007e80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b08e      	sub	sp, #56	; 0x38
 8007e84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e86:	e0ca      	b.n	800801e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	da18      	bge.n	8007ec0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007e8e:	1d3b      	adds	r3, r7, #4
 8007e90:	3304      	adds	r3, #4
 8007e92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	61fb      	str	r3, [r7, #28]
}
 8007eac:	bf00      	nop
 8007eae:	e7fe      	b.n	8007eae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eb6:	6850      	ldr	r0, [r2, #4]
 8007eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eba:	6892      	ldr	r2, [r2, #8]
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f2c0 80aa 	blt.w	800801c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d004      	beq.n	8007ede <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fd fc97 	bl	800580c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ede:	463b      	mov	r3, r7
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7ff ff6b 	bl	8007dbc <prvSampleTimeNow>
 8007ee6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b09      	cmp	r3, #9
 8007eec:	f200 8097 	bhi.w	800801e <prvProcessReceivedCommands+0x19e>
 8007ef0:	a201      	add	r2, pc, #4	; (adr r2, 8007ef8 <prvProcessReceivedCommands+0x78>)
 8007ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef6:	bf00      	nop
 8007ef8:	08007f21 	.word	0x08007f21
 8007efc:	08007f21 	.word	0x08007f21
 8007f00:	08007f21 	.word	0x08007f21
 8007f04:	08007f95 	.word	0x08007f95
 8007f08:	08007fa9 	.word	0x08007fa9
 8007f0c:	08007ff3 	.word	0x08007ff3
 8007f10:	08007f21 	.word	0x08007f21
 8007f14:	08007f21 	.word	0x08007f21
 8007f18:	08007f95 	.word	0x08007f95
 8007f1c:	08007fa9 	.word	0x08007fa9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f26:	f043 0301 	orr.w	r3, r3, #1
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	18d1      	adds	r1, r2, r3
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f40:	f7ff ff5c 	bl	8007dfc <prvInsertTimerInActiveList>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d069      	beq.n	800801e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f58:	f003 0304 	and.w	r3, r3, #4
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d05e      	beq.n	800801e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	441a      	add	r2, r3
 8007f68:	2300      	movs	r3, #0
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	2100      	movs	r1, #0
 8007f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f72:	f7ff fe05 	bl	8007b80 <xTimerGenericCommand>
 8007f76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d14f      	bne.n	800801e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	61bb      	str	r3, [r7, #24]
}
 8007f90:	bf00      	nop
 8007f92:	e7fe      	b.n	8007f92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f9a:	f023 0301 	bic.w	r3, r3, #1
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007fa6:	e03a      	b.n	800801e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007faa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fae:	f043 0301 	orr.w	r3, r3, #1
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10a      	bne.n	8007fde <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	617b      	str	r3, [r7, #20]
}
 8007fda:	bf00      	nop
 8007fdc:	e7fe      	b.n	8007fdc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe0:	699a      	ldr	r2, [r3, #24]
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	18d1      	adds	r1, r2, r3
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fec:	f7ff ff06 	bl	8007dfc <prvInsertTimerInActiveList>
					break;
 8007ff0:	e015      	b.n	800801e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d103      	bne.n	8008008 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008002:	f000 fbdd 	bl	80087c0 <vPortFree>
 8008006:	e00a      	b.n	800801e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800800e:	f023 0301 	bic.w	r3, r3, #1
 8008012:	b2da      	uxtb	r2, r3
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800801a:	e000      	b.n	800801e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800801c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800801e:	4b08      	ldr	r3, [pc, #32]	; (8008040 <prvProcessReceivedCommands+0x1c0>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	1d39      	adds	r1, r7, #4
 8008024:	2200      	movs	r2, #0
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe f89e 	bl	8006168 <xQueueReceive>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	f47f af2a 	bne.w	8007e88 <prvProcessReceivedCommands+0x8>
	}
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop
 8008038:	3730      	adds	r7, #48	; 0x30
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20005a7c 	.word	0x20005a7c

08008044 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800804a:	e048      	b.n	80080de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800804c:	4b2d      	ldr	r3, [pc, #180]	; (8008104 <prvSwitchTimerLists+0xc0>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008056:	4b2b      	ldr	r3, [pc, #172]	; (8008104 <prvSwitchTimerLists+0xc0>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	3304      	adds	r3, #4
 8008064:	4618      	mov	r0, r3
 8008066:	f7fd fbd1 	bl	800580c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008078:	f003 0304 	and.w	r3, r3, #4
 800807c:	2b00      	cmp	r3, #0
 800807e:	d02e      	beq.n	80080de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	4413      	add	r3, r2
 8008088:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	429a      	cmp	r2, r3
 8008090:	d90e      	bls.n	80080b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800809e:	4b19      	ldr	r3, [pc, #100]	; (8008104 <prvSwitchTimerLists+0xc0>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3304      	adds	r3, #4
 80080a6:	4619      	mov	r1, r3
 80080a8:	4610      	mov	r0, r2
 80080aa:	f7fd fb76 	bl	800579a <vListInsert>
 80080ae:	e016      	b.n	80080de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080b0:	2300      	movs	r3, #0
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	2300      	movs	r3, #0
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	2100      	movs	r1, #0
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7ff fd60 	bl	8007b80 <xTimerGenericCommand>
 80080c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10a      	bne.n	80080de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	603b      	str	r3, [r7, #0]
}
 80080da:	bf00      	nop
 80080dc:	e7fe      	b.n	80080dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080de:	4b09      	ldr	r3, [pc, #36]	; (8008104 <prvSwitchTimerLists+0xc0>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1b1      	bne.n	800804c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80080e8:	4b06      	ldr	r3, [pc, #24]	; (8008104 <prvSwitchTimerLists+0xc0>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80080ee:	4b06      	ldr	r3, [pc, #24]	; (8008108 <prvSwitchTimerLists+0xc4>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a04      	ldr	r2, [pc, #16]	; (8008104 <prvSwitchTimerLists+0xc0>)
 80080f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80080f6:	4a04      	ldr	r2, [pc, #16]	; (8008108 <prvSwitchTimerLists+0xc4>)
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	6013      	str	r3, [r2, #0]
}
 80080fc:	bf00      	nop
 80080fe:	3718      	adds	r7, #24
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	20005a74 	.word	0x20005a74
 8008108:	20005a78 	.word	0x20005a78

0800810c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008112:	f000 f967 	bl	80083e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008116:	4b15      	ldr	r3, [pc, #84]	; (800816c <prvCheckForValidListAndQueue+0x60>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d120      	bne.n	8008160 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800811e:	4814      	ldr	r0, [pc, #80]	; (8008170 <prvCheckForValidListAndQueue+0x64>)
 8008120:	f7fd faea 	bl	80056f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008124:	4813      	ldr	r0, [pc, #76]	; (8008174 <prvCheckForValidListAndQueue+0x68>)
 8008126:	f7fd fae7 	bl	80056f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800812a:	4b13      	ldr	r3, [pc, #76]	; (8008178 <prvCheckForValidListAndQueue+0x6c>)
 800812c:	4a10      	ldr	r2, [pc, #64]	; (8008170 <prvCheckForValidListAndQueue+0x64>)
 800812e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008130:	4b12      	ldr	r3, [pc, #72]	; (800817c <prvCheckForValidListAndQueue+0x70>)
 8008132:	4a10      	ldr	r2, [pc, #64]	; (8008174 <prvCheckForValidListAndQueue+0x68>)
 8008134:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008136:	2300      	movs	r3, #0
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	4b11      	ldr	r3, [pc, #68]	; (8008180 <prvCheckForValidListAndQueue+0x74>)
 800813c:	4a11      	ldr	r2, [pc, #68]	; (8008184 <prvCheckForValidListAndQueue+0x78>)
 800813e:	2110      	movs	r1, #16
 8008140:	200a      	movs	r0, #10
 8008142:	f7fd fbf5 	bl	8005930 <xQueueGenericCreateStatic>
 8008146:	4603      	mov	r3, r0
 8008148:	4a08      	ldr	r2, [pc, #32]	; (800816c <prvCheckForValidListAndQueue+0x60>)
 800814a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800814c:	4b07      	ldr	r3, [pc, #28]	; (800816c <prvCheckForValidListAndQueue+0x60>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d005      	beq.n	8008160 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008154:	4b05      	ldr	r3, [pc, #20]	; (800816c <prvCheckForValidListAndQueue+0x60>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	490b      	ldr	r1, [pc, #44]	; (8008188 <prvCheckForValidListAndQueue+0x7c>)
 800815a:	4618      	mov	r0, r3
 800815c:	f7fe fbf8 	bl	8006950 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008160:	f000 f970 	bl	8008444 <vPortExitCritical>
}
 8008164:	bf00      	nop
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20005a7c 	.word	0x20005a7c
 8008170:	20005a4c 	.word	0x20005a4c
 8008174:	20005a60 	.word	0x20005a60
 8008178:	20005a74 	.word	0x20005a74
 800817c:	20005a78 	.word	0x20005a78
 8008180:	20005b28 	.word	0x20005b28
 8008184:	20005a88 	.word	0x20005a88
 8008188:	0801a6a4 	.word	0x0801a6a4

0800818c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3b04      	subs	r3, #4
 800819c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3b04      	subs	r3, #4
 80081aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f023 0201 	bic.w	r2, r3, #1
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3b04      	subs	r3, #4
 80081ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80081bc:	4a0c      	ldr	r2, [pc, #48]	; (80081f0 <pxPortInitialiseStack+0x64>)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	3b14      	subs	r3, #20
 80081c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	3b04      	subs	r3, #4
 80081d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f06f 0202 	mvn.w	r2, #2
 80081da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	3b20      	subs	r3, #32
 80081e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80081e2:	68fb      	ldr	r3, [r7, #12]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	080081f5 	.word	0x080081f5

080081f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80081fe:	4b12      	ldr	r3, [pc, #72]	; (8008248 <prvTaskExitError+0x54>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008206:	d00a      	beq.n	800821e <prvTaskExitError+0x2a>
	__asm volatile
 8008208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	60fb      	str	r3, [r7, #12]
}
 800821a:	bf00      	nop
 800821c:	e7fe      	b.n	800821c <prvTaskExitError+0x28>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	60bb      	str	r3, [r7, #8]
}
 8008230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008232:	bf00      	nop
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0fc      	beq.n	8008234 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800823a:	bf00      	nop
 800823c:	bf00      	nop
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr
 8008248:	20000020 	.word	0x20000020
 800824c:	00000000 	.word	0x00000000

08008250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008250:	4b07      	ldr	r3, [pc, #28]	; (8008270 <pxCurrentTCBConst2>)
 8008252:	6819      	ldr	r1, [r3, #0]
 8008254:	6808      	ldr	r0, [r1, #0]
 8008256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825a:	f380 8809 	msr	PSP, r0
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f04f 0000 	mov.w	r0, #0
 8008266:	f380 8811 	msr	BASEPRI, r0
 800826a:	4770      	bx	lr
 800826c:	f3af 8000 	nop.w

08008270 <pxCurrentTCBConst2>:
 8008270:	2000554c 	.word	0x2000554c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop

08008278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008278:	4808      	ldr	r0, [pc, #32]	; (800829c <prvPortStartFirstTask+0x24>)
 800827a:	6800      	ldr	r0, [r0, #0]
 800827c:	6800      	ldr	r0, [r0, #0]
 800827e:	f380 8808 	msr	MSP, r0
 8008282:	f04f 0000 	mov.w	r0, #0
 8008286:	f380 8814 	msr	CONTROL, r0
 800828a:	b662      	cpsie	i
 800828c:	b661      	cpsie	f
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	df00      	svc	0
 8008298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800829a:	bf00      	nop
 800829c:	e000ed08 	.word	0xe000ed08

080082a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80082a6:	4b46      	ldr	r3, [pc, #280]	; (80083c0 <xPortStartScheduler+0x120>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a46      	ldr	r2, [pc, #280]	; (80083c4 <xPortStartScheduler+0x124>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d10a      	bne.n	80082c6 <xPortStartScheduler+0x26>
	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	613b      	str	r3, [r7, #16]
}
 80082c2:	bf00      	nop
 80082c4:	e7fe      	b.n	80082c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80082c6:	4b3e      	ldr	r3, [pc, #248]	; (80083c0 <xPortStartScheduler+0x120>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a3f      	ldr	r2, [pc, #252]	; (80083c8 <xPortStartScheduler+0x128>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d10a      	bne.n	80082e6 <xPortStartScheduler+0x46>
	__asm volatile
 80082d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	60fb      	str	r3, [r7, #12]
}
 80082e2:	bf00      	nop
 80082e4:	e7fe      	b.n	80082e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082e6:	4b39      	ldr	r3, [pc, #228]	; (80083cc <xPortStartScheduler+0x12c>)
 80082e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	22ff      	movs	r2, #255	; 0xff
 80082f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	b2db      	uxtb	r3, r3
 8008304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008308:	b2da      	uxtb	r2, r3
 800830a:	4b31      	ldr	r3, [pc, #196]	; (80083d0 <xPortStartScheduler+0x130>)
 800830c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800830e:	4b31      	ldr	r3, [pc, #196]	; (80083d4 <xPortStartScheduler+0x134>)
 8008310:	2207      	movs	r2, #7
 8008312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008314:	e009      	b.n	800832a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008316:	4b2f      	ldr	r3, [pc, #188]	; (80083d4 <xPortStartScheduler+0x134>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3b01      	subs	r3, #1
 800831c:	4a2d      	ldr	r2, [pc, #180]	; (80083d4 <xPortStartScheduler+0x134>)
 800831e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	b2db      	uxtb	r3, r3
 8008324:	005b      	lsls	r3, r3, #1
 8008326:	b2db      	uxtb	r3, r3
 8008328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800832a:	78fb      	ldrb	r3, [r7, #3]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008332:	2b80      	cmp	r3, #128	; 0x80
 8008334:	d0ef      	beq.n	8008316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008336:	4b27      	ldr	r3, [pc, #156]	; (80083d4 <xPortStartScheduler+0x134>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f1c3 0307 	rsb	r3, r3, #7
 800833e:	2b04      	cmp	r3, #4
 8008340:	d00a      	beq.n	8008358 <xPortStartScheduler+0xb8>
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	60bb      	str	r3, [r7, #8]
}
 8008354:	bf00      	nop
 8008356:	e7fe      	b.n	8008356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008358:	4b1e      	ldr	r3, [pc, #120]	; (80083d4 <xPortStartScheduler+0x134>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	021b      	lsls	r3, r3, #8
 800835e:	4a1d      	ldr	r2, [pc, #116]	; (80083d4 <xPortStartScheduler+0x134>)
 8008360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008362:	4b1c      	ldr	r3, [pc, #112]	; (80083d4 <xPortStartScheduler+0x134>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800836a:	4a1a      	ldr	r2, [pc, #104]	; (80083d4 <xPortStartScheduler+0x134>)
 800836c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	b2da      	uxtb	r2, r3
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008376:	4b18      	ldr	r3, [pc, #96]	; (80083d8 <xPortStartScheduler+0x138>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a17      	ldr	r2, [pc, #92]	; (80083d8 <xPortStartScheduler+0x138>)
 800837c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008382:	4b15      	ldr	r3, [pc, #84]	; (80083d8 <xPortStartScheduler+0x138>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a14      	ldr	r2, [pc, #80]	; (80083d8 <xPortStartScheduler+0x138>)
 8008388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800838c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800838e:	f000 f8dd 	bl	800854c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008392:	4b12      	ldr	r3, [pc, #72]	; (80083dc <xPortStartScheduler+0x13c>)
 8008394:	2200      	movs	r2, #0
 8008396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008398:	f000 f8fc 	bl	8008594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800839c:	4b10      	ldr	r3, [pc, #64]	; (80083e0 <xPortStartScheduler+0x140>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a0f      	ldr	r2, [pc, #60]	; (80083e0 <xPortStartScheduler+0x140>)
 80083a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80083a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083a8:	f7ff ff66 	bl	8008278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083ac:	f7fe ff3c 	bl	8007228 <vTaskSwitchContext>
	prvTaskExitError();
 80083b0:	f7ff ff20 	bl	80081f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	e000ed00 	.word	0xe000ed00
 80083c4:	410fc271 	.word	0x410fc271
 80083c8:	410fc270 	.word	0x410fc270
 80083cc:	e000e400 	.word	0xe000e400
 80083d0:	20005b78 	.word	0x20005b78
 80083d4:	20005b7c 	.word	0x20005b7c
 80083d8:	e000ed20 	.word	0xe000ed20
 80083dc:	20000020 	.word	0x20000020
 80083e0:	e000ef34 	.word	0xe000ef34

080083e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
	__asm volatile
 80083ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	607b      	str	r3, [r7, #4]
}
 80083fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80083fe:	4b0f      	ldr	r3, [pc, #60]	; (800843c <vPortEnterCritical+0x58>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	3301      	adds	r3, #1
 8008404:	4a0d      	ldr	r2, [pc, #52]	; (800843c <vPortEnterCritical+0x58>)
 8008406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008408:	4b0c      	ldr	r3, [pc, #48]	; (800843c <vPortEnterCritical+0x58>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d10f      	bne.n	8008430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008410:	4b0b      	ldr	r3, [pc, #44]	; (8008440 <vPortEnterCritical+0x5c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <vPortEnterCritical+0x4c>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	603b      	str	r3, [r7, #0]
}
 800842c:	bf00      	nop
 800842e:	e7fe      	b.n	800842e <vPortEnterCritical+0x4a>
	}
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	20000020 	.word	0x20000020
 8008440:	e000ed04 	.word	0xe000ed04

08008444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800844a:	4b12      	ldr	r3, [pc, #72]	; (8008494 <vPortExitCritical+0x50>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10a      	bne.n	8008468 <vPortExitCritical+0x24>
	__asm volatile
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	607b      	str	r3, [r7, #4]
}
 8008464:	bf00      	nop
 8008466:	e7fe      	b.n	8008466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008468:	4b0a      	ldr	r3, [pc, #40]	; (8008494 <vPortExitCritical+0x50>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3b01      	subs	r3, #1
 800846e:	4a09      	ldr	r2, [pc, #36]	; (8008494 <vPortExitCritical+0x50>)
 8008470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008472:	4b08      	ldr	r3, [pc, #32]	; (8008494 <vPortExitCritical+0x50>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d105      	bne.n	8008486 <vPortExitCritical+0x42>
 800847a:	2300      	movs	r3, #0
 800847c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	f383 8811 	msr	BASEPRI, r3
}
 8008484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	20000020 	.word	0x20000020
	...

080084a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084a0:	f3ef 8009 	mrs	r0, PSP
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	4b15      	ldr	r3, [pc, #84]	; (8008500 <pxCurrentTCBConst>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	f01e 0f10 	tst.w	lr, #16
 80084b0:	bf08      	it	eq
 80084b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80084b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ba:	6010      	str	r0, [r2, #0]
 80084bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80084c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80084c4:	f380 8811 	msr	BASEPRI, r0
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f7fe feaa 	bl	8007228 <vTaskSwitchContext>
 80084d4:	f04f 0000 	mov.w	r0, #0
 80084d8:	f380 8811 	msr	BASEPRI, r0
 80084dc:	bc09      	pop	{r0, r3}
 80084de:	6819      	ldr	r1, [r3, #0]
 80084e0:	6808      	ldr	r0, [r1, #0]
 80084e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e6:	f01e 0f10 	tst.w	lr, #16
 80084ea:	bf08      	it	eq
 80084ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084f0:	f380 8809 	msr	PSP, r0
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	f3af 8000 	nop.w

08008500 <pxCurrentTCBConst>:
 8008500:	2000554c 	.word	0x2000554c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop

08008508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	607b      	str	r3, [r7, #4]
}
 8008520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008522:	f7fe fdc7 	bl	80070b4 <xTaskIncrementTick>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d003      	beq.n	8008534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800852c:	4b06      	ldr	r3, [pc, #24]	; (8008548 <xPortSysTickHandler+0x40>)
 800852e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	2300      	movs	r3, #0
 8008536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	f383 8811 	msr	BASEPRI, r3
}
 800853e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	e000ed04 	.word	0xe000ed04

0800854c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800854c:	b480      	push	{r7}
 800854e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008550:	4b0b      	ldr	r3, [pc, #44]	; (8008580 <vPortSetupTimerInterrupt+0x34>)
 8008552:	2200      	movs	r2, #0
 8008554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008556:	4b0b      	ldr	r3, [pc, #44]	; (8008584 <vPortSetupTimerInterrupt+0x38>)
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800855c:	4b0a      	ldr	r3, [pc, #40]	; (8008588 <vPortSetupTimerInterrupt+0x3c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a0a      	ldr	r2, [pc, #40]	; (800858c <vPortSetupTimerInterrupt+0x40>)
 8008562:	fba2 2303 	umull	r2, r3, r2, r3
 8008566:	099b      	lsrs	r3, r3, #6
 8008568:	4a09      	ldr	r2, [pc, #36]	; (8008590 <vPortSetupTimerInterrupt+0x44>)
 800856a:	3b01      	subs	r3, #1
 800856c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800856e:	4b04      	ldr	r3, [pc, #16]	; (8008580 <vPortSetupTimerInterrupt+0x34>)
 8008570:	2207      	movs	r2, #7
 8008572:	601a      	str	r2, [r3, #0]
}
 8008574:	bf00      	nop
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	e000e010 	.word	0xe000e010
 8008584:	e000e018 	.word	0xe000e018
 8008588:	20000000 	.word	0x20000000
 800858c:	10624dd3 	.word	0x10624dd3
 8008590:	e000e014 	.word	0xe000e014

08008594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80085a4 <vPortEnableVFP+0x10>
 8008598:	6801      	ldr	r1, [r0, #0]
 800859a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800859e:	6001      	str	r1, [r0, #0]
 80085a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80085a2:	bf00      	nop
 80085a4:	e000ed88 	.word	0xe000ed88

080085a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80085ae:	f3ef 8305 	mrs	r3, IPSR
 80085b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2b0f      	cmp	r3, #15
 80085b8:	d914      	bls.n	80085e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80085ba:	4a17      	ldr	r2, [pc, #92]	; (8008618 <vPortValidateInterruptPriority+0x70>)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4413      	add	r3, r2
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80085c4:	4b15      	ldr	r3, [pc, #84]	; (800861c <vPortValidateInterruptPriority+0x74>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	7afa      	ldrb	r2, [r7, #11]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d20a      	bcs.n	80085e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	607b      	str	r3, [r7, #4]
}
 80085e0:	bf00      	nop
 80085e2:	e7fe      	b.n	80085e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085e4:	4b0e      	ldr	r3, [pc, #56]	; (8008620 <vPortValidateInterruptPriority+0x78>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80085ec:	4b0d      	ldr	r3, [pc, #52]	; (8008624 <vPortValidateInterruptPriority+0x7c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d90a      	bls.n	800860a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	603b      	str	r3, [r7, #0]
}
 8008606:	bf00      	nop
 8008608:	e7fe      	b.n	8008608 <vPortValidateInterruptPriority+0x60>
	}
 800860a:	bf00      	nop
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	e000e3f0 	.word	0xe000e3f0
 800861c:	20005b78 	.word	0x20005b78
 8008620:	e000ed0c 	.word	0xe000ed0c
 8008624:	20005b7c 	.word	0x20005b7c

08008628 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08a      	sub	sp, #40	; 0x28
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008630:	2300      	movs	r3, #0
 8008632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008634:	f7fe fc70 	bl	8006f18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008638:	4b5b      	ldr	r3, [pc, #364]	; (80087a8 <pvPortMalloc+0x180>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008640:	f000 f920 	bl	8008884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008644:	4b59      	ldr	r3, [pc, #356]	; (80087ac <pvPortMalloc+0x184>)
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4013      	ands	r3, r2
 800864c:	2b00      	cmp	r3, #0
 800864e:	f040 8093 	bne.w	8008778 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d01d      	beq.n	8008694 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008658:	2208      	movs	r2, #8
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4413      	add	r3, r2
 800865e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	2b00      	cmp	r3, #0
 8008668:	d014      	beq.n	8008694 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f023 0307 	bic.w	r3, r3, #7
 8008670:	3308      	adds	r3, #8
 8008672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f003 0307 	and.w	r3, r3, #7
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <pvPortMalloc+0x6c>
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	617b      	str	r3, [r7, #20]
}
 8008690:	bf00      	nop
 8008692:	e7fe      	b.n	8008692 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d06e      	beq.n	8008778 <pvPortMalloc+0x150>
 800869a:	4b45      	ldr	r3, [pc, #276]	; (80087b0 <pvPortMalloc+0x188>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d869      	bhi.n	8008778 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80086a4:	4b43      	ldr	r3, [pc, #268]	; (80087b4 <pvPortMalloc+0x18c>)
 80086a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80086a8:	4b42      	ldr	r3, [pc, #264]	; (80087b4 <pvPortMalloc+0x18c>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086ae:	e004      	b.n	80086ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d903      	bls.n	80086cc <pvPortMalloc+0xa4>
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1f1      	bne.n	80086b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086cc:	4b36      	ldr	r3, [pc, #216]	; (80087a8 <pvPortMalloc+0x180>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d050      	beq.n	8008778 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2208      	movs	r2, #8
 80086dc:	4413      	add	r3, r2
 80086de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80086e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	1ad2      	subs	r2, r2, r3
 80086f0:	2308      	movs	r3, #8
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d91f      	bls.n	8008738 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80086f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4413      	add	r3, r2
 80086fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	f003 0307 	and.w	r3, r3, #7
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00a      	beq.n	8008720 <pvPortMalloc+0xf8>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	613b      	str	r3, [r7, #16]
}
 800871c:	bf00      	nop
 800871e:	e7fe      	b.n	800871e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	1ad2      	subs	r2, r2, r3
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008732:	69b8      	ldr	r0, [r7, #24]
 8008734:	f000 f908 	bl	8008948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008738:	4b1d      	ldr	r3, [pc, #116]	; (80087b0 <pvPortMalloc+0x188>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	4a1b      	ldr	r2, [pc, #108]	; (80087b0 <pvPortMalloc+0x188>)
 8008744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008746:	4b1a      	ldr	r3, [pc, #104]	; (80087b0 <pvPortMalloc+0x188>)
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	4b1b      	ldr	r3, [pc, #108]	; (80087b8 <pvPortMalloc+0x190>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	429a      	cmp	r2, r3
 8008750:	d203      	bcs.n	800875a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008752:	4b17      	ldr	r3, [pc, #92]	; (80087b0 <pvPortMalloc+0x188>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a18      	ldr	r2, [pc, #96]	; (80087b8 <pvPortMalloc+0x190>)
 8008758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	4b13      	ldr	r3, [pc, #76]	; (80087ac <pvPortMalloc+0x184>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	431a      	orrs	r2, r3
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	2200      	movs	r2, #0
 800876c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800876e:	4b13      	ldr	r3, [pc, #76]	; (80087bc <pvPortMalloc+0x194>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3301      	adds	r3, #1
 8008774:	4a11      	ldr	r2, [pc, #68]	; (80087bc <pvPortMalloc+0x194>)
 8008776:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008778:	f7fe fbdc 	bl	8006f34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	f003 0307 	and.w	r3, r3, #7
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00a      	beq.n	800879c <pvPortMalloc+0x174>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	60fb      	str	r3, [r7, #12]
}
 8008798:	bf00      	nop
 800879a:	e7fe      	b.n	800879a <pvPortMalloc+0x172>
	return pvReturn;
 800879c:	69fb      	ldr	r3, [r7, #28]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3728      	adds	r7, #40	; 0x28
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20009788 	.word	0x20009788
 80087ac:	2000979c 	.word	0x2000979c
 80087b0:	2000978c 	.word	0x2000978c
 80087b4:	20009780 	.word	0x20009780
 80087b8:	20009790 	.word	0x20009790
 80087bc:	20009794 	.word	0x20009794

080087c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d04d      	beq.n	800886e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80087d2:	2308      	movs	r3, #8
 80087d4:	425b      	negs	r3, r3
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	4413      	add	r3, r2
 80087da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	685a      	ldr	r2, [r3, #4]
 80087e4:	4b24      	ldr	r3, [pc, #144]	; (8008878 <vPortFree+0xb8>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4013      	ands	r3, r2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10a      	bne.n	8008804 <vPortFree+0x44>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	60fb      	str	r3, [r7, #12]
}
 8008800:	bf00      	nop
 8008802:	e7fe      	b.n	8008802 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00a      	beq.n	8008822 <vPortFree+0x62>
	__asm volatile
 800880c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	60bb      	str	r3, [r7, #8]
}
 800881e:	bf00      	nop
 8008820:	e7fe      	b.n	8008820 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	4b14      	ldr	r3, [pc, #80]	; (8008878 <vPortFree+0xb8>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4013      	ands	r3, r2
 800882c:	2b00      	cmp	r3, #0
 800882e:	d01e      	beq.n	800886e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d11a      	bne.n	800886e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	685a      	ldr	r2, [r3, #4]
 800883c:	4b0e      	ldr	r3, [pc, #56]	; (8008878 <vPortFree+0xb8>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	43db      	mvns	r3, r3
 8008842:	401a      	ands	r2, r3
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008848:	f7fe fb66 	bl	8006f18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	4b0a      	ldr	r3, [pc, #40]	; (800887c <vPortFree+0xbc>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4413      	add	r3, r2
 8008856:	4a09      	ldr	r2, [pc, #36]	; (800887c <vPortFree+0xbc>)
 8008858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800885a:	6938      	ldr	r0, [r7, #16]
 800885c:	f000 f874 	bl	8008948 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008860:	4b07      	ldr	r3, [pc, #28]	; (8008880 <vPortFree+0xc0>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3301      	adds	r3, #1
 8008866:	4a06      	ldr	r2, [pc, #24]	; (8008880 <vPortFree+0xc0>)
 8008868:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800886a:	f7fe fb63 	bl	8006f34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800886e:	bf00      	nop
 8008870:	3718      	adds	r7, #24
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	2000979c 	.word	0x2000979c
 800887c:	2000978c 	.word	0x2000978c
 8008880:	20009798 	.word	0x20009798

08008884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800888a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800888e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008890:	4b27      	ldr	r3, [pc, #156]	; (8008930 <prvHeapInit+0xac>)
 8008892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f003 0307 	and.w	r3, r3, #7
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00c      	beq.n	80088b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3307      	adds	r3, #7
 80088a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f023 0307 	bic.w	r3, r3, #7
 80088aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	4a1f      	ldr	r2, [pc, #124]	; (8008930 <prvHeapInit+0xac>)
 80088b4:	4413      	add	r3, r2
 80088b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80088bc:	4a1d      	ldr	r2, [pc, #116]	; (8008934 <prvHeapInit+0xb0>)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80088c2:	4b1c      	ldr	r3, [pc, #112]	; (8008934 <prvHeapInit+0xb0>)
 80088c4:	2200      	movs	r2, #0
 80088c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	4413      	add	r3, r2
 80088ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80088d0:	2208      	movs	r2, #8
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	1a9b      	subs	r3, r3, r2
 80088d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f023 0307 	bic.w	r3, r3, #7
 80088de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4a15      	ldr	r2, [pc, #84]	; (8008938 <prvHeapInit+0xb4>)
 80088e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80088e6:	4b14      	ldr	r3, [pc, #80]	; (8008938 <prvHeapInit+0xb4>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2200      	movs	r2, #0
 80088ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80088ee:	4b12      	ldr	r3, [pc, #72]	; (8008938 <prvHeapInit+0xb4>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	1ad2      	subs	r2, r2, r3
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008904:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <prvHeapInit+0xb4>)
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	4a0a      	ldr	r2, [pc, #40]	; (800893c <prvHeapInit+0xb8>)
 8008912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	4a09      	ldr	r2, [pc, #36]	; (8008940 <prvHeapInit+0xbc>)
 800891a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800891c:	4b09      	ldr	r3, [pc, #36]	; (8008944 <prvHeapInit+0xc0>)
 800891e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008922:	601a      	str	r2, [r3, #0]
}
 8008924:	bf00      	nop
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	20005b80 	.word	0x20005b80
 8008934:	20009780 	.word	0x20009780
 8008938:	20009788 	.word	0x20009788
 800893c:	20009790 	.word	0x20009790
 8008940:	2000978c 	.word	0x2000978c
 8008944:	2000979c 	.word	0x2000979c

08008948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008950:	4b28      	ldr	r3, [pc, #160]	; (80089f4 <prvInsertBlockIntoFreeList+0xac>)
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	e002      	b.n	800895c <prvInsertBlockIntoFreeList+0x14>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	60fb      	str	r3, [r7, #12]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	429a      	cmp	r2, r3
 8008964:	d8f7      	bhi.n	8008956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	4413      	add	r3, r2
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	429a      	cmp	r2, r3
 8008976:	d108      	bne.n	800898a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	441a      	add	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	441a      	add	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	429a      	cmp	r2, r3
 800899c:	d118      	bne.n	80089d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	4b15      	ldr	r3, [pc, #84]	; (80089f8 <prvInsertBlockIntoFreeList+0xb0>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d00d      	beq.n	80089c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	441a      	add	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	e008      	b.n	80089d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089c6:	4b0c      	ldr	r3, [pc, #48]	; (80089f8 <prvInsertBlockIntoFreeList+0xb0>)
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	e003      	b.n	80089d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d002      	beq.n	80089e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089e6:	bf00      	nop
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	20009780 	.word	0x20009780
 80089f8:	20009788 	.word	0x20009788

080089fc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	330c      	adds	r3, #12
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f003 fa43 	bl	800be9c <tcpip_send_msg_wait_sem>
 8008a16:	4603      	mov	r3, r0
 8008a18:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d103      	bne.n	8008a2a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008a28:	e001      	b.n	8008a2e <netconn_apimsg+0x32>
  }
  return err;
 8008a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
	...

08008a38 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b08c      	sub	sp, #48	; 0x30
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	4603      	mov	r3, r0
 8008a40:	603a      	str	r2, [r7, #0]
 8008a42:	71fb      	strb	r3, [r7, #7]
 8008a44:	460b      	mov	r3, r1
 8008a46:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008a48:	79fb      	ldrb	r3, [r7, #7]
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f001 f8a3 	bl	8009b98 <netconn_alloc>
 8008a52:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d054      	beq.n	8008b04 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008a5a:	79bb      	ldrb	r3, [r7, #6]
 8008a5c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8008a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a60:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008a62:	f107 0308 	add.w	r3, r7, #8
 8008a66:	4619      	mov	r1, r3
 8008a68:	4829      	ldr	r0, [pc, #164]	; (8008b10 <netconn_new_with_proto_and_callback+0xd8>)
 8008a6a:	f7ff ffc7 	bl	80089fc <netconn_apimsg>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008a74:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d043      	beq.n	8008b04 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d005      	beq.n	8008a90 <netconn_new_with_proto_and_callback+0x58>
 8008a84:	4b23      	ldr	r3, [pc, #140]	; (8008b14 <netconn_new_with_proto_and_callback+0xdc>)
 8008a86:	22a3      	movs	r2, #163	; 0xa3
 8008a88:	4923      	ldr	r1, [pc, #140]	; (8008b18 <netconn_new_with_proto_and_callback+0xe0>)
 8008a8a:	4824      	ldr	r0, [pc, #144]	; (8008b1c <netconn_new_with_proto_and_callback+0xe4>)
 8008a8c:	f010 fdf4 	bl	8019678 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a92:	3310      	adds	r3, #16
 8008a94:	4618      	mov	r0, r3
 8008a96:	f010 fa9b 	bl	8018fd0 <sys_mbox_valid>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d105      	bne.n	8008aac <netconn_new_with_proto_and_callback+0x74>
 8008aa0:	4b1c      	ldr	r3, [pc, #112]	; (8008b14 <netconn_new_with_proto_and_callback+0xdc>)
 8008aa2:	22a4      	movs	r2, #164	; 0xa4
 8008aa4:	491e      	ldr	r1, [pc, #120]	; (8008b20 <netconn_new_with_proto_and_callback+0xe8>)
 8008aa6:	481d      	ldr	r0, [pc, #116]	; (8008b1c <netconn_new_with_proto_and_callback+0xe4>)
 8008aa8:	f010 fde6 	bl	8019678 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aae:	3314      	adds	r3, #20
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f010 fa8d 	bl	8018fd0 <sys_mbox_valid>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d005      	beq.n	8008ac8 <netconn_new_with_proto_and_callback+0x90>
 8008abc:	4b15      	ldr	r3, [pc, #84]	; (8008b14 <netconn_new_with_proto_and_callback+0xdc>)
 8008abe:	22a6      	movs	r2, #166	; 0xa6
 8008ac0:	4918      	ldr	r1, [pc, #96]	; (8008b24 <netconn_new_with_proto_and_callback+0xec>)
 8008ac2:	4816      	ldr	r0, [pc, #88]	; (8008b1c <netconn_new_with_proto_and_callback+0xe4>)
 8008ac4:	f010 fdd8 	bl	8019678 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aca:	330c      	adds	r3, #12
 8008acc:	4618      	mov	r0, r3
 8008ace:	f010 fb0d 	bl	80190ec <sys_sem_valid>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d105      	bne.n	8008ae4 <netconn_new_with_proto_and_callback+0xac>
 8008ad8:	4b0e      	ldr	r3, [pc, #56]	; (8008b14 <netconn_new_with_proto_and_callback+0xdc>)
 8008ada:	22a9      	movs	r2, #169	; 0xa9
 8008adc:	4912      	ldr	r1, [pc, #72]	; (8008b28 <netconn_new_with_proto_and_callback+0xf0>)
 8008ade:	480f      	ldr	r0, [pc, #60]	; (8008b1c <netconn_new_with_proto_and_callback+0xe4>)
 8008ae0:	f010 fdca 	bl	8019678 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae6:	330c      	adds	r3, #12
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f010 faf2 	bl	80190d2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af0:	3310      	adds	r3, #16
 8008af2:	4618      	mov	r0, r3
 8008af4:	f010 f9f8 	bl	8018ee8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008af8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008afa:	2007      	movs	r0, #7
 8008afc:	f003 ff7c 	bl	800c9f8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008b00:	2300      	movs	r3, #0
 8008b02:	e000      	b.n	8008b06 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3730      	adds	r7, #48	; 0x30
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	08009b6d 	.word	0x08009b6d
 8008b14:	0801a6ac 	.word	0x0801a6ac
 8008b18:	0801a6e0 	.word	0x0801a6e0
 8008b1c:	0801a704 	.word	0x0801a704
 8008b20:	0801a72c 	.word	0x0801a72c
 8008b24:	0801a744 	.word	0x0801a744
 8008b28:	0801a768 	.word	0x0801a768

08008b2c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b08c      	sub	sp, #48	; 0x30
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	e014      	b.n	8008b68 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008b42:	2329      	movs	r3, #41	; 0x29
 8008b44:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008b46:	f107 030c 	add.w	r3, r7, #12
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4808      	ldr	r0, [pc, #32]	; (8008b70 <netconn_prepare_delete+0x44>)
 8008b4e:	f7ff ff55 	bl	80089fc <netconn_apimsg>
 8008b52:	4603      	mov	r3, r0
 8008b54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008b58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <netconn_prepare_delete+0x3a>
    return err;
 8008b60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b64:	e000      	b.n	8008b68 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3730      	adds	r7, #48	; 0x30
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	0800a0d9 	.word	0x0800a0d9

08008b74 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <netconn_delete+0x12>
    return ERR_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	e00d      	b.n	8008ba2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7ff ffd0 	bl	8008b2c <netconn_prepare_delete>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d102      	bne.n	8008b9e <netconn_delete+0x2a>
    netconn_free(conn);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f001 f86b 	bl	8009c74 <netconn_free>
  }
  return err;
 8008b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
	...

08008bac <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08e      	sub	sp, #56	; 0x38
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d109      	bne.n	8008bd4 <netconn_getaddr+0x28>
 8008bc0:	4b1d      	ldr	r3, [pc, #116]	; (8008c38 <netconn_getaddr+0x8c>)
 8008bc2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008bc6:	491d      	ldr	r1, [pc, #116]	; (8008c3c <netconn_getaddr+0x90>)
 8008bc8:	481d      	ldr	r0, [pc, #116]	; (8008c40 <netconn_getaddr+0x94>)
 8008bca:	f010 fd55 	bl	8019678 <iprintf>
 8008bce:	f06f 030f 	mvn.w	r3, #15
 8008bd2:	e02d      	b.n	8008c30 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d109      	bne.n	8008bee <netconn_getaddr+0x42>
 8008bda:	4b17      	ldr	r3, [pc, #92]	; (8008c38 <netconn_getaddr+0x8c>)
 8008bdc:	f240 1213 	movw	r2, #275	; 0x113
 8008be0:	4918      	ldr	r1, [pc, #96]	; (8008c44 <netconn_getaddr+0x98>)
 8008be2:	4817      	ldr	r0, [pc, #92]	; (8008c40 <netconn_getaddr+0x94>)
 8008be4:	f010 fd48 	bl	8019678 <iprintf>
 8008be8:	f06f 030f 	mvn.w	r3, #15
 8008bec:	e020      	b.n	8008c30 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d109      	bne.n	8008c08 <netconn_getaddr+0x5c>
 8008bf4:	4b10      	ldr	r3, [pc, #64]	; (8008c38 <netconn_getaddr+0x8c>)
 8008bf6:	f44f 728a 	mov.w	r2, #276	; 0x114
 8008bfa:	4913      	ldr	r1, [pc, #76]	; (8008c48 <netconn_getaddr+0x9c>)
 8008bfc:	4810      	ldr	r0, [pc, #64]	; (8008c40 <netconn_getaddr+0x94>)
 8008bfe:	f010 fd3b 	bl	8019678 <iprintf>
 8008c02:	f06f 030f 	mvn.w	r3, #15
 8008c06:	e013      	b.n	8008c30 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8008c0c:	78fb      	ldrb	r3, [r7, #3]
 8008c0e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8008c1a:	f107 0314 	add.w	r3, r7, #20
 8008c1e:	4619      	mov	r1, r3
 8008c20:	480a      	ldr	r0, [pc, #40]	; (8008c4c <netconn_getaddr+0xa0>)
 8008c22:	f7ff feeb 	bl	80089fc <netconn_apimsg>
 8008c26:	4603      	mov	r3, r0
 8008c28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8008c2c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3738      	adds	r7, #56	; 0x38
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	0801a6ac 	.word	0x0801a6ac
 8008c3c:	0801a784 	.word	0x0801a784
 8008c40:	0801a704 	.word	0x0801a704
 8008c44:	0801a7a4 	.word	0x0801a7a4
 8008c48:	0801a7c4 	.word	0x0801a7c4
 8008c4c:	0800a849 	.word	0x0800a849

08008c50 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b08e      	sub	sp, #56	; 0x38
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d109      	bne.n	8008c78 <netconn_bind+0x28>
 8008c64:	4b11      	ldr	r3, [pc, #68]	; (8008cac <netconn_bind+0x5c>)
 8008c66:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008c6a:	4911      	ldr	r1, [pc, #68]	; (8008cb0 <netconn_bind+0x60>)
 8008c6c:	4811      	ldr	r0, [pc, #68]	; (8008cb4 <netconn_bind+0x64>)
 8008c6e:	f010 fd03 	bl	8019678 <iprintf>
 8008c72:	f06f 030f 	mvn.w	r3, #15
 8008c76:	e015      	b.n	8008ca4 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8008c7e:	4b0e      	ldr	r3, [pc, #56]	; (8008cb8 <netconn_bind+0x68>)
 8008c80:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008c8a:	88fb      	ldrh	r3, [r7, #6]
 8008c8c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008c8e:	f107 0314 	add.w	r3, r7, #20
 8008c92:	4619      	mov	r1, r3
 8008c94:	4809      	ldr	r0, [pc, #36]	; (8008cbc <netconn_bind+0x6c>)
 8008c96:	f7ff feb1 	bl	80089fc <netconn_apimsg>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008ca0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3738      	adds	r7, #56	; 0x38
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	0801a6ac 	.word	0x0801a6ac
 8008cb0:	0801a7e4 	.word	0x0801a7e4
 8008cb4:	0801a704 	.word	0x0801a704
 8008cb8:	0801e304 	.word	0x0801e304
 8008cbc:	0800a2a1 	.word	0x0800a2a1

08008cc0 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08c      	sub	sp, #48	; 0x30
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d109      	bne.n	8008ce6 <netconn_listen_with_backlog+0x26>
 8008cd2:	4b0d      	ldr	r3, [pc, #52]	; (8008d08 <netconn_listen_with_backlog+0x48>)
 8008cd4:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008cd8:	490c      	ldr	r1, [pc, #48]	; (8008d0c <netconn_listen_with_backlog+0x4c>)
 8008cda:	480d      	ldr	r0, [pc, #52]	; (8008d10 <netconn_listen_with_backlog+0x50>)
 8008cdc:	f010 fccc 	bl	8019678 <iprintf>
 8008ce0:	f06f 030f 	mvn.w	r3, #15
 8008ce4:	e00c      	b.n	8008d00 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008cea:	f107 030c 	add.w	r3, r7, #12
 8008cee:	4619      	mov	r1, r3
 8008cf0:	4808      	ldr	r0, [pc, #32]	; (8008d14 <netconn_listen_with_backlog+0x54>)
 8008cf2:	f7ff fe83 	bl	80089fc <netconn_apimsg>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008cfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3730      	adds	r7, #48	; 0x30
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	0801a6ac 	.word	0x0801a6ac
 8008d0c:	0801a864 	.word	0x0801a864
 8008d10:	0801a704 	.word	0x0801a704
 8008d14:	0800a315 	.word	0x0800a315

08008d18 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d109      	bne.n	8008d3c <netconn_accept+0x24>
 8008d28:	4b3d      	ldr	r3, [pc, #244]	; (8008e20 <netconn_accept+0x108>)
 8008d2a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008d2e:	493d      	ldr	r1, [pc, #244]	; (8008e24 <netconn_accept+0x10c>)
 8008d30:	483d      	ldr	r0, [pc, #244]	; (8008e28 <netconn_accept+0x110>)
 8008d32:	f010 fca1 	bl	8019678 <iprintf>
 8008d36:	f06f 030f 	mvn.w	r3, #15
 8008d3a:	e06c      	b.n	8008e16 <netconn_accept+0xfe>
  *new_conn = NULL;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d109      	bne.n	8008d5c <netconn_accept+0x44>
 8008d48:	4b35      	ldr	r3, [pc, #212]	; (8008e20 <netconn_accept+0x108>)
 8008d4a:	f240 12e3 	movw	r2, #483	; 0x1e3
 8008d4e:	4937      	ldr	r1, [pc, #220]	; (8008e2c <netconn_accept+0x114>)
 8008d50:	4835      	ldr	r0, [pc, #212]	; (8008e28 <netconn_accept+0x110>)
 8008d52:	f010 fc91 	bl	8019678 <iprintf>
 8008d56:	f06f 030f 	mvn.w	r3, #15
 8008d5a:	e05c      	b.n	8008e16 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fa99 	bl	8009294 <netconn_err>
 8008d62:	4603      	mov	r3, r0
 8008d64:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008d66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8008d6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008d72:	e050      	b.n	8008e16 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	3314      	adds	r3, #20
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f010 f929 	bl	8018fd0 <sys_mbox_valid>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d005      	beq.n	8008d90 <netconn_accept+0x78>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	7f1b      	ldrb	r3, [r3, #28]
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d002      	beq.n	8008d96 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8008d90:	f06f 030e 	mvn.w	r3, #14
 8008d94:	e03f      	b.n	8008e16 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	7f1b      	ldrb	r3, [r3, #28]
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00e      	beq.n	8008dc0 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	3314      	adds	r3, #20
 8008da6:	f107 020c 	add.w	r2, r7, #12
 8008daa:	4611      	mov	r1, r2
 8008dac:	4618      	mov	r0, r3
 8008dae:	f010 f8f8 	bl	8018fa2 <sys_arch_mbox_tryfetch>
 8008db2:	4603      	mov	r3, r0
 8008db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008db8:	d10a      	bne.n	8008dd0 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008dba:	f06f 0306 	mvn.w	r3, #6
 8008dbe:	e02a      	b.n	8008e16 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	3314      	adds	r3, #20
 8008dc4:	f107 010c 	add.w	r1, r7, #12
 8008dc8:	2200      	movs	r2, #0
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f010 f8b8 	bl	8018f40 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d005      	beq.n	8008de4 <netconn_accept+0xcc>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2101      	movs	r1, #1
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f107 0213 	add.w	r2, r7, #19
 8008dea:	4611      	mov	r1, r2
 8008dec:	4618      	mov	r0, r3
 8008dee:	f000 faa3 	bl	8009338 <lwip_netconn_is_err_msg>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008df8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008dfc:	e00b      	b.n	8008e16 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d102      	bne.n	8008e0a <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008e04:	f06f 030e 	mvn.w	r3, #14
 8008e08:	e005      	b.n	8008e16 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008e14:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3718      	adds	r7, #24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	0801a6ac 	.word	0x0801a6ac
 8008e24:	0801a884 	.word	0x0801a884
 8008e28:	0801a704 	.word	0x0801a704
 8008e2c:	0801a8a4 	.word	0x0801a8a4

08008e30 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b088      	sub	sp, #32
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d109      	bne.n	8008e5c <netconn_recv_data+0x2c>
 8008e48:	4b58      	ldr	r3, [pc, #352]	; (8008fac <netconn_recv_data+0x17c>)
 8008e4a:	f44f 7212 	mov.w	r2, #584	; 0x248
 8008e4e:	4958      	ldr	r1, [pc, #352]	; (8008fb0 <netconn_recv_data+0x180>)
 8008e50:	4858      	ldr	r0, [pc, #352]	; (8008fb4 <netconn_recv_data+0x184>)
 8008e52:	f010 fc11 	bl	8019678 <iprintf>
 8008e56:	f06f 030f 	mvn.w	r3, #15
 8008e5a:	e0a2      	b.n	8008fa2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d109      	bne.n	8008e7c <netconn_recv_data+0x4c>
 8008e68:	4b50      	ldr	r3, [pc, #320]	; (8008fac <netconn_recv_data+0x17c>)
 8008e6a:	f240 224a 	movw	r2, #586	; 0x24a
 8008e6e:	4952      	ldr	r1, [pc, #328]	; (8008fb8 <netconn_recv_data+0x188>)
 8008e70:	4850      	ldr	r0, [pc, #320]	; (8008fb4 <netconn_recv_data+0x184>)
 8008e72:	f010 fc01 	bl	8019678 <iprintf>
 8008e76:	f06f 030f 	mvn.w	r3, #15
 8008e7a:	e092      	b.n	8008fa2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3310      	adds	r3, #16
 8008e80:	4618      	mov	r0, r3
 8008e82:	f010 f8a5 	bl	8018fd0 <sys_mbox_valid>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10e      	bne.n	8008eaa <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 fa01 	bl	8009294 <netconn_err>
 8008e92:	4603      	mov	r3, r0
 8008e94:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008e96:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d002      	beq.n	8008ea4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8008e9e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008ea2:	e07e      	b.n	8008fa2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8008ea4:	f06f 030a 	mvn.w	r3, #10
 8008ea8:	e07b      	b.n	8008fa2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	7f1b      	ldrb	r3, [r3, #28]
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10f      	bne.n	8008ed6 <netconn_recv_data+0xa6>
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	f003 0304 	and.w	r3, r3, #4
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	7f1b      	ldrb	r3, [r3, #28]
 8008ec4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d104      	bne.n	8008ed6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d023      	beq.n	8008f1e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3310      	adds	r3, #16
 8008eda:	f107 0218 	add.w	r2, r7, #24
 8008ede:	4611      	mov	r1, r2
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f010 f85e 	bl	8018fa2 <sys_arch_mbox_tryfetch>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eec:	d11f      	bne.n	8008f2e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f000 f9d0 	bl	8009294 <netconn_err>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008ef8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8008f00:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008f04:	e04d      	b.n	8008fa2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	7f1b      	ldrb	r3, [r3, #28]
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d002      	beq.n	8008f18 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8008f12:	f06f 030a 	mvn.w	r3, #10
 8008f16:	e044      	b.n	8008fa2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008f18:	f06f 0306 	mvn.w	r3, #6
 8008f1c:	e041      	b.n	8008fa2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	3310      	adds	r3, #16
 8008f22:	f107 0118 	add.w	r1, r7, #24
 8008f26:	2200      	movs	r2, #0
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f010 f809 	bl	8018f40 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f36:	2b10      	cmp	r3, #16
 8008f38:	d117      	bne.n	8008f6a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	f107 0217 	add.w	r2, r7, #23
 8008f40:	4611      	mov	r1, r2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 f9f8 	bl	8009338 <lwip_netconn_is_err_msg>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d009      	beq.n	8008f62 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8008f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f52:	f113 0f0f 	cmn.w	r3, #15
 8008f56:	d101      	bne.n	8008f5c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	e022      	b.n	8008fa2 <netconn_recv_data+0x172>
      }
      return err;
 8008f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f60:	e01f      	b.n	8008fa2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	891b      	ldrh	r3, [r3, #8]
 8008f66:	83fb      	strh	r3, [r7, #30]
 8008f68:	e00d      	b.n	8008f86 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d106      	bne.n	8008f7e <netconn_recv_data+0x14e>
 8008f70:	4b0e      	ldr	r3, [pc, #56]	; (8008fac <netconn_recv_data+0x17c>)
 8008f72:	f240 2291 	movw	r2, #657	; 0x291
 8008f76:	4911      	ldr	r1, [pc, #68]	; (8008fbc <netconn_recv_data+0x18c>)
 8008f78:	480e      	ldr	r0, [pc, #56]	; (8008fb4 <netconn_recv_data+0x184>)
 8008f7a:	f010 fb7d 	bl	8019678 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	891b      	ldrh	r3, [r3, #8]
 8008f84:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d005      	beq.n	8008f9a <netconn_recv_data+0x16a>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	8bfa      	ldrh	r2, [r7, #30]
 8008f94:	2101      	movs	r1, #1
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008f9a:	69ba      	ldr	r2, [r7, #24]
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3720      	adds	r7, #32
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	0801a6ac 	.word	0x0801a6ac
 8008fb0:	0801a8c4 	.word	0x0801a8c4
 8008fb4:	0801a704 	.word	0x0801a704
 8008fb8:	0801a8e4 	.word	0x0801a8e4
 8008fbc:	0801a900 	.word	0x0801a900

08008fc0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <netconn_tcp_recvd_msg+0x1e>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fda:	2b10      	cmp	r3, #16
 8008fdc:	d009      	beq.n	8008ff2 <netconn_tcp_recvd_msg+0x32>
 8008fde:	4b0c      	ldr	r3, [pc, #48]	; (8009010 <netconn_tcp_recvd_msg+0x50>)
 8008fe0:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008fe4:	490b      	ldr	r1, [pc, #44]	; (8009014 <netconn_tcp_recvd_msg+0x54>)
 8008fe6:	480c      	ldr	r0, [pc, #48]	; (8009018 <netconn_tcp_recvd_msg+0x58>)
 8008fe8:	f010 fb46 	bl	8019678 <iprintf>
 8008fec:	f06f 030f 	mvn.w	r3, #15
 8008ff0:	e00a      	b.n	8009008 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8008ffe:	6879      	ldr	r1, [r7, #4]
 8009000:	4806      	ldr	r0, [pc, #24]	; (800901c <netconn_tcp_recvd_msg+0x5c>)
 8009002:	f7ff fcfb 	bl	80089fc <netconn_apimsg>
 8009006:	4603      	mov	r3, r0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	0801a6ac 	.word	0x0801a6ac
 8009014:	0801a90c 	.word	0x0801a90c
 8009018:	0801a704 	.word	0x0801a704
 800901c:	0800a445 	.word	0x0800a445

08009020 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b08c      	sub	sp, #48	; 0x30
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d005      	beq.n	800903c <netconn_tcp_recvd+0x1c>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009038:	2b10      	cmp	r3, #16
 800903a:	d009      	beq.n	8009050 <netconn_tcp_recvd+0x30>
 800903c:	4b0c      	ldr	r3, [pc, #48]	; (8009070 <netconn_tcp_recvd+0x50>)
 800903e:	f240 22b5 	movw	r2, #693	; 0x2b5
 8009042:	490c      	ldr	r1, [pc, #48]	; (8009074 <netconn_tcp_recvd+0x54>)
 8009044:	480c      	ldr	r0, [pc, #48]	; (8009078 <netconn_tcp_recvd+0x58>)
 8009046:	f010 fb17 	bl	8019678 <iprintf>
 800904a:	f06f 030f 	mvn.w	r3, #15
 800904e:	e00b      	b.n	8009068 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8009050:	f107 030c 	add.w	r3, r7, #12
 8009054:	461a      	mov	r2, r3
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f7ff ffb1 	bl	8008fc0 <netconn_tcp_recvd_msg>
 800905e:	4603      	mov	r3, r0
 8009060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8009064:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009068:	4618      	mov	r0, r3
 800906a:	3730      	adds	r7, #48	; 0x30
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	0801a6ac 	.word	0x0801a6ac
 8009074:	0801a90c 	.word	0x0801a90c
 8009078:	0801a704 	.word	0x0801a704

0800907c <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b090      	sub	sp, #64	; 0x40
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	4613      	mov	r3, r2
 8009088:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	3310      	adds	r3, #16
 800908e:	4618      	mov	r0, r3
 8009090:	f00f ff9e 	bl	8018fd0 <sys_mbox_valid>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d102      	bne.n	80090a0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800909a:	f06f 030a 	mvn.w	r3, #10
 800909e:	e06d      	b.n	800917c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	7f1b      	ldrb	r3, [r3, #28]
 80090a4:	b25b      	sxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	da07      	bge.n	80090ba <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	7f1b      	ldrb	r3, [r3, #28]
 80090ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80090b8:	e039      	b.n	800912e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80090ba:	79fb      	ldrb	r3, [r7, #7]
 80090bc:	461a      	mov	r2, r3
 80090be:	68b9      	ldr	r1, [r7, #8]
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f7ff feb5 	bl	8008e30 <netconn_recv_data>
 80090c6:	4603      	mov	r3, r0
 80090c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80090cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80090d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80090d8:	e050      	b.n	800917c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80090e0:	79fb      	ldrb	r3, [r7, #7]
 80090e2:	f003 0308 	and.w	r3, r3, #8
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10e      	bne.n	8009108 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80090ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <netconn_recv_data_tcp+0x7a>
 80090f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f2:	891b      	ldrh	r3, [r3, #8]
 80090f4:	e000      	b.n	80090f8 <netconn_recv_data_tcp+0x7c>
 80090f6:	2301      	movs	r3, #1
 80090f8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80090fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80090fc:	f107 0214 	add.w	r2, r7, #20
 8009100:	4619      	mov	r1, r3
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f7ff ff5c 	bl	8008fc0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910a:	2b00      	cmp	r3, #0
 800910c:	d134      	bne.n	8009178 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800910e:	79fb      	ldrb	r3, [r7, #7]
 8009110:	f003 0310 	and.w	r3, r3, #16
 8009114:	2b00      	cmp	r3, #0
 8009116:	d009      	beq.n	800912c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	7f1b      	ldrb	r3, [r3, #28]
 800911c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009120:	b2da      	uxtb	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009126:	f06f 0306 	mvn.w	r3, #6
 800912a:	e027      	b.n	800917c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800912c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009132:	2b00      	cmp	r3, #0
 8009134:	d005      	beq.n	8009142 <netconn_recv_data_tcp+0xc6>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	2200      	movs	r2, #0
 800913c:	2101      	movs	r1, #1
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10f      	bne.n	800916a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f000 f8a2 	bl	8009294 <netconn_err>
 8009150:	4603      	mov	r3, r0
 8009152:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009156:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800915a:	2b00      	cmp	r3, #0
 800915c:	d002      	beq.n	8009164 <netconn_recv_data_tcp+0xe8>
          return err;
 800915e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009162:	e00b      	b.n	800917c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009164:	f06f 030d 	mvn.w	r3, #13
 8009168:	e008      	b.n	800917c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800916a:	2101      	movs	r1, #1
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f000 f861 	bl	8009234 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009172:	f06f 030e 	mvn.w	r3, #14
 8009176:	e001      	b.n	800917c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009178:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800917c:	4618      	mov	r0, r3
 800917e:	3740      	adds	r7, #64	; 0x40
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	4613      	mov	r3, r2
 8009190:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d005      	beq.n	80091a4 <netconn_recv_tcp_pbuf_flags+0x20>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091a0:	2b10      	cmp	r3, #16
 80091a2:	d009      	beq.n	80091b8 <netconn_recv_tcp_pbuf_flags+0x34>
 80091a4:	4b0a      	ldr	r3, [pc, #40]	; (80091d0 <netconn_recv_tcp_pbuf_flags+0x4c>)
 80091a6:	f240 3225 	movw	r2, #805	; 0x325
 80091aa:	490a      	ldr	r1, [pc, #40]	; (80091d4 <netconn_recv_tcp_pbuf_flags+0x50>)
 80091ac:	480a      	ldr	r0, [pc, #40]	; (80091d8 <netconn_recv_tcp_pbuf_flags+0x54>)
 80091ae:	f010 fa63 	bl	8019678 <iprintf>
 80091b2:	f06f 030f 	mvn.w	r3, #15
 80091b6:	e006      	b.n	80091c6 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	461a      	mov	r2, r3
 80091bc:	68b9      	ldr	r1, [r7, #8]
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f7ff ff5c 	bl	800907c <netconn_recv_data_tcp>
 80091c4:	4603      	mov	r3, r0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	0801a6ac 	.word	0x0801a6ac
 80091d4:	0801a90c 	.word	0x0801a90c
 80091d8:	0801a704 	.word	0x0801a704

080091dc <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	4613      	mov	r3, r2
 80091e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d005      	beq.n	80091fc <netconn_recv_udp_raw_netbuf_flags+0x20>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091f8:	2b10      	cmp	r3, #16
 80091fa:	d109      	bne.n	8009210 <netconn_recv_udp_raw_netbuf_flags+0x34>
 80091fc:	4b0a      	ldr	r3, [pc, #40]	; (8009228 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 80091fe:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8009202:	490a      	ldr	r1, [pc, #40]	; (800922c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 8009204:	480a      	ldr	r0, [pc, #40]	; (8009230 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 8009206:	f010 fa37 	bl	8019678 <iprintf>
 800920a:	f06f 030f 	mvn.w	r3, #15
 800920e:	e006      	b.n	800921e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009210:	79fb      	ldrb	r3, [r7, #7]
 8009212:	461a      	mov	r2, r3
 8009214:	68b9      	ldr	r1, [r7, #8]
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f7ff fe0a 	bl	8008e30 <netconn_recv_data>
 800921c:	4603      	mov	r3, r0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	0801a6ac 	.word	0x0801a6ac
 800922c:	0801a930 	.word	0x0801a930
 8009230:	0801a704 	.word	0x0801a704

08009234 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b08c      	sub	sp, #48	; 0x30
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d109      	bne.n	800925a <netconn_close_shutdown+0x26>
 8009246:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <netconn_close_shutdown+0x50>)
 8009248:	f240 4247 	movw	r2, #1095	; 0x447
 800924c:	490e      	ldr	r1, [pc, #56]	; (8009288 <netconn_close_shutdown+0x54>)
 800924e:	480f      	ldr	r0, [pc, #60]	; (800928c <netconn_close_shutdown+0x58>)
 8009250:	f010 fa12 	bl	8019678 <iprintf>
 8009254:	f06f 030f 	mvn.w	r3, #15
 8009258:	e010      	b.n	800927c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800925e:	78fb      	ldrb	r3, [r7, #3]
 8009260:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009262:	2329      	movs	r3, #41	; 0x29
 8009264:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009266:	f107 030c 	add.w	r3, r7, #12
 800926a:	4619      	mov	r1, r3
 800926c:	4808      	ldr	r0, [pc, #32]	; (8009290 <netconn_close_shutdown+0x5c>)
 800926e:	f7ff fbc5 	bl	80089fc <netconn_apimsg>
 8009272:	4603      	mov	r3, r0
 8009274:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009278:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800927c:	4618      	mov	r0, r3
 800927e:	3730      	adds	r7, #48	; 0x30
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	0801a6ac 	.word	0x0801a6ac
 8009288:	0801a9e8 	.word	0x0801a9e8
 800928c:	0801a704 	.word	0x0801a704
 8009290:	0800a955 	.word	0x0800a955

08009294 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <netconn_err+0x12>
    return ERR_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	e00d      	b.n	80092c2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80092a6:	f00f ff9d 	bl	80191e4 <sys_arch_protect>
 80092aa:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	7a1b      	ldrb	r3, [r3, #8]
 80092b0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f00f ffa1 	bl	8019200 <sys_arch_unprotect>
  return err;
 80092be:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
	...

080092cc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	4603      	mov	r3, r0
 80092d4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80092d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092da:	f113 0f0d 	cmn.w	r3, #13
 80092de:	d009      	beq.n	80092f4 <lwip_netconn_err_to_msg+0x28>
 80092e0:	f113 0f0d 	cmn.w	r3, #13
 80092e4:	dc0c      	bgt.n	8009300 <lwip_netconn_err_to_msg+0x34>
 80092e6:	f113 0f0f 	cmn.w	r3, #15
 80092ea:	d007      	beq.n	80092fc <lwip_netconn_err_to_msg+0x30>
 80092ec:	f113 0f0e 	cmn.w	r3, #14
 80092f0:	d002      	beq.n	80092f8 <lwip_netconn_err_to_msg+0x2c>
 80092f2:	e005      	b.n	8009300 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80092f4:	4b0a      	ldr	r3, [pc, #40]	; (8009320 <lwip_netconn_err_to_msg+0x54>)
 80092f6:	e00e      	b.n	8009316 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80092f8:	4b0a      	ldr	r3, [pc, #40]	; (8009324 <lwip_netconn_err_to_msg+0x58>)
 80092fa:	e00c      	b.n	8009316 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80092fc:	4b0a      	ldr	r3, [pc, #40]	; (8009328 <lwip_netconn_err_to_msg+0x5c>)
 80092fe:	e00a      	b.n	8009316 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d005      	beq.n	8009314 <lwip_netconn_err_to_msg+0x48>
 8009308:	4b08      	ldr	r3, [pc, #32]	; (800932c <lwip_netconn_err_to_msg+0x60>)
 800930a:	227d      	movs	r2, #125	; 0x7d
 800930c:	4908      	ldr	r1, [pc, #32]	; (8009330 <lwip_netconn_err_to_msg+0x64>)
 800930e:	4809      	ldr	r0, [pc, #36]	; (8009334 <lwip_netconn_err_to_msg+0x68>)
 8009310:	f010 f9b2 	bl	8019678 <iprintf>
      return NULL;
 8009314:	2300      	movs	r3, #0
  }
}
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	0801e19c 	.word	0x0801e19c
 8009324:	0801e19d 	.word	0x0801e19d
 8009328:	0801e19e 	.word	0x0801e19e
 800932c:	0801aa04 	.word	0x0801aa04
 8009330:	0801aa38 	.word	0x0801aa38
 8009334:	0801aa48 	.word	0x0801aa48

08009338 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d105      	bne.n	8009354 <lwip_netconn_is_err_msg+0x1c>
 8009348:	4b12      	ldr	r3, [pc, #72]	; (8009394 <lwip_netconn_is_err_msg+0x5c>)
 800934a:	2285      	movs	r2, #133	; 0x85
 800934c:	4912      	ldr	r1, [pc, #72]	; (8009398 <lwip_netconn_is_err_msg+0x60>)
 800934e:	4813      	ldr	r0, [pc, #76]	; (800939c <lwip_netconn_is_err_msg+0x64>)
 8009350:	f010 f992 	bl	8019678 <iprintf>

  if (msg == &netconn_aborted) {
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a12      	ldr	r2, [pc, #72]	; (80093a0 <lwip_netconn_is_err_msg+0x68>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d104      	bne.n	8009366 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	22f3      	movs	r2, #243	; 0xf3
 8009360:	701a      	strb	r2, [r3, #0]
    return 1;
 8009362:	2301      	movs	r3, #1
 8009364:	e012      	b.n	800938c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a0e      	ldr	r2, [pc, #56]	; (80093a4 <lwip_netconn_is_err_msg+0x6c>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d104      	bne.n	8009378 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	22f2      	movs	r2, #242	; 0xf2
 8009372:	701a      	strb	r2, [r3, #0]
    return 1;
 8009374:	2301      	movs	r3, #1
 8009376:	e009      	b.n	800938c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a0b      	ldr	r2, [pc, #44]	; (80093a8 <lwip_netconn_is_err_msg+0x70>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d104      	bne.n	800938a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	22f1      	movs	r2, #241	; 0xf1
 8009384:	701a      	strb	r2, [r3, #0]
    return 1;
 8009386:	2301      	movs	r3, #1
 8009388:	e000      	b.n	800938c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	0801aa04 	.word	0x0801aa04
 8009398:	0801aa70 	.word	0x0801aa70
 800939c:	0801aa48 	.word	0x0801aa48
 80093a0:	0801e19c 	.word	0x0801e19c
 80093a4:	0801e19d 	.word	0x0801e19d
 80093a8:	0801e19e 	.word	0x0801e19e

080093ac <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b088      	sub	sp, #32
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
 80093b8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d105      	bne.n	80093cc <recv_udp+0x20>
 80093c0:	4b34      	ldr	r3, [pc, #208]	; (8009494 <recv_udp+0xe8>)
 80093c2:	22e5      	movs	r2, #229	; 0xe5
 80093c4:	4934      	ldr	r1, [pc, #208]	; (8009498 <recv_udp+0xec>)
 80093c6:	4835      	ldr	r0, [pc, #212]	; (800949c <recv_udp+0xf0>)
 80093c8:	f010 f956 	bl	8019678 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d105      	bne.n	80093de <recv_udp+0x32>
 80093d2:	4b30      	ldr	r3, [pc, #192]	; (8009494 <recv_udp+0xe8>)
 80093d4:	22e6      	movs	r2, #230	; 0xe6
 80093d6:	4932      	ldr	r1, [pc, #200]	; (80094a0 <recv_udp+0xf4>)
 80093d8:	4830      	ldr	r0, [pc, #192]	; (800949c <recv_udp+0xf0>)
 80093da:	f010 f94d 	bl	8019678 <iprintf>
  conn = (struct netconn *)arg;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d103      	bne.n	80093f0 <recv_udp+0x44>
    pbuf_free(p);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f004 f9e7 	bl	800d7bc <pbuf_free>
    return;
 80093ee:	e04d      	b.n	800948c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d005      	beq.n	8009406 <recv_udp+0x5a>
 80093fa:	4b26      	ldr	r3, [pc, #152]	; (8009494 <recv_udp+0xe8>)
 80093fc:	22ee      	movs	r2, #238	; 0xee
 80093fe:	4929      	ldr	r1, [pc, #164]	; (80094a4 <recv_udp+0xf8>)
 8009400:	4826      	ldr	r0, [pc, #152]	; (800949c <recv_udp+0xf0>)
 8009402:	f010 f939 	bl	8019678 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	3310      	adds	r3, #16
 800940a:	4618      	mov	r0, r3
 800940c:	f00f fde0 	bl	8018fd0 <sys_mbox_valid>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d103      	bne.n	800941e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f004 f9d0 	bl	800d7bc <pbuf_free>
    return;
 800941c:	e036      	b.n	800948c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800941e:	2006      	movs	r0, #6
 8009420:	f003 fa74 	bl	800c90c <memp_malloc>
 8009424:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d103      	bne.n	8009434 <recv_udp+0x88>
    pbuf_free(p);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f004 f9c5 	bl	800d7bc <pbuf_free>
    return;
 8009432:	e02b      	b.n	800948c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d002      	beq.n	800944c <recv_udp+0xa0>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	e000      	b.n	800944e <recv_udp+0xa2>
 800944c:	2300      	movs	r3, #0
 800944e:	69ba      	ldr	r2, [r7, #24]
 8009450:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009456:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	891b      	ldrh	r3, [r3, #8]
 800945c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	3310      	adds	r3, #16
 8009462:	69b9      	ldr	r1, [r7, #24]
 8009464:	4618      	mov	r0, r3
 8009466:	f00f fd51 	bl	8018f0c <sys_mbox_trypost>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d003      	beq.n	8009478 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009470:	69b8      	ldr	r0, [r7, #24]
 8009472:	f001 fb19 	bl	800aaa8 <netbuf_delete>
    return;
 8009476:	e009      	b.n	800948c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947c:	2b00      	cmp	r3, #0
 800947e:	d005      	beq.n	800948c <recv_udp+0xe0>
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009484:	8afa      	ldrh	r2, [r7, #22]
 8009486:	2100      	movs	r1, #0
 8009488:	69f8      	ldr	r0, [r7, #28]
 800948a:	4798      	blx	r3
  }
}
 800948c:	3720      	adds	r7, #32
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	0801aa04 	.word	0x0801aa04
 8009498:	0801aa7c 	.word	0x0801aa7c
 800949c:	0801aa48 	.word	0x0801aa48
 80094a0:	0801aaa0 	.word	0x0801aaa0
 80094a4:	0801aac0 	.word	0x0801aac0

080094a8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b088      	sub	sp, #32
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
 80094b4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d106      	bne.n	80094ca <recv_tcp+0x22>
 80094bc:	4b36      	ldr	r3, [pc, #216]	; (8009598 <recv_tcp+0xf0>)
 80094be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80094c2:	4936      	ldr	r1, [pc, #216]	; (800959c <recv_tcp+0xf4>)
 80094c4:	4836      	ldr	r0, [pc, #216]	; (80095a0 <recv_tcp+0xf8>)
 80094c6:	f010 f8d7 	bl	8019678 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d106      	bne.n	80094de <recv_tcp+0x36>
 80094d0:	4b31      	ldr	r3, [pc, #196]	; (8009598 <recv_tcp+0xf0>)
 80094d2:	f240 122d 	movw	r2, #301	; 0x12d
 80094d6:	4933      	ldr	r1, [pc, #204]	; (80095a4 <recv_tcp+0xfc>)
 80094d8:	4831      	ldr	r0, [pc, #196]	; (80095a0 <recv_tcp+0xf8>)
 80094da:	f010 f8cd 	bl	8019678 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80094de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d006      	beq.n	80094f4 <recv_tcp+0x4c>
 80094e6:	4b2c      	ldr	r3, [pc, #176]	; (8009598 <recv_tcp+0xf0>)
 80094e8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80094ec:	492e      	ldr	r1, [pc, #184]	; (80095a8 <recv_tcp+0x100>)
 80094ee:	482c      	ldr	r0, [pc, #176]	; (80095a0 <recv_tcp+0xf8>)
 80094f0:	f010 f8c2 	bl	8019678 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d102      	bne.n	8009504 <recv_tcp+0x5c>
    return ERR_VAL;
 80094fe:	f06f 0305 	mvn.w	r3, #5
 8009502:	e045      	b.n	8009590 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	429a      	cmp	r2, r3
 800950c:	d006      	beq.n	800951c <recv_tcp+0x74>
 800950e:	4b22      	ldr	r3, [pc, #136]	; (8009598 <recv_tcp+0xf0>)
 8009510:	f240 1235 	movw	r2, #309	; 0x135
 8009514:	4925      	ldr	r1, [pc, #148]	; (80095ac <recv_tcp+0x104>)
 8009516:	4822      	ldr	r0, [pc, #136]	; (80095a0 <recv_tcp+0xf8>)
 8009518:	f010 f8ae 	bl	8019678 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	3310      	adds	r3, #16
 8009520:	4618      	mov	r0, r3
 8009522:	f00f fd55 	bl	8018fd0 <sys_mbox_valid>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10d      	bne.n	8009548 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d008      	beq.n	8009544 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	891b      	ldrh	r3, [r3, #8]
 8009536:	4619      	mov	r1, r3
 8009538:	68b8      	ldr	r0, [r7, #8]
 800953a:	f005 f907 	bl	800e74c <tcp_recved>
      pbuf_free(p);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f004 f93c 	bl	800d7bc <pbuf_free>
    }
    return ERR_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	e023      	b.n	8009590 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d005      	beq.n	800955a <recv_tcp+0xb2>
    msg = p;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	891b      	ldrh	r3, [r3, #8]
 8009556:	83fb      	strh	r3, [r7, #30]
 8009558:	e003      	b.n	8009562 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800955a:	4b15      	ldr	r3, [pc, #84]	; (80095b0 <recv_tcp+0x108>)
 800955c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	3310      	adds	r3, #16
 8009566:	69b9      	ldr	r1, [r7, #24]
 8009568:	4618      	mov	r0, r3
 800956a:	f00f fccf 	bl	8018f0c <sys_mbox_trypost>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d002      	beq.n	800957a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009578:	e00a      	b.n	8009590 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <recv_tcp+0xe6>
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009586:	8bfa      	ldrh	r2, [r7, #30]
 8009588:	2100      	movs	r1, #0
 800958a:	6978      	ldr	r0, [r7, #20]
 800958c:	4798      	blx	r3
  }

  return ERR_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3720      	adds	r7, #32
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	0801aa04 	.word	0x0801aa04
 800959c:	0801aae0 	.word	0x0801aae0
 80095a0:	0801aa48 	.word	0x0801aa48
 80095a4:	0801ab04 	.word	0x0801ab04
 80095a8:	0801ab24 	.word	0x0801ab24
 80095ac:	0801ab3c 	.word	0x0801ab3c
 80095b0:	0801e19e 	.word	0x0801e19e

080095b4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d106      	bne.n	80095d6 <poll_tcp+0x22>
 80095c8:	4b29      	ldr	r3, [pc, #164]	; (8009670 <poll_tcp+0xbc>)
 80095ca:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80095ce:	4929      	ldr	r1, [pc, #164]	; (8009674 <poll_tcp+0xc0>)
 80095d0:	4829      	ldr	r0, [pc, #164]	; (8009678 <poll_tcp+0xc4>)
 80095d2:	f010 f851 	bl	8019678 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	785b      	ldrb	r3, [r3, #1]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d104      	bne.n	80095e8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80095de:	2101      	movs	r1, #1
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f000 ff65 	bl	800a4b0 <lwip_netconn_do_writemore>
 80095e6:	e016      	b.n	8009616 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	785b      	ldrb	r3, [r3, #1]
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	d112      	bne.n	8009616 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6a1b      	ldr	r3, [r3, #32]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00a      	beq.n	800960e <poll_tcp+0x5a>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6a1b      	ldr	r3, [r3, #32]
 80095fc:	7a5b      	ldrb	r3, [r3, #9]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d005      	beq.n	800960e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	7a5a      	ldrb	r2, [r3, #9]
 8009608:	3a01      	subs	r2, #1
 800960a:	b2d2      	uxtb	r2, r2
 800960c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800960e:	2101      	movs	r1, #1
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f000 fbf7 	bl	8009e04 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	7f1b      	ldrb	r3, [r3, #28]
 800961a:	f003 0310 	and.w	r3, r3, #16
 800961e:	2b00      	cmp	r3, #0
 8009620:	d021      	beq.n	8009666 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d01d      	beq.n	8009666 <poll_tcp+0xb2>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009632:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009636:	d316      	bcc.n	8009666 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009640:	2b04      	cmp	r3, #4
 8009642:	d810      	bhi.n	8009666 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	7f1b      	ldrb	r3, [r3, #28]
 8009648:	f023 0310 	bic.w	r3, r3, #16
 800964c:	b2da      	uxtb	r2, r3
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009656:	2b00      	cmp	r3, #0
 8009658:	d005      	beq.n	8009666 <poll_tcp+0xb2>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965e:	2200      	movs	r2, #0
 8009660:	2102      	movs	r1, #2
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	0801aa04 	.word	0x0801aa04
 8009674:	0801ab5c 	.word	0x0801ab5c
 8009678:	0801aa48 	.word	0x0801aa48

0800967c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	4613      	mov	r3, r2
 8009688:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d106      	bne.n	80096a2 <sent_tcp+0x26>
 8009694:	4b20      	ldr	r3, [pc, #128]	; (8009718 <sent_tcp+0x9c>)
 8009696:	f240 1293 	movw	r2, #403	; 0x193
 800969a:	4920      	ldr	r1, [pc, #128]	; (800971c <sent_tcp+0xa0>)
 800969c:	4820      	ldr	r0, [pc, #128]	; (8009720 <sent_tcp+0xa4>)
 800969e:	f00f ffeb 	bl	8019678 <iprintf>

  if (conn) {
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d032      	beq.n	800970e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	785b      	ldrb	r3, [r3, #1]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d104      	bne.n	80096ba <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80096b0:	2101      	movs	r1, #1
 80096b2:	6978      	ldr	r0, [r7, #20]
 80096b4:	f000 fefc 	bl	800a4b0 <lwip_netconn_do_writemore>
 80096b8:	e007      	b.n	80096ca <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	785b      	ldrb	r3, [r3, #1]
 80096be:	2b04      	cmp	r3, #4
 80096c0:	d103      	bne.n	80096ca <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80096c2:	2101      	movs	r1, #1
 80096c4:	6978      	ldr	r0, [r7, #20]
 80096c6:	f000 fb9d 	bl	8009e04 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d01d      	beq.n	800970e <sent_tcp+0x92>
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80096da:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80096de:	d316      	bcc.n	800970e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	d810      	bhi.n	800970e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	7f1b      	ldrb	r3, [r3, #28]
 80096f0:	f023 0310 	bic.w	r3, r3, #16
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d005      	beq.n	800970e <sent_tcp+0x92>
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009706:	88fa      	ldrh	r2, [r7, #6]
 8009708:	2102      	movs	r1, #2
 800970a:	6978      	ldr	r0, [r7, #20]
 800970c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3718      	adds	r7, #24
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	0801aa04 	.word	0x0801aa04
 800971c:	0801ab5c 	.word	0x0801ab5c
 8009720:	0801aa48 	.word	0x0801aa48

08009724 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b088      	sub	sp, #32
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	460b      	mov	r3, r1
 800972e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d106      	bne.n	8009748 <err_tcp+0x24>
 800973a:	4b5f      	ldr	r3, [pc, #380]	; (80098b8 <err_tcp+0x194>)
 800973c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009740:	495e      	ldr	r1, [pc, #376]	; (80098bc <err_tcp+0x198>)
 8009742:	485f      	ldr	r0, [pc, #380]	; (80098c0 <err_tcp+0x19c>)
 8009744:	f00f ff98 	bl	8019678 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009748:	f00f fd4c 	bl	80191e4 <sys_arch_protect>
 800974c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	2200      	movs	r2, #0
 8009752:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	78fa      	ldrb	r2, [r7, #3]
 8009758:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	7f1b      	ldrb	r3, [r3, #28]
 800975e:	f043 0301 	orr.w	r3, r3, #1
 8009762:	b2da      	uxtb	r2, r3
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	785b      	ldrb	r3, [r3, #1]
 800976c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	2200      	movs	r2, #0
 8009772:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009774:	69b8      	ldr	r0, [r7, #24]
 8009776:	f00f fd43 	bl	8019200 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977e:	2b00      	cmp	r3, #0
 8009780:	d005      	beq.n	800978e <err_tcp+0x6a>
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	2200      	movs	r2, #0
 8009788:	2104      	movs	r1, #4
 800978a:	69f8      	ldr	r0, [r7, #28]
 800978c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009792:	2b00      	cmp	r3, #0
 8009794:	d005      	beq.n	80097a2 <err_tcp+0x7e>
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979a:	2200      	movs	r2, #0
 800979c:	2100      	movs	r1, #0
 800979e:	69f8      	ldr	r0, [r7, #28]
 80097a0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d005      	beq.n	80097b6 <err_tcp+0x92>
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ae:	2200      	movs	r2, #0
 80097b0:	2102      	movs	r1, #2
 80097b2:	69f8      	ldr	r0, [r7, #28]
 80097b4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80097b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7ff fd86 	bl	80092cc <lwip_netconn_err_to_msg>
 80097c0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	3310      	adds	r3, #16
 80097c6:	4618      	mov	r0, r3
 80097c8:	f00f fc02 	bl	8018fd0 <sys_mbox_valid>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	3310      	adds	r3, #16
 80097d6:	6939      	ldr	r1, [r7, #16]
 80097d8:	4618      	mov	r0, r3
 80097da:	f00f fb97 	bl	8018f0c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	3314      	adds	r3, #20
 80097e2:	4618      	mov	r0, r3
 80097e4:	f00f fbf4 	bl	8018fd0 <sys_mbox_valid>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d005      	beq.n	80097fa <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	3314      	adds	r3, #20
 80097f2:	6939      	ldr	r1, [r7, #16]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f00f fb89 	bl	8018f0c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d005      	beq.n	800980c <err_tcp+0xe8>
 8009800:	7dfb      	ldrb	r3, [r7, #23]
 8009802:	2b04      	cmp	r3, #4
 8009804:	d002      	beq.n	800980c <err_tcp+0xe8>
 8009806:	7dfb      	ldrb	r3, [r7, #23]
 8009808:	2b03      	cmp	r3, #3
 800980a:	d143      	bne.n	8009894 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	7f1b      	ldrb	r3, [r3, #28]
 8009810:	f003 0304 	and.w	r3, r3, #4
 8009814:	2b00      	cmp	r3, #0
 8009816:	bf14      	ite	ne
 8009818:	2301      	movne	r3, #1
 800981a:	2300      	moveq	r3, #0
 800981c:	b2db      	uxtb	r3, r3
 800981e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	7f1b      	ldrb	r3, [r3, #28]
 8009824:	f023 0304 	bic.w	r3, r3, #4
 8009828:	b2da      	uxtb	r2, r3
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d13b      	bne.n	80098ac <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	6a1b      	ldr	r3, [r3, #32]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d106      	bne.n	800984a <err_tcp+0x126>
 800983c:	4b1e      	ldr	r3, [pc, #120]	; (80098b8 <err_tcp+0x194>)
 800983e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009842:	4920      	ldr	r1, [pc, #128]	; (80098c4 <err_tcp+0x1a0>)
 8009844:	481e      	ldr	r0, [pc, #120]	; (80098c0 <err_tcp+0x19c>)
 8009846:	f00f ff17 	bl	8019678 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800984a:	7dfb      	ldrb	r3, [r7, #23]
 800984c:	2b04      	cmp	r3, #4
 800984e:	d104      	bne.n	800985a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	6a1b      	ldr	r3, [r3, #32]
 8009854:	2200      	movs	r2, #0
 8009856:	711a      	strb	r2, [r3, #4]
 8009858:	e003      	b.n	8009862 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	78fa      	ldrb	r2, [r7, #3]
 8009860:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	6a1b      	ldr	r3, [r3, #32]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	330c      	adds	r3, #12
 800986a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800986c:	68b8      	ldr	r0, [r7, #8]
 800986e:	f00f fc3d 	bl	80190ec <sys_sem_valid>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d106      	bne.n	8009886 <err_tcp+0x162>
 8009878:	4b0f      	ldr	r3, [pc, #60]	; (80098b8 <err_tcp+0x194>)
 800987a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800987e:	4912      	ldr	r1, [pc, #72]	; (80098c8 <err_tcp+0x1a4>)
 8009880:	480f      	ldr	r0, [pc, #60]	; (80098c0 <err_tcp+0x19c>)
 8009882:	f00f fef9 	bl	8019678 <iprintf>
      conn->current_msg = NULL;
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	2200      	movs	r2, #0
 800988a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800988c:	68b8      	ldr	r0, [r7, #8]
 800988e:	f00f fc13 	bl	80190b8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009892:	e00b      	b.n	80098ac <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	6a1b      	ldr	r3, [r3, #32]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d008      	beq.n	80098ae <err_tcp+0x18a>
 800989c:	4b06      	ldr	r3, [pc, #24]	; (80098b8 <err_tcp+0x194>)
 800989e:	f240 12f7 	movw	r2, #503	; 0x1f7
 80098a2:	490a      	ldr	r1, [pc, #40]	; (80098cc <err_tcp+0x1a8>)
 80098a4:	4806      	ldr	r0, [pc, #24]	; (80098c0 <err_tcp+0x19c>)
 80098a6:	f00f fee7 	bl	8019678 <iprintf>
  }
}
 80098aa:	e000      	b.n	80098ae <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80098ac:	bf00      	nop
}
 80098ae:	bf00      	nop
 80098b0:	3720      	adds	r7, #32
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	0801aa04 	.word	0x0801aa04
 80098bc:	0801ab5c 	.word	0x0801ab5c
 80098c0:	0801aa48 	.word	0x0801aa48
 80098c4:	0801ab6c 	.word	0x0801ab6c
 80098c8:	0801ab88 	.word	0x0801ab88
 80098cc:	0801aba4 	.word	0x0801aba4

080098d0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80098de:	6879      	ldr	r1, [r7, #4]
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f005 fdf9 	bl	800f4d8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80098e6:	490a      	ldr	r1, [pc, #40]	; (8009910 <setup_tcp+0x40>)
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f005 fe07 	bl	800f4fc <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80098ee:	4909      	ldr	r1, [pc, #36]	; (8009914 <setup_tcp+0x44>)
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f005 fe25 	bl	800f540 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80098f6:	2202      	movs	r2, #2
 80098f8:	4907      	ldr	r1, [pc, #28]	; (8009918 <setup_tcp+0x48>)
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f005 fe7c 	bl	800f5f8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009900:	4906      	ldr	r1, [pc, #24]	; (800991c <setup_tcp+0x4c>)
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f005 fe3e 	bl	800f584 <tcp_err>
}
 8009908:	bf00      	nop
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	080094a9 	.word	0x080094a9
 8009914:	0800967d 	.word	0x0800967d
 8009918:	080095b5 	.word	0x080095b5
 800991c:	08009725 	.word	0x08009725

08009920 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009920:	b590      	push	{r4, r7, lr}
 8009922:	b089      	sub	sp, #36	; 0x24
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	4613      	mov	r3, r2
 800992c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d102      	bne.n	800993e <accept_function+0x1e>
    return ERR_VAL;
 8009938:	f06f 0305 	mvn.w	r3, #5
 800993c:	e0a1      	b.n	8009a82 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	3314      	adds	r3, #20
 8009942:	4618      	mov	r0, r3
 8009944:	f00f fb44 	bl	8018fd0 <sys_mbox_valid>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d102      	bne.n	8009954 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800994e:	f06f 0305 	mvn.w	r3, #5
 8009952:	e096      	b.n	8009a82 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d11b      	bne.n	8009992 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	f103 0414 	add.w	r4, r3, #20
 8009960:	f06f 000c 	mvn.w	r0, #12
 8009964:	f7ff fcb2 	bl	80092cc <lwip_netconn_err_to_msg>
 8009968:	4603      	mov	r3, r0
 800996a:	4619      	mov	r1, r3
 800996c:	4620      	mov	r0, r4
 800996e:	f00f facd 	bl	8018f0c <sys_mbox_trypost>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d109      	bne.n	800998c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997c:	2b00      	cmp	r3, #0
 800997e:	d005      	beq.n	800998c <accept_function+0x6c>
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009984:	2200      	movs	r2, #0
 8009986:	2100      	movs	r1, #0
 8009988:	69f8      	ldr	r0, [r7, #28]
 800998a:	4798      	blx	r3
    }
    return ERR_VAL;
 800998c:	f06f 0305 	mvn.w	r3, #5
 8009990:	e077      	b.n	8009a82 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d006      	beq.n	80099a8 <accept_function+0x88>
 800999a:	4b3c      	ldr	r3, [pc, #240]	; (8009a8c <accept_function+0x16c>)
 800999c:	f240 222a 	movw	r2, #554	; 0x22a
 80099a0:	493b      	ldr	r1, [pc, #236]	; (8009a90 <accept_function+0x170>)
 80099a2:	483c      	ldr	r0, [pc, #240]	; (8009a94 <accept_function+0x174>)
 80099a4:	f00f fe68 	bl	8019678 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	781a      	ldrb	r2, [r3, #0]
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b0:	4619      	mov	r1, r3
 80099b2:	4610      	mov	r0, r2
 80099b4:	f000 f8f0 	bl	8009b98 <netconn_alloc>
 80099b8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d11b      	bne.n	80099f8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	f103 0414 	add.w	r4, r3, #20
 80099c6:	f06f 000c 	mvn.w	r0, #12
 80099ca:	f7ff fc7f 	bl	80092cc <lwip_netconn_err_to_msg>
 80099ce:	4603      	mov	r3, r0
 80099d0:	4619      	mov	r1, r3
 80099d2:	4620      	mov	r0, r4
 80099d4:	f00f fa9a 	bl	8018f0c <sys_mbox_trypost>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d109      	bne.n	80099f2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d005      	beq.n	80099f2 <accept_function+0xd2>
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ea:	2200      	movs	r2, #0
 80099ec:	2100      	movs	r1, #0
 80099ee:	69f8      	ldr	r0, [r7, #28]
 80099f0:	4798      	blx	r3
    }
    return ERR_MEM;
 80099f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099f6:	e044      	b.n	8009a82 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80099fe:	69b8      	ldr	r0, [r7, #24]
 8009a00:	f7ff ff66 	bl	80098d0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	3314      	adds	r3, #20
 8009a08:	69b9      	ldr	r1, [r7, #24]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f00f fa7e 	bl	8018f0c <sys_mbox_trypost>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d02a      	beq.n	8009a6c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	6978      	ldr	r0, [r7, #20]
 8009a20:	f005 fd5a 	bl	800f4d8 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009a24:	2100      	movs	r1, #0
 8009a26:	6978      	ldr	r0, [r7, #20]
 8009a28:	f005 fd68 	bl	800f4fc <tcp_recv>
    tcp_sent(pcb, NULL);
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	6978      	ldr	r0, [r7, #20]
 8009a30:	f005 fd86 	bl	800f540 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009a34:	2200      	movs	r2, #0
 8009a36:	2100      	movs	r1, #0
 8009a38:	6978      	ldr	r0, [r7, #20]
 8009a3a:	f005 fddd 	bl	800f5f8 <tcp_poll>
    tcp_err(pcb, NULL);
 8009a3e:	2100      	movs	r1, #0
 8009a40:	6978      	ldr	r0, [r7, #20]
 8009a42:	f005 fd9f 	bl	800f584 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	3310      	adds	r3, #16
 8009a50:	4618      	mov	r0, r3
 8009a52:	f00f fa49 	bl	8018ee8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	3310      	adds	r3, #16
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f00f fac9 	bl	8018ff2 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009a60:	69b8      	ldr	r0, [r7, #24]
 8009a62:	f000 f907 	bl	8009c74 <netconn_free>
    return ERR_MEM;
 8009a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a6a:	e00a      	b.n	8009a82 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d005      	beq.n	8009a80 <accept_function+0x160>
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	2200      	movs	r2, #0
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	69f8      	ldr	r0, [r7, #28]
 8009a7e:	4798      	blx	r3
  }

  return ERR_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3724      	adds	r7, #36	; 0x24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd90      	pop	{r4, r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	0801aa04 	.word	0x0801aa04
 8009a90:	0801abc0 	.word	0x0801abc0
 8009a94:	0801aa48 	.word	0x0801aa48

08009a98 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009a98:	b590      	push	{r4, r7, lr}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d006      	beq.n	8009abc <pcb_new+0x24>
 8009aae:	4b2b      	ldr	r3, [pc, #172]	; (8009b5c <pcb_new+0xc4>)
 8009ab0:	f240 2265 	movw	r2, #613	; 0x265
 8009ab4:	492a      	ldr	r1, [pc, #168]	; (8009b60 <pcb_new+0xc8>)
 8009ab6:	482b      	ldr	r0, [pc, #172]	; (8009b64 <pcb_new+0xcc>)
 8009ab8:	f00f fdde 	bl	8019678 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ac6:	2b10      	cmp	r3, #16
 8009ac8:	d022      	beq.n	8009b10 <pcb_new+0x78>
 8009aca:	2b20      	cmp	r3, #32
 8009acc:	d133      	bne.n	8009b36 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681c      	ldr	r4, [r3, #0]
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f00a ffa6 	bl	8014a26 <udp_new_ip_type>
 8009ada:	4603      	mov	r3, r0
 8009adc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d02a      	beq.n	8009b3e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	2b22      	cmp	r3, #34	; 0x22
 8009af0:	d104      	bne.n	8009afc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	2201      	movs	r2, #1
 8009afa:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6858      	ldr	r0, [r3, #4]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	461a      	mov	r2, r3
 8009b08:	4917      	ldr	r1, [pc, #92]	; (8009b68 <pcb_new+0xd0>)
 8009b0a:	f00a ff13 	bl	8014934 <udp_recv>
      }
      break;
 8009b0e:	e016      	b.n	8009b3e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681c      	ldr	r4, [r3, #0]
 8009b14:	7bfb      	ldrb	r3, [r7, #15]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f005 fcd0 	bl	800f4bc <tcp_new_ip_type>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00b      	beq.n	8009b42 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7ff fece 	bl	80098d0 <setup_tcp>
      }
      break;
 8009b34:	e005      	b.n	8009b42 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	22fa      	movs	r2, #250	; 0xfa
 8009b3a:	711a      	strb	r2, [r3, #4]
      return;
 8009b3c:	e00a      	b.n	8009b54 <pcb_new+0xbc>
      break;
 8009b3e:	bf00      	nop
 8009b40:	e000      	b.n	8009b44 <pcb_new+0xac>
      break;
 8009b42:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d102      	bne.n	8009b54 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	22ff      	movs	r2, #255	; 0xff
 8009b52:	711a      	strb	r2, [r3, #4]
  }
}
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd90      	pop	{r4, r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	0801aa04 	.word	0x0801aa04
 8009b60:	0801abe8 	.word	0x0801abe8
 8009b64:	0801aa48 	.word	0x0801aa48
 8009b68:	080093ad 	.word	0x080093ad

08009b6c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d102      	bne.n	8009b8e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f7ff ff85 	bl	8009a98 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8009b8e:	bf00      	nop
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009b98 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	6039      	str	r1, [r7, #0]
 8009ba2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009ba8:	2007      	movs	r0, #7
 8009baa:	f002 feaf 	bl	800c90c <memp_malloc>
 8009bae:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <netconn_alloc+0x22>
    return NULL;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	e052      	b.n	8009c60 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	79fa      	ldrb	r2, [r7, #7]
 8009bc4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009bcc:	79fb      	ldrb	r3, [r7, #7]
 8009bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bd2:	2b10      	cmp	r3, #16
 8009bd4:	d004      	beq.n	8009be0 <netconn_alloc+0x48>
 8009bd6:	2b20      	cmp	r3, #32
 8009bd8:	d105      	bne.n	8009be6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009bda:	2306      	movs	r3, #6
 8009bdc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009bde:	e00a      	b.n	8009bf6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009be0:	2306      	movs	r3, #6
 8009be2:	617b      	str	r3, [r7, #20]
      break;
 8009be4:	e007      	b.n	8009bf6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009be6:	4b20      	ldr	r3, [pc, #128]	; (8009c68 <netconn_alloc+0xd0>)
 8009be8:	f240 22e5 	movw	r2, #741	; 0x2e5
 8009bec:	491f      	ldr	r1, [pc, #124]	; (8009c6c <netconn_alloc+0xd4>)
 8009bee:	4820      	ldr	r0, [pc, #128]	; (8009c70 <netconn_alloc+0xd8>)
 8009bf0:	f00f fd42 	bl	8019678 <iprintf>
      goto free_and_return;
 8009bf4:	e02f      	b.n	8009c56 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3310      	adds	r3, #16
 8009bfa:	6979      	ldr	r1, [r7, #20]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f00f f959 	bl	8018eb4 <sys_mbox_new>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d125      	bne.n	8009c54 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	330c      	adds	r3, #12
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f00f f9fc 	bl	801900c <sys_sem_new>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d005      	beq.n	8009c26 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	3310      	adds	r3, #16
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f00f f962 	bl	8018ee8 <sys_mbox_free>
    goto free_and_return;
 8009c24:	e017      	b.n	8009c56 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3314      	adds	r3, #20
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f00f f9e1 	bl	8018ff2 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2200      	movs	r2, #0
 8009c34:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c3c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	683a      	ldr	r2, [r7, #0]
 8009c42:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	7cfa      	ldrb	r2, [r7, #19]
 8009c4e:	771a      	strb	r2, [r3, #28]
  return conn;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	e005      	b.n	8009c60 <netconn_alloc+0xc8>
    goto free_and_return;
 8009c54:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009c56:	68f9      	ldr	r1, [r7, #12]
 8009c58:	2007      	movs	r0, #7
 8009c5a:	f002 fecd 	bl	800c9f8 <memp_free>
  return NULL;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3718      	adds	r7, #24
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	0801aa04 	.word	0x0801aa04
 8009c6c:	0801ac08 	.word	0x0801ac08
 8009c70:	0801aa48 	.word	0x0801aa48

08009c74 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d006      	beq.n	8009c92 <netconn_free+0x1e>
 8009c84:	4b1b      	ldr	r3, [pc, #108]	; (8009cf4 <netconn_free+0x80>)
 8009c86:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009c8a:	491b      	ldr	r1, [pc, #108]	; (8009cf8 <netconn_free+0x84>)
 8009c8c:	481b      	ldr	r0, [pc, #108]	; (8009cfc <netconn_free+0x88>)
 8009c8e:	f00f fcf3 	bl	8019678 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	3310      	adds	r3, #16
 8009c96:	4618      	mov	r0, r3
 8009c98:	f00f f99a 	bl	8018fd0 <sys_mbox_valid>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d006      	beq.n	8009cb0 <netconn_free+0x3c>
 8009ca2:	4b14      	ldr	r3, [pc, #80]	; (8009cf4 <netconn_free+0x80>)
 8009ca4:	f240 3223 	movw	r2, #803	; 0x323
 8009ca8:	4915      	ldr	r1, [pc, #84]	; (8009d00 <netconn_free+0x8c>)
 8009caa:	4814      	ldr	r0, [pc, #80]	; (8009cfc <netconn_free+0x88>)
 8009cac:	f00f fce4 	bl	8019678 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	3314      	adds	r3, #20
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f00f f98b 	bl	8018fd0 <sys_mbox_valid>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d006      	beq.n	8009cce <netconn_free+0x5a>
 8009cc0:	4b0c      	ldr	r3, [pc, #48]	; (8009cf4 <netconn_free+0x80>)
 8009cc2:	f240 3226 	movw	r2, #806	; 0x326
 8009cc6:	490f      	ldr	r1, [pc, #60]	; (8009d04 <netconn_free+0x90>)
 8009cc8:	480c      	ldr	r0, [pc, #48]	; (8009cfc <netconn_free+0x88>)
 8009cca:	f00f fcd5 	bl	8019678 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	330c      	adds	r3, #12
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f00f f9fd 	bl	80190d2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	330c      	adds	r3, #12
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f00f fa16 	bl	801910e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009ce2:	6879      	ldr	r1, [r7, #4]
 8009ce4:	2007      	movs	r0, #7
 8009ce6:	f002 fe87 	bl	800c9f8 <memp_free>
}
 8009cea:	bf00      	nop
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	0801aa04 	.word	0x0801aa04
 8009cf8:	0801ac30 	.word	0x0801ac30
 8009cfc:	0801aa48 	.word	0x0801aa48
 8009d00:	0801ac60 	.word	0x0801ac60
 8009d04:	0801ac9c 	.word	0x0801ac9c

08009d08 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	3310      	adds	r3, #16
 8009d14:	4618      	mov	r0, r3
 8009d16:	f00f f95b 	bl	8018fd0 <sys_mbox_valid>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d02f      	beq.n	8009d80 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009d20:	e018      	b.n	8009d54 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d2a:	2b10      	cmp	r3, #16
 8009d2c:	d10e      	bne.n	8009d4c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	f107 020f 	add.w	r2, r7, #15
 8009d34:	4611      	mov	r1, r2
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7ff fafe 	bl	8009338 <lwip_netconn_is_err_msg>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d108      	bne.n	8009d54 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f003 fd39 	bl	800d7bc <pbuf_free>
 8009d4a:	e003      	b.n	8009d54 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 feaa 	bl	800aaa8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3310      	adds	r3, #16
 8009d58:	f107 0210 	add.w	r2, r7, #16
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f00f f91f 	bl	8018fa2 <sys_arch_mbox_tryfetch>
 8009d64:	4603      	mov	r3, r0
 8009d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d6a:	d1da      	bne.n	8009d22 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3310      	adds	r3, #16
 8009d70:	4618      	mov	r0, r3
 8009d72:	f00f f8b9 	bl	8018ee8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	3310      	adds	r3, #16
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f00f f939 	bl	8018ff2 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	3314      	adds	r3, #20
 8009d84:	4618      	mov	r0, r3
 8009d86:	f00f f923 	bl	8018fd0 <sys_mbox_valid>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d034      	beq.n	8009dfa <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009d90:	e01d      	b.n	8009dce <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	f107 020e 	add.w	r2, r7, #14
 8009d98:	4611      	mov	r1, r2
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7ff facc 	bl	8009338 <lwip_netconn_is_err_msg>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d113      	bne.n	8009dce <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8009daa:	6978      	ldr	r0, [r7, #20]
 8009dac:	f7ff ffac 	bl	8009d08 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d007      	beq.n	8009dc8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f004 fafd 	bl	800e3bc <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009dc8:	6978      	ldr	r0, [r7, #20]
 8009dca:	f7ff ff53 	bl	8009c74 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3314      	adds	r3, #20
 8009dd2:	f107 0210 	add.w	r2, r7, #16
 8009dd6:	4611      	mov	r1, r2
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f00f f8e2 	bl	8018fa2 <sys_arch_mbox_tryfetch>
 8009dde:	4603      	mov	r3, r0
 8009de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009de4:	d1d5      	bne.n	8009d92 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3314      	adds	r3, #20
 8009dea:	4618      	mov	r0, r3
 8009dec:	f00f f87c 	bl	8018ee8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	3314      	adds	r3, #20
 8009df4:	4618      	mov	r0, r3
 8009df6:	f00f f8fc 	bl	8018ff2 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8009dfa:	bf00      	nop
 8009dfc:	3718      	adds	r7, #24
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d106      	bne.n	8009e28 <lwip_netconn_do_close_internal+0x24>
 8009e1a:	4b87      	ldr	r3, [pc, #540]	; (800a038 <lwip_netconn_do_close_internal+0x234>)
 8009e1c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009e20:	4986      	ldr	r1, [pc, #536]	; (800a03c <lwip_netconn_do_close_internal+0x238>)
 8009e22:	4887      	ldr	r0, [pc, #540]	; (800a040 <lwip_netconn_do_close_internal+0x23c>)
 8009e24:	f00f fc28 	bl	8019678 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e30:	2b10      	cmp	r3, #16
 8009e32:	d006      	beq.n	8009e42 <lwip_netconn_do_close_internal+0x3e>
 8009e34:	4b80      	ldr	r3, [pc, #512]	; (800a038 <lwip_netconn_do_close_internal+0x234>)
 8009e36:	f240 32a3 	movw	r2, #931	; 0x3a3
 8009e3a:	4982      	ldr	r1, [pc, #520]	; (800a044 <lwip_netconn_do_close_internal+0x240>)
 8009e3c:	4880      	ldr	r0, [pc, #512]	; (800a040 <lwip_netconn_do_close_internal+0x23c>)
 8009e3e:	f00f fc1b 	bl	8019678 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	785b      	ldrb	r3, [r3, #1]
 8009e46:	2b04      	cmp	r3, #4
 8009e48:	d006      	beq.n	8009e58 <lwip_netconn_do_close_internal+0x54>
 8009e4a:	4b7b      	ldr	r3, [pc, #492]	; (800a038 <lwip_netconn_do_close_internal+0x234>)
 8009e4c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009e50:	497d      	ldr	r1, [pc, #500]	; (800a048 <lwip_netconn_do_close_internal+0x244>)
 8009e52:	487b      	ldr	r0, [pc, #492]	; (800a040 <lwip_netconn_do_close_internal+0x23c>)
 8009e54:	f00f fc10 	bl	8019678 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d106      	bne.n	8009e6e <lwip_netconn_do_close_internal+0x6a>
 8009e60:	4b75      	ldr	r3, [pc, #468]	; (800a038 <lwip_netconn_do_close_internal+0x234>)
 8009e62:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009e66:	4979      	ldr	r1, [pc, #484]	; (800a04c <lwip_netconn_do_close_internal+0x248>)
 8009e68:	4875      	ldr	r0, [pc, #468]	; (800a040 <lwip_netconn_do_close_internal+0x23c>)
 8009e6a:	f00f fc05 	bl	8019678 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d106      	bne.n	8009e84 <lwip_netconn_do_close_internal+0x80>
 8009e76:	4b70      	ldr	r3, [pc, #448]	; (800a038 <lwip_netconn_do_close_internal+0x234>)
 8009e78:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009e7c:	4974      	ldr	r1, [pc, #464]	; (800a050 <lwip_netconn_do_close_internal+0x24c>)
 8009e7e:	4870      	ldr	r0, [pc, #448]	; (800a040 <lwip_netconn_do_close_internal+0x23c>)
 8009e80:	f00f fbfa 	bl	8019678 <iprintf>

  tpcb = conn->pcb.tcp;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	7a1b      	ldrb	r3, [r3, #8]
 8009e90:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009e92:	7bfb      	ldrb	r3, [r7, #15]
 8009e94:	f003 0301 	and.w	r3, r3, #1
 8009e98:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009e9a:	7bfb      	ldrb	r3, [r7, #15]
 8009e9c:	f003 0302 	and.w	r3, r3, #2
 8009ea0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009ea2:	7bfb      	ldrb	r3, [r7, #15]
 8009ea4:	2b03      	cmp	r3, #3
 8009ea6:	d102      	bne.n	8009eae <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	75bb      	strb	r3, [r7, #22]
 8009eac:	e01f      	b.n	8009eee <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009eae:	7bbb      	ldrb	r3, [r7, #14]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00e      	beq.n	8009ed2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009eb8:	2b05      	cmp	r3, #5
 8009eba:	d007      	beq.n	8009ecc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009ec0:	2b06      	cmp	r3, #6
 8009ec2:	d003      	beq.n	8009ecc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009ec8:	2b08      	cmp	r3, #8
 8009eca:	d102      	bne.n	8009ed2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	75bb      	strb	r3, [r7, #22]
 8009ed0:	e00d      	b.n	8009eee <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009ed2:	7b7b      	ldrb	r3, [r7, #13]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d008      	beq.n	8009eea <lwip_netconn_do_close_internal+0xe6>
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	8b5b      	ldrh	r3, [r3, #26]
 8009edc:	f003 0310 	and.w	r3, r3, #16
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d002      	beq.n	8009eea <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	75bb      	strb	r3, [r7, #22]
 8009ee8:	e001      	b.n	8009eee <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8009eea:	2300      	movs	r3, #0
 8009eec:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8009eee:	7dbb      	ldrb	r3, [r7, #22]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d003      	beq.n	8009efc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	6938      	ldr	r0, [r7, #16]
 8009ef8:	f005 faee 	bl	800f4d8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	7d1b      	ldrb	r3, [r3, #20]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d104      	bne.n	8009f0e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009f04:	2100      	movs	r1, #0
 8009f06:	6938      	ldr	r0, [r7, #16]
 8009f08:	f005 fb5e 	bl	800f5c8 <tcp_accept>
 8009f0c:	e01d      	b.n	8009f4a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009f0e:	7bbb      	ldrb	r3, [r7, #14]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d007      	beq.n	8009f24 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009f14:	2100      	movs	r1, #0
 8009f16:	6938      	ldr	r0, [r7, #16]
 8009f18:	f005 faf0 	bl	800f4fc <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	6938      	ldr	r0, [r7, #16]
 8009f20:	f005 fb52 	bl	800f5c8 <tcp_accept>
    }
    if (shut_tx) {
 8009f24:	7b7b      	ldrb	r3, [r7, #13]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d003      	beq.n	8009f32 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	6938      	ldr	r0, [r7, #16]
 8009f2e:	f005 fb07 	bl	800f540 <tcp_sent>
    }
    if (shut_close) {
 8009f32:	7dbb      	ldrb	r3, [r7, #22]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d008      	beq.n	8009f4a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009f38:	2200      	movs	r2, #0
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	6938      	ldr	r0, [r7, #16]
 8009f3e:	f005 fb5b 	bl	800f5f8 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009f42:	2100      	movs	r1, #0
 8009f44:	6938      	ldr	r0, [r7, #16]
 8009f46:	f005 fb1d 	bl	800f584 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009f4a:	7dbb      	ldrb	r3, [r7, #22]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d005      	beq.n	8009f5c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009f50:	6938      	ldr	r0, [r7, #16]
 8009f52:	f004 f8ed 	bl	800e130 <tcp_close>
 8009f56:	4603      	mov	r3, r0
 8009f58:	75fb      	strb	r3, [r7, #23]
 8009f5a:	e007      	b.n	8009f6c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009f5c:	7bbb      	ldrb	r3, [r7, #14]
 8009f5e:	7b7a      	ldrb	r2, [r7, #13]
 8009f60:	4619      	mov	r1, r3
 8009f62:	6938      	ldr	r0, [r7, #16]
 8009f64:	f004 f910 	bl	800e188 <tcp_shutdown>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009f6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d102      	bne.n	8009f7a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009f74:	2301      	movs	r3, #1
 8009f76:	757b      	strb	r3, [r7, #21]
 8009f78:	e016      	b.n	8009fa8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009f7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f82:	d10f      	bne.n	8009fa4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a1b      	ldr	r3, [r3, #32]
 8009f88:	7a5b      	ldrb	r3, [r3, #9]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10c      	bne.n	8009fa8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009f92:	7dbb      	ldrb	r3, [r7, #22]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d007      	beq.n	8009fa8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009f98:	6938      	ldr	r0, [r7, #16]
 8009f9a:	f004 fa0f 	bl	800e3bc <tcp_abort>
          err = ERR_OK;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	75fb      	strb	r3, [r7, #23]
 8009fa2:	e001      	b.n	8009fa8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009fa8:	7d7b      	ldrb	r3, [r7, #21]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d052      	beq.n	800a054 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	330c      	adds	r3, #12
 8009fb6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a1b      	ldr	r3, [r3, #32]
 8009fbc:	7dfa      	ldrb	r2, [r7, #23]
 8009fbe:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009fcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d129      	bne.n	800a028 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009fd4:	7dbb      	ldrb	r3, [r7, #22]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00c      	beq.n	8009ff4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d005      	beq.n	8009ff4 <lwip_netconn_do_close_internal+0x1f0>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fec:	2200      	movs	r2, #0
 8009fee:	2104      	movs	r1, #4
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	4798      	blx	r3
      }
      if (shut_rx) {
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d009      	beq.n	800a00e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d005      	beq.n	800a00e <lwip_netconn_do_close_internal+0x20a>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	2200      	movs	r2, #0
 800a008:	2100      	movs	r1, #0
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	4798      	blx	r3
      }
      if (shut_tx) {
 800a00e:	7b7b      	ldrb	r3, [r7, #13]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d009      	beq.n	800a028 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d005      	beq.n	800a028 <lwip_netconn_do_close_internal+0x224>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a020:	2200      	movs	r2, #0
 800a022:	2102      	movs	r1, #2
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a028:	78fb      	ldrb	r3, [r7, #3]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d002      	beq.n	800a034 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a02e:	68b8      	ldr	r0, [r7, #8]
 800a030:	f00f f842 	bl	80190b8 <sys_sem_signal>
    }
    return ERR_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	e03c      	b.n	800a0b2 <lwip_netconn_do_close_internal+0x2ae>
 800a038:	0801aa04 	.word	0x0801aa04
 800a03c:	0801acd8 	.word	0x0801acd8
 800a040:	0801aa48 	.word	0x0801aa48
 800a044:	0801ace8 	.word	0x0801ace8
 800a048:	0801ad08 	.word	0x0801ad08
 800a04c:	0801ad2c 	.word	0x0801ad2c
 800a050:	0801ab6c 	.word	0x0801ab6c
  }
  if (!close_finished) {
 800a054:	7d7b      	ldrb	r3, [r7, #21]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d11e      	bne.n	800a098 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	7d1b      	ldrb	r3, [r3, #20]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d106      	bne.n	800a070 <lwip_netconn_do_close_internal+0x26c>
 800a062:	4b16      	ldr	r3, [pc, #88]	; (800a0bc <lwip_netconn_do_close_internal+0x2b8>)
 800a064:	f240 4241 	movw	r2, #1089	; 0x441
 800a068:	4915      	ldr	r1, [pc, #84]	; (800a0c0 <lwip_netconn_do_close_internal+0x2bc>)
 800a06a:	4816      	ldr	r0, [pc, #88]	; (800a0c4 <lwip_netconn_do_close_internal+0x2c0>)
 800a06c:	f00f fb04 	bl	8019678 <iprintf>
    if (shut_tx) {
 800a070:	7b7b      	ldrb	r3, [r7, #13]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d003      	beq.n	800a07e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800a076:	4914      	ldr	r1, [pc, #80]	; (800a0c8 <lwip_netconn_do_close_internal+0x2c4>)
 800a078:	6938      	ldr	r0, [r7, #16]
 800a07a:	f005 fa61 	bl	800f540 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a07e:	2201      	movs	r2, #1
 800a080:	4912      	ldr	r1, [pc, #72]	; (800a0cc <lwip_netconn_do_close_internal+0x2c8>)
 800a082:	6938      	ldr	r0, [r7, #16]
 800a084:	f005 fab8 	bl	800f5f8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a088:	4911      	ldr	r1, [pc, #68]	; (800a0d0 <lwip_netconn_do_close_internal+0x2cc>)
 800a08a:	6938      	ldr	r0, [r7, #16]
 800a08c:	f005 fa7a 	bl	800f584 <tcp_err>
    tcp_arg(tpcb, conn);
 800a090:	6879      	ldr	r1, [r7, #4]
 800a092:	6938      	ldr	r0, [r7, #16]
 800a094:	f005 fa20 	bl	800f4d8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a098:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d106      	bne.n	800a0ae <lwip_netconn_do_close_internal+0x2aa>
 800a0a0:	4b06      	ldr	r3, [pc, #24]	; (800a0bc <lwip_netconn_do_close_internal+0x2b8>)
 800a0a2:	f240 424d 	movw	r2, #1101	; 0x44d
 800a0a6:	490b      	ldr	r1, [pc, #44]	; (800a0d4 <lwip_netconn_do_close_internal+0x2d0>)
 800a0a8:	4806      	ldr	r0, [pc, #24]	; (800a0c4 <lwip_netconn_do_close_internal+0x2c0>)
 800a0aa:	f00f fae5 	bl	8019678 <iprintf>
  return err;
 800a0ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	0801aa04 	.word	0x0801aa04
 800a0c0:	0801ad40 	.word	0x0801ad40
 800a0c4:	0801aa48 	.word	0x0801aa48
 800a0c8:	0800967d 	.word	0x0800967d
 800a0cc:	080095b5 	.word	0x080095b5
 800a0d0:	08009725 	.word	0x08009725
 800a0d4:	0801ad64 	.word	0x0801ad64

0800a0d8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	785b      	ldrb	r3, [r3, #1]
 800a0ea:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a0ec:	7afb      	ldrb	r3, [r7, #11]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00d      	beq.n	800a10e <lwip_netconn_do_delconn+0x36>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0fc:	2b10      	cmp	r3, #16
 800a0fe:	d006      	beq.n	800a10e <lwip_netconn_do_delconn+0x36>
 800a100:	4b60      	ldr	r3, [pc, #384]	; (800a284 <lwip_netconn_do_delconn+0x1ac>)
 800a102:	f240 425e 	movw	r2, #1118	; 0x45e
 800a106:	4960      	ldr	r1, [pc, #384]	; (800a288 <lwip_netconn_do_delconn+0x1b0>)
 800a108:	4860      	ldr	r0, [pc, #384]	; (800a28c <lwip_netconn_do_delconn+0x1b4>)
 800a10a:	f00f fab5 	bl	8019678 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a10e:	7afb      	ldrb	r3, [r7, #11]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d005      	beq.n	800a120 <lwip_netconn_do_delconn+0x48>
 800a114:	7afb      	ldrb	r3, [r7, #11]
 800a116:	2b02      	cmp	r3, #2
 800a118:	d002      	beq.n	800a120 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a11a:	7afb      	ldrb	r3, [r7, #11]
 800a11c:	2b03      	cmp	r3, #3
 800a11e:	d109      	bne.n	800a134 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a120:	7afb      	ldrb	r3, [r7, #11]
 800a122:	2b03      	cmp	r3, #3
 800a124:	d10a      	bne.n	800a13c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	7f1b      	ldrb	r3, [r3, #28]
 800a12c:	f003 0304 	and.w	r3, r3, #4
 800a130:	2b00      	cmp	r3, #0
 800a132:	d103      	bne.n	800a13c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	22fb      	movs	r2, #251	; 0xfb
 800a138:	711a      	strb	r2, [r3, #4]
 800a13a:	e097      	b.n	800a26c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a13c:	7afb      	ldrb	r3, [r7, #11]
 800a13e:	2b03      	cmp	r3, #3
 800a140:	d10d      	bne.n	800a15e <lwip_netconn_do_delconn+0x86>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	7f1b      	ldrb	r3, [r3, #28]
 800a148:	f003 0304 	and.w	r3, r3, #4
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d106      	bne.n	800a15e <lwip_netconn_do_delconn+0x86>
 800a150:	4b4c      	ldr	r3, [pc, #304]	; (800a284 <lwip_netconn_do_delconn+0x1ac>)
 800a152:	f240 427a 	movw	r2, #1146	; 0x47a
 800a156:	494e      	ldr	r1, [pc, #312]	; (800a290 <lwip_netconn_do_delconn+0x1b8>)
 800a158:	484c      	ldr	r0, [pc, #304]	; (800a28c <lwip_netconn_do_delconn+0x1b4>)
 800a15a:	f00f fa8d 	bl	8019678 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4618      	mov	r0, r3
 800a16a:	f7ff fdcd 	bl	8009d08 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d05f      	beq.n	800a238 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a182:	2b10      	cmp	r3, #16
 800a184:	d00d      	beq.n	800a1a2 <lwip_netconn_do_delconn+0xca>
 800a186:	2b20      	cmp	r3, #32
 800a188:	d151      	bne.n	800a22e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f00a fbea 	bl	8014974 <udp_remove>
          break;
 800a1a0:	e046      	b.n	800a230 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	6a1b      	ldr	r3, [r3, #32]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d006      	beq.n	800a1ba <lwip_netconn_do_delconn+0xe2>
 800a1ac:	4b35      	ldr	r3, [pc, #212]	; (800a284 <lwip_netconn_do_delconn+0x1ac>)
 800a1ae:	f240 4294 	movw	r2, #1172	; 0x494
 800a1b2:	4938      	ldr	r1, [pc, #224]	; (800a294 <lwip_netconn_do_delconn+0x1bc>)
 800a1b4:	4835      	ldr	r0, [pc, #212]	; (800a28c <lwip_netconn_do_delconn+0x1b4>)
 800a1b6:	f00f fa5f 	bl	8019678 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2204      	movs	r2, #4
 800a1c0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2203      	movs	r2, #3
 800a1c6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7ff fe14 	bl	8009e04 <lwip_netconn_do_close_internal>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d04b      	beq.n	800a27a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	785b      	ldrb	r3, [r3, #1]
 800a1e8:	2b04      	cmp	r3, #4
 800a1ea:	d006      	beq.n	800a1fa <lwip_netconn_do_delconn+0x122>
 800a1ec:	4b25      	ldr	r3, [pc, #148]	; (800a284 <lwip_netconn_do_delconn+0x1ac>)
 800a1ee:	f240 429a 	movw	r2, #1178	; 0x49a
 800a1f2:	4929      	ldr	r1, [pc, #164]	; (800a298 <lwip_netconn_do_delconn+0x1c0>)
 800a1f4:	4825      	ldr	r0, [pc, #148]	; (800a28c <lwip_netconn_do_delconn+0x1b4>)
 800a1f6:	f00f fa3f 	bl	8019678 <iprintf>
            UNLOCK_TCPIP_CORE();
 800a1fa:	4828      	ldr	r0, [pc, #160]	; (800a29c <lwip_netconn_do_delconn+0x1c4>)
 800a1fc:	f00e ffc5 	bl	801918a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	330c      	adds	r3, #12
 800a206:	2100      	movs	r1, #0
 800a208:	4618      	mov	r0, r3
 800a20a:	f00e ff24 	bl	8019056 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a20e:	4823      	ldr	r0, [pc, #140]	; (800a29c <lwip_netconn_do_delconn+0x1c4>)
 800a210:	f00e ffac 	bl	801916c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	785b      	ldrb	r3, [r3, #1]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d02d      	beq.n	800a27a <lwip_netconn_do_delconn+0x1a2>
 800a21e:	4b19      	ldr	r3, [pc, #100]	; (800a284 <lwip_netconn_do_delconn+0x1ac>)
 800a220:	f240 429e 	movw	r2, #1182	; 0x49e
 800a224:	491c      	ldr	r1, [pc, #112]	; (800a298 <lwip_netconn_do_delconn+0x1c0>)
 800a226:	4819      	ldr	r0, [pc, #100]	; (800a28c <lwip_netconn_do_delconn+0x1b4>)
 800a228:	f00f fa26 	bl	8019678 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800a22c:	e025      	b.n	800a27a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800a22e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2200      	movs	r2, #0
 800a236:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d007      	beq.n	800a252 <lwip_netconn_do_delconn+0x17a>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	6810      	ldr	r0, [r2, #0]
 800a24c:	2200      	movs	r2, #0
 800a24e:	2100      	movs	r1, #0
 800a250:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d007      	beq.n	800a26c <lwip_netconn_do_delconn+0x194>
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	6810      	ldr	r0, [r2, #0]
 800a266:	2200      	movs	r2, #0
 800a268:	2102      	movs	r1, #2
 800a26a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	330c      	adds	r3, #12
 800a272:	4618      	mov	r0, r3
 800a274:	f00e ff3a 	bl	80190ec <sys_sem_valid>
 800a278:	e000      	b.n	800a27c <lwip_netconn_do_delconn+0x1a4>
          return;
 800a27a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	0801aa04 	.word	0x0801aa04
 800a288:	0801ad74 	.word	0x0801ad74
 800a28c:	0801aa48 	.word	0x0801aa48
 800a290:	0801ad88 	.word	0x0801ad88
 800a294:	0801ada8 	.word	0x0801ada8
 800a298:	0801adc4 	.word	0x0801adc4
 800a29c:	200097f0 	.word	0x200097f0

0800a2a0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d025      	beq.n	800a302 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2c0:	2b10      	cmp	r3, #16
 800a2c2:	d00e      	beq.n	800a2e2 <lwip_netconn_do_bind+0x42>
 800a2c4:	2b20      	cmp	r3, #32
 800a2c6:	d119      	bne.n	800a2fc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6858      	ldr	r0, [r3, #4]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	6899      	ldr	r1, [r3, #8]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	899b      	ldrh	r3, [r3, #12]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	f00a fa36 	bl	8014748 <udp_bind>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	73fb      	strb	r3, [r7, #15]
        break;
 800a2e0:	e011      	b.n	800a306 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	6858      	ldr	r0, [r3, #4]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	6899      	ldr	r1, [r3, #8]
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	899b      	ldrh	r3, [r3, #12]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	f004 f86f 	bl	800e3d4 <tcp_bind>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	73fb      	strb	r3, [r7, #15]
        break;
 800a2fa:	e004      	b.n	800a306 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a2fc:	23fa      	movs	r3, #250	; 0xfa
 800a2fe:	73fb      	strb	r3, [r7, #15]
        break;
 800a300:	e001      	b.n	800a306 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800a302:	23fa      	movs	r3, #250	; 0xfa
 800a304:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	7bfa      	ldrb	r2, [r7, #15]
 800a30a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a30c:	bf00      	nop
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d07f      	beq.n	800a42a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a334:	2b10      	cmp	r3, #16
 800a336:	d175      	bne.n	800a424 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	785b      	ldrb	r3, [r3, #1]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d165      	bne.n	800a40e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	7d1b      	ldrb	r3, [r3, #20]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d002      	beq.n	800a354 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800a34e:	23fa      	movs	r3, #250	; 0xfa
 800a350:	72fb      	strb	r3, [r7, #11]
 800a352:	e06c      	b.n	800a42e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a354:	23ff      	movs	r3, #255	; 0xff
 800a356:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	f107 020b 	add.w	r2, r7, #11
 800a362:	7cf9      	ldrb	r1, [r7, #19]
 800a364:	4618      	mov	r0, r3
 800a366:	f004 f8ed 	bl	800e544 <tcp_listen_with_backlog_and_err>
 800a36a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d05d      	beq.n	800a42e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	3310      	adds	r3, #16
 800a378:	4618      	mov	r0, r3
 800a37a:	f00e fe29 	bl	8018fd0 <sys_mbox_valid>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00b      	beq.n	800a39c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	3310      	adds	r3, #16
 800a38a:	4618      	mov	r0, r3
 800a38c:	f00e fdac 	bl	8018ee8 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3310      	adds	r3, #16
 800a396:	4618      	mov	r0, r3
 800a398:	f00e fe2b 	bl	8018ff2 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	3314      	adds	r3, #20
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f00e fe12 	bl	8018fd0 <sys_mbox_valid>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d108      	bne.n	800a3c4 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	3314      	adds	r3, #20
 800a3b8:	2106      	movs	r1, #6
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f00e fd7a 	bl	8018eb4 <sys_mbox_new>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800a3c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d118      	bne.n	800a3fe <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2202      	movs	r2, #2
 800a3d2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	685a      	ldr	r2, [r3, #4]
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	4610      	mov	r0, r2
 800a3ea:	f005 f875 	bl	800f4d8 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	4912      	ldr	r1, [pc, #72]	; (800a440 <lwip_netconn_do_listen+0x12c>)
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f005 f8e6 	bl	800f5c8 <tcp_accept>
 800a3fc:	e017      	b.n	800a42e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f003 fe96 	bl	800e130 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2200      	movs	r2, #0
 800a40a:	605a      	str	r2, [r3, #4]
 800a40c:	e00f      	b.n	800a42e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	785b      	ldrb	r3, [r3, #1]
 800a414:	2b02      	cmp	r3, #2
 800a416:	d102      	bne.n	800a41e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a418:	2300      	movs	r3, #0
 800a41a:	72fb      	strb	r3, [r7, #11]
 800a41c:	e007      	b.n	800a42e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a41e:	23f5      	movs	r3, #245	; 0xf5
 800a420:	72fb      	strb	r3, [r7, #11]
 800a422:	e004      	b.n	800a42e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a424:	23f0      	movs	r3, #240	; 0xf0
 800a426:	72fb      	strb	r3, [r7, #11]
 800a428:	e001      	b.n	800a42e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a42a:	23f5      	movs	r3, #245	; 0xf5
 800a42c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a42e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a436:	bf00      	nop
 800a438:	3718      	adds	r7, #24
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	08009921 	.word	0x08009921

0800a444 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	2200      	movs	r2, #0
 800a454:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d022      	beq.n	800a4a6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a46a:	2b10      	cmp	r3, #16
 800a46c:	d11b      	bne.n	800a4a6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a47a:	d202      	bcs.n	800a482 <lwip_netconn_do_recv+0x3e>
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	b29b      	uxth	r3, r3
 800a480:	e001      	b.n	800a486 <lwip_netconn_do_recv+0x42>
 800a482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a486:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	89fa      	ldrh	r2, [r7, #14]
 800a490:	4611      	mov	r1, r2
 800a492:	4618      	mov	r0, r3
 800a494:	f004 f95a 	bl	800e74c <tcp_recved>
        remaining -= recved;
 800a498:	89fb      	ldrh	r3, [r7, #14]
 800a49a:	697a      	ldr	r2, [r7, #20]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1e6      	bne.n	800a474 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a4a6:	bf00      	nop
 800a4a8:	3718      	adds	r7, #24
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
	...

0800a4b0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b088      	sub	sp, #32
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d106      	bne.n	800a4d4 <lwip_netconn_do_writemore+0x24>
 800a4c6:	4b96      	ldr	r3, [pc, #600]	; (800a720 <lwip_netconn_do_writemore+0x270>)
 800a4c8:	f240 6273 	movw	r2, #1651	; 0x673
 800a4cc:	4995      	ldr	r1, [pc, #596]	; (800a724 <lwip_netconn_do_writemore+0x274>)
 800a4ce:	4896      	ldr	r0, [pc, #600]	; (800a728 <lwip_netconn_do_writemore+0x278>)
 800a4d0:	f00f f8d2 	bl	8019678 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	785b      	ldrb	r3, [r3, #1]
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d006      	beq.n	800a4ea <lwip_netconn_do_writemore+0x3a>
 800a4dc:	4b90      	ldr	r3, [pc, #576]	; (800a720 <lwip_netconn_do_writemore+0x270>)
 800a4de:	f240 6274 	movw	r2, #1652	; 0x674
 800a4e2:	4992      	ldr	r1, [pc, #584]	; (800a72c <lwip_netconn_do_writemore+0x27c>)
 800a4e4:	4890      	ldr	r0, [pc, #576]	; (800a728 <lwip_netconn_do_writemore+0x278>)
 800a4e6:	f00f f8c7 	bl	8019678 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d106      	bne.n	800a500 <lwip_netconn_do_writemore+0x50>
 800a4f2:	4b8b      	ldr	r3, [pc, #556]	; (800a720 <lwip_netconn_do_writemore+0x270>)
 800a4f4:	f240 6275 	movw	r2, #1653	; 0x675
 800a4f8:	498d      	ldr	r1, [pc, #564]	; (800a730 <lwip_netconn_do_writemore+0x280>)
 800a4fa:	488b      	ldr	r0, [pc, #556]	; (800a728 <lwip_netconn_do_writemore+0x278>)
 800a4fc:	f00f f8bc 	bl	8019678 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d106      	bne.n	800a516 <lwip_netconn_do_writemore+0x66>
 800a508:	4b85      	ldr	r3, [pc, #532]	; (800a720 <lwip_netconn_do_writemore+0x270>)
 800a50a:	f240 6276 	movw	r2, #1654	; 0x676
 800a50e:	4989      	ldr	r1, [pc, #548]	; (800a734 <lwip_netconn_do_writemore+0x284>)
 800a510:	4885      	ldr	r0, [pc, #532]	; (800a728 <lwip_netconn_do_writemore+0x278>)
 800a512:	f00f f8b1 	bl	8019678 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a1b      	ldr	r3, [r3, #32]
 800a51a:	699a      	ldr	r2, [r3, #24]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a1b      	ldr	r3, [r3, #32]
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	429a      	cmp	r2, r3
 800a524:	d306      	bcc.n	800a534 <lwip_netconn_do_writemore+0x84>
 800a526:	4b7e      	ldr	r3, [pc, #504]	; (800a720 <lwip_netconn_do_writemore+0x270>)
 800a528:	f240 6277 	movw	r2, #1655	; 0x677
 800a52c:	4982      	ldr	r1, [pc, #520]	; (800a738 <lwip_netconn_do_writemore+0x288>)
 800a52e:	487e      	ldr	r0, [pc, #504]	; (800a728 <lwip_netconn_do_writemore+0x278>)
 800a530:	f00f f8a2 	bl	8019678 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6a1b      	ldr	r3, [r3, #32]
 800a538:	899b      	ldrh	r3, [r3, #12]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d106      	bne.n	800a54c <lwip_netconn_do_writemore+0x9c>
 800a53e:	4b78      	ldr	r3, [pc, #480]	; (800a720 <lwip_netconn_do_writemore+0x270>)
 800a540:	f240 6279 	movw	r2, #1657	; 0x679
 800a544:	497d      	ldr	r1, [pc, #500]	; (800a73c <lwip_netconn_do_writemore+0x28c>)
 800a546:	4878      	ldr	r0, [pc, #480]	; (800a728 <lwip_netconn_do_writemore+0x278>)
 800a548:	f00f f896 	bl	8019678 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a1b      	ldr	r3, [r3, #32]
 800a550:	7f1b      	ldrb	r3, [r3, #28]
 800a552:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	7f1b      	ldrb	r3, [r3, #28]
 800a558:	f003 0302 	and.w	r3, r3, #2
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d104      	bne.n	800a56a <lwip_netconn_do_writemore+0xba>
 800a560:	7ebb      	ldrb	r3, [r7, #26]
 800a562:	f003 0304 	and.w	r3, r3, #4
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <lwip_netconn_do_writemore+0xbe>
 800a56a:	2301      	movs	r3, #1
 800a56c:	e000      	b.n	800a570 <lwip_netconn_do_writemore+0xc0>
 800a56e:	2300      	movs	r3, #0
 800a570:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a1b      	ldr	r3, [r3, #32]
 800a57e:	691b      	ldr	r3, [r3, #16]
 800a580:	4413      	add	r3, r2
 800a582:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a1b      	ldr	r3, [r3, #32]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a1b      	ldr	r3, [r3, #32]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a59c:	d307      	bcc.n	800a5ae <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800a59e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5a2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a5a4:	7ebb      	ldrb	r3, [r7, #26]
 800a5a6:	f043 0302 	orr.w	r3, r3, #2
 800a5aa:	76bb      	strb	r3, [r7, #26]
 800a5ac:	e001      	b.n	800a5b2 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a5ba:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a5bc:	89fa      	ldrh	r2, [r7, #14]
 800a5be:	8bbb      	ldrh	r3, [r7, #28]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d216      	bcs.n	800a5f2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800a5c4:	89fb      	ldrh	r3, [r7, #14]
 800a5c6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a5c8:	7e3b      	ldrb	r3, [r7, #24]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00d      	beq.n	800a5ea <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800a5ce:	8bbb      	ldrh	r3, [r7, #28]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10e      	bne.n	800a5f2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a1b      	ldr	r3, [r3, #32]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d102      	bne.n	800a5e4 <lwip_netconn_do_writemore+0x134>
 800a5de:	f06f 0306 	mvn.w	r3, #6
 800a5e2:	e000      	b.n	800a5e6 <lwip_netconn_do_writemore+0x136>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a5e8:	e07d      	b.n	800a6e6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a5ea:	7ebb      	ldrb	r3, [r7, #26]
 800a5ec:	f043 0302 	orr.w	r3, r3, #2
 800a5f0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a1b      	ldr	r3, [r3, #32]
 800a5f6:	691a      	ldr	r2, [r3, #16]
 800a5f8:	8bbb      	ldrh	r3, [r7, #28]
 800a5fa:	441a      	add	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a1b      	ldr	r3, [r3, #32]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	429a      	cmp	r2, r3
 800a606:	d906      	bls.n	800a616 <lwip_netconn_do_writemore+0x166>
 800a608:	4b45      	ldr	r3, [pc, #276]	; (800a720 <lwip_netconn_do_writemore+0x270>)
 800a60a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800a60e:	494c      	ldr	r1, [pc, #304]	; (800a740 <lwip_netconn_do_writemore+0x290>)
 800a610:	4845      	ldr	r0, [pc, #276]	; (800a728 <lwip_netconn_do_writemore+0x278>)
 800a612:	f00f f831 	bl	8019678 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a616:	8bbb      	ldrh	r3, [r7, #28]
 800a618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d103      	bne.n	800a628 <lwip_netconn_do_writemore+0x178>
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a626:	d209      	bcs.n	800a63c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a62c:	8bba      	ldrh	r2, [r7, #28]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d10b      	bne.n	800a64a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	899b      	ldrh	r3, [r3, #12]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d906      	bls.n	800a64a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a63c:	2301      	movs	r3, #1
 800a63e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a640:	7ebb      	ldrb	r3, [r7, #26]
 800a642:	f043 0302 	orr.w	r3, r3, #2
 800a646:	76bb      	strb	r3, [r7, #26]
 800a648:	e001      	b.n	800a64e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a64a:	2300      	movs	r3, #0
 800a64c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6858      	ldr	r0, [r3, #4]
 800a652:	7ebb      	ldrb	r3, [r7, #26]
 800a654:	8bba      	ldrh	r2, [r7, #28]
 800a656:	6979      	ldr	r1, [r7, #20]
 800a658:	f007 fe80 	bl	801235c <tcp_write>
 800a65c:	4603      	mov	r3, r0
 800a65e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a660:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d12c      	bne.n	800a6c2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a1b      	ldr	r3, [r3, #32]
 800a66c:	6999      	ldr	r1, [r3, #24]
 800a66e:	8bba      	ldrh	r2, [r7, #28]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a1b      	ldr	r3, [r3, #32]
 800a674:	440a      	add	r2, r1
 800a676:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6a1b      	ldr	r3, [r3, #32]
 800a67c:	6919      	ldr	r1, [r3, #16]
 800a67e:	8bba      	ldrh	r2, [r7, #28]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a1b      	ldr	r3, [r3, #32]
 800a684:	440a      	add	r2, r1
 800a686:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a1b      	ldr	r3, [r3, #32]
 800a68c:	691a      	ldr	r2, [r3, #16]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a1b      	ldr	r3, [r3, #32]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	429a      	cmp	r2, r3
 800a698:	d113      	bne.n	800a6c2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	899a      	ldrh	r2, [r3, #12]
 800a6a0:	3a01      	subs	r2, #1
 800a6a2:	b292      	uxth	r2, r2
 800a6a4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	899b      	ldrh	r3, [r3, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d008      	beq.n	800a6c2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a1b      	ldr	r3, [r3, #32]
 800a6b4:	689a      	ldr	r2, [r3, #8]
 800a6b6:	3208      	adds	r2, #8
 800a6b8:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a1b      	ldr	r3, [r3, #32]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a6c2:	7e7b      	ldrb	r3, [r7, #25]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d004      	beq.n	800a6d2 <lwip_netconn_do_writemore+0x222>
 800a6c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f43f af50 	beq.w	800a572 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a6d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d004      	beq.n	800a6e4 <lwip_netconn_do_writemore+0x234>
 800a6da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a6de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6e2:	d146      	bne.n	800a772 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a6e4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a6e6:	7e3b      	ldrb	r3, [r7, #24]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d02b      	beq.n	800a744 <lwip_netconn_do_writemore+0x294>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a1b      	ldr	r3, [r3, #32]
 800a6f0:	699a      	ldr	r2, [r3, #24]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a1b      	ldr	r3, [r3, #32]
 800a6f6:	695b      	ldr	r3, [r3, #20]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d223      	bcs.n	800a744 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a700:	2b00      	cmp	r3, #0
 800a702:	d005      	beq.n	800a710 <lwip_netconn_do_writemore+0x260>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a708:	2200      	movs	r2, #0
 800a70a:	2103      	movs	r1, #3
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	7f1b      	ldrb	r3, [r3, #28]
 800a714:	f043 0310 	orr.w	r3, r3, #16
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	771a      	strb	r2, [r3, #28]
 800a71e:	e028      	b.n	800a772 <lwip_netconn_do_writemore+0x2c2>
 800a720:	0801aa04 	.word	0x0801aa04
 800a724:	0801ab5c 	.word	0x0801ab5c
 800a728:	0801aa48 	.word	0x0801aa48
 800a72c:	0801ae64 	.word	0x0801ae64
 800a730:	0801ab6c 	.word	0x0801ab6c
 800a734:	0801ae84 	.word	0x0801ae84
 800a738:	0801ae9c 	.word	0x0801ae9c
 800a73c:	0801aedc 	.word	0x0801aedc
 800a740:	0801af04 	.word	0x0801af04
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a74c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a750:	d305      	bcc.n	800a75e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a75a:	2b04      	cmp	r3, #4
 800a75c:	d909      	bls.n	800a772 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a762:	2b00      	cmp	r3, #0
 800a764:	d005      	beq.n	800a772 <lwip_netconn_do_writemore+0x2c2>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76a:	2200      	movs	r2, #0
 800a76c:	2103      	movs	r1, #3
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a772:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d11d      	bne.n	800a7b6 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a1b      	ldr	r3, [r3, #32]
 800a77e:	699a      	ldr	r2, [r3, #24]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a1b      	ldr	r3, [r3, #32]
 800a784:	695b      	ldr	r3, [r3, #20]
 800a786:	429a      	cmp	r2, r3
 800a788:	d002      	beq.n	800a790 <lwip_netconn_do_writemore+0x2e0>
 800a78a:	7e3b      	ldrb	r3, [r7, #24]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d001      	beq.n	800a794 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a790:	2301      	movs	r3, #1
 800a792:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	4618      	mov	r0, r3
 800a79a:	f008 fbc9 	bl	8012f30 <tcp_output>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a7a2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a7a6:	f113 0f04 	cmn.w	r3, #4
 800a7aa:	d12c      	bne.n	800a806 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a7ac:	7b3b      	ldrb	r3, [r7, #12]
 800a7ae:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	76fb      	strb	r3, [r7, #27]
 800a7b4:	e027      	b.n	800a806 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a7b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a7ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7be:	d120      	bne.n	800a802 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f008 fbb3 	bl	8012f30 <tcp_output>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a7ce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a7d2:	f113 0f04 	cmn.w	r3, #4
 800a7d6:	d104      	bne.n	800a7e2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a7d8:	7b7b      	ldrb	r3, [r7, #13]
 800a7da:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	76fb      	strb	r3, [r7, #27]
 800a7e0:	e011      	b.n	800a806 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a7e2:	7e3b      	ldrb	r3, [r7, #24]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00e      	beq.n	800a806 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6a1b      	ldr	r3, [r3, #32]
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d102      	bne.n	800a7f8 <lwip_netconn_do_writemore+0x348>
 800a7f2:	f06f 0306 	mvn.w	r3, #6
 800a7f6:	e000      	b.n	800a7fa <lwip_netconn_do_writemore+0x34a>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	76fb      	strb	r3, [r7, #27]
 800a800:	e001      	b.n	800a806 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a802:	2301      	movs	r3, #1
 800a804:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a806:	7efb      	ldrb	r3, [r7, #27]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d015      	beq.n	800a838 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a1b      	ldr	r3, [r3, #32]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	330c      	adds	r3, #12
 800a814:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6a1b      	ldr	r3, [r3, #32]
 800a81a:	7ffa      	ldrb	r2, [r7, #31]
 800a81c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a82a:	78fb      	ldrb	r3, [r7, #3]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d006      	beq.n	800a83e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a830:	68b8      	ldr	r0, [r7, #8]
 800a832:	f00e fc41 	bl	80190b8 <sys_sem_signal>
 800a836:	e002      	b.n	800a83e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a83c:	e000      	b.n	800a840 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3720      	adds	r7, #32
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d06b      	beq.n	800a936 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	7c1b      	ldrb	r3, [r3, #16]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d007      	beq.n	800a876 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	685a      	ldr	r2, [r3, #4]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	6812      	ldr	r2, [r2, #0]
 800a872:	601a      	str	r2, [r3, #0]
 800a874:	e006      	b.n	800a884 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	685a      	ldr	r2, [r3, #4]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	6852      	ldr	r2, [r2, #4]
 800a882:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a894:	2b10      	cmp	r3, #16
 800a896:	d021      	beq.n	800a8dc <lwip_netconn_do_getaddr+0x94>
 800a898:	2b20      	cmp	r3, #32
 800a89a:	d144      	bne.n	800a926 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	7c1b      	ldrb	r3, [r3, #16]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d007      	beq.n	800a8b4 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	8a52      	ldrh	r2, [r2, #18]
 800a8b0:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800a8b2:	e044      	b.n	800a93e <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	7c1b      	ldrb	r3, [r3, #16]
 800a8bc:	f003 0304 	and.w	r3, r3, #4
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d103      	bne.n	800a8cc <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	22f5      	movs	r2, #245	; 0xf5
 800a8c8:	711a      	strb	r2, [r3, #4]
        break;
 800a8ca:	e038      	b.n	800a93e <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	685a      	ldr	r2, [r3, #4]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	8a92      	ldrh	r2, [r2, #20]
 800a8d8:	801a      	strh	r2, [r3, #0]
        break;
 800a8da:	e030      	b.n	800a93e <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	7c1b      	ldrb	r3, [r3, #16]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d10f      	bne.n	800a904 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d005      	beq.n	800a8fc <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	7d1b      	ldrb	r3, [r3, #20]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d103      	bne.n	800a904 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	22f5      	movs	r2, #245	; 0xf5
 800a900:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800a902:	e01c      	b.n	800a93e <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	7c1b      	ldrb	r3, [r3, #16]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d004      	beq.n	800a916 <lwip_netconn_do_getaddr+0xce>
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	8adb      	ldrh	r3, [r3, #22]
 800a914:	e003      	b.n	800a91e <lwip_netconn_do_getaddr+0xd6>
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	8b1b      	ldrh	r3, [r3, #24]
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	68d2      	ldr	r2, [r2, #12]
 800a922:	8013      	strh	r3, [r2, #0]
        break;
 800a924:	e00b      	b.n	800a93e <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800a926:	4b08      	ldr	r3, [pc, #32]	; (800a948 <lwip_netconn_do_getaddr+0x100>)
 800a928:	f240 727d 	movw	r2, #1917	; 0x77d
 800a92c:	4907      	ldr	r1, [pc, #28]	; (800a94c <lwip_netconn_do_getaddr+0x104>)
 800a92e:	4808      	ldr	r0, [pc, #32]	; (800a950 <lwip_netconn_do_getaddr+0x108>)
 800a930:	f00e fea2 	bl	8019678 <iprintf>
        break;
 800a934:	e003      	b.n	800a93e <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	22f5      	movs	r2, #245	; 0xf5
 800a93a:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a93c:	bf00      	nop
 800a93e:	bf00      	nop
 800a940:	3710      	adds	r7, #16
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	0801aa04 	.word	0x0801aa04
 800a94c:	0801af44 	.word	0x0801af44
 800a950:	0801aa48 	.word	0x0801aa48

0800a954 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	785b      	ldrb	r3, [r3, #1]
 800a966:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d069      	beq.n	800aa46 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a97c:	2b10      	cmp	r3, #16
 800a97e:	d162      	bne.n	800aa46 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a984:	2b03      	cmp	r3, #3
 800a986:	d002      	beq.n	800a98e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a988:	7afb      	ldrb	r3, [r7, #11]
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d05b      	beq.n	800aa46 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a98e:	7afb      	ldrb	r3, [r7, #11]
 800a990:	2b03      	cmp	r3, #3
 800a992:	d103      	bne.n	800a99c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	22f5      	movs	r2, #245	; 0xf5
 800a998:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a99a:	e059      	b.n	800aa50 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a99c:	7afb      	ldrb	r3, [r7, #11]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d103      	bne.n	800a9aa <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	22fb      	movs	r2, #251	; 0xfb
 800a9a6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a9a8:	e052      	b.n	800aa50 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	7a1b      	ldrb	r3, [r3, #8]
 800a9ae:	f003 0301 	and.w	r3, r3, #1
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d004      	beq.n	800a9c0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7ff f9a4 	bl	8009d08 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	6a1b      	ldr	r3, [r3, #32]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d006      	beq.n	800a9d8 <lwip_netconn_do_close+0x84>
 800a9ca:	4b23      	ldr	r3, [pc, #140]	; (800aa58 <lwip_netconn_do_close+0x104>)
 800a9cc:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a9d0:	4922      	ldr	r1, [pc, #136]	; (800aa5c <lwip_netconn_do_close+0x108>)
 800a9d2:	4823      	ldr	r0, [pc, #140]	; (800aa60 <lwip_netconn_do_close+0x10c>)
 800a9d4:	f00e fe50 	bl	8019678 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2204      	movs	r2, #4
 800a9de:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7ff fa08 	bl	8009e04 <lwip_netconn_do_close_internal>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d029      	beq.n	800aa4e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	785b      	ldrb	r3, [r3, #1]
 800aa00:	2b04      	cmp	r3, #4
 800aa02:	d006      	beq.n	800aa12 <lwip_netconn_do_close+0xbe>
 800aa04:	4b14      	ldr	r3, [pc, #80]	; (800aa58 <lwip_netconn_do_close+0x104>)
 800aa06:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800aa0a:	4916      	ldr	r1, [pc, #88]	; (800aa64 <lwip_netconn_do_close+0x110>)
 800aa0c:	4814      	ldr	r0, [pc, #80]	; (800aa60 <lwip_netconn_do_close+0x10c>)
 800aa0e:	f00e fe33 	bl	8019678 <iprintf>
        UNLOCK_TCPIP_CORE();
 800aa12:	4815      	ldr	r0, [pc, #84]	; (800aa68 <lwip_netconn_do_close+0x114>)
 800aa14:	f00e fbb9 	bl	801918a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	330c      	adds	r3, #12
 800aa1e:	2100      	movs	r1, #0
 800aa20:	4618      	mov	r0, r3
 800aa22:	f00e fb18 	bl	8019056 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800aa26:	4810      	ldr	r0, [pc, #64]	; (800aa68 <lwip_netconn_do_close+0x114>)
 800aa28:	f00e fba0 	bl	801916c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	785b      	ldrb	r3, [r3, #1]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00b      	beq.n	800aa4e <lwip_netconn_do_close+0xfa>
 800aa36:	4b08      	ldr	r3, [pc, #32]	; (800aa58 <lwip_netconn_do_close+0x104>)
 800aa38:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800aa3c:	4909      	ldr	r1, [pc, #36]	; (800aa64 <lwip_netconn_do_close+0x110>)
 800aa3e:	4808      	ldr	r0, [pc, #32]	; (800aa60 <lwip_netconn_do_close+0x10c>)
 800aa40:	f00e fe1a 	bl	8019678 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800aa44:	e003      	b.n	800aa4e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	22f5      	movs	r2, #245	; 0xf5
 800aa4a:	711a      	strb	r2, [r3, #4]
 800aa4c:	e000      	b.n	800aa50 <lwip_netconn_do_close+0xfc>
      return;
 800aa4e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	0801aa04 	.word	0x0801aa04
 800aa5c:	0801ada8 	.word	0x0801ada8
 800aa60:	0801aa48 	.word	0x0801aa48
 800aa64:	0801adc4 	.word	0x0801adc4
 800aa68:	200097f0 	.word	0x200097f0

0800aa6c <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	4603      	mov	r3, r0
 800aa74:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800aa76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	dc04      	bgt.n	800aa88 <err_to_errno+0x1c>
 800aa7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa82:	f113 0f10 	cmn.w	r3, #16
 800aa86:	da01      	bge.n	800aa8c <err_to_errno+0x20>
    return EIO;
 800aa88:	2305      	movs	r3, #5
 800aa8a:	e005      	b.n	800aa98 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800aa8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa90:	425b      	negs	r3, r3
 800aa92:	4a04      	ldr	r2, [pc, #16]	; (800aaa4 <err_to_errno+0x38>)
 800aa94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	0801e1a0 	.word	0x0801e1a0

0800aaa8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d013      	beq.n	800aade <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00b      	beq.n	800aad6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f002 fe7a 	bl	800d7bc <pbuf_free>
      buf->p = buf->ptr = NULL;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	605a      	str	r2, [r3, #4]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685a      	ldr	r2, [r3, #4]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800aad6:	6879      	ldr	r1, [r7, #4]
 800aad8:	2006      	movs	r0, #6
 800aada:	f001 ff8d 	bl	800c9f8 <memp_free>
  }
}
 800aade:	bf00      	nop
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
	...

0800aae8 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	db02      	blt.n	800ab00 <tryget_socket_unconn_nouse+0x18>
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2b03      	cmp	r3, #3
 800aafe:	dd01      	ble.n	800ab04 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800ab00:	2300      	movs	r3, #0
 800ab02:	e003      	b.n	800ab0c <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	011b      	lsls	r3, r3, #4
 800ab08:	4a03      	ldr	r2, [pc, #12]	; (800ab18 <tryget_socket_unconn_nouse+0x30>)
 800ab0a:	4413      	add	r3, r2
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3714      	adds	r7, #20
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr
 800ab18:	200097a0 	.word	0x200097a0

0800ab1c <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7ff ffdf 	bl	800aae8 <tryget_socket_unconn_nouse>
 800ab2a:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b084      	sub	sp, #16
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f7ff ffec 	bl	800ab1c <tryget_socket_unconn>
 800ab44:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d005      	beq.n	800ab58 <tryget_socket+0x22>
    if (sock->conn) {
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d001      	beq.n	800ab58 <tryget_socket+0x22>
      return sock;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	e000      	b.n	800ab5a <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
	...

0800ab64 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f7ff ffe2 	bl	800ab36 <tryget_socket>
 800ab72:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d104      	bne.n	800ab84 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800ab7a:	4b05      	ldr	r3, [pc, #20]	; (800ab90 <get_socket+0x2c>)
 800ab7c:	2209      	movs	r2, #9
 800ab7e:	601a      	str	r2, [r3, #0]
    return NULL;
 800ab80:	2300      	movs	r3, #0
 800ab82:	e000      	b.n	800ab86 <get_socket+0x22>
  }
  return sock;
 800ab84:	68fb      	ldr	r3, [r7, #12]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	2000d118 	.word	0x2000d118

0800ab94 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800ab9e:	2300      	movs	r3, #0
 800aba0:	60fb      	str	r3, [r7, #12]
 800aba2:	e052      	b.n	800ac4a <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800aba4:	f00e fb1e 	bl	80191e4 <sys_arch_protect>
 800aba8:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800abaa:	4a2c      	ldr	r2, [pc, #176]	; (800ac5c <alloc_socket+0xc8>)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	011b      	lsls	r3, r3, #4
 800abb0:	4413      	add	r3, r2
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d142      	bne.n	800ac3e <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800abb8:	4a28      	ldr	r2, [pc, #160]	; (800ac5c <alloc_socket+0xc8>)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	011b      	lsls	r3, r3, #4
 800abbe:	4413      	add	r3, r2
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800abc4:	68b8      	ldr	r0, [r7, #8]
 800abc6:	f00e fb1b 	bl	8019200 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800abca:	4a24      	ldr	r2, [pc, #144]	; (800ac5c <alloc_socket+0xc8>)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	011b      	lsls	r3, r3, #4
 800abd0:	4413      	add	r3, r2
 800abd2:	3304      	adds	r3, #4
 800abd4:	2200      	movs	r2, #0
 800abd6:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800abd8:	4a20      	ldr	r2, [pc, #128]	; (800ac5c <alloc_socket+0xc8>)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	011b      	lsls	r3, r3, #4
 800abde:	4413      	add	r3, r2
 800abe0:	330e      	adds	r3, #14
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d006      	beq.n	800abf6 <alloc_socket+0x62>
 800abe8:	4b1d      	ldr	r3, [pc, #116]	; (800ac60 <alloc_socket+0xcc>)
 800abea:	f240 220e 	movw	r2, #526	; 0x20e
 800abee:	491d      	ldr	r1, [pc, #116]	; (800ac64 <alloc_socket+0xd0>)
 800abf0:	481d      	ldr	r0, [pc, #116]	; (800ac68 <alloc_socket+0xd4>)
 800abf2:	f00e fd41 	bl	8019678 <iprintf>
      sockets[i].rcvevent   = 0;
 800abf6:	4a19      	ldr	r2, [pc, #100]	; (800ac5c <alloc_socket+0xc8>)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	011b      	lsls	r3, r3, #4
 800abfc:	4413      	add	r3, r2
 800abfe:	3308      	adds	r3, #8
 800ac00:	2200      	movs	r2, #0
 800ac02:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac0c:	2b10      	cmp	r3, #16
 800ac0e:	d102      	bne.n	800ac16 <alloc_socket+0x82>
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d001      	beq.n	800ac1a <alloc_socket+0x86>
 800ac16:	2301      	movs	r3, #1
 800ac18:	e000      	b.n	800ac1c <alloc_socket+0x88>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	b299      	uxth	r1, r3
 800ac1e:	4a0f      	ldr	r2, [pc, #60]	; (800ac5c <alloc_socket+0xc8>)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	011b      	lsls	r3, r3, #4
 800ac24:	4413      	add	r3, r2
 800ac26:	330a      	adds	r3, #10
 800ac28:	460a      	mov	r2, r1
 800ac2a:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800ac2c:	4a0b      	ldr	r2, [pc, #44]	; (800ac5c <alloc_socket+0xc8>)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	011b      	lsls	r3, r3, #4
 800ac32:	4413      	add	r3, r2
 800ac34:	330c      	adds	r3, #12
 800ac36:	2200      	movs	r2, #0
 800ac38:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	e00a      	b.n	800ac54 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800ac3e:	68b8      	ldr	r0, [r7, #8]
 800ac40:	f00e fade 	bl	8019200 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	3301      	adds	r3, #1
 800ac48:	60fb      	str	r3, [r7, #12]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b03      	cmp	r3, #3
 800ac4e:	dda9      	ble.n	800aba4 <alloc_socket+0x10>
  }
  return -1;
 800ac50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	200097a0 	.word	0x200097a0
 800ac60:	0801af5c 	.word	0x0801af5c
 800ac64:	0801af90 	.word	0x0801af90
 800ac68:	0801afb0 	.word	0x0801afb0

0800ac6c <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
 800ac78:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	6852      	ldr	r2, [r2, #4]
 800ac80:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2200      	movs	r2, #0
 800ac86:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	601a      	str	r2, [r3, #0]
  return 1;
 800ac96:	2301      	movs	r3, #1
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3714      	adds	r7, #20
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00d      	beq.n	800acd4 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d005      	beq.n	800acca <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f002 fd7a 	bl	800d7bc <pbuf_free>
 800acc8:	e004      	b.n	800acd4 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4618      	mov	r0, r3
 800acd0:	f7ff feea 	bl	800aaa8 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d002      	beq.n	800ace0 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800acda:	68b8      	ldr	r0, [r7, #8]
 800acdc:	f7fd ff4a 	bl	8008b74 <netconn_delete>
  }
}
 800ace0:	bf00      	nop
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800acf2:	f00e fa77 	bl	80191e4 <sys_arch_protect>
 800acf6:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800acf8:	f107 0308 	add.w	r3, r7, #8
 800acfc:	f107 020c 	add.w	r2, r7, #12
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7ff ffb2 	bl	800ac6c <free_socket_locked>
 800ad08:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800ad0a:	6978      	ldr	r0, [r7, #20]
 800ad0c:	f00e fa78 	bl	8019200 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d006      	beq.n	800ad24 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f107 0208 	add.w	r2, r7, #8
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	6838      	ldr	r0, [r7, #0]
 800ad20:	f7ff ffc0 	bl	800aca4 <free_socket_free_elements>
  }
}
 800ad24:	bf00      	nop
 800ad26:	3718      	adds	r7, #24
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800ad2c:	b590      	push	{r4, r7, lr}
 800ad2e:	b099      	sub	sp, #100	; 0x64
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f7ff ff11 	bl	800ab64 <get_socket>
 800ad42:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 800ad44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d102      	bne.n	800ad50 <lwip_accept+0x24>
    return -1;
 800ad4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad4e:	e0f8      	b.n	800af42 <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800ad50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ad58:	4611      	mov	r1, r2
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7fd ffdc 	bl	8008d18 <netconn_accept>
 800ad60:	4603      	mov	r3, r0
 800ad62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 800ad66:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d02c      	beq.n	800adc8 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800ad6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad78:	2b10      	cmp	r3, #16
 800ad7a:	d008      	beq.n	800ad8e <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800ad7c:	235f      	movs	r3, #95	; 0x5f
 800ad7e:	633b      	str	r3, [r7, #48]	; 0x30
 800ad80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d01d      	beq.n	800adc2 <lwip_accept+0x96>
 800ad86:	4a71      	ldr	r2, [pc, #452]	; (800af4c <lwip_accept+0x220>)
 800ad88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8a:	6013      	str	r3, [r2, #0]
 800ad8c:	e019      	b.n	800adc2 <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800ad8e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad92:	f113 0f0f 	cmn.w	r3, #15
 800ad96:	d108      	bne.n	800adaa <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800ad98:	2316      	movs	r3, #22
 800ad9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ad9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00f      	beq.n	800adc2 <lwip_accept+0x96>
 800ada2:	4a6a      	ldr	r2, [pc, #424]	; (800af4c <lwip_accept+0x220>)
 800ada4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada6:	6013      	str	r3, [r2, #0]
 800ada8:	e00b      	b.n	800adc2 <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800adaa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800adae:	4618      	mov	r0, r3
 800adb0:	f7ff fe5c 	bl	800aa6c <err_to_errno>
 800adb4:	63b8      	str	r0, [r7, #56]	; 0x38
 800adb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d002      	beq.n	800adc2 <lwip_accept+0x96>
 800adbc:	4a63      	ldr	r2, [pc, #396]	; (800af4c <lwip_accept+0x220>)
 800adbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc0:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800adc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adc6:	e0bc      	b.n	800af42 <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800adc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d106      	bne.n	800addc <lwip_accept+0xb0>
 800adce:	4b60      	ldr	r3, [pc, #384]	; (800af50 <lwip_accept+0x224>)
 800add0:	f240 228b 	movw	r2, #651	; 0x28b
 800add4:	495f      	ldr	r1, [pc, #380]	; (800af54 <lwip_accept+0x228>)
 800add6:	4860      	ldr	r0, [pc, #384]	; (800af58 <lwip_accept+0x22c>)
 800add8:	f00e fc4e 	bl	8019678 <iprintf>

  newsock = alloc_socket(newconn, 1);
 800addc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adde:	2101      	movs	r1, #1
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7ff fed7 	bl	800ab94 <alloc_socket>
 800ade6:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 800ade8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adee:	d10e      	bne.n	800ae0e <lwip_accept+0xe2>
    netconn_delete(newconn);
 800adf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fd febe 	bl	8008b74 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800adf8:	2317      	movs	r3, #23
 800adfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d002      	beq.n	800ae08 <lwip_accept+0xdc>
 800ae02:	4a52      	ldr	r2, [pc, #328]	; (800af4c <lwip_accept+0x220>)
 800ae04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae06:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800ae08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae0c:	e099      	b.n	800af42 <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800ae0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	db02      	blt.n	800ae1a <lwip_accept+0xee>
 800ae14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae16:	2b03      	cmp	r3, #3
 800ae18:	dd06      	ble.n	800ae28 <lwip_accept+0xfc>
 800ae1a:	4b4d      	ldr	r3, [pc, #308]	; (800af50 <lwip_accept+0x224>)
 800ae1c:	f44f 7225 	mov.w	r2, #660	; 0x294
 800ae20:	494e      	ldr	r1, [pc, #312]	; (800af5c <lwip_accept+0x230>)
 800ae22:	484d      	ldr	r0, [pc, #308]	; (800af58 <lwip_accept+0x22c>)
 800ae24:	f00e fc28 	bl	8019678 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800ae28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae2a:	011b      	lsls	r3, r3, #4
 800ae2c:	4a4c      	ldr	r2, [pc, #304]	; (800af60 <lwip_accept+0x234>)
 800ae2e:	4413      	add	r3, r2
 800ae30:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800ae32:	f00e f9d7 	bl	80191e4 <sys_arch_protect>
 800ae36:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800ae38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3a:	699b      	ldr	r3, [r3, #24]
 800ae3c:	b21b      	sxth	r3, r3
 800ae3e:	43db      	mvns	r3, r3
 800ae40:	b21b      	sxth	r3, r3
 800ae42:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 800ae44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae48:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800ae4a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ae4c:	f00e f9d8 	bl	8019200 <sys_arch_unprotect>

  if (newconn->callback) {
 800ae50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d012      	beq.n	800ae7e <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800ae58:	4842      	ldr	r0, [pc, #264]	; (800af64 <lwip_accept+0x238>)
 800ae5a:	f00e f987 	bl	801916c <sys_mutex_lock>
    while (recvevent > 0) {
 800ae5e:	e008      	b.n	800ae72 <lwip_accept+0x146>
      recvevent--;
 800ae60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae62:	3b01      	subs	r3, #1
 800ae64:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800ae66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	2100      	movs	r1, #0
 800ae70:	4798      	blx	r3
    while (recvevent > 0) {
 800ae72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	dcf3      	bgt.n	800ae60 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800ae78:	483a      	ldr	r0, [pc, #232]	; (800af64 <lwip_accept+0x238>)
 800ae7a:	f00e f986 	bl	801918a <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d055      	beq.n	800af30 <lwip_accept+0x204>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d052      	beq.n	800af30 <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800ae8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae8c:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800ae90:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ae94:	2300      	movs	r3, #0
 800ae96:	f7fd fe89 	bl	8008bac <netconn_getaddr>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 800aea0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d016      	beq.n	800aed6 <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800aea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fd fe62 	bl	8008b74 <netconn_delete>
      free_socket(nsock, 1);
 800aeb0:	2101      	movs	r1, #1
 800aeb2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800aeb4:	f7ff ff18 	bl	800ace8 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800aeb8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7ff fdd5 	bl	800aa6c <err_to_errno>
 800aec2:	6478      	str	r0, [r7, #68]	; 0x44
 800aec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d002      	beq.n	800aed0 <lwip_accept+0x1a4>
 800aeca:	4a20      	ldr	r2, [pc, #128]	; (800af4c <lwip_accept+0x220>)
 800aecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aece:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800aed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aed4:	e035      	b.n	800af42 <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800aed6:	f107 0314 	add.w	r3, r7, #20
 800aeda:	2210      	movs	r2, #16
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	f107 0314 	add.w	r3, r7, #20
 800aee2:	2202      	movs	r2, #2
 800aee4:	705a      	strb	r2, [r3, #1]
 800aee6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aee8:	f107 0414 	add.w	r4, r7, #20
 800aeec:	4618      	mov	r0, r3
 800aeee:	f001 f835 	bl	800bf5c <lwip_htons>
 800aef2:	4603      	mov	r3, r0
 800aef4:	8063      	strh	r3, [r4, #2]
 800aef6:	f107 0314 	add.w	r3, r7, #20
 800aefa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aefc:	605a      	str	r2, [r3, #4]
 800aefe:	f107 0314 	add.w	r3, r7, #20
 800af02:	3308      	adds	r3, #8
 800af04:	2208      	movs	r2, #8
 800af06:	2100      	movs	r1, #0
 800af08:	4618      	mov	r0, r3
 800af0a:	f00e facd 	bl	80194a8 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	7d3a      	ldrb	r2, [r7, #20]
 800af14:	4293      	cmp	r3, r2
 800af16:	d903      	bls.n	800af20 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800af18:	7d3b      	ldrb	r3, [r7, #20]
 800af1a:	461a      	mov	r2, r3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	f107 0314 	add.w	r3, r7, #20
 800af28:	4619      	mov	r1, r3
 800af2a:	68b8      	ldr	r0, [r7, #8]
 800af2c:	f00e faae 	bl	801948c <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800af30:	2300      	movs	r3, #0
 800af32:	643b      	str	r3, [r7, #64]	; 0x40
 800af34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af36:	2b00      	cmp	r3, #0
 800af38:	d002      	beq.n	800af40 <lwip_accept+0x214>
 800af3a:	4a04      	ldr	r2, [pc, #16]	; (800af4c <lwip_accept+0x220>)
 800af3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af3e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800af40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800af42:	4618      	mov	r0, r3
 800af44:	3764      	adds	r7, #100	; 0x64
 800af46:	46bd      	mov	sp, r7
 800af48:	bd90      	pop	{r4, r7, pc}
 800af4a:	bf00      	nop
 800af4c:	2000d118 	.word	0x2000d118
 800af50:	0801af5c 	.word	0x0801af5c
 800af54:	0801afd8 	.word	0x0801afd8
 800af58:	0801afb0 	.word	0x0801afb0
 800af5c:	0801afe8 	.word	0x0801afe8
 800af60:	200097a0 	.word	0x200097a0
 800af64:	200097f0 	.word	0x200097f0

0800af68 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b08a      	sub	sp, #40	; 0x28
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f7ff fdf5 	bl	800ab64 <get_socket>
 800af7a:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d102      	bne.n	800af88 <lwip_bind+0x20>
    return -1;
 800af82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af86:	e051      	b.n	800b02c <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b10      	cmp	r3, #16
 800af8c:	d108      	bne.n	800afa0 <lwip_bind+0x38>
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	785b      	ldrb	r3, [r3, #1]
 800af92:	2b02      	cmp	r3, #2
 800af94:	d104      	bne.n	800afa0 <lwip_bind+0x38>
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	f003 0303 	and.w	r3, r3, #3
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d014      	beq.n	800afca <lwip_bind+0x62>
 800afa0:	4b24      	ldr	r3, [pc, #144]	; (800b034 <lwip_bind+0xcc>)
 800afa2:	f240 22e2 	movw	r2, #738	; 0x2e2
 800afa6:	4924      	ldr	r1, [pc, #144]	; (800b038 <lwip_bind+0xd0>)
 800afa8:	4824      	ldr	r0, [pc, #144]	; (800b03c <lwip_bind+0xd4>)
 800afaa:	f00e fb65 	bl	8019678 <iprintf>
 800afae:	f06f 000f 	mvn.w	r0, #15
 800afb2:	f7ff fd5b 	bl	800aa6c <err_to_errno>
 800afb6:	6178      	str	r0, [r7, #20]
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d002      	beq.n	800afc4 <lwip_bind+0x5c>
 800afbe:	4a20      	ldr	r2, [pc, #128]	; (800b040 <lwip_bind+0xd8>)
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	6013      	str	r3, [r2, #0]
 800afc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afc8:	e030      	b.n	800b02c <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	613b      	str	r3, [r7, #16]
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	885b      	ldrh	r3, [r3, #2]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 ffc1 	bl	800bf5c <lwip_htons>
 800afda:	4603      	mov	r3, r0
 800afdc:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800afe4:	f107 0110 	add.w	r1, r7, #16
 800afe8:	4618      	mov	r0, r3
 800afea:	f7fd fe31 	bl	8008c50 <netconn_bind>
 800afee:	4603      	mov	r3, r0
 800aff0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800aff4:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00e      	beq.n	800b01a <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800affc:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b000:	4618      	mov	r0, r3
 800b002:	f7ff fd33 	bl	800aa6c <err_to_errno>
 800b006:	61b8      	str	r0, [r7, #24]
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d002      	beq.n	800b014 <lwip_bind+0xac>
 800b00e:	4a0c      	ldr	r2, [pc, #48]	; (800b040 <lwip_bind+0xd8>)
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b018:	e008      	b.n	800b02c <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800b01a:	2300      	movs	r3, #0
 800b01c:	61fb      	str	r3, [r7, #28]
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d002      	beq.n	800b02a <lwip_bind+0xc2>
 800b024:	4a06      	ldr	r2, [pc, #24]	; (800b040 <lwip_bind+0xd8>)
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800b02a:	2300      	movs	r3, #0
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3728      	adds	r7, #40	; 0x28
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	0801af5c 	.word	0x0801af5c
 800b038:	0801b000 	.word	0x0801b000
 800b03c:	0801afb0 	.word	0x0801afb0
 800b040:	2000d118 	.word	0x2000d118

0800b044 <lwip_close>:

int
lwip_close(int s)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800b04c:	2300      	movs	r3, #0
 800b04e:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7ff fd87 	bl	800ab64 <get_socket>
 800b056:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d102      	bne.n	800b064 <lwip_close+0x20>
    return -1;
 800b05e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b062:	e039      	b.n	800b0d8 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00b      	beq.n	800b084 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b076:	2b10      	cmp	r3, #16
 800b078:	bf0c      	ite	eq
 800b07a:	2301      	moveq	r3, #1
 800b07c:	2300      	movne	r3, #0
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	617b      	str	r3, [r7, #20]
 800b082:	e00a      	b.n	800b09a <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d006      	beq.n	800b09a <lwip_close+0x56>
 800b08c:	4b14      	ldr	r3, [pc, #80]	; (800b0e0 <lwip_close+0x9c>)
 800b08e:	f44f 7245 	mov.w	r2, #788	; 0x314
 800b092:	4914      	ldr	r1, [pc, #80]	; (800b0e4 <lwip_close+0xa0>)
 800b094:	4814      	ldr	r0, [pc, #80]	; (800b0e8 <lwip_close+0xa4>)
 800b096:	f00e faef 	bl	8019678 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7fd fd44 	bl	8008b2c <netconn_prepare_delete>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b0a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00e      	beq.n	800b0ce <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800b0b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7ff fcd9 	bl	800aa6c <err_to_errno>
 800b0ba:	60b8      	str	r0, [r7, #8]
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d002      	beq.n	800b0c8 <lwip_close+0x84>
 800b0c2:	4a0a      	ldr	r2, [pc, #40]	; (800b0ec <lwip_close+0xa8>)
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b0c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0cc:	e004      	b.n	800b0d8 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800b0ce:	6979      	ldr	r1, [r7, #20]
 800b0d0:	6938      	ldr	r0, [r7, #16]
 800b0d2:	f7ff fe09 	bl	800ace8 <free_socket>
  set_errno(0);
  return 0;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3718      	adds	r7, #24
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	0801af5c 	.word	0x0801af5c
 800b0e4:	0801b01c 	.word	0x0801b01c
 800b0e8:	0801afb0 	.word	0x0801afb0
 800b0ec:	2000d118 	.word	0x2000d118

0800b0f0 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b088      	sub	sp, #32
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f7ff fd32 	bl	800ab64 <get_socket>
 800b100:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d102      	bne.n	800b10e <lwip_listen+0x1e>
    return -1;
 800b108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b10c:	e03e      	b.n	800b18c <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	2bfe      	cmp	r3, #254	; 0xfe
 800b112:	dc03      	bgt.n	800b11c <lwip_listen+0x2c>
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b11a:	e000      	b.n	800b11e <lwip_listen+0x2e>
 800b11c:	23ff      	movs	r3, #255	; 0xff
 800b11e:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	683a      	ldr	r2, [r7, #0]
 800b126:	b2d2      	uxtb	r2, r2
 800b128:	4611      	mov	r1, r2
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7fd fdc8 	bl	8008cc0 <netconn_listen_with_backlog>
 800b130:	4603      	mov	r3, r0
 800b132:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800b134:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d01e      	beq.n	800b17a <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b146:	2b10      	cmp	r3, #16
 800b148:	d008      	beq.n	800b15c <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800b14a:	235f      	movs	r3, #95	; 0x5f
 800b14c:	60fb      	str	r3, [r7, #12]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d00f      	beq.n	800b174 <lwip_listen+0x84>
 800b154:	4a0f      	ldr	r2, [pc, #60]	; (800b194 <lwip_listen+0xa4>)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6013      	str	r3, [r2, #0]
 800b15a:	e00b      	b.n	800b174 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800b15c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b160:	4618      	mov	r0, r3
 800b162:	f7ff fc83 	bl	800aa6c <err_to_errno>
 800b166:	6138      	str	r0, [r7, #16]
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d002      	beq.n	800b174 <lwip_listen+0x84>
 800b16e:	4a09      	ldr	r2, [pc, #36]	; (800b194 <lwip_listen+0xa4>)
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800b174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b178:	e008      	b.n	800b18c <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800b17a:	2300      	movs	r3, #0
 800b17c:	617b      	str	r3, [r7, #20]
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <lwip_listen+0x9a>
 800b184:	4a03      	ldr	r2, [pc, #12]	; (800b194 <lwip_listen+0xa4>)
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800b18a:	2300      	movs	r3, #0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3720      	adds	r7, #32
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	2000d118 	.word	0x2000d118

0800b198 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b08c      	sub	sp, #48	; 0x30
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
 800b1a4:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800b1a6:	2308      	movs	r3, #8
 800b1a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	db01      	blt.n	800b1ba <lwip_recv_tcp+0x22>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	e001      	b.n	800b1be <lwip_recv_tcp+0x26>
 800b1ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b1be:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d106      	bne.n	800b1d4 <lwip_recv_tcp+0x3c>
 800b1c6:	4b74      	ldr	r3, [pc, #464]	; (800b398 <lwip_recv_tcp+0x200>)
 800b1c8:	f240 329e 	movw	r2, #926	; 0x39e
 800b1cc:	4973      	ldr	r1, [pc, #460]	; (800b39c <lwip_recv_tcp+0x204>)
 800b1ce:	4874      	ldr	r0, [pc, #464]	; (800b3a0 <lwip_recv_tcp+0x208>)
 800b1d0:	f00e fa52 	bl	8019678 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1de:	2b10      	cmp	r3, #16
 800b1e0:	d006      	beq.n	800b1f0 <lwip_recv_tcp+0x58>
 800b1e2:	4b6d      	ldr	r3, [pc, #436]	; (800b398 <lwip_recv_tcp+0x200>)
 800b1e4:	f240 329f 	movw	r2, #927	; 0x39f
 800b1e8:	496e      	ldr	r1, [pc, #440]	; (800b3a4 <lwip_recv_tcp+0x20c>)
 800b1ea:	486d      	ldr	r0, [pc, #436]	; (800b3a0 <lwip_recv_tcp+0x208>)
 800b1ec:	f00e fa44 	bl	8019678 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	f003 0308 	and.w	r3, r3, #8
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d005      	beq.n	800b206 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800b1fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1fe:	f043 0304 	orr.w	r3, r3, #4
 800b202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	617b      	str	r3, [r7, #20]
 800b214:	e036      	b.n	800b284 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b21e:	f107 0114 	add.w	r1, r7, #20
 800b222:	4618      	mov	r0, r3
 800b224:	f7fd ffae 	bl	8009184 <netconn_recv_tcp_pbuf_flags>
 800b228:	4603      	mov	r3, r0
 800b22a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800b22e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b232:	2b00      	cmp	r3, #0
 800b234:	d019      	beq.n	800b26a <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800b236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f300 808d 	bgt.w	800b358 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800b23e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b242:	4618      	mov	r0, r3
 800b244:	f7ff fc12 	bl	800aa6c <err_to_errno>
 800b248:	61f8      	str	r0, [r7, #28]
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <lwip_recv_tcp+0xbe>
 800b250:	4a55      	ldr	r2, [pc, #340]	; (800b3a8 <lwip_recv_tcp+0x210>)
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800b256:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b25a:	f113 0f0f 	cmn.w	r3, #15
 800b25e:	d101      	bne.n	800b264 <lwip_recv_tcp+0xcc>
          return 0;
 800b260:	2300      	movs	r3, #0
 800b262:	e094      	b.n	800b38e <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800b264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b268:	e091      	b.n	800b38e <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d106      	bne.n	800b27e <lwip_recv_tcp+0xe6>
 800b270:	4b49      	ldr	r3, [pc, #292]	; (800b398 <lwip_recv_tcp+0x200>)
 800b272:	f240 32c5 	movw	r2, #965	; 0x3c5
 800b276:	494d      	ldr	r1, [pc, #308]	; (800b3ac <lwip_recv_tcp+0x214>)
 800b278:	4849      	ldr	r0, [pc, #292]	; (800b3a0 <lwip_recv_tcp+0x208>)
 800b27a:	f00e f9fd 	bl	8019678 <iprintf>
      sock->lastdata.pbuf = p;
 800b27e:	697a      	ldr	r2, [r7, #20]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	891b      	ldrh	r3, [r3, #8]
 800b288:	461a      	mov	r2, r3
 800b28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28c:	4293      	cmp	r3, r2
 800b28e:	dd03      	ble.n	800b298 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	891b      	ldrh	r3, [r3, #8]
 800b294:	847b      	strh	r3, [r7, #34]	; 0x22
 800b296:	e001      	b.n	800b29c <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800b298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29a:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800b29c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	4413      	add	r3, r2
 800b2a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	dd03      	ble.n	800b2b0 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800b2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	43db      	mvns	r3, r3
 800b2ae:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800b2b0:	6978      	ldr	r0, [r7, #20]
 800b2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	18d1      	adds	r1, r2, r3
 800b2b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	f002 fc84 	bl	800dbc8 <pbuf_copy_partial>

    recvd += copylen;
 800b2c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2c4:	4413      	add	r3, r2
 800b2c6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800b2c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	da06      	bge.n	800b2de <lwip_recv_tcp+0x146>
 800b2d0:	4b31      	ldr	r3, [pc, #196]	; (800b398 <lwip_recv_tcp+0x200>)
 800b2d2:	f240 32dd 	movw	r2, #989	; 0x3dd
 800b2d6:	4936      	ldr	r1, [pc, #216]	; (800b3b0 <lwip_recv_tcp+0x218>)
 800b2d8:	4831      	ldr	r0, [pc, #196]	; (800b3a0 <lwip_recv_tcp+0x208>)
 800b2da:	f00e f9cd 	bl	8019678 <iprintf>
    recv_left -= copylen;
 800b2de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2e2:	1ad3      	subs	r3, r2, r3
 800b2e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	f003 0301 	and.w	r3, r3, #1
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d123      	bne.n	800b338 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	891b      	ldrh	r3, [r3, #8]
 800b2f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d906      	bls.n	800b308 <lwip_recv_tcp+0x170>
 800b2fa:	4b27      	ldr	r3, [pc, #156]	; (800b398 <lwip_recv_tcp+0x200>)
 800b2fc:	f240 32e3 	movw	r2, #995	; 0x3e3
 800b300:	492c      	ldr	r1, [pc, #176]	; (800b3b4 <lwip_recv_tcp+0x21c>)
 800b302:	4827      	ldr	r0, [pc, #156]	; (800b3a0 <lwip_recv_tcp+0x208>)
 800b304:	f00e f9b8 	bl	8019678 <iprintf>
      if (p->tot_len - copylen > 0) {
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	891b      	ldrh	r3, [r3, #8]
 800b30c:	461a      	mov	r2, r3
 800b30e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	2b00      	cmp	r3, #0
 800b314:	dd09      	ble.n	800b32a <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b31a:	4611      	mov	r1, r2
 800b31c:	4618      	mov	r0, r3
 800b31e:	f002 fa1a 	bl	800d756 <pbuf_free_header>
 800b322:	4602      	mov	r2, r0
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	605a      	str	r2, [r3, #4]
 800b328:	e006      	b.n	800b338 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2200      	movs	r2, #0
 800b32e:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	4618      	mov	r0, r3
 800b334:	f002 fa42 	bl	800d7bc <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800b338:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b33c:	f043 0314 	orr.w	r3, r3, #20
 800b340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b346:	2b00      	cmp	r3, #0
 800b348:	dd08      	ble.n	800b35c <lwip_recv_tcp+0x1c4>
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	f003 0301 	and.w	r3, r3, #1
 800b350:	2b00      	cmp	r3, #0
 800b352:	f43f af58 	beq.w	800b206 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800b356:	e001      	b.n	800b35c <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800b358:	bf00      	nop
 800b35a:	e000      	b.n	800b35e <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800b35c:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800b35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b360:	2b00      	cmp	r3, #0
 800b362:	dd0b      	ble.n	800b37c <lwip_recv_tcp+0x1e4>
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	f003 0301 	and.w	r3, r3, #1
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d106      	bne.n	800b37c <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b374:	4611      	mov	r1, r2
 800b376:	4618      	mov	r0, r3
 800b378:	f7fd fe52 	bl	8009020 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800b37c:	2300      	movs	r3, #0
 800b37e:	61bb      	str	r3, [r7, #24]
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d002      	beq.n	800b38c <lwip_recv_tcp+0x1f4>
 800b386:	4a08      	ldr	r2, [pc, #32]	; (800b3a8 <lwip_recv_tcp+0x210>)
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	6013      	str	r3, [r2, #0]
  return recvd;
 800b38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3730      	adds	r7, #48	; 0x30
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	0801af5c 	.word	0x0801af5c
 800b39c:	0801b054 	.word	0x0801b054
 800b3a0:	0801afb0 	.word	0x0801afb0
 800b3a4:	0801b064 	.word	0x0801b064
 800b3a8:	2000d118 	.word	0x2000d118
 800b3ac:	0801b088 	.word	0x0801b088
 800b3b0:	0801b094 	.word	0x0801b094
 800b3b4:	0801b0bc 	.word	0x0801b0bc

0800b3b8 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800b3b8:	b590      	push	{r4, r7, lr}
 800b3ba:	b08b      	sub	sp, #44	; 0x2c
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	603b      	str	r3, [r7, #0]
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d106      	bne.n	800b3e0 <lwip_sock_make_addr+0x28>
 800b3d2:	4b2b      	ldr	r3, [pc, #172]	; (800b480 <lwip_sock_make_addr+0xc8>)
 800b3d4:	f240 4207 	movw	r2, #1031	; 0x407
 800b3d8:	492a      	ldr	r1, [pc, #168]	; (800b484 <lwip_sock_make_addr+0xcc>)
 800b3da:	482b      	ldr	r0, [pc, #172]	; (800b488 <lwip_sock_make_addr+0xd0>)
 800b3dc:	f00e f94c 	bl	8019678 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d106      	bne.n	800b3f4 <lwip_sock_make_addr+0x3c>
 800b3e6:	4b26      	ldr	r3, [pc, #152]	; (800b480 <lwip_sock_make_addr+0xc8>)
 800b3e8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800b3ec:	4927      	ldr	r1, [pc, #156]	; (800b48c <lwip_sock_make_addr+0xd4>)
 800b3ee:	4826      	ldr	r0, [pc, #152]	; (800b488 <lwip_sock_make_addr+0xd0>)
 800b3f0:	f00e f942 	bl	8019678 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d106      	bne.n	800b408 <lwip_sock_make_addr+0x50>
 800b3fa:	4b21      	ldr	r3, [pc, #132]	; (800b480 <lwip_sock_make_addr+0xc8>)
 800b3fc:	f240 4209 	movw	r2, #1033	; 0x409
 800b400:	4923      	ldr	r1, [pc, #140]	; (800b490 <lwip_sock_make_addr+0xd8>)
 800b402:	4821      	ldr	r0, [pc, #132]	; (800b488 <lwip_sock_make_addr+0xd0>)
 800b404:	f00e f938 	bl	8019678 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800b408:	f107 0314 	add.w	r3, r7, #20
 800b40c:	2210      	movs	r2, #16
 800b40e:	701a      	strb	r2, [r3, #0]
 800b410:	f107 0314 	add.w	r3, r7, #20
 800b414:	2202      	movs	r2, #2
 800b416:	705a      	strb	r2, [r3, #1]
 800b418:	f107 0414 	add.w	r4, r7, #20
 800b41c:	88fb      	ldrh	r3, [r7, #6]
 800b41e:	4618      	mov	r0, r3
 800b420:	f000 fd9c 	bl	800bf5c <lwip_htons>
 800b424:	4603      	mov	r3, r0
 800b426:	8063      	strh	r3, [r4, #2]
 800b428:	f107 0314 	add.w	r3, r7, #20
 800b42c:	68ba      	ldr	r2, [r7, #8]
 800b42e:	6812      	ldr	r2, [r2, #0]
 800b430:	605a      	str	r2, [r3, #4]
 800b432:	f107 0314 	add.w	r3, r7, #20
 800b436:	3308      	adds	r3, #8
 800b438:	2208      	movs	r2, #8
 800b43a:	2100      	movs	r1, #0
 800b43c:	4618      	mov	r0, r3
 800b43e:	f00e f833 	bl	80194a8 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800b442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	7d3a      	ldrb	r2, [r7, #20]
 800b448:	4293      	cmp	r3, r2
 800b44a:	d202      	bcs.n	800b452 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800b44c:	2301      	movs	r3, #1
 800b44e:	627b      	str	r3, [r7, #36]	; 0x24
 800b450:	e008      	b.n	800b464 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800b452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	7d3a      	ldrb	r2, [r7, #20]
 800b458:	4293      	cmp	r3, r2
 800b45a:	d903      	bls.n	800b464 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800b45c:	7d3b      	ldrb	r3, [r7, #20]
 800b45e:	461a      	mov	r2, r3
 800b460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b462:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800b464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	f107 0314 	add.w	r3, r7, #20
 800b46c:	4619      	mov	r1, r3
 800b46e:	6838      	ldr	r0, [r7, #0]
 800b470:	f00e f80c 	bl	801948c <memcpy>
  return truncated;
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b476:	4618      	mov	r0, r3
 800b478:	372c      	adds	r7, #44	; 0x2c
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd90      	pop	{r4, r7, pc}
 800b47e:	bf00      	nop
 800b480:	0801af5c 	.word	0x0801af5c
 800b484:	0801b0cc 	.word	0x0801b0cc
 800b488:	0801afb0 	.word	0x0801afb0
 800b48c:	0801b0e0 	.word	0x0801b0e0
 800b490:	0801b0f0 	.word	0x0801b0f0

0800b494 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b088      	sub	sp, #32
 800b498:	af02      	add	r7, sp, #8
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
 800b4a0:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d101      	bne.n	800b4ac <lwip_recv_tcp_from+0x18>
    return 0;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	e021      	b.n	800b4f0 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d01d      	beq.n	800b4ee <lwip_recv_tcp_from+0x5a>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d01a      	beq.n	800b4ee <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6818      	ldr	r0, [r3, #0]
 800b4bc:	f107 0216 	add.w	r2, r7, #22
 800b4c0:	f107 0110 	add.w	r1, r7, #16
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	f7fd fb71 	bl	8008bac <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d00e      	beq.n	800b4ee <lwip_recv_tcp_from+0x5a>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d00b      	beq.n	800b4ee <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6818      	ldr	r0, [r3, #0]
 800b4da:	8afa      	ldrh	r2, [r7, #22]
 800b4dc:	f107 0110 	add.w	r1, r7, #16
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	f7ff ff67 	bl	800b3b8 <lwip_sock_make_addr>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	e000      	b.n	800b4f0 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3718      	adds	r7, #24
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800b4f8:	b590      	push	{r4, r7, lr}
 800b4fa:	b08d      	sub	sp, #52	; 0x34
 800b4fc:	af02      	add	r7, sp, #8
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
 800b504:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10d      	bne.n	800b52a <lwip_recvfrom_udp_raw+0x32>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	dd09      	ble.n	800b52a <lwip_recvfrom_udp_raw+0x32>
 800b516:	4b5e      	ldr	r3, [pc, #376]	; (800b690 <lwip_recvfrom_udp_raw+0x198>)
 800b518:	f240 4249 	movw	r2, #1097	; 0x449
 800b51c:	495d      	ldr	r1, [pc, #372]	; (800b694 <lwip_recvfrom_udp_raw+0x19c>)
 800b51e:	485e      	ldr	r0, [pc, #376]	; (800b698 <lwip_recvfrom_udp_raw+0x1a0>)
 800b520:	f00e f8aa 	bl	8019678 <iprintf>
 800b524:	f06f 030f 	mvn.w	r3, #15
 800b528:	e0ad      	b.n	800b686 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	f003 0308 	and.w	r3, r3, #8
 800b530:	2b00      	cmp	r3, #0
 800b532:	d003      	beq.n	800b53c <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800b534:	2304      	movs	r3, #4
 800b536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b53a:	e002      	b.n	800b542 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d11e      	bne.n	800b58c <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b556:	f107 0110 	add.w	r1, r7, #16
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fd fe3e 	bl	80091dc <netconn_recv_udp_raw_netbuf_flags>
 800b560:	4603      	mov	r3, r0
 800b562:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800b564:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d002      	beq.n	800b572 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800b56c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b570:	e089      	b.n	800b686 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d106      	bne.n	800b586 <lwip_recvfrom_udp_raw+0x8e>
 800b578:	4b45      	ldr	r3, [pc, #276]	; (800b690 <lwip_recvfrom_udp_raw+0x198>)
 800b57a:	f240 425e 	movw	r2, #1118	; 0x45e
 800b57e:	4947      	ldr	r1, [pc, #284]	; (800b69c <lwip_recvfrom_udp_raw+0x1a4>)
 800b580:	4845      	ldr	r0, [pc, #276]	; (800b698 <lwip_recvfrom_udp_raw+0x1a0>)
 800b582:	f00e f879 	bl	8019678 <iprintf>
    sock->lastdata.netbuf = buf;
 800b586:	693a      	ldr	r2, [r7, #16]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	891b      	ldrh	r3, [r3, #8]
 800b592:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800b594:	2300      	movs	r3, #0
 800b596:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800b598:	2300      	movs	r3, #0
 800b59a:	61fb      	str	r3, [r7, #28]
 800b59c:	e029      	b.n	800b5f2 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800b59e:	8b3a      	ldrh	r2, [r7, #24]
 800b5a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5a2:	1ad3      	subs	r3, r2, r3
 800b5a4:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	689a      	ldr	r2, [r3, #8]
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	00db      	lsls	r3, r3, #3
 800b5ae:	4413      	add	r3, r2
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	8afb      	ldrh	r3, [r7, #22]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d902      	bls.n	800b5be <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800b5b8:	8afb      	ldrh	r3, [r7, #22]
 800b5ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b5bc:	e006      	b.n	800b5cc <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	689a      	ldr	r2, [r3, #8]
 800b5c2:	69fb      	ldr	r3, [r7, #28]
 800b5c4:	00db      	lsls	r3, r3, #3
 800b5c6:	4413      	add	r3, r2
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	6818      	ldr	r0, [r3, #0]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	689a      	ldr	r2, [r3, #8]
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	00db      	lsls	r3, r3, #3
 800b5d8:	4413      	add	r3, r2
 800b5da:	6819      	ldr	r1, [r3, #0]
 800b5dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b5e0:	f002 faf2 	bl	800dbc8 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800b5e4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b5e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5e8:	4413      	add	r3, r2
 800b5ea:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	61fb      	str	r3, [r7, #28]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	69fa      	ldr	r2, [r7, #28]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	da03      	bge.n	800b604 <lwip_recvfrom_udp_raw+0x10c>
 800b5fc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b5fe:	8b3b      	ldrh	r3, [r7, #24]
 800b600:	429a      	cmp	r2, r3
 800b602:	d3cc      	bcc.n	800b59e <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d01a      	beq.n	800b642 <lwip_recvfrom_udp_raw+0x14a>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d016      	beq.n	800b642 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d012      	beq.n	800b642 <lwip_recvfrom_udp_raw+0x14a>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00e      	beq.n	800b642 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6818      	ldr	r0, [r3, #0]
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	f103 0108 	add.w	r1, r3, #8
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	3304      	adds	r3, #4
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	4623      	mov	r3, r4
 800b63e:	f7ff febb 	bl	800b3b8 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d007      	beq.n	800b660 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800b650:	2300      	movs	r3, #0
 800b652:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800b654:	7d7b      	ldrb	r3, [r7, #21]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d102      	bne.n	800b660 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	f003 0301 	and.w	r3, r3, #1
 800b666:	2b00      	cmp	r3, #0
 800b668:	d106      	bne.n	800b678 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2200      	movs	r2, #0
 800b66e:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	4618      	mov	r0, r3
 800b674:	f7ff fa18 	bl	800aaa8 <netbuf_delete>
  }
  if (datagram_len) {
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d002      	beq.n	800b684 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	8b3a      	ldrh	r2, [r7, #24]
 800b682:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800b684:	2300      	movs	r3, #0
}
 800b686:	4618      	mov	r0, r3
 800b688:	372c      	adds	r7, #44	; 0x2c
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd90      	pop	{r4, r7, pc}
 800b68e:	bf00      	nop
 800b690:	0801af5c 	.word	0x0801af5c
 800b694:	0801b100 	.word	0x0801b100
 800b698:	0801afb0 	.word	0x0801afb0
 800b69c:	0801b12c 	.word	0x0801b12c

0800b6a0 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b096      	sub	sp, #88	; 0x58
 800b6a4:	af02      	add	r7, sp, #8
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f7ff fa58 	bl	800ab64 <get_socket>
 800b6b4:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800b6b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d102      	bne.n	800b6c2 <lwip_recvfrom+0x22>
    return -1;
 800b6bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6c0:	e078      	b.n	800b7b4 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800b6c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6cc:	2b10      	cmp	r3, #16
 800b6ce:	d112      	bne.n	800b6f6 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	68b9      	ldr	r1, [r7, #8]
 800b6d6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b6d8:	f7ff fd5e 	bl	800b198 <lwip_recv_tcp>
 800b6dc:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800b6de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6e0:	9301      	str	r3, [sp, #4]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	4b35      	ldr	r3, [pc, #212]	; (800b7bc <lwip_recvfrom+0x11c>)
 800b6e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b6ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b6ec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b6ee:	f7ff fed1 	bl	800b494 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800b6f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6f4:	e05e      	b.n	800b7b4 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800b702:	2300      	movs	r3, #0
 800b704:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800b706:	2300      	movs	r3, #0
 800b708:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800b70a:	2300      	movs	r3, #0
 800b70c:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800b70e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b712:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800b714:	2301      	movs	r3, #1
 800b716:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800b718:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b71a:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800b71c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d002      	beq.n	800b728 <lwip_recvfrom+0x88>
 800b722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	e000      	b.n	800b72a <lwip_recvfrom+0x8a>
 800b728:	2300      	movs	r3, #0
 800b72a:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800b72c:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800b730:	f107 0214 	add.w	r2, r7, #20
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	9300      	str	r3, [sp, #0]
 800b738:	460b      	mov	r3, r1
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b73e:	f7ff fedb 	bl	800b4f8 <lwip_recvfrom_udp_raw>
 800b742:	4603      	mov	r3, r0
 800b744:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800b748:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00e      	beq.n	800b76e <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800b750:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800b754:	4618      	mov	r0, r3
 800b756:	f7ff f989 	bl	800aa6c <err_to_errno>
 800b75a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b75c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d002      	beq.n	800b768 <lwip_recvfrom+0xc8>
 800b762:	4a17      	ldr	r2, [pc, #92]	; (800b7c0 <lwip_recvfrom+0x120>)
 800b764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b766:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800b768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b76c:	e022      	b.n	800b7b4 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800b76e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b770:	461a      	mov	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	4293      	cmp	r3, r2
 800b776:	bf28      	it	cs
 800b778:	4613      	movcs	r3, r2
 800b77a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b77e:	4293      	cmp	r3, r2
 800b780:	d206      	bcs.n	800b790 <lwip_recvfrom+0xf0>
 800b782:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b784:	461a      	mov	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4293      	cmp	r3, r2
 800b78a:	bf28      	it	cs
 800b78c:	4613      	movcs	r3, r2
 800b78e:	e001      	b.n	800b794 <lwip_recvfrom+0xf4>
 800b790:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b794:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800b796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d002      	beq.n	800b7a2 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800b79c:	69ba      	ldr	r2, [r7, #24]
 800b79e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7a0:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	643b      	str	r3, [r7, #64]	; 0x40
 800b7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d002      	beq.n	800b7b2 <lwip_recvfrom+0x112>
 800b7ac:	4a04      	ldr	r2, [pc, #16]	; (800b7c0 <lwip_recvfrom+0x120>)
 800b7ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7b0:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800b7b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3750      	adds	r7, #80	; 0x50
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	0801b138 	.word	0x0801b138
 800b7c0:	2000d118 	.word	0x2000d118

0800b7c4 <lwip_read>:

ssize_t
lwip_read(int s, void *mem, size_t len)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af02      	add	r7, sp, #8
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	9301      	str	r3, [sp, #4]
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	2300      	movs	r3, #0
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	68b9      	ldr	r1, [r7, #8]
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f7ff ff5e 	bl	800b6a0 <lwip_recvfrom>
 800b7e4:	4603      	mov	r3, r0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
	...

0800b7f0 <lwip_socket>:
  return (err == ERR_OK ? short_size : -1);
}

int
lwip_socket(int domain, int type, int protocol)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	2b03      	cmp	r3, #3
 800b800:	d009      	beq.n	800b816 <lwip_socket+0x26>
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	2b03      	cmp	r3, #3
 800b806:	dc23      	bgt.n	800b850 <lwip_socket+0x60>
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d019      	beq.n	800b842 <lwip_socket+0x52>
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	2b02      	cmp	r3, #2
 800b812:	d009      	beq.n	800b828 <lwip_socket+0x38>
 800b814:	e01c      	b.n	800b850 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	b2db      	uxtb	r3, r3
 800b81a:	4a22      	ldr	r2, [pc, #136]	; (800b8a4 <lwip_socket+0xb4>)
 800b81c:	4619      	mov	r1, r3
 800b81e:	2040      	movs	r0, #64	; 0x40
 800b820:	f7fd f90a 	bl	8008a38 <netconn_new_with_proto_and_callback>
 800b824:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800b826:	e019      	b.n	800b85c <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2b88      	cmp	r3, #136	; 0x88
 800b82c:	d101      	bne.n	800b832 <lwip_socket+0x42>
 800b82e:	2321      	movs	r3, #33	; 0x21
 800b830:	e000      	b.n	800b834 <lwip_socket+0x44>
 800b832:	2320      	movs	r3, #32
 800b834:	4a1b      	ldr	r2, [pc, #108]	; (800b8a4 <lwip_socket+0xb4>)
 800b836:	2100      	movs	r1, #0
 800b838:	4618      	mov	r0, r3
 800b83a:	f7fd f8fd 	bl	8008a38 <netconn_new_with_proto_and_callback>
 800b83e:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b840:	e00c      	b.n	800b85c <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800b842:	4a18      	ldr	r2, [pc, #96]	; (800b8a4 <lwip_socket+0xb4>)
 800b844:	2100      	movs	r1, #0
 800b846:	2010      	movs	r0, #16
 800b848:	f7fd f8f6 	bl	8008a38 <netconn_new_with_proto_and_callback>
 800b84c:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800b84e:	e005      	b.n	800b85c <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800b850:	4b15      	ldr	r3, [pc, #84]	; (800b8a8 <lwip_socket+0xb8>)
 800b852:	2216      	movs	r2, #22
 800b854:	601a      	str	r2, [r3, #0]
      return -1;
 800b856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b85a:	e01e      	b.n	800b89a <lwip_socket+0xaa>
  }

  if (!conn) {
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d105      	bne.n	800b86e <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800b862:	4b11      	ldr	r3, [pc, #68]	; (800b8a8 <lwip_socket+0xb8>)
 800b864:	2269      	movs	r2, #105	; 0x69
 800b866:	601a      	str	r2, [r3, #0]
    return -1;
 800b868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b86c:	e015      	b.n	800b89a <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800b86e:	2100      	movs	r1, #0
 800b870:	6978      	ldr	r0, [r7, #20]
 800b872:	f7ff f98f 	bl	800ab94 <alloc_socket>
 800b876:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b87e:	d108      	bne.n	800b892 <lwip_socket+0xa2>
    netconn_delete(conn);
 800b880:	6978      	ldr	r0, [r7, #20]
 800b882:	f7fd f977 	bl	8008b74 <netconn_delete>
    set_errno(ENFILE);
 800b886:	4b08      	ldr	r3, [pc, #32]	; (800b8a8 <lwip_socket+0xb8>)
 800b888:	2217      	movs	r2, #23
 800b88a:	601a      	str	r2, [r3, #0]
    return -1;
 800b88c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b890:	e003      	b.n	800b89a <lwip_socket+0xaa>
  }
  conn->socket = i;
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	693a      	ldr	r2, [r7, #16]
 800b896:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800b898:	693b      	ldr	r3, [r7, #16]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3718      	adds	r7, #24
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	0800b935 	.word	0x0800b935
 800b8a8:	2000d118 	.word	0x2000d118

0800b8ac <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b087      	sub	sp, #28
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	617b      	str	r3, [r7, #20]
 800b8be:	e02c      	b.n	800b91a <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	695a      	ldr	r2, [r3, #20]
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	00db      	lsls	r3, r3, #3
 800b8c8:	4413      	add	r3, r2
 800b8ca:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d11e      	bne.n	800b914 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d009      	beq.n	800b8f0 <lwip_poll_should_wake+0x44>
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	f003 0301 	and.w	r3, r3, #1
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d001      	beq.n	800b8f0 <lwip_poll_should_wake+0x44>
        return 1;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e01a      	b.n	800b926 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d009      	beq.n	800b90a <lwip_poll_should_wake+0x5e>
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	f003 0302 	and.w	r3, r3, #2
 800b902:	2b00      	cmp	r3, #0
 800b904:	d001      	beq.n	800b90a <lwip_poll_should_wake+0x5e>
        return 1;
 800b906:	2301      	movs	r3, #1
 800b908:	e00d      	b.n	800b926 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800b90a:	6a3b      	ldr	r3, [r7, #32]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d001      	beq.n	800b914 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800b910:	2301      	movs	r3, #1
 800b912:	e008      	b.n	800b926 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	3301      	adds	r3, #1
 800b918:	617b      	str	r3, [r7, #20]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	699b      	ldr	r3, [r3, #24]
 800b91e:	697a      	ldr	r2, [r7, #20]
 800b920:	429a      	cmp	r2, r3
 800b922:	d3cd      	bcc.n	800b8c0 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	371c      	adds	r7, #28
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
	...

0800b934 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b08a      	sub	sp, #40	; 0x28
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	460b      	mov	r3, r1
 800b93e:	70fb      	strb	r3, [r7, #3]
 800b940:	4613      	mov	r3, r2
 800b942:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	f000 80a4 	beq.w	800ba94 <event_callback+0x160>
    s = conn->socket;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800b952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b954:	2b00      	cmp	r3, #0
 800b956:	da18      	bge.n	800b98a <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800b958:	f00d fc44 	bl	80191e4 <sys_arch_protect>
 800b95c:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	2b00      	cmp	r3, #0
 800b964:	da0b      	bge.n	800b97e <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800b966:	78fb      	ldrb	r3, [r7, #3]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d104      	bne.n	800b976 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	699b      	ldr	r3, [r3, #24]
 800b970:	1e5a      	subs	r2, r3, #1
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800b976:	69f8      	ldr	r0, [r7, #28]
 800b978:	f00d fc42 	bl	8019200 <sys_arch_unprotect>
        return;
 800b97c:	e08d      	b.n	800ba9a <event_callback+0x166>
      }
      s = conn->socket;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	699b      	ldr	r3, [r3, #24]
 800b982:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800b984:	69f8      	ldr	r0, [r7, #28]
 800b986:	f00d fc3b 	bl	8019200 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800b98a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b98c:	f7ff f8ea 	bl	800ab64 <get_socket>
 800b990:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d07f      	beq.n	800ba98 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800b998:	2301      	movs	r3, #1
 800b99a:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800b99c:	f00d fc22 	bl	80191e4 <sys_arch_protect>
 800b9a0:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800b9a2:	78fb      	ldrb	r3, [r7, #3]
 800b9a4:	2b04      	cmp	r3, #4
 800b9a6:	d83e      	bhi.n	800ba26 <event_callback+0xf2>
 800b9a8:	a201      	add	r2, pc, #4	; (adr r2, 800b9b0 <event_callback+0x7c>)
 800b9aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ae:	bf00      	nop
 800b9b0:	0800b9c5 	.word	0x0800b9c5
 800b9b4:	0800b9e7 	.word	0x0800b9e7
 800b9b8:	0800b9ff 	.word	0x0800b9ff
 800b9bc:	0800ba13 	.word	0x0800ba13
 800b9c0:	0800ba1f 	.word	0x0800ba1f
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	b21a      	sxth	r2, r3
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	dd2a      	ble.n	800ba36 <event_callback+0x102>
        check_waiters = 0;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	623b      	str	r3, [r7, #32]
      }
      break;
 800b9e4:	e027      	b.n	800ba36 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	b21a      	sxth	r2, r3
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	623b      	str	r3, [r7, #32]
      break;
 800b9fc:	e01c      	b.n	800ba38 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	895b      	ldrh	r3, [r3, #10]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d001      	beq.n	800ba0a <event_callback+0xd6>
        check_waiters = 0;
 800ba06:	2300      	movs	r3, #0
 800ba08:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800ba0a:	69bb      	ldr	r3, [r7, #24]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	815a      	strh	r2, [r3, #10]
      break;
 800ba10:	e012      	b.n	800ba38 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	2200      	movs	r2, #0
 800ba16:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	623b      	str	r3, [r7, #32]
      break;
 800ba1c:	e00c      	b.n	800ba38 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	2201      	movs	r2, #1
 800ba22:	819a      	strh	r2, [r3, #12]
      break;
 800ba24:	e008      	b.n	800ba38 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800ba26:	4b1e      	ldr	r3, [pc, #120]	; (800baa0 <event_callback+0x16c>)
 800ba28:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800ba2c:	491d      	ldr	r1, [pc, #116]	; (800baa4 <event_callback+0x170>)
 800ba2e:	481e      	ldr	r0, [pc, #120]	; (800baa8 <event_callback+0x174>)
 800ba30:	f00d fe22 	bl	8019678 <iprintf>
      break;
 800ba34:	e000      	b.n	800ba38 <event_callback+0x104>
      break;
 800ba36:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	7b9b      	ldrb	r3, [r3, #14]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d025      	beq.n	800ba8c <event_callback+0x158>
 800ba40:	6a3b      	ldr	r3, [r7, #32]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d022      	beq.n	800ba8c <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	bfcc      	ite	gt
 800ba50:	2301      	movgt	r3, #1
 800ba52:	2300      	movle	r3, #0
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	895b      	ldrh	r3, [r3, #10]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	bf14      	ite	ne
 800ba60:	2301      	movne	r3, #1
 800ba62:	2300      	moveq	r3, #0
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	899b      	ldrh	r3, [r3, #12]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	bf14      	ite	ne
 800ba70:	2301      	movne	r3, #1
 800ba72:	2300      	moveq	r3, #0
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800ba78:	69f8      	ldr	r0, [r7, #28]
 800ba7a:	f00d fbc1 	bl	8019200 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	693a      	ldr	r2, [r7, #16]
 800ba82:	6979      	ldr	r1, [r7, #20]
 800ba84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba86:	f000 f811 	bl	800baac <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800ba8a:	e006      	b.n	800ba9a <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800ba8c:	69f8      	ldr	r0, [r7, #28]
 800ba8e:	f00d fbb7 	bl	8019200 <sys_arch_unprotect>
 800ba92:	e002      	b.n	800ba9a <event_callback+0x166>
    return;
 800ba94:	bf00      	nop
 800ba96:	e000      	b.n	800ba9a <event_callback+0x166>
      return;
 800ba98:	bf00      	nop
  }
  done_socket(sock);
}
 800ba9a:	3728      	adds	r7, #40	; 0x28
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	0801af5c 	.word	0x0801af5c
 800baa4:	0801b2d8 	.word	0x0801b2d8
 800baa8:	0801afb0 	.word	0x0801afb0

0800baac <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b088      	sub	sp, #32
 800bab0:	af02      	add	r7, sp, #8
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
 800bab8:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800baba:	4b4b      	ldr	r3, [pc, #300]	; (800bbe8 <select_check_waiters+0x13c>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	617b      	str	r3, [r7, #20]
 800bac0:	e088      	b.n	800bbd4 <select_check_waiters+0x128>
    if (scb->sem_signalled == 0) {
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	69db      	ldr	r3, [r3, #28]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f040 8081 	bne.w	800bbce <select_check_waiters+0x122>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800bacc:	2300      	movs	r3, #0
 800bace:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	695b      	ldr	r3, [r3, #20]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d009      	beq.n	800baec <select_check_waiters+0x40>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	9300      	str	r3, [sp, #0]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	68f9      	ldr	r1, [r7, #12]
 800bae2:	6978      	ldr	r0, [r7, #20]
 800bae4:	f7ff fee2 	bl	800b8ac <lwip_poll_should_wake>
 800bae8:	6138      	str	r0, [r7, #16]
 800baea:	e065      	b.n	800bbb8 <select_check_waiters+0x10c>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d01c      	beq.n	800bb2c <select_check_waiters+0x80>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d018      	beq.n	800bb2c <select_check_waiters+0x80>
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	689a      	ldr	r2, [r3, #8]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	da00      	bge.n	800bb06 <select_check_waiters+0x5a>
 800bb04:	331f      	adds	r3, #31
 800bb06:	115b      	asrs	r3, r3, #5
 800bb08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	4259      	negs	r1, r3
 800bb10:	f003 031f 	and.w	r3, r3, #31
 800bb14:	f001 011f 	and.w	r1, r1, #31
 800bb18:	bf58      	it	pl
 800bb1a:	424b      	negpl	r3, r1
 800bb1c:	fa22 f303 	lsr.w	r3, r2, r3
 800bb20:	f003 0301 	and.w	r3, r3, #1
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d001      	beq.n	800bb2c <select_check_waiters+0x80>
            do_signal = 1;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d01f      	beq.n	800bb72 <select_check_waiters+0xc6>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d11c      	bne.n	800bb72 <select_check_waiters+0xc6>
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d018      	beq.n	800bb72 <select_check_waiters+0xc6>
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	68da      	ldr	r2, [r3, #12]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	da00      	bge.n	800bb4c <select_check_waiters+0xa0>
 800bb4a:	331f      	adds	r3, #31
 800bb4c:	115b      	asrs	r3, r3, #5
 800bb4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	4259      	negs	r1, r3
 800bb56:	f003 031f 	and.w	r3, r3, #31
 800bb5a:	f001 011f 	and.w	r1, r1, #31
 800bb5e:	bf58      	it	pl
 800bb60:	424b      	negpl	r3, r1
 800bb62:	fa22 f303 	lsr.w	r3, r2, r3
 800bb66:	f003 0301 	and.w	r3, r3, #1
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d001      	beq.n	800bb72 <select_check_waiters+0xc6>
            do_signal = 1;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d01f      	beq.n	800bbb8 <select_check_waiters+0x10c>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d11c      	bne.n	800bbb8 <select_check_waiters+0x10c>
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d018      	beq.n	800bbb8 <select_check_waiters+0x10c>
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	691a      	ldr	r2, [r3, #16]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	da00      	bge.n	800bb92 <select_check_waiters+0xe6>
 800bb90:	331f      	adds	r3, #31
 800bb92:	115b      	asrs	r3, r3, #5
 800bb94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	4259      	negs	r1, r3
 800bb9c:	f003 031f 	and.w	r3, r3, #31
 800bba0:	f001 011f 	and.w	r1, r1, #31
 800bba4:	bf58      	it	pl
 800bba6:	424b      	negpl	r3, r1
 800bba8:	fa22 f303 	lsr.w	r3, r2, r3
 800bbac:	f003 0301 	and.w	r3, r3, #1
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d001      	beq.n	800bbb8 <select_check_waiters+0x10c>
            do_signal = 1;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d007      	beq.n	800bbce <select_check_waiters+0x122>
        scb->sem_signalled = 1;
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	3320      	adds	r3, #32
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f00d fa75 	bl	80190b8 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	617b      	str	r3, [r7, #20]
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	f47f af73 	bne.w	800bac2 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800bbdc:	bf00      	nop
 800bbde:	bf00      	nop
 800bbe0:	3718      	adds	r7, #24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	200097e0 	.word	0x200097e0

0800bbec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800bbf6:	f008 fa53 	bl	80140a0 <sys_timeouts_sleeptime>
 800bbfa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc02:	d10b      	bne.n	800bc1c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800bc04:	4813      	ldr	r0, [pc, #76]	; (800bc54 <tcpip_timeouts_mbox_fetch+0x68>)
 800bc06:	f00d fac0 	bl	801918a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	6839      	ldr	r1, [r7, #0]
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f00d f996 	bl	8018f40 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800bc14:	480f      	ldr	r0, [pc, #60]	; (800bc54 <tcpip_timeouts_mbox_fetch+0x68>)
 800bc16:	f00d faa9 	bl	801916c <sys_mutex_lock>
    return;
 800bc1a:	e018      	b.n	800bc4e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d102      	bne.n	800bc28 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800bc22:	f008 fa03 	bl	801402c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bc26:	e7e6      	b.n	800bbf6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800bc28:	480a      	ldr	r0, [pc, #40]	; (800bc54 <tcpip_timeouts_mbox_fetch+0x68>)
 800bc2a:	f00d faae 	bl	801918a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800bc2e:	68fa      	ldr	r2, [r7, #12]
 800bc30:	6839      	ldr	r1, [r7, #0]
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f00d f984 	bl	8018f40 <sys_arch_mbox_fetch>
 800bc38:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800bc3a:	4806      	ldr	r0, [pc, #24]	; (800bc54 <tcpip_timeouts_mbox_fetch+0x68>)
 800bc3c:	f00d fa96 	bl	801916c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc46:	d102      	bne.n	800bc4e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800bc48:	f008 f9f0 	bl	801402c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bc4c:	e7d3      	b.n	800bbf6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	200097f0 	.word	0x200097f0

0800bc58 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800bc60:	4810      	ldr	r0, [pc, #64]	; (800bca4 <tcpip_thread+0x4c>)
 800bc62:	f00d fa83 	bl	801916c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800bc66:	4b10      	ldr	r3, [pc, #64]	; (800bca8 <tcpip_thread+0x50>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d005      	beq.n	800bc7a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800bc6e:	4b0e      	ldr	r3, [pc, #56]	; (800bca8 <tcpip_thread+0x50>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a0e      	ldr	r2, [pc, #56]	; (800bcac <tcpip_thread+0x54>)
 800bc74:	6812      	ldr	r2, [r2, #0]
 800bc76:	4610      	mov	r0, r2
 800bc78:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bc7a:	f107 030c 	add.w	r3, r7, #12
 800bc7e:	4619      	mov	r1, r3
 800bc80:	480b      	ldr	r0, [pc, #44]	; (800bcb0 <tcpip_thread+0x58>)
 800bc82:	f7ff ffb3 	bl	800bbec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d106      	bne.n	800bc9a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bc8c:	4b09      	ldr	r3, [pc, #36]	; (800bcb4 <tcpip_thread+0x5c>)
 800bc8e:	2291      	movs	r2, #145	; 0x91
 800bc90:	4909      	ldr	r1, [pc, #36]	; (800bcb8 <tcpip_thread+0x60>)
 800bc92:	480a      	ldr	r0, [pc, #40]	; (800bcbc <tcpip_thread+0x64>)
 800bc94:	f00d fcf0 	bl	8019678 <iprintf>
      continue;
 800bc98:	e003      	b.n	800bca2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f000 f80f 	bl	800bcc0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bca2:	e7ea      	b.n	800bc7a <tcpip_thread+0x22>
 800bca4:	200097f0 	.word	0x200097f0
 800bca8:	200097e4 	.word	0x200097e4
 800bcac:	200097e8 	.word	0x200097e8
 800bcb0:	200097ec 	.word	0x200097ec
 800bcb4:	0801b32c 	.word	0x0801b32c
 800bcb8:	0801b35c 	.word	0x0801b35c
 800bcbc:	0801b37c 	.word	0x0801b37c

0800bcc0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	d026      	beq.n	800bd1e <tcpip_thread_handle_msg+0x5e>
 800bcd0:	2b02      	cmp	r3, #2
 800bcd2:	dc2b      	bgt.n	800bd2c <tcpip_thread_handle_msg+0x6c>
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d002      	beq.n	800bcde <tcpip_thread_handle_msg+0x1e>
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d015      	beq.n	800bd08 <tcpip_thread_handle_msg+0x48>
 800bcdc:	e026      	b.n	800bd2c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	6850      	ldr	r0, [r2, #4]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	6892      	ldr	r2, [r2, #8]
 800bcea:	4611      	mov	r1, r2
 800bcec:	4798      	blx	r3
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d004      	beq.n	800bcfe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f001 fd5f 	bl	800d7bc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bcfe:	6879      	ldr	r1, [r7, #4]
 800bd00:	2009      	movs	r0, #9
 800bd02:	f000 fe79 	bl	800c9f8 <memp_free>
      break;
 800bd06:	e018      	b.n	800bd3a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	6892      	ldr	r2, [r2, #8]
 800bd10:	4610      	mov	r0, r2
 800bd12:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800bd14:	6879      	ldr	r1, [r7, #4]
 800bd16:	2008      	movs	r0, #8
 800bd18:	f000 fe6e 	bl	800c9f8 <memp_free>
      break;
 800bd1c:	e00d      	b.n	800bd3a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	6892      	ldr	r2, [r2, #8]
 800bd26:	4610      	mov	r0, r2
 800bd28:	4798      	blx	r3
      break;
 800bd2a:	e006      	b.n	800bd3a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bd2c:	4b05      	ldr	r3, [pc, #20]	; (800bd44 <tcpip_thread_handle_msg+0x84>)
 800bd2e:	22cf      	movs	r2, #207	; 0xcf
 800bd30:	4905      	ldr	r1, [pc, #20]	; (800bd48 <tcpip_thread_handle_msg+0x88>)
 800bd32:	4806      	ldr	r0, [pc, #24]	; (800bd4c <tcpip_thread_handle_msg+0x8c>)
 800bd34:	f00d fca0 	bl	8019678 <iprintf>
      break;
 800bd38:	bf00      	nop
  }
}
 800bd3a:	bf00      	nop
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	0801b32c 	.word	0x0801b32c
 800bd48:	0801b35c 	.word	0x0801b35c
 800bd4c:	0801b37c 	.word	0x0801b37c

0800bd50 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bd5c:	481a      	ldr	r0, [pc, #104]	; (800bdc8 <tcpip_inpkt+0x78>)
 800bd5e:	f00d f937 	bl	8018fd0 <sys_mbox_valid>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d105      	bne.n	800bd74 <tcpip_inpkt+0x24>
 800bd68:	4b18      	ldr	r3, [pc, #96]	; (800bdcc <tcpip_inpkt+0x7c>)
 800bd6a:	22fc      	movs	r2, #252	; 0xfc
 800bd6c:	4918      	ldr	r1, [pc, #96]	; (800bdd0 <tcpip_inpkt+0x80>)
 800bd6e:	4819      	ldr	r0, [pc, #100]	; (800bdd4 <tcpip_inpkt+0x84>)
 800bd70:	f00d fc82 	bl	8019678 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800bd74:	2009      	movs	r0, #9
 800bd76:	f000 fdc9 	bl	800c90c <memp_malloc>
 800bd7a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d102      	bne.n	800bd88 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800bd82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd86:	e01a      	b.n	800bdbe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bda0:	6979      	ldr	r1, [r7, #20]
 800bda2:	4809      	ldr	r0, [pc, #36]	; (800bdc8 <tcpip_inpkt+0x78>)
 800bda4:	f00d f8b2 	bl	8018f0c <sys_mbox_trypost>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d006      	beq.n	800bdbc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bdae:	6979      	ldr	r1, [r7, #20]
 800bdb0:	2009      	movs	r0, #9
 800bdb2:	f000 fe21 	bl	800c9f8 <memp_free>
    return ERR_MEM;
 800bdb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdba:	e000      	b.n	800bdbe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800bdbc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3718      	adds	r7, #24
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	200097ec 	.word	0x200097ec
 800bdcc:	0801b32c 	.word	0x0801b32c
 800bdd0:	0801b3a4 	.word	0x0801b3a4
 800bdd4:	0801b37c 	.word	0x0801b37c

0800bdd8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bde8:	f003 0318 	and.w	r3, r3, #24
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d006      	beq.n	800bdfe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800bdf0:	4a08      	ldr	r2, [pc, #32]	; (800be14 <tcpip_input+0x3c>)
 800bdf2:	6839      	ldr	r1, [r7, #0]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f7ff ffab 	bl	800bd50 <tcpip_inpkt>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	e005      	b.n	800be0a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800bdfe:	4a06      	ldr	r2, [pc, #24]	; (800be18 <tcpip_input+0x40>)
 800be00:	6839      	ldr	r1, [r7, #0]
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f7ff ffa4 	bl	800bd50 <tcpip_inpkt>
 800be08:	4603      	mov	r3, r0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	08018d09 	.word	0x08018d09
 800be18:	08017ab5 	.word	0x08017ab5

0800be1c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800be26:	4819      	ldr	r0, [pc, #100]	; (800be8c <tcpip_try_callback+0x70>)
 800be28:	f00d f8d2 	bl	8018fd0 <sys_mbox_valid>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d106      	bne.n	800be40 <tcpip_try_callback+0x24>
 800be32:	4b17      	ldr	r3, [pc, #92]	; (800be90 <tcpip_try_callback+0x74>)
 800be34:	f240 125d 	movw	r2, #349	; 0x15d
 800be38:	4916      	ldr	r1, [pc, #88]	; (800be94 <tcpip_try_callback+0x78>)
 800be3a:	4817      	ldr	r0, [pc, #92]	; (800be98 <tcpip_try_callback+0x7c>)
 800be3c:	f00d fc1c 	bl	8019678 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800be40:	2008      	movs	r0, #8
 800be42:	f000 fd63 	bl	800c90c <memp_malloc>
 800be46:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d102      	bne.n	800be54 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800be4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be52:	e017      	b.n	800be84 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2201      	movs	r2, #1
 800be58:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800be66:	68f9      	ldr	r1, [r7, #12]
 800be68:	4808      	ldr	r0, [pc, #32]	; (800be8c <tcpip_try_callback+0x70>)
 800be6a:	f00d f84f 	bl	8018f0c <sys_mbox_trypost>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d006      	beq.n	800be82 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800be74:	68f9      	ldr	r1, [r7, #12]
 800be76:	2008      	movs	r0, #8
 800be78:	f000 fdbe 	bl	800c9f8 <memp_free>
    return ERR_MEM;
 800be7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be80:	e000      	b.n	800be84 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3710      	adds	r7, #16
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	200097ec 	.word	0x200097ec
 800be90:	0801b32c 	.word	0x0801b32c
 800be94:	0801b3a4 	.word	0x0801b3a4
 800be98:	0801b37c 	.word	0x0801b37c

0800be9c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800bea8:	4806      	ldr	r0, [pc, #24]	; (800bec4 <tcpip_send_msg_wait_sem+0x28>)
 800beaa:	f00d f95f 	bl	801916c <sys_mutex_lock>
  fn(apimsg);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	68b8      	ldr	r0, [r7, #8]
 800beb2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800beb4:	4803      	ldr	r0, [pc, #12]	; (800bec4 <tcpip_send_msg_wait_sem+0x28>)
 800beb6:	f00d f968 	bl	801918a <sys_mutex_unlock>
  return ERR_OK;
 800beba:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	200097f0 	.word	0x200097f0

0800bec8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af02      	add	r7, sp, #8
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800bed2:	f000 f871 	bl	800bfb8 <lwip_init>

  tcpip_init_done = initfunc;
 800bed6:	4a17      	ldr	r2, [pc, #92]	; (800bf34 <tcpip_init+0x6c>)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800bedc:	4a16      	ldr	r2, [pc, #88]	; (800bf38 <tcpip_init+0x70>)
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800bee2:	2106      	movs	r1, #6
 800bee4:	4815      	ldr	r0, [pc, #84]	; (800bf3c <tcpip_init+0x74>)
 800bee6:	f00c ffe5 	bl	8018eb4 <sys_mbox_new>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d006      	beq.n	800befe <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800bef0:	4b13      	ldr	r3, [pc, #76]	; (800bf40 <tcpip_init+0x78>)
 800bef2:	f240 2261 	movw	r2, #609	; 0x261
 800bef6:	4913      	ldr	r1, [pc, #76]	; (800bf44 <tcpip_init+0x7c>)
 800bef8:	4813      	ldr	r0, [pc, #76]	; (800bf48 <tcpip_init+0x80>)
 800befa:	f00d fbbd 	bl	8019678 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800befe:	4813      	ldr	r0, [pc, #76]	; (800bf4c <tcpip_init+0x84>)
 800bf00:	f00d f91e 	bl	8019140 <sys_mutex_new>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d006      	beq.n	800bf18 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800bf0a:	4b0d      	ldr	r3, [pc, #52]	; (800bf40 <tcpip_init+0x78>)
 800bf0c:	f240 2265 	movw	r2, #613	; 0x265
 800bf10:	490f      	ldr	r1, [pc, #60]	; (800bf50 <tcpip_init+0x88>)
 800bf12:	480d      	ldr	r0, [pc, #52]	; (800bf48 <tcpip_init+0x80>)
 800bf14:	f00d fbb0 	bl	8019678 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800bf18:	2318      	movs	r3, #24
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf20:	2200      	movs	r2, #0
 800bf22:	490c      	ldr	r1, [pc, #48]	; (800bf54 <tcpip_init+0x8c>)
 800bf24:	480c      	ldr	r0, [pc, #48]	; (800bf58 <tcpip_init+0x90>)
 800bf26:	f00d f93d 	bl	80191a4 <sys_thread_new>
}
 800bf2a:	bf00      	nop
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	200097e4 	.word	0x200097e4
 800bf38:	200097e8 	.word	0x200097e8
 800bf3c:	200097ec 	.word	0x200097ec
 800bf40:	0801b32c 	.word	0x0801b32c
 800bf44:	0801b3b4 	.word	0x0801b3b4
 800bf48:	0801b37c 	.word	0x0801b37c
 800bf4c:	200097f0 	.word	0x200097f0
 800bf50:	0801b3d8 	.word	0x0801b3d8
 800bf54:	0800bc59 	.word	0x0800bc59
 800bf58:	0801b3fc 	.word	0x0801b3fc

0800bf5c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	4603      	mov	r3, r0
 800bf64:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bf66:	88fb      	ldrh	r3, [r7, #6]
 800bf68:	021b      	lsls	r3, r3, #8
 800bf6a:	b21a      	sxth	r2, r3
 800bf6c:	88fb      	ldrh	r3, [r7, #6]
 800bf6e:	0a1b      	lsrs	r3, r3, #8
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	b21b      	sxth	r3, r3
 800bf74:	4313      	orrs	r3, r2
 800bf76:	b21b      	sxth	r3, r3
 800bf78:	b29b      	uxth	r3, r3
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	370c      	adds	r7, #12
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr

0800bf86 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bf86:	b480      	push	{r7}
 800bf88:	b083      	sub	sp, #12
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	061a      	lsls	r2, r3, #24
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	021b      	lsls	r3, r3, #8
 800bf96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bf9a:	431a      	orrs	r2, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	0a1b      	lsrs	r3, r3, #8
 800bfa0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bfa4:	431a      	orrs	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	0e1b      	lsrs	r3, r3, #24
 800bfaa:	4313      	orrs	r3, r2
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bfc2:	f00d f8b1 	bl	8019128 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bfc6:	f000 f8d5 	bl	800c174 <mem_init>
  memp_init();
 800bfca:	f000 fc31 	bl	800c830 <memp_init>
  pbuf_init();
  netif_init();
 800bfce:	f000 fd3d 	bl	800ca4c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bfd2:	f008 f89d 	bl	8014110 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bfd6:	f001 fe9b 	bl	800dd10 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bfda:	f007 ffdf 	bl	8013f9c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bfde:	bf00      	nop
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
	...

0800bfe8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	4603      	mov	r3, r0
 800bff0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bff2:	4b05      	ldr	r3, [pc, #20]	; (800c008 <ptr_to_mem+0x20>)
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	88fb      	ldrh	r3, [r7, #6]
 800bff8:	4413      	add	r3, r2
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	370c      	adds	r7, #12
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	20009e60 	.word	0x20009e60

0800c00c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c014:	4b05      	ldr	r3, [pc, #20]	; (800c02c <mem_to_ptr+0x20>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	b29b      	uxth	r3, r3
}
 800c01e:	4618      	mov	r0, r3
 800c020:	370c      	adds	r7, #12
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr
 800c02a:	bf00      	nop
 800c02c:	20009e60 	.word	0x20009e60

0800c030 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c030:	b590      	push	{r4, r7, lr}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c038:	4b45      	ldr	r3, [pc, #276]	; (800c150 <plug_holes+0x120>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d206      	bcs.n	800c050 <plug_holes+0x20>
 800c042:	4b44      	ldr	r3, [pc, #272]	; (800c154 <plug_holes+0x124>)
 800c044:	f240 12df 	movw	r2, #479	; 0x1df
 800c048:	4943      	ldr	r1, [pc, #268]	; (800c158 <plug_holes+0x128>)
 800c04a:	4844      	ldr	r0, [pc, #272]	; (800c15c <plug_holes+0x12c>)
 800c04c:	f00d fb14 	bl	8019678 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c050:	4b43      	ldr	r3, [pc, #268]	; (800c160 <plug_holes+0x130>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	429a      	cmp	r2, r3
 800c058:	d306      	bcc.n	800c068 <plug_holes+0x38>
 800c05a:	4b3e      	ldr	r3, [pc, #248]	; (800c154 <plug_holes+0x124>)
 800c05c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c060:	4940      	ldr	r1, [pc, #256]	; (800c164 <plug_holes+0x134>)
 800c062:	483e      	ldr	r0, [pc, #248]	; (800c15c <plug_holes+0x12c>)
 800c064:	f00d fb08 	bl	8019678 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	791b      	ldrb	r3, [r3, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d006      	beq.n	800c07e <plug_holes+0x4e>
 800c070:	4b38      	ldr	r3, [pc, #224]	; (800c154 <plug_holes+0x124>)
 800c072:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c076:	493c      	ldr	r1, [pc, #240]	; (800c168 <plug_holes+0x138>)
 800c078:	4838      	ldr	r0, [pc, #224]	; (800c15c <plug_holes+0x12c>)
 800c07a:	f00d fafd 	bl	8019678 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	881b      	ldrh	r3, [r3, #0]
 800c082:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c086:	d906      	bls.n	800c096 <plug_holes+0x66>
 800c088:	4b32      	ldr	r3, [pc, #200]	; (800c154 <plug_holes+0x124>)
 800c08a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c08e:	4937      	ldr	r1, [pc, #220]	; (800c16c <plug_holes+0x13c>)
 800c090:	4832      	ldr	r0, [pc, #200]	; (800c15c <plug_holes+0x12c>)
 800c092:	f00d faf1 	bl	8019678 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	881b      	ldrh	r3, [r3, #0]
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7ff ffa4 	bl	800bfe8 <ptr_to_mem>
 800c0a0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d024      	beq.n	800c0f4 <plug_holes+0xc4>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	791b      	ldrb	r3, [r3, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d120      	bne.n	800c0f4 <plug_holes+0xc4>
 800c0b2:	4b2b      	ldr	r3, [pc, #172]	; (800c160 <plug_holes+0x130>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	68fa      	ldr	r2, [r7, #12]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d01b      	beq.n	800c0f4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c0bc:	4b2c      	ldr	r3, [pc, #176]	; (800c170 <plug_holes+0x140>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d102      	bne.n	800c0cc <plug_holes+0x9c>
      lfree = mem;
 800c0c6:	4a2a      	ldr	r2, [pc, #168]	; (800c170 <plug_holes+0x140>)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	881a      	ldrh	r2, [r3, #0]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	881b      	ldrh	r3, [r3, #0]
 800c0d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c0dc:	d00a      	beq.n	800c0f4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	881b      	ldrh	r3, [r3, #0]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7ff ff80 	bl	800bfe8 <ptr_to_mem>
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f7ff ff8e 	bl	800c00c <mem_to_ptr>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	885b      	ldrh	r3, [r3, #2]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7ff ff75 	bl	800bfe8 <ptr_to_mem>
 800c0fe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c100:	68ba      	ldr	r2, [r7, #8]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	429a      	cmp	r2, r3
 800c106:	d01f      	beq.n	800c148 <plug_holes+0x118>
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	791b      	ldrb	r3, [r3, #4]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d11b      	bne.n	800c148 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c110:	4b17      	ldr	r3, [pc, #92]	; (800c170 <plug_holes+0x140>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	429a      	cmp	r2, r3
 800c118:	d102      	bne.n	800c120 <plug_holes+0xf0>
      lfree = pmem;
 800c11a:	4a15      	ldr	r2, [pc, #84]	; (800c170 <plug_holes+0x140>)
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	881a      	ldrh	r2, [r3, #0]
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	881b      	ldrh	r3, [r3, #0]
 800c12c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c130:	d00a      	beq.n	800c148 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	881b      	ldrh	r3, [r3, #0]
 800c136:	4618      	mov	r0, r3
 800c138:	f7ff ff56 	bl	800bfe8 <ptr_to_mem>
 800c13c:	4604      	mov	r4, r0
 800c13e:	68b8      	ldr	r0, [r7, #8]
 800c140:	f7ff ff64 	bl	800c00c <mem_to_ptr>
 800c144:	4603      	mov	r3, r0
 800c146:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c148:	bf00      	nop
 800c14a:	3714      	adds	r7, #20
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd90      	pop	{r4, r7, pc}
 800c150:	20009e60 	.word	0x20009e60
 800c154:	0801b40c 	.word	0x0801b40c
 800c158:	0801b43c 	.word	0x0801b43c
 800c15c:	0801b454 	.word	0x0801b454
 800c160:	20009e64 	.word	0x20009e64
 800c164:	0801b47c 	.word	0x0801b47c
 800c168:	0801b498 	.word	0x0801b498
 800c16c:	0801b4b4 	.word	0x0801b4b4
 800c170:	20009e6c 	.word	0x20009e6c

0800c174 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c17a:	4b1f      	ldr	r3, [pc, #124]	; (800c1f8 <mem_init+0x84>)
 800c17c:	3303      	adds	r3, #3
 800c17e:	f023 0303 	bic.w	r3, r3, #3
 800c182:	461a      	mov	r2, r3
 800c184:	4b1d      	ldr	r3, [pc, #116]	; (800c1fc <mem_init+0x88>)
 800c186:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c188:	4b1c      	ldr	r3, [pc, #112]	; (800c1fc <mem_init+0x88>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c194:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c1a2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c1a6:	f7ff ff1f 	bl	800bfe8 <ptr_to_mem>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	4a14      	ldr	r2, [pc, #80]	; (800c200 <mem_init+0x8c>)
 800c1ae:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c1b0:	4b13      	ldr	r3, [pc, #76]	; (800c200 <mem_init+0x8c>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c1b8:	4b11      	ldr	r3, [pc, #68]	; (800c200 <mem_init+0x8c>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c1c0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c1c2:	4b0f      	ldr	r3, [pc, #60]	; (800c200 <mem_init+0x8c>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c1ca:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c1cc:	4b0b      	ldr	r3, [pc, #44]	; (800c1fc <mem_init+0x88>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a0c      	ldr	r2, [pc, #48]	; (800c204 <mem_init+0x90>)
 800c1d2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c1d4:	480c      	ldr	r0, [pc, #48]	; (800c208 <mem_init+0x94>)
 800c1d6:	f00c ffb3 	bl	8019140 <sys_mutex_new>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d006      	beq.n	800c1ee <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c1e0:	4b0a      	ldr	r3, [pc, #40]	; (800c20c <mem_init+0x98>)
 800c1e2:	f240 221f 	movw	r2, #543	; 0x21f
 800c1e6:	490a      	ldr	r1, [pc, #40]	; (800c210 <mem_init+0x9c>)
 800c1e8:	480a      	ldr	r0, [pc, #40]	; (800c214 <mem_init+0xa0>)
 800c1ea:	f00d fa45 	bl	8019678 <iprintf>
  }
}
 800c1ee:	bf00      	nop
 800c1f0:	3708      	adds	r7, #8
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	2000980c 	.word	0x2000980c
 800c1fc:	20009e60 	.word	0x20009e60
 800c200:	20009e64 	.word	0x20009e64
 800c204:	20009e6c 	.word	0x20009e6c
 800c208:	20009e68 	.word	0x20009e68
 800c20c:	0801b40c 	.word	0x0801b40c
 800c210:	0801b4e0 	.word	0x0801b4e0
 800c214:	0801b454 	.word	0x0801b454

0800c218 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b086      	sub	sp, #24
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f7ff fef3 	bl	800c00c <mem_to_ptr>
 800c226:	4603      	mov	r3, r0
 800c228:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	881b      	ldrh	r3, [r3, #0]
 800c22e:	4618      	mov	r0, r3
 800c230:	f7ff feda 	bl	800bfe8 <ptr_to_mem>
 800c234:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	885b      	ldrh	r3, [r3, #2]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7ff fed4 	bl	800bfe8 <ptr_to_mem>
 800c240:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	881b      	ldrh	r3, [r3, #0]
 800c246:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c24a:	d818      	bhi.n	800c27e <mem_link_valid+0x66>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	885b      	ldrh	r3, [r3, #2]
 800c250:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c254:	d813      	bhi.n	800c27e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c25a:	8afa      	ldrh	r2, [r7, #22]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d004      	beq.n	800c26a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	881b      	ldrh	r3, [r3, #0]
 800c264:	8afa      	ldrh	r2, [r7, #22]
 800c266:	429a      	cmp	r2, r3
 800c268:	d109      	bne.n	800c27e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c26a:	4b08      	ldr	r3, [pc, #32]	; (800c28c <mem_link_valid+0x74>)
 800c26c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c26e:	693a      	ldr	r2, [r7, #16]
 800c270:	429a      	cmp	r2, r3
 800c272:	d006      	beq.n	800c282 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	885b      	ldrh	r3, [r3, #2]
 800c278:	8afa      	ldrh	r2, [r7, #22]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d001      	beq.n	800c282 <mem_link_valid+0x6a>
    return 0;
 800c27e:	2300      	movs	r3, #0
 800c280:	e000      	b.n	800c284 <mem_link_valid+0x6c>
  }
  return 1;
 800c282:	2301      	movs	r3, #1
}
 800c284:	4618      	mov	r0, r3
 800c286:	3718      	adds	r7, #24
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	20009e64 	.word	0x20009e64

0800c290 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b088      	sub	sp, #32
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d070      	beq.n	800c380 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f003 0303 	and.w	r3, r3, #3
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00d      	beq.n	800c2c4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c2a8:	4b37      	ldr	r3, [pc, #220]	; (800c388 <mem_free+0xf8>)
 800c2aa:	f240 2273 	movw	r2, #627	; 0x273
 800c2ae:	4937      	ldr	r1, [pc, #220]	; (800c38c <mem_free+0xfc>)
 800c2b0:	4837      	ldr	r0, [pc, #220]	; (800c390 <mem_free+0x100>)
 800c2b2:	f00d f9e1 	bl	8019678 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c2b6:	f00c ff95 	bl	80191e4 <sys_arch_protect>
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	f00c ff9f 	bl	8019200 <sys_arch_unprotect>
    return;
 800c2c2:	e05e      	b.n	800c382 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	3b08      	subs	r3, #8
 800c2c8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c2ca:	4b32      	ldr	r3, [pc, #200]	; (800c394 <mem_free+0x104>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	69fa      	ldr	r2, [r7, #28]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d306      	bcc.n	800c2e2 <mem_free+0x52>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f103 020c 	add.w	r2, r3, #12
 800c2da:	4b2f      	ldr	r3, [pc, #188]	; (800c398 <mem_free+0x108>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d90d      	bls.n	800c2fe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c2e2:	4b29      	ldr	r3, [pc, #164]	; (800c388 <mem_free+0xf8>)
 800c2e4:	f240 227f 	movw	r2, #639	; 0x27f
 800c2e8:	492c      	ldr	r1, [pc, #176]	; (800c39c <mem_free+0x10c>)
 800c2ea:	4829      	ldr	r0, [pc, #164]	; (800c390 <mem_free+0x100>)
 800c2ec:	f00d f9c4 	bl	8019678 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c2f0:	f00c ff78 	bl	80191e4 <sys_arch_protect>
 800c2f4:	6138      	str	r0, [r7, #16]
 800c2f6:	6938      	ldr	r0, [r7, #16]
 800c2f8:	f00c ff82 	bl	8019200 <sys_arch_unprotect>
    return;
 800c2fc:	e041      	b.n	800c382 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c2fe:	4828      	ldr	r0, [pc, #160]	; (800c3a0 <mem_free+0x110>)
 800c300:	f00c ff34 	bl	801916c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	791b      	ldrb	r3, [r3, #4]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d110      	bne.n	800c32e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c30c:	4b1e      	ldr	r3, [pc, #120]	; (800c388 <mem_free+0xf8>)
 800c30e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c312:	4924      	ldr	r1, [pc, #144]	; (800c3a4 <mem_free+0x114>)
 800c314:	481e      	ldr	r0, [pc, #120]	; (800c390 <mem_free+0x100>)
 800c316:	f00d f9af 	bl	8019678 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c31a:	4821      	ldr	r0, [pc, #132]	; (800c3a0 <mem_free+0x110>)
 800c31c:	f00c ff35 	bl	801918a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c320:	f00c ff60 	bl	80191e4 <sys_arch_protect>
 800c324:	6178      	str	r0, [r7, #20]
 800c326:	6978      	ldr	r0, [r7, #20]
 800c328:	f00c ff6a 	bl	8019200 <sys_arch_unprotect>
    return;
 800c32c:	e029      	b.n	800c382 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c32e:	69f8      	ldr	r0, [r7, #28]
 800c330:	f7ff ff72 	bl	800c218 <mem_link_valid>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d110      	bne.n	800c35c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c33a:	4b13      	ldr	r3, [pc, #76]	; (800c388 <mem_free+0xf8>)
 800c33c:	f240 2295 	movw	r2, #661	; 0x295
 800c340:	4919      	ldr	r1, [pc, #100]	; (800c3a8 <mem_free+0x118>)
 800c342:	4813      	ldr	r0, [pc, #76]	; (800c390 <mem_free+0x100>)
 800c344:	f00d f998 	bl	8019678 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c348:	4815      	ldr	r0, [pc, #84]	; (800c3a0 <mem_free+0x110>)
 800c34a:	f00c ff1e 	bl	801918a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c34e:	f00c ff49 	bl	80191e4 <sys_arch_protect>
 800c352:	61b8      	str	r0, [r7, #24]
 800c354:	69b8      	ldr	r0, [r7, #24]
 800c356:	f00c ff53 	bl	8019200 <sys_arch_unprotect>
    return;
 800c35a:	e012      	b.n	800c382 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	2200      	movs	r2, #0
 800c360:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c362:	4b12      	ldr	r3, [pc, #72]	; (800c3ac <mem_free+0x11c>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	69fa      	ldr	r2, [r7, #28]
 800c368:	429a      	cmp	r2, r3
 800c36a:	d202      	bcs.n	800c372 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c36c:	4a0f      	ldr	r2, [pc, #60]	; (800c3ac <mem_free+0x11c>)
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c372:	69f8      	ldr	r0, [r7, #28]
 800c374:	f7ff fe5c 	bl	800c030 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c378:	4809      	ldr	r0, [pc, #36]	; (800c3a0 <mem_free+0x110>)
 800c37a:	f00c ff06 	bl	801918a <sys_mutex_unlock>
 800c37e:	e000      	b.n	800c382 <mem_free+0xf2>
    return;
 800c380:	bf00      	nop
}
 800c382:	3720      	adds	r7, #32
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	0801b40c 	.word	0x0801b40c
 800c38c:	0801b4fc 	.word	0x0801b4fc
 800c390:	0801b454 	.word	0x0801b454
 800c394:	20009e60 	.word	0x20009e60
 800c398:	20009e64 	.word	0x20009e64
 800c39c:	0801b520 	.word	0x0801b520
 800c3a0:	20009e68 	.word	0x20009e68
 800c3a4:	0801b53c 	.word	0x0801b53c
 800c3a8:	0801b564 	.word	0x0801b564
 800c3ac:	20009e6c 	.word	0x20009e6c

0800c3b0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b088      	sub	sp, #32
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c3bc:	887b      	ldrh	r3, [r7, #2]
 800c3be:	3303      	adds	r3, #3
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	f023 0303 	bic.w	r3, r3, #3
 800c3c6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c3c8:	8bfb      	ldrh	r3, [r7, #30]
 800c3ca:	2b0b      	cmp	r3, #11
 800c3cc:	d801      	bhi.n	800c3d2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c3ce:	230c      	movs	r3, #12
 800c3d0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c3d2:	8bfb      	ldrh	r3, [r7, #30]
 800c3d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c3d8:	d803      	bhi.n	800c3e2 <mem_trim+0x32>
 800c3da:	8bfa      	ldrh	r2, [r7, #30]
 800c3dc:	887b      	ldrh	r3, [r7, #2]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d201      	bcs.n	800c3e6 <mem_trim+0x36>
    return NULL;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	e0d8      	b.n	800c598 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c3e6:	4b6e      	ldr	r3, [pc, #440]	; (800c5a0 <mem_trim+0x1f0>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d304      	bcc.n	800c3fa <mem_trim+0x4a>
 800c3f0:	4b6c      	ldr	r3, [pc, #432]	; (800c5a4 <mem_trim+0x1f4>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d306      	bcc.n	800c408 <mem_trim+0x58>
 800c3fa:	4b6b      	ldr	r3, [pc, #428]	; (800c5a8 <mem_trim+0x1f8>)
 800c3fc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c400:	496a      	ldr	r1, [pc, #424]	; (800c5ac <mem_trim+0x1fc>)
 800c402:	486b      	ldr	r0, [pc, #428]	; (800c5b0 <mem_trim+0x200>)
 800c404:	f00d f938 	bl	8019678 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c408:	4b65      	ldr	r3, [pc, #404]	; (800c5a0 <mem_trim+0x1f0>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d304      	bcc.n	800c41c <mem_trim+0x6c>
 800c412:	4b64      	ldr	r3, [pc, #400]	; (800c5a4 <mem_trim+0x1f4>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d307      	bcc.n	800c42c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c41c:	f00c fee2 	bl	80191e4 <sys_arch_protect>
 800c420:	60b8      	str	r0, [r7, #8]
 800c422:	68b8      	ldr	r0, [r7, #8]
 800c424:	f00c feec 	bl	8019200 <sys_arch_unprotect>
    return rmem;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	e0b5      	b.n	800c598 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	3b08      	subs	r3, #8
 800c430:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c432:	69b8      	ldr	r0, [r7, #24]
 800c434:	f7ff fdea 	bl	800c00c <mem_to_ptr>
 800c438:	4603      	mov	r3, r0
 800c43a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c43c:	69bb      	ldr	r3, [r7, #24]
 800c43e:	881a      	ldrh	r2, [r3, #0]
 800c440:	8afb      	ldrh	r3, [r7, #22]
 800c442:	1ad3      	subs	r3, r2, r3
 800c444:	b29b      	uxth	r3, r3
 800c446:	3b08      	subs	r3, #8
 800c448:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c44a:	8bfa      	ldrh	r2, [r7, #30]
 800c44c:	8abb      	ldrh	r3, [r7, #20]
 800c44e:	429a      	cmp	r2, r3
 800c450:	d906      	bls.n	800c460 <mem_trim+0xb0>
 800c452:	4b55      	ldr	r3, [pc, #340]	; (800c5a8 <mem_trim+0x1f8>)
 800c454:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c458:	4956      	ldr	r1, [pc, #344]	; (800c5b4 <mem_trim+0x204>)
 800c45a:	4855      	ldr	r0, [pc, #340]	; (800c5b0 <mem_trim+0x200>)
 800c45c:	f00d f90c 	bl	8019678 <iprintf>
  if (newsize > size) {
 800c460:	8bfa      	ldrh	r2, [r7, #30]
 800c462:	8abb      	ldrh	r3, [r7, #20]
 800c464:	429a      	cmp	r2, r3
 800c466:	d901      	bls.n	800c46c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c468:	2300      	movs	r3, #0
 800c46a:	e095      	b.n	800c598 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c46c:	8bfa      	ldrh	r2, [r7, #30]
 800c46e:	8abb      	ldrh	r3, [r7, #20]
 800c470:	429a      	cmp	r2, r3
 800c472:	d101      	bne.n	800c478 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	e08f      	b.n	800c598 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c478:	484f      	ldr	r0, [pc, #316]	; (800c5b8 <mem_trim+0x208>)
 800c47a:	f00c fe77 	bl	801916c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	881b      	ldrh	r3, [r3, #0]
 800c482:	4618      	mov	r0, r3
 800c484:	f7ff fdb0 	bl	800bfe8 <ptr_to_mem>
 800c488:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	791b      	ldrb	r3, [r3, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d13f      	bne.n	800c512 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	881b      	ldrh	r3, [r3, #0]
 800c496:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c49a:	d106      	bne.n	800c4aa <mem_trim+0xfa>
 800c49c:	4b42      	ldr	r3, [pc, #264]	; (800c5a8 <mem_trim+0x1f8>)
 800c49e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c4a2:	4946      	ldr	r1, [pc, #280]	; (800c5bc <mem_trim+0x20c>)
 800c4a4:	4842      	ldr	r0, [pc, #264]	; (800c5b0 <mem_trim+0x200>)
 800c4a6:	f00d f8e7 	bl	8019678 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	881b      	ldrh	r3, [r3, #0]
 800c4ae:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c4b0:	8afa      	ldrh	r2, [r7, #22]
 800c4b2:	8bfb      	ldrh	r3, [r7, #30]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	3308      	adds	r3, #8
 800c4ba:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c4bc:	4b40      	ldr	r3, [pc, #256]	; (800c5c0 <mem_trim+0x210>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	693a      	ldr	r2, [r7, #16]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d106      	bne.n	800c4d4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c4c6:	89fb      	ldrh	r3, [r7, #14]
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7ff fd8d 	bl	800bfe8 <ptr_to_mem>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	4a3b      	ldr	r2, [pc, #236]	; (800c5c0 <mem_trim+0x210>)
 800c4d2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c4d4:	89fb      	ldrh	r3, [r7, #14]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7ff fd86 	bl	800bfe8 <ptr_to_mem>
 800c4dc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	89ba      	ldrh	r2, [r7, #12]
 800c4e8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	8afa      	ldrh	r2, [r7, #22]
 800c4ee:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	89fa      	ldrh	r2, [r7, #14]
 800c4f4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	881b      	ldrh	r3, [r3, #0]
 800c4fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c4fe:	d047      	beq.n	800c590 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	881b      	ldrh	r3, [r3, #0]
 800c504:	4618      	mov	r0, r3
 800c506:	f7ff fd6f 	bl	800bfe8 <ptr_to_mem>
 800c50a:	4602      	mov	r2, r0
 800c50c:	89fb      	ldrh	r3, [r7, #14]
 800c50e:	8053      	strh	r3, [r2, #2]
 800c510:	e03e      	b.n	800c590 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c512:	8bfb      	ldrh	r3, [r7, #30]
 800c514:	f103 0214 	add.w	r2, r3, #20
 800c518:	8abb      	ldrh	r3, [r7, #20]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d838      	bhi.n	800c590 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c51e:	8afa      	ldrh	r2, [r7, #22]
 800c520:	8bfb      	ldrh	r3, [r7, #30]
 800c522:	4413      	add	r3, r2
 800c524:	b29b      	uxth	r3, r3
 800c526:	3308      	adds	r3, #8
 800c528:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	881b      	ldrh	r3, [r3, #0]
 800c52e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c532:	d106      	bne.n	800c542 <mem_trim+0x192>
 800c534:	4b1c      	ldr	r3, [pc, #112]	; (800c5a8 <mem_trim+0x1f8>)
 800c536:	f240 3216 	movw	r2, #790	; 0x316
 800c53a:	4920      	ldr	r1, [pc, #128]	; (800c5bc <mem_trim+0x20c>)
 800c53c:	481c      	ldr	r0, [pc, #112]	; (800c5b0 <mem_trim+0x200>)
 800c53e:	f00d f89b 	bl	8019678 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c542:	89fb      	ldrh	r3, [r7, #14]
 800c544:	4618      	mov	r0, r3
 800c546:	f7ff fd4f 	bl	800bfe8 <ptr_to_mem>
 800c54a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c54c:	4b1c      	ldr	r3, [pc, #112]	; (800c5c0 <mem_trim+0x210>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	693a      	ldr	r2, [r7, #16]
 800c552:	429a      	cmp	r2, r3
 800c554:	d202      	bcs.n	800c55c <mem_trim+0x1ac>
      lfree = mem2;
 800c556:	4a1a      	ldr	r2, [pc, #104]	; (800c5c0 <mem_trim+0x210>)
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	2200      	movs	r2, #0
 800c560:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	881a      	ldrh	r2, [r3, #0]
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	8afa      	ldrh	r2, [r7, #22]
 800c56e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	89fa      	ldrh	r2, [r7, #14]
 800c574:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	881b      	ldrh	r3, [r3, #0]
 800c57a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c57e:	d007      	beq.n	800c590 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	881b      	ldrh	r3, [r3, #0]
 800c584:	4618      	mov	r0, r3
 800c586:	f7ff fd2f 	bl	800bfe8 <ptr_to_mem>
 800c58a:	4602      	mov	r2, r0
 800c58c:	89fb      	ldrh	r3, [r7, #14]
 800c58e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c590:	4809      	ldr	r0, [pc, #36]	; (800c5b8 <mem_trim+0x208>)
 800c592:	f00c fdfa 	bl	801918a <sys_mutex_unlock>
  return rmem;
 800c596:	687b      	ldr	r3, [r7, #4]
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3720      	adds	r7, #32
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	20009e60 	.word	0x20009e60
 800c5a4:	20009e64 	.word	0x20009e64
 800c5a8:	0801b40c 	.word	0x0801b40c
 800c5ac:	0801b598 	.word	0x0801b598
 800c5b0:	0801b454 	.word	0x0801b454
 800c5b4:	0801b5b0 	.word	0x0801b5b0
 800c5b8:	20009e68 	.word	0x20009e68
 800c5bc:	0801b5d0 	.word	0x0801b5d0
 800c5c0:	20009e6c 	.word	0x20009e6c

0800c5c4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b088      	sub	sp, #32
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c5ce:	88fb      	ldrh	r3, [r7, #6]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d101      	bne.n	800c5d8 <mem_malloc+0x14>
    return NULL;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	e0e2      	b.n	800c79e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c5d8:	88fb      	ldrh	r3, [r7, #6]
 800c5da:	3303      	adds	r3, #3
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	f023 0303 	bic.w	r3, r3, #3
 800c5e2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c5e4:	8bbb      	ldrh	r3, [r7, #28]
 800c5e6:	2b0b      	cmp	r3, #11
 800c5e8:	d801      	bhi.n	800c5ee <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c5ea:	230c      	movs	r3, #12
 800c5ec:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c5ee:	8bbb      	ldrh	r3, [r7, #28]
 800c5f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c5f4:	d803      	bhi.n	800c5fe <mem_malloc+0x3a>
 800c5f6:	8bba      	ldrh	r2, [r7, #28]
 800c5f8:	88fb      	ldrh	r3, [r7, #6]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d201      	bcs.n	800c602 <mem_malloc+0x3e>
    return NULL;
 800c5fe:	2300      	movs	r3, #0
 800c600:	e0cd      	b.n	800c79e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c602:	4869      	ldr	r0, [pc, #420]	; (800c7a8 <mem_malloc+0x1e4>)
 800c604:	f00c fdb2 	bl	801916c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c608:	4b68      	ldr	r3, [pc, #416]	; (800c7ac <mem_malloc+0x1e8>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7ff fcfd 	bl	800c00c <mem_to_ptr>
 800c612:	4603      	mov	r3, r0
 800c614:	83fb      	strh	r3, [r7, #30]
 800c616:	e0b7      	b.n	800c788 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c618:	8bfb      	ldrh	r3, [r7, #30]
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7ff fce4 	bl	800bfe8 <ptr_to_mem>
 800c620:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	791b      	ldrb	r3, [r3, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	f040 80a7 	bne.w	800c77a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	881b      	ldrh	r3, [r3, #0]
 800c630:	461a      	mov	r2, r3
 800c632:	8bfb      	ldrh	r3, [r7, #30]
 800c634:	1ad3      	subs	r3, r2, r3
 800c636:	f1a3 0208 	sub.w	r2, r3, #8
 800c63a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c63c:	429a      	cmp	r2, r3
 800c63e:	f0c0 809c 	bcc.w	800c77a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	881b      	ldrh	r3, [r3, #0]
 800c646:	461a      	mov	r2, r3
 800c648:	8bfb      	ldrh	r3, [r7, #30]
 800c64a:	1ad3      	subs	r3, r2, r3
 800c64c:	f1a3 0208 	sub.w	r2, r3, #8
 800c650:	8bbb      	ldrh	r3, [r7, #28]
 800c652:	3314      	adds	r3, #20
 800c654:	429a      	cmp	r2, r3
 800c656:	d333      	bcc.n	800c6c0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c658:	8bfa      	ldrh	r2, [r7, #30]
 800c65a:	8bbb      	ldrh	r3, [r7, #28]
 800c65c:	4413      	add	r3, r2
 800c65e:	b29b      	uxth	r3, r3
 800c660:	3308      	adds	r3, #8
 800c662:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c664:	8a7b      	ldrh	r3, [r7, #18]
 800c666:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c66a:	d106      	bne.n	800c67a <mem_malloc+0xb6>
 800c66c:	4b50      	ldr	r3, [pc, #320]	; (800c7b0 <mem_malloc+0x1ec>)
 800c66e:	f240 3287 	movw	r2, #903	; 0x387
 800c672:	4950      	ldr	r1, [pc, #320]	; (800c7b4 <mem_malloc+0x1f0>)
 800c674:	4850      	ldr	r0, [pc, #320]	; (800c7b8 <mem_malloc+0x1f4>)
 800c676:	f00c ffff 	bl	8019678 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c67a:	8a7b      	ldrh	r3, [r7, #18]
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7ff fcb3 	bl	800bfe8 <ptr_to_mem>
 800c682:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2200      	movs	r2, #0
 800c688:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	881a      	ldrh	r2, [r3, #0]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	8bfa      	ldrh	r2, [r7, #30]
 800c696:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	8a7a      	ldrh	r2, [r7, #18]
 800c69c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	881b      	ldrh	r3, [r3, #0]
 800c6a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c6ac:	d00b      	beq.n	800c6c6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	881b      	ldrh	r3, [r3, #0]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7ff fc98 	bl	800bfe8 <ptr_to_mem>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	8a7b      	ldrh	r3, [r7, #18]
 800c6bc:	8053      	strh	r3, [r2, #2]
 800c6be:	e002      	b.n	800c6c6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c6c6:	4b39      	ldr	r3, [pc, #228]	; (800c7ac <mem_malloc+0x1e8>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	697a      	ldr	r2, [r7, #20]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d127      	bne.n	800c720 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c6d0:	4b36      	ldr	r3, [pc, #216]	; (800c7ac <mem_malloc+0x1e8>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c6d6:	e005      	b.n	800c6e4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	881b      	ldrh	r3, [r3, #0]
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7ff fc83 	bl	800bfe8 <ptr_to_mem>
 800c6e2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	791b      	ldrb	r3, [r3, #4]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d004      	beq.n	800c6f6 <mem_malloc+0x132>
 800c6ec:	4b33      	ldr	r3, [pc, #204]	; (800c7bc <mem_malloc+0x1f8>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	69ba      	ldr	r2, [r7, #24]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d1f0      	bne.n	800c6d8 <mem_malloc+0x114>
          }
          lfree = cur;
 800c6f6:	4a2d      	ldr	r2, [pc, #180]	; (800c7ac <mem_malloc+0x1e8>)
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c6fc:	4b2b      	ldr	r3, [pc, #172]	; (800c7ac <mem_malloc+0x1e8>)
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	4b2e      	ldr	r3, [pc, #184]	; (800c7bc <mem_malloc+0x1f8>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	429a      	cmp	r2, r3
 800c706:	d00b      	beq.n	800c720 <mem_malloc+0x15c>
 800c708:	4b28      	ldr	r3, [pc, #160]	; (800c7ac <mem_malloc+0x1e8>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	791b      	ldrb	r3, [r3, #4]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d006      	beq.n	800c720 <mem_malloc+0x15c>
 800c712:	4b27      	ldr	r3, [pc, #156]	; (800c7b0 <mem_malloc+0x1ec>)
 800c714:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c718:	4929      	ldr	r1, [pc, #164]	; (800c7c0 <mem_malloc+0x1fc>)
 800c71a:	4827      	ldr	r0, [pc, #156]	; (800c7b8 <mem_malloc+0x1f4>)
 800c71c:	f00c ffac 	bl	8019678 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c720:	4821      	ldr	r0, [pc, #132]	; (800c7a8 <mem_malloc+0x1e4>)
 800c722:	f00c fd32 	bl	801918a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c726:	8bba      	ldrh	r2, [r7, #28]
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	4413      	add	r3, r2
 800c72c:	3308      	adds	r3, #8
 800c72e:	4a23      	ldr	r2, [pc, #140]	; (800c7bc <mem_malloc+0x1f8>)
 800c730:	6812      	ldr	r2, [r2, #0]
 800c732:	4293      	cmp	r3, r2
 800c734:	d906      	bls.n	800c744 <mem_malloc+0x180>
 800c736:	4b1e      	ldr	r3, [pc, #120]	; (800c7b0 <mem_malloc+0x1ec>)
 800c738:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c73c:	4921      	ldr	r1, [pc, #132]	; (800c7c4 <mem_malloc+0x200>)
 800c73e:	481e      	ldr	r0, [pc, #120]	; (800c7b8 <mem_malloc+0x1f4>)
 800c740:	f00c ff9a 	bl	8019678 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	f003 0303 	and.w	r3, r3, #3
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d006      	beq.n	800c75c <mem_malloc+0x198>
 800c74e:	4b18      	ldr	r3, [pc, #96]	; (800c7b0 <mem_malloc+0x1ec>)
 800c750:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c754:	491c      	ldr	r1, [pc, #112]	; (800c7c8 <mem_malloc+0x204>)
 800c756:	4818      	ldr	r0, [pc, #96]	; (800c7b8 <mem_malloc+0x1f4>)
 800c758:	f00c ff8e 	bl	8019678 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	f003 0303 	and.w	r3, r3, #3
 800c762:	2b00      	cmp	r3, #0
 800c764:	d006      	beq.n	800c774 <mem_malloc+0x1b0>
 800c766:	4b12      	ldr	r3, [pc, #72]	; (800c7b0 <mem_malloc+0x1ec>)
 800c768:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c76c:	4917      	ldr	r1, [pc, #92]	; (800c7cc <mem_malloc+0x208>)
 800c76e:	4812      	ldr	r0, [pc, #72]	; (800c7b8 <mem_malloc+0x1f4>)
 800c770:	f00c ff82 	bl	8019678 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	3308      	adds	r3, #8
 800c778:	e011      	b.n	800c79e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c77a:	8bfb      	ldrh	r3, [r7, #30]
 800c77c:	4618      	mov	r0, r3
 800c77e:	f7ff fc33 	bl	800bfe8 <ptr_to_mem>
 800c782:	4603      	mov	r3, r0
 800c784:	881b      	ldrh	r3, [r3, #0]
 800c786:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c788:	8bfa      	ldrh	r2, [r7, #30]
 800c78a:	8bbb      	ldrh	r3, [r7, #28]
 800c78c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c790:	429a      	cmp	r2, r3
 800c792:	f4ff af41 	bcc.w	800c618 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c796:	4804      	ldr	r0, [pc, #16]	; (800c7a8 <mem_malloc+0x1e4>)
 800c798:	f00c fcf7 	bl	801918a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c79c:	2300      	movs	r3, #0
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3720      	adds	r7, #32
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	20009e68 	.word	0x20009e68
 800c7ac:	20009e6c 	.word	0x20009e6c
 800c7b0:	0801b40c 	.word	0x0801b40c
 800c7b4:	0801b5d0 	.word	0x0801b5d0
 800c7b8:	0801b454 	.word	0x0801b454
 800c7bc:	20009e64 	.word	0x20009e64
 800c7c0:	0801b5e4 	.word	0x0801b5e4
 800c7c4:	0801b600 	.word	0x0801b600
 800c7c8:	0801b630 	.word	0x0801b630
 800c7cc:	0801b660 	.word	0x0801b660

0800c7d0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	3303      	adds	r3, #3
 800c7e6:	f023 0303 	bic.w	r3, r3, #3
 800c7ea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	60fb      	str	r3, [r7, #12]
 800c7f0:	e011      	b.n	800c816 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	68ba      	ldr	r2, [r7, #8]
 800c802:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	881b      	ldrh	r3, [r3, #0]
 800c808:	461a      	mov	r2, r3
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	4413      	add	r3, r2
 800c80e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	3301      	adds	r3, #1
 800c814:	60fb      	str	r3, [r7, #12]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	885b      	ldrh	r3, [r3, #2]
 800c81a:	461a      	mov	r2, r3
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	4293      	cmp	r3, r2
 800c820:	dbe7      	blt.n	800c7f2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c822:	bf00      	nop
 800c824:	bf00      	nop
 800c826:	3714      	adds	r7, #20
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c836:	2300      	movs	r3, #0
 800c838:	80fb      	strh	r3, [r7, #6]
 800c83a:	e009      	b.n	800c850 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c83c:	88fb      	ldrh	r3, [r7, #6]
 800c83e:	4a08      	ldr	r2, [pc, #32]	; (800c860 <memp_init+0x30>)
 800c840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c844:	4618      	mov	r0, r3
 800c846:	f7ff ffc3 	bl	800c7d0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c84a:	88fb      	ldrh	r3, [r7, #6]
 800c84c:	3301      	adds	r3, #1
 800c84e:	80fb      	strh	r3, [r7, #6]
 800c850:	88fb      	ldrh	r3, [r7, #6]
 800c852:	2b0c      	cmp	r3, #12
 800c854:	d9f2      	bls.n	800c83c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c856:	bf00      	nop
 800c858:	bf00      	nop
 800c85a:	3708      	adds	r7, #8
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	0801e280 	.word	0x0801e280

0800c864 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c86c:	f00c fcba 	bl	80191e4 <sys_arch_protect>
 800c870:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	689b      	ldr	r3, [r3, #8]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d015      	beq.n	800c8ac <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	68ba      	ldr	r2, [r7, #8]
 800c886:	6812      	ldr	r2, [r2, #0]
 800c888:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	f003 0303 	and.w	r3, r3, #3
 800c890:	2b00      	cmp	r3, #0
 800c892:	d006      	beq.n	800c8a2 <do_memp_malloc_pool+0x3e>
 800c894:	4b09      	ldr	r3, [pc, #36]	; (800c8bc <do_memp_malloc_pool+0x58>)
 800c896:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c89a:	4909      	ldr	r1, [pc, #36]	; (800c8c0 <do_memp_malloc_pool+0x5c>)
 800c89c:	4809      	ldr	r0, [pc, #36]	; (800c8c4 <do_memp_malloc_pool+0x60>)
 800c89e:	f00c feeb 	bl	8019678 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	f00c fcac 	bl	8019200 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	e003      	b.n	800c8b4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f00c fca7 	bl	8019200 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	0801b684 	.word	0x0801b684
 800c8c0:	0801b6b4 	.word	0x0801b6b4
 800c8c4:	0801b6d8 	.word	0x0801b6d8

0800c8c8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d106      	bne.n	800c8e4 <memp_malloc_pool+0x1c>
 800c8d6:	4b0a      	ldr	r3, [pc, #40]	; (800c900 <memp_malloc_pool+0x38>)
 800c8d8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c8dc:	4909      	ldr	r1, [pc, #36]	; (800c904 <memp_malloc_pool+0x3c>)
 800c8de:	480a      	ldr	r0, [pc, #40]	; (800c908 <memp_malloc_pool+0x40>)
 800c8e0:	f00c feca 	bl	8019678 <iprintf>
  if (desc == NULL) {
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d101      	bne.n	800c8ee <memp_malloc_pool+0x26>
    return NULL;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	e003      	b.n	800c8f6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f7ff ffb8 	bl	800c864 <do_memp_malloc_pool>
 800c8f4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3708      	adds	r7, #8
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	0801b684 	.word	0x0801b684
 800c904:	0801b700 	.word	0x0801b700
 800c908:	0801b6d8 	.word	0x0801b6d8

0800c90c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	4603      	mov	r3, r0
 800c914:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c916:	79fb      	ldrb	r3, [r7, #7]
 800c918:	2b0c      	cmp	r3, #12
 800c91a:	d908      	bls.n	800c92e <memp_malloc+0x22>
 800c91c:	4b0a      	ldr	r3, [pc, #40]	; (800c948 <memp_malloc+0x3c>)
 800c91e:	f240 1257 	movw	r2, #343	; 0x157
 800c922:	490a      	ldr	r1, [pc, #40]	; (800c94c <memp_malloc+0x40>)
 800c924:	480a      	ldr	r0, [pc, #40]	; (800c950 <memp_malloc+0x44>)
 800c926:	f00c fea7 	bl	8019678 <iprintf>
 800c92a:	2300      	movs	r3, #0
 800c92c:	e008      	b.n	800c940 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c92e:	79fb      	ldrb	r3, [r7, #7]
 800c930:	4a08      	ldr	r2, [pc, #32]	; (800c954 <memp_malloc+0x48>)
 800c932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c936:	4618      	mov	r0, r3
 800c938:	f7ff ff94 	bl	800c864 <do_memp_malloc_pool>
 800c93c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c93e:	68fb      	ldr	r3, [r7, #12]
}
 800c940:	4618      	mov	r0, r3
 800c942:	3710      	adds	r7, #16
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}
 800c948:	0801b684 	.word	0x0801b684
 800c94c:	0801b714 	.word	0x0801b714
 800c950:	0801b6d8 	.word	0x0801b6d8
 800c954:	0801e280 	.word	0x0801e280

0800c958 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	f003 0303 	and.w	r3, r3, #3
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d006      	beq.n	800c97a <do_memp_free_pool+0x22>
 800c96c:	4b0d      	ldr	r3, [pc, #52]	; (800c9a4 <do_memp_free_pool+0x4c>)
 800c96e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c972:	490d      	ldr	r1, [pc, #52]	; (800c9a8 <do_memp_free_pool+0x50>)
 800c974:	480d      	ldr	r0, [pc, #52]	; (800c9ac <do_memp_free_pool+0x54>)
 800c976:	f00c fe7f 	bl	8019678 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c97e:	f00c fc31 	bl	80191e4 <sys_arch_protect>
 800c982:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	68fa      	ldr	r2, [r7, #12]
 800c994:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c996:	68b8      	ldr	r0, [r7, #8]
 800c998:	f00c fc32 	bl	8019200 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c99c:	bf00      	nop
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	0801b684 	.word	0x0801b684
 800c9a8:	0801b734 	.word	0x0801b734
 800c9ac:	0801b6d8 	.word	0x0801b6d8

0800c9b0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d106      	bne.n	800c9ce <memp_free_pool+0x1e>
 800c9c0:	4b0a      	ldr	r3, [pc, #40]	; (800c9ec <memp_free_pool+0x3c>)
 800c9c2:	f240 1295 	movw	r2, #405	; 0x195
 800c9c6:	490a      	ldr	r1, [pc, #40]	; (800c9f0 <memp_free_pool+0x40>)
 800c9c8:	480a      	ldr	r0, [pc, #40]	; (800c9f4 <memp_free_pool+0x44>)
 800c9ca:	f00c fe55 	bl	8019678 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d007      	beq.n	800c9e4 <memp_free_pool+0x34>
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d004      	beq.n	800c9e4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c9da:	6839      	ldr	r1, [r7, #0]
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f7ff ffbb 	bl	800c958 <do_memp_free_pool>
 800c9e2:	e000      	b.n	800c9e6 <memp_free_pool+0x36>
    return;
 800c9e4:	bf00      	nop
}
 800c9e6:	3708      	adds	r7, #8
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	0801b684 	.word	0x0801b684
 800c9f0:	0801b700 	.word	0x0801b700
 800c9f4:	0801b6d8 	.word	0x0801b6d8

0800c9f8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	4603      	mov	r3, r0
 800ca00:	6039      	str	r1, [r7, #0]
 800ca02:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ca04:	79fb      	ldrb	r3, [r7, #7]
 800ca06:	2b0c      	cmp	r3, #12
 800ca08:	d907      	bls.n	800ca1a <memp_free+0x22>
 800ca0a:	4b0c      	ldr	r3, [pc, #48]	; (800ca3c <memp_free+0x44>)
 800ca0c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ca10:	490b      	ldr	r1, [pc, #44]	; (800ca40 <memp_free+0x48>)
 800ca12:	480c      	ldr	r0, [pc, #48]	; (800ca44 <memp_free+0x4c>)
 800ca14:	f00c fe30 	bl	8019678 <iprintf>
 800ca18:	e00c      	b.n	800ca34 <memp_free+0x3c>

  if (mem == NULL) {
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d008      	beq.n	800ca32 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ca20:	79fb      	ldrb	r3, [r7, #7]
 800ca22:	4a09      	ldr	r2, [pc, #36]	; (800ca48 <memp_free+0x50>)
 800ca24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca28:	6839      	ldr	r1, [r7, #0]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7ff ff94 	bl	800c958 <do_memp_free_pool>
 800ca30:	e000      	b.n	800ca34 <memp_free+0x3c>
    return;
 800ca32:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ca34:	3708      	adds	r7, #8
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	0801b684 	.word	0x0801b684
 800ca40:	0801b754 	.word	0x0801b754
 800ca44:	0801b6d8 	.word	0x0801b6d8
 800ca48:	0801e280 	.word	0x0801e280

0800ca4c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ca50:	bf00      	nop
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
	...

0800ca5c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b086      	sub	sp, #24
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	607a      	str	r2, [r7, #4]
 800ca68:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d108      	bne.n	800ca82 <netif_add+0x26>
 800ca70:	4b5b      	ldr	r3, [pc, #364]	; (800cbe0 <netif_add+0x184>)
 800ca72:	f240 1227 	movw	r2, #295	; 0x127
 800ca76:	495b      	ldr	r1, [pc, #364]	; (800cbe4 <netif_add+0x188>)
 800ca78:	485b      	ldr	r0, [pc, #364]	; (800cbe8 <netif_add+0x18c>)
 800ca7a:	f00c fdfd 	bl	8019678 <iprintf>
 800ca7e:	2300      	movs	r3, #0
 800ca80:	e0a9      	b.n	800cbd6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ca82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d108      	bne.n	800ca9a <netif_add+0x3e>
 800ca88:	4b55      	ldr	r3, [pc, #340]	; (800cbe0 <netif_add+0x184>)
 800ca8a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ca8e:	4957      	ldr	r1, [pc, #348]	; (800cbec <netif_add+0x190>)
 800ca90:	4855      	ldr	r0, [pc, #340]	; (800cbe8 <netif_add+0x18c>)
 800ca92:	f00c fdf1 	bl	8019678 <iprintf>
 800ca96:	2300      	movs	r3, #0
 800ca98:	e09d      	b.n	800cbd6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d101      	bne.n	800caa4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800caa0:	4b53      	ldr	r3, [pc, #332]	; (800cbf0 <netif_add+0x194>)
 800caa2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d101      	bne.n	800caae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800caaa:	4b51      	ldr	r3, [pc, #324]	; (800cbf0 <netif_add+0x194>)
 800caac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d101      	bne.n	800cab8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800cab4:	4b4e      	ldr	r3, [pc, #312]	; (800cbf0 <netif_add+0x194>)
 800cab6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2200      	movs	r2, #0
 800cabc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2200      	movs	r2, #0
 800cac2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2200      	movs	r2, #0
 800cac8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	4a49      	ldr	r2, [pc, #292]	; (800cbf4 <netif_add+0x198>)
 800cace:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2200      	movs	r2, #0
 800cad4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2200      	movs	r2, #0
 800cada:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	3324      	adds	r3, #36	; 0x24
 800cae2:	2204      	movs	r2, #4
 800cae4:	2100      	movs	r1, #0
 800cae6:	4618      	mov	r0, r3
 800cae8:	f00c fcde 	bl	80194a8 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2200      	movs	r2, #0
 800caf0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	6a3a      	ldr	r2, [r7, #32]
 800caf6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800caf8:	4b3f      	ldr	r3, [pc, #252]	; (800cbf8 <netif_add+0x19c>)
 800cafa:	781a      	ldrb	r2, [r3, #0]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb06:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	68b9      	ldr	r1, [r7, #8]
 800cb0e:	68f8      	ldr	r0, [r7, #12]
 800cb10:	f000 f914 	bl	800cd3c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	4798      	blx	r3
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d001      	beq.n	800cb24 <netif_add+0xc8>
    return NULL;
 800cb20:	2300      	movs	r3, #0
 800cb22:	e058      	b.n	800cbd6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb2a:	2bff      	cmp	r3, #255	; 0xff
 800cb2c:	d103      	bne.n	800cb36 <netif_add+0xda>
        netif->num = 0;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2200      	movs	r2, #0
 800cb32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800cb36:	2300      	movs	r3, #0
 800cb38:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cb3a:	4b30      	ldr	r3, [pc, #192]	; (800cbfc <netif_add+0x1a0>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	617b      	str	r3, [r7, #20]
 800cb40:	e02b      	b.n	800cb9a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cb42:	697a      	ldr	r2, [r7, #20]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d106      	bne.n	800cb58 <netif_add+0xfc>
 800cb4a:	4b25      	ldr	r3, [pc, #148]	; (800cbe0 <netif_add+0x184>)
 800cb4c:	f240 128b 	movw	r2, #395	; 0x18b
 800cb50:	492b      	ldr	r1, [pc, #172]	; (800cc00 <netif_add+0x1a4>)
 800cb52:	4825      	ldr	r0, [pc, #148]	; (800cbe8 <netif_add+0x18c>)
 800cb54:	f00c fd90 	bl	8019678 <iprintf>
        num_netifs++;
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	2bff      	cmp	r3, #255	; 0xff
 800cb62:	dd06      	ble.n	800cb72 <netif_add+0x116>
 800cb64:	4b1e      	ldr	r3, [pc, #120]	; (800cbe0 <netif_add+0x184>)
 800cb66:	f240 128d 	movw	r2, #397	; 0x18d
 800cb6a:	4926      	ldr	r1, [pc, #152]	; (800cc04 <netif_add+0x1a8>)
 800cb6c:	481e      	ldr	r0, [pc, #120]	; (800cbe8 <netif_add+0x18c>)
 800cb6e:	f00c fd83 	bl	8019678 <iprintf>
        if (netif2->num == netif->num) {
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d108      	bne.n	800cb94 <netif_add+0x138>
          netif->num++;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb88:	3301      	adds	r3, #1
 800cb8a:	b2da      	uxtb	r2, r3
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800cb92:	e005      	b.n	800cba0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	617b      	str	r3, [r7, #20]
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1d0      	bne.n	800cb42 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d1be      	bne.n	800cb24 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cbac:	2bfe      	cmp	r3, #254	; 0xfe
 800cbae:	d103      	bne.n	800cbb8 <netif_add+0x15c>
    netif_num = 0;
 800cbb0:	4b11      	ldr	r3, [pc, #68]	; (800cbf8 <netif_add+0x19c>)
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	701a      	strb	r2, [r3, #0]
 800cbb6:	e006      	b.n	800cbc6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	b2da      	uxtb	r2, r3
 800cbc2:	4b0d      	ldr	r3, [pc, #52]	; (800cbf8 <netif_add+0x19c>)
 800cbc4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cbc6:	4b0d      	ldr	r3, [pc, #52]	; (800cbfc <netif_add+0x1a0>)
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cbce:	4a0b      	ldr	r2, [pc, #44]	; (800cbfc <netif_add+0x1a0>)
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3718      	adds	r7, #24
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	0801b770 	.word	0x0801b770
 800cbe4:	0801b804 	.word	0x0801b804
 800cbe8:	0801b7c0 	.word	0x0801b7c0
 800cbec:	0801b820 	.word	0x0801b820
 800cbf0:	0801e304 	.word	0x0801e304
 800cbf4:	0800d01f 	.word	0x0800d01f
 800cbf8:	2000cf64 	.word	0x2000cf64
 800cbfc:	2000cf5c 	.word	0x2000cf5c
 800cc00:	0801b844 	.word	0x0801b844
 800cc04:	0801b858 	.word	0x0801b858

0800cc08 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cc12:	6839      	ldr	r1, [r7, #0]
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f002 fe95 	bl	800f944 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cc1a:	6839      	ldr	r1, [r7, #0]
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f007 ff0f 	bl	8014a40 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cc22:	bf00      	nop
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
	...

0800cc2c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d106      	bne.n	800cc4c <netif_do_set_ipaddr+0x20>
 800cc3e:	4b1d      	ldr	r3, [pc, #116]	; (800ccb4 <netif_do_set_ipaddr+0x88>)
 800cc40:	f240 12cb 	movw	r2, #459	; 0x1cb
 800cc44:	491c      	ldr	r1, [pc, #112]	; (800ccb8 <netif_do_set_ipaddr+0x8c>)
 800cc46:	481d      	ldr	r0, [pc, #116]	; (800ccbc <netif_do_set_ipaddr+0x90>)
 800cc48:	f00c fd16 	bl	8019678 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d106      	bne.n	800cc60 <netif_do_set_ipaddr+0x34>
 800cc52:	4b18      	ldr	r3, [pc, #96]	; (800ccb4 <netif_do_set_ipaddr+0x88>)
 800cc54:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cc58:	4917      	ldr	r1, [pc, #92]	; (800ccb8 <netif_do_set_ipaddr+0x8c>)
 800cc5a:	4818      	ldr	r0, [pc, #96]	; (800ccbc <netif_do_set_ipaddr+0x90>)
 800cc5c:	f00c fd0c 	bl	8019678 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	3304      	adds	r3, #4
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d01c      	beq.n	800cca8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	3304      	adds	r3, #4
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800cc7e:	f107 0314 	add.w	r3, r7, #20
 800cc82:	4619      	mov	r1, r3
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f7ff ffbf 	bl	800cc08 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d002      	beq.n	800cc96 <netif_do_set_ipaddr+0x6a>
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	e000      	b.n	800cc98 <netif_do_set_ipaddr+0x6c>
 800cc96:	2300      	movs	r3, #0
 800cc98:	68fa      	ldr	r2, [r7, #12]
 800cc9a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cc9c:	2101      	movs	r1, #1
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f000 f8d2 	bl	800ce48 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cca4:	2301      	movs	r3, #1
 800cca6:	e000      	b.n	800ccaa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cca8:	2300      	movs	r3, #0
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3718      	adds	r7, #24
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
 800ccb2:	bf00      	nop
 800ccb4:	0801b770 	.word	0x0801b770
 800ccb8:	0801b888 	.word	0x0801b888
 800ccbc:	0801b7c0 	.word	0x0801b7c0

0800ccc0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	3308      	adds	r3, #8
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d00a      	beq.n	800ccf0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d002      	beq.n	800cce6 <netif_do_set_netmask+0x26>
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	e000      	b.n	800cce8 <netif_do_set_netmask+0x28>
 800cce6:	2300      	movs	r3, #0
 800cce8:	68fa      	ldr	r2, [r7, #12]
 800ccea:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ccec:	2301      	movs	r3, #1
 800ccee:	e000      	b.n	800ccf2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ccf0:	2300      	movs	r3, #0
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3714      	adds	r7, #20
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr

0800ccfe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ccfe:	b480      	push	{r7}
 800cd00:	b085      	sub	sp, #20
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	60f8      	str	r0, [r7, #12]
 800cd06:	60b9      	str	r1, [r7, #8]
 800cd08:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	330c      	adds	r3, #12
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d00a      	beq.n	800cd2e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d002      	beq.n	800cd24 <netif_do_set_gw+0x26>
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	e000      	b.n	800cd26 <netif_do_set_gw+0x28>
 800cd24:	2300      	movs	r3, #0
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e000      	b.n	800cd30 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3714      	adds	r7, #20
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b088      	sub	sp, #32
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d101      	bne.n	800cd5c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cd58:	4b1c      	ldr	r3, [pc, #112]	; (800cdcc <netif_set_addr+0x90>)
 800cd5a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d101      	bne.n	800cd66 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cd62:	4b1a      	ldr	r3, [pc, #104]	; (800cdcc <netif_set_addr+0x90>)
 800cd64:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d101      	bne.n	800cd70 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cd6c:	4b17      	ldr	r3, [pc, #92]	; (800cdcc <netif_set_addr+0x90>)
 800cd6e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d003      	beq.n	800cd7e <netif_set_addr+0x42>
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d101      	bne.n	800cd82 <netif_set_addr+0x46>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e000      	b.n	800cd84 <netif_set_addr+0x48>
 800cd82:	2300      	movs	r3, #0
 800cd84:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d006      	beq.n	800cd9a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cd8c:	f107 0310 	add.w	r3, r7, #16
 800cd90:	461a      	mov	r2, r3
 800cd92:	68b9      	ldr	r1, [r7, #8]
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f7ff ff49 	bl	800cc2c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cd9a:	69fa      	ldr	r2, [r7, #28]
 800cd9c:	6879      	ldr	r1, [r7, #4]
 800cd9e:	68f8      	ldr	r0, [r7, #12]
 800cda0:	f7ff ff8e 	bl	800ccc0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cda4:	69ba      	ldr	r2, [r7, #24]
 800cda6:	6839      	ldr	r1, [r7, #0]
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f7ff ffa8 	bl	800ccfe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d106      	bne.n	800cdc2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cdb4:	f107 0310 	add.w	r3, r7, #16
 800cdb8:	461a      	mov	r2, r3
 800cdba:	68b9      	ldr	r1, [r7, #8]
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f7ff ff35 	bl	800cc2c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800cdc2:	bf00      	nop
 800cdc4:	3720      	adds	r7, #32
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	0801e304 	.word	0x0801e304

0800cdd0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cdd8:	4a04      	ldr	r2, [pc, #16]	; (800cdec <netif_set_default+0x1c>)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800cdde:	bf00      	nop
 800cde0:	370c      	adds	r7, #12
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr
 800cdea:	bf00      	nop
 800cdec:	2000cf60 	.word	0x2000cf60

0800cdf0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d107      	bne.n	800ce0e <netif_set_up+0x1e>
 800cdfe:	4b0f      	ldr	r3, [pc, #60]	; (800ce3c <netif_set_up+0x4c>)
 800ce00:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ce04:	490e      	ldr	r1, [pc, #56]	; (800ce40 <netif_set_up+0x50>)
 800ce06:	480f      	ldr	r0, [pc, #60]	; (800ce44 <netif_set_up+0x54>)
 800ce08:	f00c fc36 	bl	8019678 <iprintf>
 800ce0c:	e013      	b.n	800ce36 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ce14:	f003 0301 	and.w	r3, r3, #1
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d10c      	bne.n	800ce36 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ce22:	f043 0301 	orr.w	r3, r3, #1
 800ce26:	b2da      	uxtb	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ce2e:	2103      	movs	r1, #3
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f000 f809 	bl	800ce48 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ce36:	3708      	adds	r7, #8
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	0801b770 	.word	0x0801b770
 800ce40:	0801b8f8 	.word	0x0801b8f8
 800ce44:	0801b7c0 	.word	0x0801b7c0

0800ce48 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	460b      	mov	r3, r1
 800ce52:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d106      	bne.n	800ce68 <netif_issue_reports+0x20>
 800ce5a:	4b18      	ldr	r3, [pc, #96]	; (800cebc <netif_issue_reports+0x74>)
 800ce5c:	f240 326d 	movw	r2, #877	; 0x36d
 800ce60:	4917      	ldr	r1, [pc, #92]	; (800cec0 <netif_issue_reports+0x78>)
 800ce62:	4818      	ldr	r0, [pc, #96]	; (800cec4 <netif_issue_reports+0x7c>)
 800ce64:	f00c fc08 	bl	8019678 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ce6e:	f003 0304 	and.w	r3, r3, #4
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d01e      	beq.n	800ceb4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ce7c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d017      	beq.n	800ceb4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ce84:	78fb      	ldrb	r3, [r7, #3]
 800ce86:	f003 0301 	and.w	r3, r3, #1
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d013      	beq.n	800ceb6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	3304      	adds	r3, #4
 800ce92:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00e      	beq.n	800ceb6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ce9e:	f003 0308 	and.w	r3, r3, #8
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d007      	beq.n	800ceb6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	3304      	adds	r3, #4
 800ceaa:	4619      	mov	r1, r3
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f00a fbc7 	bl	8017640 <etharp_request>
 800ceb2:	e000      	b.n	800ceb6 <netif_issue_reports+0x6e>
    return;
 800ceb4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ceb6:	3708      	adds	r7, #8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	0801b770 	.word	0x0801b770
 800cec0:	0801b914 	.word	0x0801b914
 800cec4:	0801b7c0 	.word	0x0801b7c0

0800cec8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d107      	bne.n	800cee6 <netif_set_down+0x1e>
 800ced6:	4b12      	ldr	r3, [pc, #72]	; (800cf20 <netif_set_down+0x58>)
 800ced8:	f240 329b 	movw	r2, #923	; 0x39b
 800cedc:	4911      	ldr	r1, [pc, #68]	; (800cf24 <netif_set_down+0x5c>)
 800cede:	4812      	ldr	r0, [pc, #72]	; (800cf28 <netif_set_down+0x60>)
 800cee0:	f00c fbca 	bl	8019678 <iprintf>
 800cee4:	e019      	b.n	800cf1a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ceec:	f003 0301 	and.w	r3, r3, #1
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d012      	beq.n	800cf1a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cefa:	f023 0301 	bic.w	r3, r3, #1
 800cefe:	b2da      	uxtb	r2, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cf0c:	f003 0308 	and.w	r3, r3, #8
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d002      	beq.n	800cf1a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f009 ff4d 	bl	8016db4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	0801b770 	.word	0x0801b770
 800cf24:	0801b938 	.word	0x0801b938
 800cf28:	0801b7c0 	.word	0x0801b7c0

0800cf2c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d107      	bne.n	800cf4a <netif_set_link_up+0x1e>
 800cf3a:	4b15      	ldr	r3, [pc, #84]	; (800cf90 <netif_set_link_up+0x64>)
 800cf3c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800cf40:	4914      	ldr	r1, [pc, #80]	; (800cf94 <netif_set_link_up+0x68>)
 800cf42:	4815      	ldr	r0, [pc, #84]	; (800cf98 <netif_set_link_up+0x6c>)
 800cf44:	f00c fb98 	bl	8019678 <iprintf>
 800cf48:	e01e      	b.n	800cf88 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cf50:	f003 0304 	and.w	r3, r3, #4
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d117      	bne.n	800cf88 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cf5e:	f043 0304 	orr.w	r3, r3, #4
 800cf62:	b2da      	uxtb	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f008 f992 	bl	8015294 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cf70:	2103      	movs	r1, #3
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f7ff ff68 	bl	800ce48 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	69db      	ldr	r3, [r3, #28]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d003      	beq.n	800cf88 <netif_set_link_up+0x5c>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	69db      	ldr	r3, [r3, #28]
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cf88:	3708      	adds	r7, #8
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	0801b770 	.word	0x0801b770
 800cf94:	0801b958 	.word	0x0801b958
 800cf98:	0801b7c0 	.word	0x0801b7c0

0800cf9c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d107      	bne.n	800cfba <netif_set_link_down+0x1e>
 800cfaa:	4b11      	ldr	r3, [pc, #68]	; (800cff0 <netif_set_link_down+0x54>)
 800cfac:	f240 4206 	movw	r2, #1030	; 0x406
 800cfb0:	4910      	ldr	r1, [pc, #64]	; (800cff4 <netif_set_link_down+0x58>)
 800cfb2:	4811      	ldr	r0, [pc, #68]	; (800cff8 <netif_set_link_down+0x5c>)
 800cfb4:	f00c fb60 	bl	8019678 <iprintf>
 800cfb8:	e017      	b.n	800cfea <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cfc0:	f003 0304 	and.w	r3, r3, #4
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d010      	beq.n	800cfea <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cfce:	f023 0304 	bic.w	r3, r3, #4
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	69db      	ldr	r3, [r3, #28]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d003      	beq.n	800cfea <netif_set_link_down+0x4e>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	69db      	ldr	r3, [r3, #28]
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cfea:	3708      	adds	r7, #8
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	0801b770 	.word	0x0801b770
 800cff4:	0801b97c 	.word	0x0801b97c
 800cff8:	0801b7c0 	.word	0x0801b7c0

0800cffc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d002      	beq.n	800d012 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	683a      	ldr	r2, [r7, #0]
 800d010:	61da      	str	r2, [r3, #28]
  }
}
 800d012:	bf00      	nop
 800d014:	370c      	adds	r7, #12
 800d016:	46bd      	mov	sp, r7
 800d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01c:	4770      	bx	lr

0800d01e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d01e:	b480      	push	{r7}
 800d020:	b085      	sub	sp, #20
 800d022:	af00      	add	r7, sp, #0
 800d024:	60f8      	str	r0, [r7, #12]
 800d026:	60b9      	str	r1, [r7, #8]
 800d028:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d02a:	f06f 030b 	mvn.w	r3, #11
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3714      	adds	r7, #20
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
	...

0800d03c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b085      	sub	sp, #20
 800d040:	af00      	add	r7, sp, #0
 800d042:	4603      	mov	r3, r0
 800d044:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d046:	79fb      	ldrb	r3, [r7, #7]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d013      	beq.n	800d074 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d04c:	4b0d      	ldr	r3, [pc, #52]	; (800d084 <netif_get_by_index+0x48>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	60fb      	str	r3, [r7, #12]
 800d052:	e00c      	b.n	800d06e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d05a:	3301      	adds	r3, #1
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	79fa      	ldrb	r2, [r7, #7]
 800d060:	429a      	cmp	r2, r3
 800d062:	d101      	bne.n	800d068 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	e006      	b.n	800d076 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	60fb      	str	r3, [r7, #12]
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d1ef      	bne.n	800d054 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	3714      	adds	r7, #20
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr
 800d082:	bf00      	nop
 800d084:	2000cf5c 	.word	0x2000cf5c

0800d088 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d08e:	f00c f8a9 	bl	80191e4 <sys_arch_protect>
 800d092:	6038      	str	r0, [r7, #0]
 800d094:	4b0d      	ldr	r3, [pc, #52]	; (800d0cc <pbuf_free_ooseq+0x44>)
 800d096:	2200      	movs	r2, #0
 800d098:	701a      	strb	r2, [r3, #0]
 800d09a:	6838      	ldr	r0, [r7, #0]
 800d09c:	f00c f8b0 	bl	8019200 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d0a0:	4b0b      	ldr	r3, [pc, #44]	; (800d0d0 <pbuf_free_ooseq+0x48>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	607b      	str	r3, [r7, #4]
 800d0a6:	e00a      	b.n	800d0be <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d003      	beq.n	800d0b8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f002 fc85 	bl	800f9c0 <tcp_free_ooseq>
      return;
 800d0b6:	e005      	b.n	800d0c4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	607b      	str	r3, [r7, #4]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d1f1      	bne.n	800d0a8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	2000cf65 	.word	0x2000cf65
 800d0d0:	2000cf74 	.word	0x2000cf74

0800d0d4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d0dc:	f7ff ffd4 	bl	800d088 <pbuf_free_ooseq>
}
 800d0e0:	bf00      	nop
 800d0e2:	3708      	adds	r7, #8
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d0ee:	f00c f879 	bl	80191e4 <sys_arch_protect>
 800d0f2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d0f4:	4b0f      	ldr	r3, [pc, #60]	; (800d134 <pbuf_pool_is_empty+0x4c>)
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d0fa:	4b0e      	ldr	r3, [pc, #56]	; (800d134 <pbuf_pool_is_empty+0x4c>)
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f00c f87d 	bl	8019200 <sys_arch_unprotect>

  if (!queued) {
 800d106:	78fb      	ldrb	r3, [r7, #3]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d10f      	bne.n	800d12c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d10c:	2100      	movs	r1, #0
 800d10e:	480a      	ldr	r0, [pc, #40]	; (800d138 <pbuf_pool_is_empty+0x50>)
 800d110:	f7fe fe84 	bl	800be1c <tcpip_try_callback>
 800d114:	4603      	mov	r3, r0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d008      	beq.n	800d12c <pbuf_pool_is_empty+0x44>
 800d11a:	f00c f863 	bl	80191e4 <sys_arch_protect>
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	4b04      	ldr	r3, [pc, #16]	; (800d134 <pbuf_pool_is_empty+0x4c>)
 800d122:	2200      	movs	r2, #0
 800d124:	701a      	strb	r2, [r3, #0]
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f00c f86a 	bl	8019200 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d12c:	bf00      	nop
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	2000cf65 	.word	0x2000cf65
 800d138:	0800d0d5 	.word	0x0800d0d5

0800d13c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b085      	sub	sp, #20
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	4611      	mov	r1, r2
 800d148:	461a      	mov	r2, r3
 800d14a:	460b      	mov	r3, r1
 800d14c:	80fb      	strh	r3, [r7, #6]
 800d14e:	4613      	mov	r3, r2
 800d150:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2200      	movs	r2, #0
 800d156:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	68ba      	ldr	r2, [r7, #8]
 800d15c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	88fa      	ldrh	r2, [r7, #6]
 800d162:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	88ba      	ldrh	r2, [r7, #4]
 800d168:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d16a:	8b3b      	ldrh	r3, [r7, #24]
 800d16c:	b2da      	uxtb	r2, r3
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	7f3a      	ldrb	r2, [r7, #28]
 800d176:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2201      	movs	r2, #1
 800d17c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2200      	movs	r2, #0
 800d182:	73da      	strb	r2, [r3, #15]
}
 800d184:	bf00      	nop
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b08c      	sub	sp, #48	; 0x30
 800d194:	af02      	add	r7, sp, #8
 800d196:	4603      	mov	r3, r0
 800d198:	71fb      	strb	r3, [r7, #7]
 800d19a:	460b      	mov	r3, r1
 800d19c:	80bb      	strh	r3, [r7, #4]
 800d19e:	4613      	mov	r3, r2
 800d1a0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d1a2:	79fb      	ldrb	r3, [r7, #7]
 800d1a4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d1a6:	887b      	ldrh	r3, [r7, #2]
 800d1a8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d1ac:	d07f      	beq.n	800d2ae <pbuf_alloc+0x11e>
 800d1ae:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d1b2:	f300 80c8 	bgt.w	800d346 <pbuf_alloc+0x1b6>
 800d1b6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d1ba:	d010      	beq.n	800d1de <pbuf_alloc+0x4e>
 800d1bc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d1c0:	f300 80c1 	bgt.w	800d346 <pbuf_alloc+0x1b6>
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d002      	beq.n	800d1ce <pbuf_alloc+0x3e>
 800d1c8:	2b41      	cmp	r3, #65	; 0x41
 800d1ca:	f040 80bc 	bne.w	800d346 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d1ce:	887a      	ldrh	r2, [r7, #2]
 800d1d0:	88bb      	ldrh	r3, [r7, #4]
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	f000 f8d1 	bl	800d37c <pbuf_alloc_reference>
 800d1da:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d1dc:	e0bd      	b.n	800d35a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d1e6:	88bb      	ldrh	r3, [r7, #4]
 800d1e8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d1ea:	200c      	movs	r0, #12
 800d1ec:	f7ff fb8e 	bl	800c90c <memp_malloc>
 800d1f0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d109      	bne.n	800d20c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d1f8:	f7ff ff76 	bl	800d0e8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d002      	beq.n	800d208 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d202:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d204:	f000 fada 	bl	800d7bc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d208:	2300      	movs	r3, #0
 800d20a:	e0a7      	b.n	800d35c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d20c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d20e:	3303      	adds	r3, #3
 800d210:	b29b      	uxth	r3, r3
 800d212:	f023 0303 	bic.w	r3, r3, #3
 800d216:	b29b      	uxth	r3, r3
 800d218:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	8b7a      	ldrh	r2, [r7, #26]
 800d220:	4293      	cmp	r3, r2
 800d222:	bf28      	it	cs
 800d224:	4613      	movcs	r3, r2
 800d226:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d228:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d22a:	3310      	adds	r3, #16
 800d22c:	693a      	ldr	r2, [r7, #16]
 800d22e:	4413      	add	r3, r2
 800d230:	3303      	adds	r3, #3
 800d232:	f023 0303 	bic.w	r3, r3, #3
 800d236:	4618      	mov	r0, r3
 800d238:	89f9      	ldrh	r1, [r7, #14]
 800d23a:	8b7a      	ldrh	r2, [r7, #26]
 800d23c:	2300      	movs	r3, #0
 800d23e:	9301      	str	r3, [sp, #4]
 800d240:	887b      	ldrh	r3, [r7, #2]
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	460b      	mov	r3, r1
 800d246:	4601      	mov	r1, r0
 800d248:	6938      	ldr	r0, [r7, #16]
 800d24a:	f7ff ff77 	bl	800d13c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	f003 0303 	and.w	r3, r3, #3
 800d256:	2b00      	cmp	r3, #0
 800d258:	d006      	beq.n	800d268 <pbuf_alloc+0xd8>
 800d25a:	4b42      	ldr	r3, [pc, #264]	; (800d364 <pbuf_alloc+0x1d4>)
 800d25c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d260:	4941      	ldr	r1, [pc, #260]	; (800d368 <pbuf_alloc+0x1d8>)
 800d262:	4842      	ldr	r0, [pc, #264]	; (800d36c <pbuf_alloc+0x1dc>)
 800d264:	f00c fa08 	bl	8019678 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d268:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d26a:	3303      	adds	r3, #3
 800d26c:	f023 0303 	bic.w	r3, r3, #3
 800d270:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d274:	d106      	bne.n	800d284 <pbuf_alloc+0xf4>
 800d276:	4b3b      	ldr	r3, [pc, #236]	; (800d364 <pbuf_alloc+0x1d4>)
 800d278:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d27c:	493c      	ldr	r1, [pc, #240]	; (800d370 <pbuf_alloc+0x1e0>)
 800d27e:	483b      	ldr	r0, [pc, #236]	; (800d36c <pbuf_alloc+0x1dc>)
 800d280:	f00c f9fa 	bl	8019678 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d286:	2b00      	cmp	r3, #0
 800d288:	d102      	bne.n	800d290 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	627b      	str	r3, [r7, #36]	; 0x24
 800d28e:	e002      	b.n	800d296 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	693a      	ldr	r2, [r7, #16]
 800d294:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d29a:	8b7a      	ldrh	r2, [r7, #26]
 800d29c:	89fb      	ldrh	r3, [r7, #14]
 800d29e:	1ad3      	subs	r3, r2, r3
 800d2a0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d2a6:	8b7b      	ldrh	r3, [r7, #26]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d19e      	bne.n	800d1ea <pbuf_alloc+0x5a>
      break;
 800d2ac:	e055      	b.n	800d35a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d2ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2b0:	3303      	adds	r3, #3
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	f023 0303 	bic.w	r3, r3, #3
 800d2b8:	b29a      	uxth	r2, r3
 800d2ba:	88bb      	ldrh	r3, [r7, #4]
 800d2bc:	3303      	adds	r3, #3
 800d2be:	b29b      	uxth	r3, r3
 800d2c0:	f023 0303 	bic.w	r3, r3, #3
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	4413      	add	r3, r2
 800d2c8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d2ca:	8b3b      	ldrh	r3, [r7, #24]
 800d2cc:	3310      	adds	r3, #16
 800d2ce:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d2d0:	8b3a      	ldrh	r2, [r7, #24]
 800d2d2:	88bb      	ldrh	r3, [r7, #4]
 800d2d4:	3303      	adds	r3, #3
 800d2d6:	f023 0303 	bic.w	r3, r3, #3
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d306      	bcc.n	800d2ec <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d2de:	8afa      	ldrh	r2, [r7, #22]
 800d2e0:	88bb      	ldrh	r3, [r7, #4]
 800d2e2:	3303      	adds	r3, #3
 800d2e4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d201      	bcs.n	800d2f0 <pbuf_alloc+0x160>
        return NULL;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	e035      	b.n	800d35c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d2f0:	8afb      	ldrh	r3, [r7, #22]
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7ff f966 	bl	800c5c4 <mem_malloc>
 800d2f8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d101      	bne.n	800d304 <pbuf_alloc+0x174>
        return NULL;
 800d300:	2300      	movs	r3, #0
 800d302:	e02b      	b.n	800d35c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d304:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d306:	3310      	adds	r3, #16
 800d308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d30a:	4413      	add	r3, r2
 800d30c:	3303      	adds	r3, #3
 800d30e:	f023 0303 	bic.w	r3, r3, #3
 800d312:	4618      	mov	r0, r3
 800d314:	88b9      	ldrh	r1, [r7, #4]
 800d316:	88ba      	ldrh	r2, [r7, #4]
 800d318:	2300      	movs	r3, #0
 800d31a:	9301      	str	r3, [sp, #4]
 800d31c:	887b      	ldrh	r3, [r7, #2]
 800d31e:	9300      	str	r3, [sp, #0]
 800d320:	460b      	mov	r3, r1
 800d322:	4601      	mov	r1, r0
 800d324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d326:	f7ff ff09 	bl	800d13c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	f003 0303 	and.w	r3, r3, #3
 800d332:	2b00      	cmp	r3, #0
 800d334:	d010      	beq.n	800d358 <pbuf_alloc+0x1c8>
 800d336:	4b0b      	ldr	r3, [pc, #44]	; (800d364 <pbuf_alloc+0x1d4>)
 800d338:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d33c:	490d      	ldr	r1, [pc, #52]	; (800d374 <pbuf_alloc+0x1e4>)
 800d33e:	480b      	ldr	r0, [pc, #44]	; (800d36c <pbuf_alloc+0x1dc>)
 800d340:	f00c f99a 	bl	8019678 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d344:	e008      	b.n	800d358 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d346:	4b07      	ldr	r3, [pc, #28]	; (800d364 <pbuf_alloc+0x1d4>)
 800d348:	f240 1227 	movw	r2, #295	; 0x127
 800d34c:	490a      	ldr	r1, [pc, #40]	; (800d378 <pbuf_alloc+0x1e8>)
 800d34e:	4807      	ldr	r0, [pc, #28]	; (800d36c <pbuf_alloc+0x1dc>)
 800d350:	f00c f992 	bl	8019678 <iprintf>
      return NULL;
 800d354:	2300      	movs	r3, #0
 800d356:	e001      	b.n	800d35c <pbuf_alloc+0x1cc>
      break;
 800d358:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3728      	adds	r7, #40	; 0x28
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}
 800d364:	0801b9a0 	.word	0x0801b9a0
 800d368:	0801b9d0 	.word	0x0801b9d0
 800d36c:	0801ba00 	.word	0x0801ba00
 800d370:	0801ba28 	.word	0x0801ba28
 800d374:	0801ba5c 	.word	0x0801ba5c
 800d378:	0801ba88 	.word	0x0801ba88

0800d37c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b086      	sub	sp, #24
 800d380:	af02      	add	r7, sp, #8
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	460b      	mov	r3, r1
 800d386:	807b      	strh	r3, [r7, #2]
 800d388:	4613      	mov	r3, r2
 800d38a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d38c:	883b      	ldrh	r3, [r7, #0]
 800d38e:	2b41      	cmp	r3, #65	; 0x41
 800d390:	d009      	beq.n	800d3a6 <pbuf_alloc_reference+0x2a>
 800d392:	883b      	ldrh	r3, [r7, #0]
 800d394:	2b01      	cmp	r3, #1
 800d396:	d006      	beq.n	800d3a6 <pbuf_alloc_reference+0x2a>
 800d398:	4b0f      	ldr	r3, [pc, #60]	; (800d3d8 <pbuf_alloc_reference+0x5c>)
 800d39a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d39e:	490f      	ldr	r1, [pc, #60]	; (800d3dc <pbuf_alloc_reference+0x60>)
 800d3a0:	480f      	ldr	r0, [pc, #60]	; (800d3e0 <pbuf_alloc_reference+0x64>)
 800d3a2:	f00c f969 	bl	8019678 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d3a6:	200b      	movs	r0, #11
 800d3a8:	f7ff fab0 	bl	800c90c <memp_malloc>
 800d3ac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d101      	bne.n	800d3b8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	e00b      	b.n	800d3d0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d3b8:	8879      	ldrh	r1, [r7, #2]
 800d3ba:	887a      	ldrh	r2, [r7, #2]
 800d3bc:	2300      	movs	r3, #0
 800d3be:	9301      	str	r3, [sp, #4]
 800d3c0:	883b      	ldrh	r3, [r7, #0]
 800d3c2:	9300      	str	r3, [sp, #0]
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	6879      	ldr	r1, [r7, #4]
 800d3c8:	68f8      	ldr	r0, [r7, #12]
 800d3ca:	f7ff feb7 	bl	800d13c <pbuf_init_alloced_pbuf>
  return p;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3710      	adds	r7, #16
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	0801b9a0 	.word	0x0801b9a0
 800d3dc:	0801baa4 	.word	0x0801baa4
 800d3e0:	0801ba00 	.word	0x0801ba00

0800d3e4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b088      	sub	sp, #32
 800d3e8:	af02      	add	r7, sp, #8
 800d3ea:	607b      	str	r3, [r7, #4]
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	73fb      	strb	r3, [r7, #15]
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	81bb      	strh	r3, [r7, #12]
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d3f8:	7bfb      	ldrb	r3, [r7, #15]
 800d3fa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d3fc:	8a7b      	ldrh	r3, [r7, #18]
 800d3fe:	3303      	adds	r3, #3
 800d400:	f023 0203 	bic.w	r2, r3, #3
 800d404:	89bb      	ldrh	r3, [r7, #12]
 800d406:	441a      	add	r2, r3
 800d408:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d901      	bls.n	800d412 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d40e:	2300      	movs	r3, #0
 800d410:	e018      	b.n	800d444 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d412:	6a3b      	ldr	r3, [r7, #32]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d007      	beq.n	800d428 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d418:	8a7b      	ldrh	r3, [r7, #18]
 800d41a:	3303      	adds	r3, #3
 800d41c:	f023 0303 	bic.w	r3, r3, #3
 800d420:	6a3a      	ldr	r2, [r7, #32]
 800d422:	4413      	add	r3, r2
 800d424:	617b      	str	r3, [r7, #20]
 800d426:	e001      	b.n	800d42c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d428:	2300      	movs	r3, #0
 800d42a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	89b9      	ldrh	r1, [r7, #12]
 800d430:	89ba      	ldrh	r2, [r7, #12]
 800d432:	2302      	movs	r3, #2
 800d434:	9301      	str	r3, [sp, #4]
 800d436:	897b      	ldrh	r3, [r7, #10]
 800d438:	9300      	str	r3, [sp, #0]
 800d43a:	460b      	mov	r3, r1
 800d43c:	6979      	ldr	r1, [r7, #20]
 800d43e:	f7ff fe7d 	bl	800d13c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d442:	687b      	ldr	r3, [r7, #4]
}
 800d444:	4618      	mov	r0, r3
 800d446:	3718      	adds	r7, #24
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	460b      	mov	r3, r1
 800d456:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d106      	bne.n	800d46c <pbuf_realloc+0x20>
 800d45e:	4b3a      	ldr	r3, [pc, #232]	; (800d548 <pbuf_realloc+0xfc>)
 800d460:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d464:	4939      	ldr	r1, [pc, #228]	; (800d54c <pbuf_realloc+0x100>)
 800d466:	483a      	ldr	r0, [pc, #232]	; (800d550 <pbuf_realloc+0x104>)
 800d468:	f00c f906 	bl	8019678 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	891b      	ldrh	r3, [r3, #8]
 800d470:	887a      	ldrh	r2, [r7, #2]
 800d472:	429a      	cmp	r2, r3
 800d474:	d263      	bcs.n	800d53e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	891a      	ldrh	r2, [r3, #8]
 800d47a:	887b      	ldrh	r3, [r7, #2]
 800d47c:	1ad3      	subs	r3, r2, r3
 800d47e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d480:	887b      	ldrh	r3, [r7, #2]
 800d482:	817b      	strh	r3, [r7, #10]
  q = p;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d488:	e018      	b.n	800d4bc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	895b      	ldrh	r3, [r3, #10]
 800d48e:	897a      	ldrh	r2, [r7, #10]
 800d490:	1ad3      	subs	r3, r2, r3
 800d492:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	891a      	ldrh	r2, [r3, #8]
 800d498:	893b      	ldrh	r3, [r7, #8]
 800d49a:	1ad3      	subs	r3, r2, r3
 800d49c:	b29a      	uxth	r2, r3
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d106      	bne.n	800d4bc <pbuf_realloc+0x70>
 800d4ae:	4b26      	ldr	r3, [pc, #152]	; (800d548 <pbuf_realloc+0xfc>)
 800d4b0:	f240 12af 	movw	r2, #431	; 0x1af
 800d4b4:	4927      	ldr	r1, [pc, #156]	; (800d554 <pbuf_realloc+0x108>)
 800d4b6:	4826      	ldr	r0, [pc, #152]	; (800d550 <pbuf_realloc+0x104>)
 800d4b8:	f00c f8de 	bl	8019678 <iprintf>
  while (rem_len > q->len) {
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	895b      	ldrh	r3, [r3, #10]
 800d4c0:	897a      	ldrh	r2, [r7, #10]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d8e1      	bhi.n	800d48a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	7b1b      	ldrb	r3, [r3, #12]
 800d4ca:	f003 030f 	and.w	r3, r3, #15
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d121      	bne.n	800d516 <pbuf_realloc+0xca>
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	895b      	ldrh	r3, [r3, #10]
 800d4d6:	897a      	ldrh	r2, [r7, #10]
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d01c      	beq.n	800d516 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	7b5b      	ldrb	r3, [r3, #13]
 800d4e0:	f003 0302 	and.w	r3, r3, #2
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d116      	bne.n	800d516 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	685a      	ldr	r2, [r3, #4]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	1ad3      	subs	r3, r2, r3
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	897b      	ldrh	r3, [r7, #10]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	68f8      	ldr	r0, [r7, #12]
 800d4fc:	f7fe ff58 	bl	800c3b0 <mem_trim>
 800d500:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d106      	bne.n	800d516 <pbuf_realloc+0xca>
 800d508:	4b0f      	ldr	r3, [pc, #60]	; (800d548 <pbuf_realloc+0xfc>)
 800d50a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d50e:	4912      	ldr	r1, [pc, #72]	; (800d558 <pbuf_realloc+0x10c>)
 800d510:	480f      	ldr	r0, [pc, #60]	; (800d550 <pbuf_realloc+0x104>)
 800d512:	f00c f8b1 	bl	8019678 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	897a      	ldrh	r2, [r7, #10]
 800d51a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	895a      	ldrh	r2, [r3, #10]
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d004      	beq.n	800d536 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4618      	mov	r0, r3
 800d532:	f000 f943 	bl	800d7bc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2200      	movs	r2, #0
 800d53a:	601a      	str	r2, [r3, #0]
 800d53c:	e000      	b.n	800d540 <pbuf_realloc+0xf4>
    return;
 800d53e:	bf00      	nop

}
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop
 800d548:	0801b9a0 	.word	0x0801b9a0
 800d54c:	0801bab8 	.word	0x0801bab8
 800d550:	0801ba00 	.word	0x0801ba00
 800d554:	0801bad0 	.word	0x0801bad0
 800d558:	0801bae8 	.word	0x0801bae8

0800d55c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b086      	sub	sp, #24
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	4613      	mov	r3, r2
 800d568:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d106      	bne.n	800d57e <pbuf_add_header_impl+0x22>
 800d570:	4b2b      	ldr	r3, [pc, #172]	; (800d620 <pbuf_add_header_impl+0xc4>)
 800d572:	f240 12df 	movw	r2, #479	; 0x1df
 800d576:	492b      	ldr	r1, [pc, #172]	; (800d624 <pbuf_add_header_impl+0xc8>)
 800d578:	482b      	ldr	r0, [pc, #172]	; (800d628 <pbuf_add_header_impl+0xcc>)
 800d57a:	f00c f87d 	bl	8019678 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d003      	beq.n	800d58c <pbuf_add_header_impl+0x30>
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d58a:	d301      	bcc.n	800d590 <pbuf_add_header_impl+0x34>
    return 1;
 800d58c:	2301      	movs	r3, #1
 800d58e:	e043      	b.n	800d618 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d101      	bne.n	800d59a <pbuf_add_header_impl+0x3e>
    return 0;
 800d596:	2300      	movs	r3, #0
 800d598:	e03e      	b.n	800d618 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	891a      	ldrh	r2, [r3, #8]
 800d5a2:	8a7b      	ldrh	r3, [r7, #18]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	8a7a      	ldrh	r2, [r7, #18]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d901      	bls.n	800d5b2 <pbuf_add_header_impl+0x56>
    return 1;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e032      	b.n	800d618 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	7b1b      	ldrb	r3, [r3, #12]
 800d5b6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d5b8:	8a3b      	ldrh	r3, [r7, #16]
 800d5ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d00c      	beq.n	800d5dc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	685a      	ldr	r2, [r3, #4]
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	425b      	negs	r3, r3
 800d5ca:	4413      	add	r3, r2
 800d5cc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	3310      	adds	r3, #16
 800d5d2:	697a      	ldr	r2, [r7, #20]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d20d      	bcs.n	800d5f4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	e01d      	b.n	800d618 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d5dc:	79fb      	ldrb	r3, [r7, #7]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d006      	beq.n	800d5f0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	685a      	ldr	r2, [r3, #4]
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	425b      	negs	r3, r3
 800d5ea:	4413      	add	r3, r2
 800d5ec:	617b      	str	r3, [r7, #20]
 800d5ee:	e001      	b.n	800d5f4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e011      	b.n	800d618 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	697a      	ldr	r2, [r7, #20]
 800d5f8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	895a      	ldrh	r2, [r3, #10]
 800d5fe:	8a7b      	ldrh	r3, [r7, #18]
 800d600:	4413      	add	r3, r2
 800d602:	b29a      	uxth	r2, r3
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	891a      	ldrh	r2, [r3, #8]
 800d60c:	8a7b      	ldrh	r3, [r7, #18]
 800d60e:	4413      	add	r3, r2
 800d610:	b29a      	uxth	r2, r3
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	811a      	strh	r2, [r3, #8]


  return 0;
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3718      	adds	r7, #24
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	0801b9a0 	.word	0x0801b9a0
 800d624:	0801bb04 	.word	0x0801bb04
 800d628:	0801ba00 	.word	0x0801ba00

0800d62c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d636:	2200      	movs	r2, #0
 800d638:	6839      	ldr	r1, [r7, #0]
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f7ff ff8e 	bl	800d55c <pbuf_add_header_impl>
 800d640:	4603      	mov	r3, r0
}
 800d642:	4618      	mov	r0, r3
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
	...

0800d64c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b084      	sub	sp, #16
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d106      	bne.n	800d66a <pbuf_remove_header+0x1e>
 800d65c:	4b20      	ldr	r3, [pc, #128]	; (800d6e0 <pbuf_remove_header+0x94>)
 800d65e:	f240 224b 	movw	r2, #587	; 0x24b
 800d662:	4920      	ldr	r1, [pc, #128]	; (800d6e4 <pbuf_remove_header+0x98>)
 800d664:	4820      	ldr	r0, [pc, #128]	; (800d6e8 <pbuf_remove_header+0x9c>)
 800d666:	f00c f807 	bl	8019678 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d003      	beq.n	800d678 <pbuf_remove_header+0x2c>
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d676:	d301      	bcc.n	800d67c <pbuf_remove_header+0x30>
    return 1;
 800d678:	2301      	movs	r3, #1
 800d67a:	e02c      	b.n	800d6d6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d101      	bne.n	800d686 <pbuf_remove_header+0x3a>
    return 0;
 800d682:	2300      	movs	r3, #0
 800d684:	e027      	b.n	800d6d6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	895b      	ldrh	r3, [r3, #10]
 800d68e:	89fa      	ldrh	r2, [r7, #14]
 800d690:	429a      	cmp	r2, r3
 800d692:	d908      	bls.n	800d6a6 <pbuf_remove_header+0x5a>
 800d694:	4b12      	ldr	r3, [pc, #72]	; (800d6e0 <pbuf_remove_header+0x94>)
 800d696:	f240 2255 	movw	r2, #597	; 0x255
 800d69a:	4914      	ldr	r1, [pc, #80]	; (800d6ec <pbuf_remove_header+0xa0>)
 800d69c:	4812      	ldr	r0, [pc, #72]	; (800d6e8 <pbuf_remove_header+0x9c>)
 800d69e:	f00b ffeb 	bl	8019678 <iprintf>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e017      	b.n	800d6d6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	685a      	ldr	r2, [r3, #4]
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	441a      	add	r2, r3
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	895a      	ldrh	r2, [r3, #10]
 800d6bc:	89fb      	ldrh	r3, [r7, #14]
 800d6be:	1ad3      	subs	r3, r2, r3
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	891a      	ldrh	r2, [r3, #8]
 800d6ca:	89fb      	ldrh	r3, [r7, #14]
 800d6cc:	1ad3      	subs	r3, r2, r3
 800d6ce:	b29a      	uxth	r2, r3
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d6d4:	2300      	movs	r3, #0
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3710      	adds	r7, #16
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	0801b9a0 	.word	0x0801b9a0
 800d6e4:	0801bb04 	.word	0x0801bb04
 800d6e8:	0801ba00 	.word	0x0801ba00
 800d6ec:	0801bb10 	.word	0x0801bb10

0800d6f0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	807b      	strh	r3, [r7, #2]
 800d6fc:	4613      	mov	r3, r2
 800d6fe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d700:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d704:	2b00      	cmp	r3, #0
 800d706:	da08      	bge.n	800d71a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d708:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d70c:	425b      	negs	r3, r3
 800d70e:	4619      	mov	r1, r3
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f7ff ff9b 	bl	800d64c <pbuf_remove_header>
 800d716:	4603      	mov	r3, r0
 800d718:	e007      	b.n	800d72a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d71a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d71e:	787a      	ldrb	r2, [r7, #1]
 800d720:	4619      	mov	r1, r3
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f7ff ff1a 	bl	800d55c <pbuf_add_header_impl>
 800d728:	4603      	mov	r3, r0
  }
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3708      	adds	r7, #8
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d732:	b580      	push	{r7, lr}
 800d734:	b082      	sub	sp, #8
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
 800d73a:	460b      	mov	r3, r1
 800d73c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d73e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d742:	2201      	movs	r2, #1
 800d744:	4619      	mov	r1, r3
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7ff ffd2 	bl	800d6f0 <pbuf_header_impl>
 800d74c:	4603      	mov	r3, r0
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3708      	adds	r7, #8
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800d756:	b580      	push	{r7, lr}
 800d758:	b086      	sub	sp, #24
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
 800d75e:	460b      	mov	r3, r1
 800d760:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800d766:	887b      	ldrh	r3, [r7, #2]
 800d768:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800d76a:	e01c      	b.n	800d7a6 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	895b      	ldrh	r3, [r3, #10]
 800d770:	8a7a      	ldrh	r2, [r7, #18]
 800d772:	429a      	cmp	r2, r3
 800d774:	d310      	bcc.n	800d798 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	895b      	ldrh	r3, [r3, #10]
 800d77e:	8a7a      	ldrh	r2, [r7, #18]
 800d780:	1ad3      	subs	r3, r2, r3
 800d782:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2200      	movs	r2, #0
 800d78e:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	f000 f813 	bl	800d7bc <pbuf_free>
 800d796:	e006      	b.n	800d7a6 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800d798:	8a7b      	ldrh	r3, [r7, #18]
 800d79a:	4619      	mov	r1, r3
 800d79c:	6978      	ldr	r0, [r7, #20]
 800d79e:	f7ff ff55 	bl	800d64c <pbuf_remove_header>
      free_left = 0;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800d7a6:	8a7b      	ldrh	r3, [r7, #18]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d002      	beq.n	800d7b2 <pbuf_free_header+0x5c>
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1dc      	bne.n	800d76c <pbuf_free_header+0x16>
    }
  }
  return p;
 800d7b2:	697b      	ldr	r3, [r7, #20]
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3718      	adds	r7, #24
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b088      	sub	sp, #32
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d10b      	bne.n	800d7e2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d106      	bne.n	800d7de <pbuf_free+0x22>
 800d7d0:	4b3b      	ldr	r3, [pc, #236]	; (800d8c0 <pbuf_free+0x104>)
 800d7d2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d7d6:	493b      	ldr	r1, [pc, #236]	; (800d8c4 <pbuf_free+0x108>)
 800d7d8:	483b      	ldr	r0, [pc, #236]	; (800d8c8 <pbuf_free+0x10c>)
 800d7da:	f00b ff4d 	bl	8019678 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	e069      	b.n	800d8b6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d7e6:	e062      	b.n	800d8ae <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d7e8:	f00b fcfc 	bl	80191e4 <sys_arch_protect>
 800d7ec:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	7b9b      	ldrb	r3, [r3, #14]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d106      	bne.n	800d804 <pbuf_free+0x48>
 800d7f6:	4b32      	ldr	r3, [pc, #200]	; (800d8c0 <pbuf_free+0x104>)
 800d7f8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d7fc:	4933      	ldr	r1, [pc, #204]	; (800d8cc <pbuf_free+0x110>)
 800d7fe:	4832      	ldr	r0, [pc, #200]	; (800d8c8 <pbuf_free+0x10c>)
 800d800:	f00b ff3a 	bl	8019678 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	7b9b      	ldrb	r3, [r3, #14]
 800d808:	3b01      	subs	r3, #1
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	739a      	strb	r2, [r3, #14]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	7b9b      	ldrb	r3, [r3, #14]
 800d814:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d816:	69b8      	ldr	r0, [r7, #24]
 800d818:	f00b fcf2 	bl	8019200 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d81c:	7dfb      	ldrb	r3, [r7, #23]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d143      	bne.n	800d8aa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	7b1b      	ldrb	r3, [r3, #12]
 800d82c:	f003 030f 	and.w	r3, r3, #15
 800d830:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	7b5b      	ldrb	r3, [r3, #13]
 800d836:	f003 0302 	and.w	r3, r3, #2
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d011      	beq.n	800d862 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	691b      	ldr	r3, [r3, #16]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d106      	bne.n	800d858 <pbuf_free+0x9c>
 800d84a:	4b1d      	ldr	r3, [pc, #116]	; (800d8c0 <pbuf_free+0x104>)
 800d84c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d850:	491f      	ldr	r1, [pc, #124]	; (800d8d0 <pbuf_free+0x114>)
 800d852:	481d      	ldr	r0, [pc, #116]	; (800d8c8 <pbuf_free+0x10c>)
 800d854:	f00b ff10 	bl	8019678 <iprintf>
        pc->custom_free_function(p);
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	4798      	blx	r3
 800d860:	e01d      	b.n	800d89e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d862:	7bfb      	ldrb	r3, [r7, #15]
 800d864:	2b02      	cmp	r3, #2
 800d866:	d104      	bne.n	800d872 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d868:	6879      	ldr	r1, [r7, #4]
 800d86a:	200c      	movs	r0, #12
 800d86c:	f7ff f8c4 	bl	800c9f8 <memp_free>
 800d870:	e015      	b.n	800d89e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d872:	7bfb      	ldrb	r3, [r7, #15]
 800d874:	2b01      	cmp	r3, #1
 800d876:	d104      	bne.n	800d882 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d878:	6879      	ldr	r1, [r7, #4]
 800d87a:	200b      	movs	r0, #11
 800d87c:	f7ff f8bc 	bl	800c9f8 <memp_free>
 800d880:	e00d      	b.n	800d89e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d882:	7bfb      	ldrb	r3, [r7, #15]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d103      	bne.n	800d890 <pbuf_free+0xd4>
          mem_free(p);
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f7fe fd01 	bl	800c290 <mem_free>
 800d88e:	e006      	b.n	800d89e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d890:	4b0b      	ldr	r3, [pc, #44]	; (800d8c0 <pbuf_free+0x104>)
 800d892:	f240 320f 	movw	r2, #783	; 0x30f
 800d896:	490f      	ldr	r1, [pc, #60]	; (800d8d4 <pbuf_free+0x118>)
 800d898:	480b      	ldr	r0, [pc, #44]	; (800d8c8 <pbuf_free+0x10c>)
 800d89a:	f00b feed 	bl	8019678 <iprintf>
        }
      }
      count++;
 800d89e:	7ffb      	ldrb	r3, [r7, #31]
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	607b      	str	r3, [r7, #4]
 800d8a8:	e001      	b.n	800d8ae <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d199      	bne.n	800d7e8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d8b4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3720      	adds	r7, #32
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	0801b9a0 	.word	0x0801b9a0
 800d8c4:	0801bb04 	.word	0x0801bb04
 800d8c8:	0801ba00 	.word	0x0801ba00
 800d8cc:	0801bb30 	.word	0x0801bb30
 800d8d0:	0801bb48 	.word	0x0801bb48
 800d8d4:	0801bb6c 	.word	0x0801bb6c

0800d8d8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d8e4:	e005      	b.n	800d8f2 <pbuf_clen+0x1a>
    ++len;
 800d8e6:	89fb      	ldrh	r3, [r7, #14]
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d1f6      	bne.n	800d8e6 <pbuf_clen+0xe>
  }
  return len;
 800d8f8:	89fb      	ldrh	r3, [r7, #14]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3714      	adds	r7, #20
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr
	...

0800d908 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d016      	beq.n	800d944 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d916:	f00b fc65 	bl	80191e4 <sys_arch_protect>
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	7b9b      	ldrb	r3, [r3, #14]
 800d920:	3301      	adds	r3, #1
 800d922:	b2da      	uxtb	r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	739a      	strb	r2, [r3, #14]
 800d928:	68f8      	ldr	r0, [r7, #12]
 800d92a:	f00b fc69 	bl	8019200 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	7b9b      	ldrb	r3, [r3, #14]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d106      	bne.n	800d944 <pbuf_ref+0x3c>
 800d936:	4b05      	ldr	r3, [pc, #20]	; (800d94c <pbuf_ref+0x44>)
 800d938:	f240 3242 	movw	r2, #834	; 0x342
 800d93c:	4904      	ldr	r1, [pc, #16]	; (800d950 <pbuf_ref+0x48>)
 800d93e:	4805      	ldr	r0, [pc, #20]	; (800d954 <pbuf_ref+0x4c>)
 800d940:	f00b fe9a 	bl	8019678 <iprintf>
  }
}
 800d944:	bf00      	nop
 800d946:	3710      	adds	r7, #16
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}
 800d94c:	0801b9a0 	.word	0x0801b9a0
 800d950:	0801bb80 	.word	0x0801bb80
 800d954:	0801ba00 	.word	0x0801ba00

0800d958 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d002      	beq.n	800d96e <pbuf_cat+0x16>
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d107      	bne.n	800d97e <pbuf_cat+0x26>
 800d96e:	4b20      	ldr	r3, [pc, #128]	; (800d9f0 <pbuf_cat+0x98>)
 800d970:	f240 3259 	movw	r2, #857	; 0x359
 800d974:	491f      	ldr	r1, [pc, #124]	; (800d9f4 <pbuf_cat+0x9c>)
 800d976:	4820      	ldr	r0, [pc, #128]	; (800d9f8 <pbuf_cat+0xa0>)
 800d978:	f00b fe7e 	bl	8019678 <iprintf>
 800d97c:	e034      	b.n	800d9e8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	60fb      	str	r3, [r7, #12]
 800d982:	e00a      	b.n	800d99a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	891a      	ldrh	r2, [r3, #8]
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	891b      	ldrh	r3, [r3, #8]
 800d98c:	4413      	add	r3, r2
 800d98e:	b29a      	uxth	r2, r3
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	60fb      	str	r3, [r7, #12]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d1f0      	bne.n	800d984 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	891a      	ldrh	r2, [r3, #8]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	895b      	ldrh	r3, [r3, #10]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d006      	beq.n	800d9bc <pbuf_cat+0x64>
 800d9ae:	4b10      	ldr	r3, [pc, #64]	; (800d9f0 <pbuf_cat+0x98>)
 800d9b0:	f240 3262 	movw	r2, #866	; 0x362
 800d9b4:	4911      	ldr	r1, [pc, #68]	; (800d9fc <pbuf_cat+0xa4>)
 800d9b6:	4810      	ldr	r0, [pc, #64]	; (800d9f8 <pbuf_cat+0xa0>)
 800d9b8:	f00b fe5e 	bl	8019678 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d006      	beq.n	800d9d2 <pbuf_cat+0x7a>
 800d9c4:	4b0a      	ldr	r3, [pc, #40]	; (800d9f0 <pbuf_cat+0x98>)
 800d9c6:	f240 3263 	movw	r2, #867	; 0x363
 800d9ca:	490d      	ldr	r1, [pc, #52]	; (800da00 <pbuf_cat+0xa8>)
 800d9cc:	480a      	ldr	r0, [pc, #40]	; (800d9f8 <pbuf_cat+0xa0>)
 800d9ce:	f00b fe53 	bl	8019678 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	891a      	ldrh	r2, [r3, #8]
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	891b      	ldrh	r3, [r3, #8]
 800d9da:	4413      	add	r3, r2
 800d9dc:	b29a      	uxth	r2, r3
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	683a      	ldr	r2, [r7, #0]
 800d9e6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d9e8:	3710      	adds	r7, #16
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	0801b9a0 	.word	0x0801b9a0
 800d9f4:	0801bb94 	.word	0x0801bb94
 800d9f8:	0801ba00 	.word	0x0801ba00
 800d9fc:	0801bbcc 	.word	0x0801bbcc
 800da00:	0801bbfc 	.word	0x0801bbfc

0800da04 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800da0e:	6839      	ldr	r1, [r7, #0]
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f7ff ffa1 	bl	800d958 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800da16:	6838      	ldr	r0, [r7, #0]
 800da18:	f7ff ff76 	bl	800d908 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800da1c:	bf00      	nop
 800da1e:	3708      	adds	r7, #8
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}

0800da24 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b086      	sub	sp, #24
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800da2e:	2300      	movs	r3, #0
 800da30:	617b      	str	r3, [r7, #20]
 800da32:	2300      	movs	r3, #0
 800da34:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d008      	beq.n	800da4e <pbuf_copy+0x2a>
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d005      	beq.n	800da4e <pbuf_copy+0x2a>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	891a      	ldrh	r2, [r3, #8]
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	891b      	ldrh	r3, [r3, #8]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d209      	bcs.n	800da62 <pbuf_copy+0x3e>
 800da4e:	4b57      	ldr	r3, [pc, #348]	; (800dbac <pbuf_copy+0x188>)
 800da50:	f240 32c9 	movw	r2, #969	; 0x3c9
 800da54:	4956      	ldr	r1, [pc, #344]	; (800dbb0 <pbuf_copy+0x18c>)
 800da56:	4857      	ldr	r0, [pc, #348]	; (800dbb4 <pbuf_copy+0x190>)
 800da58:	f00b fe0e 	bl	8019678 <iprintf>
 800da5c:	f06f 030f 	mvn.w	r3, #15
 800da60:	e09f      	b.n	800dba2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	895b      	ldrh	r3, [r3, #10]
 800da66:	461a      	mov	r2, r3
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	1ad2      	subs	r2, r2, r3
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	895b      	ldrh	r3, [r3, #10]
 800da70:	4619      	mov	r1, r3
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	1acb      	subs	r3, r1, r3
 800da76:	429a      	cmp	r2, r3
 800da78:	d306      	bcc.n	800da88 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	895b      	ldrh	r3, [r3, #10]
 800da7e:	461a      	mov	r2, r3
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	60fb      	str	r3, [r7, #12]
 800da86:	e005      	b.n	800da94 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	895b      	ldrh	r3, [r3, #10]
 800da8c:	461a      	mov	r2, r3
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	1ad3      	subs	r3, r2, r3
 800da92:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	685a      	ldr	r2, [r3, #4]
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	18d0      	adds	r0, r2, r3
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	685a      	ldr	r2, [r3, #4]
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	4413      	add	r3, r2
 800daa4:	68fa      	ldr	r2, [r7, #12]
 800daa6:	4619      	mov	r1, r3
 800daa8:	f00b fcf0 	bl	801948c <memcpy>
    offset_to += len;
 800daac:	697a      	ldr	r2, [r7, #20]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	4413      	add	r3, r2
 800dab2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800dab4:	693a      	ldr	r2, [r7, #16]
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	4413      	add	r3, r2
 800daba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	895b      	ldrh	r3, [r3, #10]
 800dac0:	461a      	mov	r2, r3
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d906      	bls.n	800dad6 <pbuf_copy+0xb2>
 800dac8:	4b38      	ldr	r3, [pc, #224]	; (800dbac <pbuf_copy+0x188>)
 800daca:	f240 32d9 	movw	r2, #985	; 0x3d9
 800dace:	493a      	ldr	r1, [pc, #232]	; (800dbb8 <pbuf_copy+0x194>)
 800dad0:	4838      	ldr	r0, [pc, #224]	; (800dbb4 <pbuf_copy+0x190>)
 800dad2:	f00b fdd1 	bl	8019678 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	895b      	ldrh	r3, [r3, #10]
 800dada:	461a      	mov	r2, r3
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	4293      	cmp	r3, r2
 800dae0:	d906      	bls.n	800daf0 <pbuf_copy+0xcc>
 800dae2:	4b32      	ldr	r3, [pc, #200]	; (800dbac <pbuf_copy+0x188>)
 800dae4:	f240 32da 	movw	r2, #986	; 0x3da
 800dae8:	4934      	ldr	r1, [pc, #208]	; (800dbbc <pbuf_copy+0x198>)
 800daea:	4832      	ldr	r0, [pc, #200]	; (800dbb4 <pbuf_copy+0x190>)
 800daec:	f00b fdc4 	bl	8019678 <iprintf>
    if (offset_from >= p_from->len) {
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	895b      	ldrh	r3, [r3, #10]
 800daf4:	461a      	mov	r2, r3
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	4293      	cmp	r3, r2
 800dafa:	d304      	bcc.n	800db06 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800dafc:	2300      	movs	r3, #0
 800dafe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	895b      	ldrh	r3, [r3, #10]
 800db0a:	461a      	mov	r2, r3
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	4293      	cmp	r3, r2
 800db10:	d114      	bne.n	800db3c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800db12:	2300      	movs	r3, #0
 800db14:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d10c      	bne.n	800db3c <pbuf_copy+0x118>
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d009      	beq.n	800db3c <pbuf_copy+0x118>
 800db28:	4b20      	ldr	r3, [pc, #128]	; (800dbac <pbuf_copy+0x188>)
 800db2a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800db2e:	4924      	ldr	r1, [pc, #144]	; (800dbc0 <pbuf_copy+0x19c>)
 800db30:	4820      	ldr	r0, [pc, #128]	; (800dbb4 <pbuf_copy+0x190>)
 800db32:	f00b fda1 	bl	8019678 <iprintf>
 800db36:	f06f 030f 	mvn.w	r3, #15
 800db3a:	e032      	b.n	800dba2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d013      	beq.n	800db6a <pbuf_copy+0x146>
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	895a      	ldrh	r2, [r3, #10]
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	891b      	ldrh	r3, [r3, #8]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d10d      	bne.n	800db6a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d009      	beq.n	800db6a <pbuf_copy+0x146>
 800db56:	4b15      	ldr	r3, [pc, #84]	; (800dbac <pbuf_copy+0x188>)
 800db58:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800db5c:	4919      	ldr	r1, [pc, #100]	; (800dbc4 <pbuf_copy+0x1a0>)
 800db5e:	4815      	ldr	r0, [pc, #84]	; (800dbb4 <pbuf_copy+0x190>)
 800db60:	f00b fd8a 	bl	8019678 <iprintf>
 800db64:	f06f 0305 	mvn.w	r3, #5
 800db68:	e01b      	b.n	800dba2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d013      	beq.n	800db98 <pbuf_copy+0x174>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	895a      	ldrh	r2, [r3, #10]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	891b      	ldrh	r3, [r3, #8]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d10d      	bne.n	800db98 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d009      	beq.n	800db98 <pbuf_copy+0x174>
 800db84:	4b09      	ldr	r3, [pc, #36]	; (800dbac <pbuf_copy+0x188>)
 800db86:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800db8a:	490e      	ldr	r1, [pc, #56]	; (800dbc4 <pbuf_copy+0x1a0>)
 800db8c:	4809      	ldr	r0, [pc, #36]	; (800dbb4 <pbuf_copy+0x190>)
 800db8e:	f00b fd73 	bl	8019678 <iprintf>
 800db92:	f06f 0305 	mvn.w	r3, #5
 800db96:	e004      	b.n	800dba2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	f47f af61 	bne.w	800da62 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800dba0:	2300      	movs	r3, #0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3718      	adds	r7, #24
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	0801b9a0 	.word	0x0801b9a0
 800dbb0:	0801bc48 	.word	0x0801bc48
 800dbb4:	0801ba00 	.word	0x0801ba00
 800dbb8:	0801bc78 	.word	0x0801bc78
 800dbbc:	0801bc90 	.word	0x0801bc90
 800dbc0:	0801bcac 	.word	0x0801bcac
 800dbc4:	0801bcbc 	.word	0x0801bcbc

0800dbc8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b088      	sub	sp, #32
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	4611      	mov	r1, r2
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	460b      	mov	r3, r1
 800dbd8:	80fb      	strh	r3, [r7, #6]
 800dbda:	4613      	mov	r3, r2
 800dbdc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d108      	bne.n	800dbfe <pbuf_copy_partial+0x36>
 800dbec:	4b2b      	ldr	r3, [pc, #172]	; (800dc9c <pbuf_copy_partial+0xd4>)
 800dbee:	f240 420a 	movw	r2, #1034	; 0x40a
 800dbf2:	492b      	ldr	r1, [pc, #172]	; (800dca0 <pbuf_copy_partial+0xd8>)
 800dbf4:	482b      	ldr	r0, [pc, #172]	; (800dca4 <pbuf_copy_partial+0xdc>)
 800dbf6:	f00b fd3f 	bl	8019678 <iprintf>
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	e04a      	b.n	800dc94 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d108      	bne.n	800dc16 <pbuf_copy_partial+0x4e>
 800dc04:	4b25      	ldr	r3, [pc, #148]	; (800dc9c <pbuf_copy_partial+0xd4>)
 800dc06:	f240 420b 	movw	r2, #1035	; 0x40b
 800dc0a:	4927      	ldr	r1, [pc, #156]	; (800dca8 <pbuf_copy_partial+0xe0>)
 800dc0c:	4825      	ldr	r0, [pc, #148]	; (800dca4 <pbuf_copy_partial+0xdc>)
 800dc0e:	f00b fd33 	bl	8019678 <iprintf>
 800dc12:	2300      	movs	r3, #0
 800dc14:	e03e      	b.n	800dc94 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	61fb      	str	r3, [r7, #28]
 800dc1a:	e034      	b.n	800dc86 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800dc1c:	88bb      	ldrh	r3, [r7, #4]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00a      	beq.n	800dc38 <pbuf_copy_partial+0x70>
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	895b      	ldrh	r3, [r3, #10]
 800dc26:	88ba      	ldrh	r2, [r7, #4]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d305      	bcc.n	800dc38 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	895b      	ldrh	r3, [r3, #10]
 800dc30:	88ba      	ldrh	r2, [r7, #4]
 800dc32:	1ad3      	subs	r3, r2, r3
 800dc34:	80bb      	strh	r3, [r7, #4]
 800dc36:	e023      	b.n	800dc80 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	895a      	ldrh	r2, [r3, #10]
 800dc3c:	88bb      	ldrh	r3, [r7, #4]
 800dc3e:	1ad3      	subs	r3, r2, r3
 800dc40:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800dc42:	8b3a      	ldrh	r2, [r7, #24]
 800dc44:	88fb      	ldrh	r3, [r7, #6]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d901      	bls.n	800dc4e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800dc4a:	88fb      	ldrh	r3, [r7, #6]
 800dc4c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800dc4e:	8b7b      	ldrh	r3, [r7, #26]
 800dc50:	68ba      	ldr	r2, [r7, #8]
 800dc52:	18d0      	adds	r0, r2, r3
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	685a      	ldr	r2, [r3, #4]
 800dc58:	88bb      	ldrh	r3, [r7, #4]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	8b3a      	ldrh	r2, [r7, #24]
 800dc5e:	4619      	mov	r1, r3
 800dc60:	f00b fc14 	bl	801948c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800dc64:	8afa      	ldrh	r2, [r7, #22]
 800dc66:	8b3b      	ldrh	r3, [r7, #24]
 800dc68:	4413      	add	r3, r2
 800dc6a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800dc6c:	8b7a      	ldrh	r2, [r7, #26]
 800dc6e:	8b3b      	ldrh	r3, [r7, #24]
 800dc70:	4413      	add	r3, r2
 800dc72:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800dc74:	88fa      	ldrh	r2, [r7, #6]
 800dc76:	8b3b      	ldrh	r3, [r7, #24]
 800dc78:	1ad3      	subs	r3, r2, r3
 800dc7a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	61fb      	str	r3, [r7, #28]
 800dc86:	88fb      	ldrh	r3, [r7, #6]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d002      	beq.n	800dc92 <pbuf_copy_partial+0xca>
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d1c4      	bne.n	800dc1c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800dc92:	8afb      	ldrh	r3, [r7, #22]
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3720      	adds	r7, #32
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	0801b9a0 	.word	0x0801b9a0
 800dca0:	0801bce8 	.word	0x0801bce8
 800dca4:	0801ba00 	.word	0x0801ba00
 800dca8:	0801bd08 	.word	0x0801bd08

0800dcac <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	603a      	str	r2, [r7, #0]
 800dcb6:	71fb      	strb	r3, [r7, #7]
 800dcb8:	460b      	mov	r3, r1
 800dcba:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	8919      	ldrh	r1, [r3, #8]
 800dcc0:	88ba      	ldrh	r2, [r7, #4]
 800dcc2:	79fb      	ldrb	r3, [r7, #7]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7ff fa63 	bl	800d190 <pbuf_alloc>
 800dcca:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d101      	bne.n	800dcd6 <pbuf_clone+0x2a>
    return NULL;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	e011      	b.n	800dcfa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800dcd6:	6839      	ldr	r1, [r7, #0]
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	f7ff fea3 	bl	800da24 <pbuf_copy>
 800dcde:	4603      	mov	r3, r0
 800dce0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800dce2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d006      	beq.n	800dcf8 <pbuf_clone+0x4c>
 800dcea:	4b06      	ldr	r3, [pc, #24]	; (800dd04 <pbuf_clone+0x58>)
 800dcec:	f240 5224 	movw	r2, #1316	; 0x524
 800dcf0:	4905      	ldr	r1, [pc, #20]	; (800dd08 <pbuf_clone+0x5c>)
 800dcf2:	4806      	ldr	r0, [pc, #24]	; (800dd0c <pbuf_clone+0x60>)
 800dcf4:	f00b fcc0 	bl	8019678 <iprintf>
  return q;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3710      	adds	r7, #16
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	0801b9a0 	.word	0x0801b9a0
 800dd08:	0801be14 	.word	0x0801be14
 800dd0c:	0801ba00 	.word	0x0801ba00

0800dd10 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dd14:	f00b fd3e 	bl	8019794 <rand>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	4b01      	ldr	r3, [pc, #4]	; (800dd30 <tcp_init+0x20>)
 800dd2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800dd2c:	bf00      	nop
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	20000024 	.word	0x20000024

0800dd34 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	7d1b      	ldrb	r3, [r3, #20]
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	d105      	bne.n	800dd50 <tcp_free+0x1c>
 800dd44:	4b06      	ldr	r3, [pc, #24]	; (800dd60 <tcp_free+0x2c>)
 800dd46:	22d4      	movs	r2, #212	; 0xd4
 800dd48:	4906      	ldr	r1, [pc, #24]	; (800dd64 <tcp_free+0x30>)
 800dd4a:	4807      	ldr	r0, [pc, #28]	; (800dd68 <tcp_free+0x34>)
 800dd4c:	f00b fc94 	bl	8019678 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800dd50:	6879      	ldr	r1, [r7, #4]
 800dd52:	2001      	movs	r0, #1
 800dd54:	f7fe fe50 	bl	800c9f8 <memp_free>
}
 800dd58:	bf00      	nop
 800dd5a:	3708      	adds	r7, #8
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}
 800dd60:	0801bea0 	.word	0x0801bea0
 800dd64:	0801bed0 	.word	0x0801bed0
 800dd68:	0801bee4 	.word	0x0801bee4

0800dd6c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	7d1b      	ldrb	r3, [r3, #20]
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d105      	bne.n	800dd88 <tcp_free_listen+0x1c>
 800dd7c:	4b06      	ldr	r3, [pc, #24]	; (800dd98 <tcp_free_listen+0x2c>)
 800dd7e:	22df      	movs	r2, #223	; 0xdf
 800dd80:	4906      	ldr	r1, [pc, #24]	; (800dd9c <tcp_free_listen+0x30>)
 800dd82:	4807      	ldr	r0, [pc, #28]	; (800dda0 <tcp_free_listen+0x34>)
 800dd84:	f00b fc78 	bl	8019678 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800dd88:	6879      	ldr	r1, [r7, #4]
 800dd8a:	2002      	movs	r0, #2
 800dd8c:	f7fe fe34 	bl	800c9f8 <memp_free>
}
 800dd90:	bf00      	nop
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	0801bea0 	.word	0x0801bea0
 800dd9c:	0801bf0c 	.word	0x0801bf0c
 800dda0:	0801bee4 	.word	0x0801bee4

0800dda4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800dda8:	f001 f8a6 	bl	800eef8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ddac:	4b07      	ldr	r3, [pc, #28]	; (800ddcc <tcp_tmr+0x28>)
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	b2da      	uxtb	r2, r3
 800ddb4:	4b05      	ldr	r3, [pc, #20]	; (800ddcc <tcp_tmr+0x28>)
 800ddb6:	701a      	strb	r2, [r3, #0]
 800ddb8:	4b04      	ldr	r3, [pc, #16]	; (800ddcc <tcp_tmr+0x28>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	f003 0301 	and.w	r3, r3, #1
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d001      	beq.n	800ddc8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ddc4:	f000 fd58 	bl	800e878 <tcp_slowtmr>
  }
}
 800ddc8:	bf00      	nop
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	2000cf7d 	.word	0x2000cf7d

0800ddd0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d105      	bne.n	800ddec <tcp_remove_listener+0x1c>
 800dde0:	4b0d      	ldr	r3, [pc, #52]	; (800de18 <tcp_remove_listener+0x48>)
 800dde2:	22ff      	movs	r2, #255	; 0xff
 800dde4:	490d      	ldr	r1, [pc, #52]	; (800de1c <tcp_remove_listener+0x4c>)
 800dde6:	480e      	ldr	r0, [pc, #56]	; (800de20 <tcp_remove_listener+0x50>)
 800dde8:	f00b fc46 	bl	8019678 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	60fb      	str	r3, [r7, #12]
 800ddf0:	e00a      	b.n	800de08 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddf6:	683a      	ldr	r2, [r7, #0]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d102      	bne.n	800de02 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2200      	movs	r2, #0
 800de00:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	68db      	ldr	r3, [r3, #12]
 800de06:	60fb      	str	r3, [r7, #12]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d1f1      	bne.n	800ddf2 <tcp_remove_listener+0x22>
    }
  }
}
 800de0e:	bf00      	nop
 800de10:	bf00      	nop
 800de12:	3710      	adds	r7, #16
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}
 800de18:	0801bea0 	.word	0x0801bea0
 800de1c:	0801bf28 	.word	0x0801bf28
 800de20:	0801bee4 	.word	0x0801bee4

0800de24 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b084      	sub	sp, #16
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d106      	bne.n	800de40 <tcp_listen_closed+0x1c>
 800de32:	4b14      	ldr	r3, [pc, #80]	; (800de84 <tcp_listen_closed+0x60>)
 800de34:	f240 1211 	movw	r2, #273	; 0x111
 800de38:	4913      	ldr	r1, [pc, #76]	; (800de88 <tcp_listen_closed+0x64>)
 800de3a:	4814      	ldr	r0, [pc, #80]	; (800de8c <tcp_listen_closed+0x68>)
 800de3c:	f00b fc1c 	bl	8019678 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	7d1b      	ldrb	r3, [r3, #20]
 800de44:	2b01      	cmp	r3, #1
 800de46:	d006      	beq.n	800de56 <tcp_listen_closed+0x32>
 800de48:	4b0e      	ldr	r3, [pc, #56]	; (800de84 <tcp_listen_closed+0x60>)
 800de4a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800de4e:	4910      	ldr	r1, [pc, #64]	; (800de90 <tcp_listen_closed+0x6c>)
 800de50:	480e      	ldr	r0, [pc, #56]	; (800de8c <tcp_listen_closed+0x68>)
 800de52:	f00b fc11 	bl	8019678 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800de56:	2301      	movs	r3, #1
 800de58:	60fb      	str	r3, [r7, #12]
 800de5a:	e00b      	b.n	800de74 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800de5c:	4a0d      	ldr	r2, [pc, #52]	; (800de94 <tcp_listen_closed+0x70>)
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	6879      	ldr	r1, [r7, #4]
 800de68:	4618      	mov	r0, r3
 800de6a:	f7ff ffb1 	bl	800ddd0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	3301      	adds	r3, #1
 800de72:	60fb      	str	r3, [r7, #12]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2b03      	cmp	r3, #3
 800de78:	d9f0      	bls.n	800de5c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800de7a:	bf00      	nop
 800de7c:	bf00      	nop
 800de7e:	3710      	adds	r7, #16
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	0801bea0 	.word	0x0801bea0
 800de88:	0801bf50 	.word	0x0801bf50
 800de8c:	0801bee4 	.word	0x0801bee4
 800de90:	0801bf5c 	.word	0x0801bf5c
 800de94:	0801e2cc 	.word	0x0801e2cc

0800de98 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800de98:	b5b0      	push	{r4, r5, r7, lr}
 800de9a:	b088      	sub	sp, #32
 800de9c:	af04      	add	r7, sp, #16
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	460b      	mov	r3, r1
 800dea2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d106      	bne.n	800deb8 <tcp_close_shutdown+0x20>
 800deaa:	4b63      	ldr	r3, [pc, #396]	; (800e038 <tcp_close_shutdown+0x1a0>)
 800deac:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800deb0:	4962      	ldr	r1, [pc, #392]	; (800e03c <tcp_close_shutdown+0x1a4>)
 800deb2:	4863      	ldr	r0, [pc, #396]	; (800e040 <tcp_close_shutdown+0x1a8>)
 800deb4:	f00b fbe0 	bl	8019678 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800deb8:	78fb      	ldrb	r3, [r7, #3]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d066      	beq.n	800df8c <tcp_close_shutdown+0xf4>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	7d1b      	ldrb	r3, [r3, #20]
 800dec2:	2b04      	cmp	r3, #4
 800dec4:	d003      	beq.n	800dece <tcp_close_shutdown+0x36>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	7d1b      	ldrb	r3, [r3, #20]
 800deca:	2b07      	cmp	r3, #7
 800decc:	d15e      	bne.n	800df8c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d104      	bne.n	800dee0 <tcp_close_shutdown+0x48>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800deda:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dede:	d055      	beq.n	800df8c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	8b5b      	ldrh	r3, [r3, #26]
 800dee4:	f003 0310 	and.w	r3, r3, #16
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d106      	bne.n	800defa <tcp_close_shutdown+0x62>
 800deec:	4b52      	ldr	r3, [pc, #328]	; (800e038 <tcp_close_shutdown+0x1a0>)
 800deee:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800def2:	4954      	ldr	r1, [pc, #336]	; (800e044 <tcp_close_shutdown+0x1ac>)
 800def4:	4852      	ldr	r0, [pc, #328]	; (800e040 <tcp_close_shutdown+0x1a8>)
 800def6:	f00b fbbf 	bl	8019678 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800df02:	687d      	ldr	r5, [r7, #4]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	3304      	adds	r3, #4
 800df08:	687a      	ldr	r2, [r7, #4]
 800df0a:	8ad2      	ldrh	r2, [r2, #22]
 800df0c:	6879      	ldr	r1, [r7, #4]
 800df0e:	8b09      	ldrh	r1, [r1, #24]
 800df10:	9102      	str	r1, [sp, #8]
 800df12:	9201      	str	r2, [sp, #4]
 800df14:	9300      	str	r3, [sp, #0]
 800df16:	462b      	mov	r3, r5
 800df18:	4622      	mov	r2, r4
 800df1a:	4601      	mov	r1, r0
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f005 fdbb 	bl	8013a98 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f001 fb98 	bl	800f658 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800df28:	4b47      	ldr	r3, [pc, #284]	; (800e048 <tcp_close_shutdown+0x1b0>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d105      	bne.n	800df3e <tcp_close_shutdown+0xa6>
 800df32:	4b45      	ldr	r3, [pc, #276]	; (800e048 <tcp_close_shutdown+0x1b0>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	4a43      	ldr	r2, [pc, #268]	; (800e048 <tcp_close_shutdown+0x1b0>)
 800df3a:	6013      	str	r3, [r2, #0]
 800df3c:	e013      	b.n	800df66 <tcp_close_shutdown+0xce>
 800df3e:	4b42      	ldr	r3, [pc, #264]	; (800e048 <tcp_close_shutdown+0x1b0>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	60fb      	str	r3, [r7, #12]
 800df44:	e00c      	b.n	800df60 <tcp_close_shutdown+0xc8>
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	68db      	ldr	r3, [r3, #12]
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d104      	bne.n	800df5a <tcp_close_shutdown+0xc2>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	68da      	ldr	r2, [r3, #12]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	60da      	str	r2, [r3, #12]
 800df58:	e005      	b.n	800df66 <tcp_close_shutdown+0xce>
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	60fb      	str	r3, [r7, #12]
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d1ef      	bne.n	800df46 <tcp_close_shutdown+0xae>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2200      	movs	r2, #0
 800df6a:	60da      	str	r2, [r3, #12]
 800df6c:	4b37      	ldr	r3, [pc, #220]	; (800e04c <tcp_close_shutdown+0x1b4>)
 800df6e:	2201      	movs	r2, #1
 800df70:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800df72:	4b37      	ldr	r3, [pc, #220]	; (800e050 <tcp_close_shutdown+0x1b8>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d102      	bne.n	800df82 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800df7c:	f004 f830 	bl	8011fe0 <tcp_trigger_input_pcb_close>
 800df80:	e002      	b.n	800df88 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7ff fed6 	bl	800dd34 <tcp_free>
      }
      return ERR_OK;
 800df88:	2300      	movs	r3, #0
 800df8a:	e050      	b.n	800e02e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	7d1b      	ldrb	r3, [r3, #20]
 800df90:	2b02      	cmp	r3, #2
 800df92:	d03b      	beq.n	800e00c <tcp_close_shutdown+0x174>
 800df94:	2b02      	cmp	r3, #2
 800df96:	dc44      	bgt.n	800e022 <tcp_close_shutdown+0x18a>
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d002      	beq.n	800dfa2 <tcp_close_shutdown+0x10a>
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d02a      	beq.n	800dff6 <tcp_close_shutdown+0x15e>
 800dfa0:	e03f      	b.n	800e022 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	8adb      	ldrh	r3, [r3, #22]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d021      	beq.n	800dfee <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dfaa:	4b2a      	ldr	r3, [pc, #168]	; (800e054 <tcp_close_shutdown+0x1bc>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d105      	bne.n	800dfc0 <tcp_close_shutdown+0x128>
 800dfb4:	4b27      	ldr	r3, [pc, #156]	; (800e054 <tcp_close_shutdown+0x1bc>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	68db      	ldr	r3, [r3, #12]
 800dfba:	4a26      	ldr	r2, [pc, #152]	; (800e054 <tcp_close_shutdown+0x1bc>)
 800dfbc:	6013      	str	r3, [r2, #0]
 800dfbe:	e013      	b.n	800dfe8 <tcp_close_shutdown+0x150>
 800dfc0:	4b24      	ldr	r3, [pc, #144]	; (800e054 <tcp_close_shutdown+0x1bc>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	60bb      	str	r3, [r7, #8]
 800dfc6:	e00c      	b.n	800dfe2 <tcp_close_shutdown+0x14a>
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	68db      	ldr	r3, [r3, #12]
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d104      	bne.n	800dfdc <tcp_close_shutdown+0x144>
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	68da      	ldr	r2, [r3, #12]
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	60da      	str	r2, [r3, #12]
 800dfda:	e005      	b.n	800dfe8 <tcp_close_shutdown+0x150>
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	60bb      	str	r3, [r7, #8]
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d1ef      	bne.n	800dfc8 <tcp_close_shutdown+0x130>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2200      	movs	r2, #0
 800dfec:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f7ff fea0 	bl	800dd34 <tcp_free>
      break;
 800dff4:	e01a      	b.n	800e02c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f7ff ff14 	bl	800de24 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800dffc:	6879      	ldr	r1, [r7, #4]
 800dffe:	4816      	ldr	r0, [pc, #88]	; (800e058 <tcp_close_shutdown+0x1c0>)
 800e000:	f001 fb7a 	bl	800f6f8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7ff feb1 	bl	800dd6c <tcp_free_listen>
      break;
 800e00a:	e00f      	b.n	800e02c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e00c:	6879      	ldr	r1, [r7, #4]
 800e00e:	480e      	ldr	r0, [pc, #56]	; (800e048 <tcp_close_shutdown+0x1b0>)
 800e010:	f001 fb72 	bl	800f6f8 <tcp_pcb_remove>
 800e014:	4b0d      	ldr	r3, [pc, #52]	; (800e04c <tcp_close_shutdown+0x1b4>)
 800e016:	2201      	movs	r2, #1
 800e018:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f7ff fe8a 	bl	800dd34 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e020:	e004      	b.n	800e02c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f000 f81a 	bl	800e05c <tcp_close_shutdown_fin>
 800e028:	4603      	mov	r3, r0
 800e02a:	e000      	b.n	800e02e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e02c:	2300      	movs	r3, #0
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3710      	adds	r7, #16
 800e032:	46bd      	mov	sp, r7
 800e034:	bdb0      	pop	{r4, r5, r7, pc}
 800e036:	bf00      	nop
 800e038:	0801bea0 	.word	0x0801bea0
 800e03c:	0801bf74 	.word	0x0801bf74
 800e040:	0801bee4 	.word	0x0801bee4
 800e044:	0801bf94 	.word	0x0801bf94
 800e048:	2000cf74 	.word	0x2000cf74
 800e04c:	2000cf7c 	.word	0x2000cf7c
 800e050:	2000cfb4 	.word	0x2000cfb4
 800e054:	2000cf6c 	.word	0x2000cf6c
 800e058:	2000cf70 	.word	0x2000cf70

0800e05c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d106      	bne.n	800e078 <tcp_close_shutdown_fin+0x1c>
 800e06a:	4b2e      	ldr	r3, [pc, #184]	; (800e124 <tcp_close_shutdown_fin+0xc8>)
 800e06c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e070:	492d      	ldr	r1, [pc, #180]	; (800e128 <tcp_close_shutdown_fin+0xcc>)
 800e072:	482e      	ldr	r0, [pc, #184]	; (800e12c <tcp_close_shutdown_fin+0xd0>)
 800e074:	f00b fb00 	bl	8019678 <iprintf>

  switch (pcb->state) {
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	7d1b      	ldrb	r3, [r3, #20]
 800e07c:	2b07      	cmp	r3, #7
 800e07e:	d020      	beq.n	800e0c2 <tcp_close_shutdown_fin+0x66>
 800e080:	2b07      	cmp	r3, #7
 800e082:	dc2b      	bgt.n	800e0dc <tcp_close_shutdown_fin+0x80>
 800e084:	2b03      	cmp	r3, #3
 800e086:	d002      	beq.n	800e08e <tcp_close_shutdown_fin+0x32>
 800e088:	2b04      	cmp	r3, #4
 800e08a:	d00d      	beq.n	800e0a8 <tcp_close_shutdown_fin+0x4c>
 800e08c:	e026      	b.n	800e0dc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f004 fe10 	bl	8012cb4 <tcp_send_fin>
 800e094:	4603      	mov	r3, r0
 800e096:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d11f      	bne.n	800e0e0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2205      	movs	r2, #5
 800e0a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e0a6:	e01b      	b.n	800e0e0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f004 fe03 	bl	8012cb4 <tcp_send_fin>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e0b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d114      	bne.n	800e0e4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2205      	movs	r2, #5
 800e0be:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e0c0:	e010      	b.n	800e0e4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f004 fdf6 	bl	8012cb4 <tcp_send_fin>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e0cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d109      	bne.n	800e0e8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2209      	movs	r2, #9
 800e0d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e0da:	e005      	b.n	800e0e8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	e01c      	b.n	800e11a <tcp_close_shutdown_fin+0xbe>
      break;
 800e0e0:	bf00      	nop
 800e0e2:	e002      	b.n	800e0ea <tcp_close_shutdown_fin+0x8e>
      break;
 800e0e4:	bf00      	nop
 800e0e6:	e000      	b.n	800e0ea <tcp_close_shutdown_fin+0x8e>
      break;
 800e0e8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e0ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d103      	bne.n	800e0fa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f004 ff1c 	bl	8012f30 <tcp_output>
 800e0f8:	e00d      	b.n	800e116 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e0fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e102:	d108      	bne.n	800e116 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	8b5b      	ldrh	r3, [r3, #26]
 800e108:	f043 0308 	orr.w	r3, r3, #8
 800e10c:	b29a      	uxth	r2, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e112:	2300      	movs	r3, #0
 800e114:	e001      	b.n	800e11a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e116:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3710      	adds	r7, #16
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
 800e122:	bf00      	nop
 800e124:	0801bea0 	.word	0x0801bea0
 800e128:	0801bf50 	.word	0x0801bf50
 800e12c:	0801bee4 	.word	0x0801bee4

0800e130 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d109      	bne.n	800e152 <tcp_close+0x22>
 800e13e:	4b0f      	ldr	r3, [pc, #60]	; (800e17c <tcp_close+0x4c>)
 800e140:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e144:	490e      	ldr	r1, [pc, #56]	; (800e180 <tcp_close+0x50>)
 800e146:	480f      	ldr	r0, [pc, #60]	; (800e184 <tcp_close+0x54>)
 800e148:	f00b fa96 	bl	8019678 <iprintf>
 800e14c:	f06f 030f 	mvn.w	r3, #15
 800e150:	e00f      	b.n	800e172 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	7d1b      	ldrb	r3, [r3, #20]
 800e156:	2b01      	cmp	r3, #1
 800e158:	d006      	beq.n	800e168 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	8b5b      	ldrh	r3, [r3, #26]
 800e15e:	f043 0310 	orr.w	r3, r3, #16
 800e162:	b29a      	uxth	r2, r3
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e168:	2101      	movs	r1, #1
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f7ff fe94 	bl	800de98 <tcp_close_shutdown>
 800e170:	4603      	mov	r3, r0
}
 800e172:	4618      	mov	r0, r3
 800e174:	3708      	adds	r7, #8
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	0801bea0 	.word	0x0801bea0
 800e180:	0801bfb0 	.word	0x0801bfb0
 800e184:	0801bee4 	.word	0x0801bee4

0800e188 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b084      	sub	sp, #16
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	60b9      	str	r1, [r7, #8]
 800e192:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d109      	bne.n	800e1ae <tcp_shutdown+0x26>
 800e19a:	4b26      	ldr	r3, [pc, #152]	; (800e234 <tcp_shutdown+0xac>)
 800e19c:	f240 2207 	movw	r2, #519	; 0x207
 800e1a0:	4925      	ldr	r1, [pc, #148]	; (800e238 <tcp_shutdown+0xb0>)
 800e1a2:	4826      	ldr	r0, [pc, #152]	; (800e23c <tcp_shutdown+0xb4>)
 800e1a4:	f00b fa68 	bl	8019678 <iprintf>
 800e1a8:	f06f 030f 	mvn.w	r3, #15
 800e1ac:	e03d      	b.n	800e22a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	7d1b      	ldrb	r3, [r3, #20]
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d102      	bne.n	800e1bc <tcp_shutdown+0x34>
    return ERR_CONN;
 800e1b6:	f06f 030a 	mvn.w	r3, #10
 800e1ba:	e036      	b.n	800e22a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d01b      	beq.n	800e1fa <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	8b5b      	ldrh	r3, [r3, #26]
 800e1c6:	f043 0310 	orr.w	r3, r3, #16
 800e1ca:	b29a      	uxth	r2, r3
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d005      	beq.n	800e1e2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e1d6:	2101      	movs	r1, #1
 800e1d8:	68f8      	ldr	r0, [r7, #12]
 800e1da:	f7ff fe5d 	bl	800de98 <tcp_close_shutdown>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	e023      	b.n	800e22a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d007      	beq.n	800e1fa <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7ff fae4 	bl	800d7bc <pbuf_free>
      pcb->refused_data = NULL;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d013      	beq.n	800e228 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	7d1b      	ldrb	r3, [r3, #20]
 800e204:	2b04      	cmp	r3, #4
 800e206:	dc02      	bgt.n	800e20e <tcp_shutdown+0x86>
 800e208:	2b03      	cmp	r3, #3
 800e20a:	da02      	bge.n	800e212 <tcp_shutdown+0x8a>
 800e20c:	e009      	b.n	800e222 <tcp_shutdown+0x9a>
 800e20e:	2b07      	cmp	r3, #7
 800e210:	d107      	bne.n	800e222 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	b2db      	uxtb	r3, r3
 800e216:	4619      	mov	r1, r3
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f7ff fe3d 	bl	800de98 <tcp_close_shutdown>
 800e21e:	4603      	mov	r3, r0
 800e220:	e003      	b.n	800e22a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e222:	f06f 030a 	mvn.w	r3, #10
 800e226:	e000      	b.n	800e22a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800e228:	2300      	movs	r3, #0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3710      	adds	r7, #16
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
 800e232:	bf00      	nop
 800e234:	0801bea0 	.word	0x0801bea0
 800e238:	0801bfc8 	.word	0x0801bfc8
 800e23c:	0801bee4 	.word	0x0801bee4

0800e240 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b08e      	sub	sp, #56	; 0x38
 800e244:	af04      	add	r7, sp, #16
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d107      	bne.n	800e260 <tcp_abandon+0x20>
 800e250:	4b52      	ldr	r3, [pc, #328]	; (800e39c <tcp_abandon+0x15c>)
 800e252:	f240 223d 	movw	r2, #573	; 0x23d
 800e256:	4952      	ldr	r1, [pc, #328]	; (800e3a0 <tcp_abandon+0x160>)
 800e258:	4852      	ldr	r0, [pc, #328]	; (800e3a4 <tcp_abandon+0x164>)
 800e25a:	f00b fa0d 	bl	8019678 <iprintf>
 800e25e:	e099      	b.n	800e394 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	7d1b      	ldrb	r3, [r3, #20]
 800e264:	2b01      	cmp	r3, #1
 800e266:	d106      	bne.n	800e276 <tcp_abandon+0x36>
 800e268:	4b4c      	ldr	r3, [pc, #304]	; (800e39c <tcp_abandon+0x15c>)
 800e26a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e26e:	494e      	ldr	r1, [pc, #312]	; (800e3a8 <tcp_abandon+0x168>)
 800e270:	484c      	ldr	r0, [pc, #304]	; (800e3a4 <tcp_abandon+0x164>)
 800e272:	f00b fa01 	bl	8019678 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	7d1b      	ldrb	r3, [r3, #20]
 800e27a:	2b0a      	cmp	r3, #10
 800e27c:	d107      	bne.n	800e28e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e27e:	6879      	ldr	r1, [r7, #4]
 800e280:	484a      	ldr	r0, [pc, #296]	; (800e3ac <tcp_abandon+0x16c>)
 800e282:	f001 fa39 	bl	800f6f8 <tcp_pcb_remove>
    tcp_free(pcb);
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f7ff fd54 	bl	800dd34 <tcp_free>
 800e28c:	e082      	b.n	800e394 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e28e:	2300      	movs	r3, #0
 800e290:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e292:	2300      	movs	r3, #0
 800e294:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e29a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2a8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	691b      	ldr	r3, [r3, #16]
 800e2ae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	7d1b      	ldrb	r3, [r3, #20]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d126      	bne.n	800e306 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	8adb      	ldrh	r3, [r3, #22]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d02e      	beq.n	800e31e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e2c0:	4b3b      	ldr	r3, [pc, #236]	; (800e3b0 <tcp_abandon+0x170>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d105      	bne.n	800e2d6 <tcp_abandon+0x96>
 800e2ca:	4b39      	ldr	r3, [pc, #228]	; (800e3b0 <tcp_abandon+0x170>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	4a37      	ldr	r2, [pc, #220]	; (800e3b0 <tcp_abandon+0x170>)
 800e2d2:	6013      	str	r3, [r2, #0]
 800e2d4:	e013      	b.n	800e2fe <tcp_abandon+0xbe>
 800e2d6:	4b36      	ldr	r3, [pc, #216]	; (800e3b0 <tcp_abandon+0x170>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	61fb      	str	r3, [r7, #28]
 800e2dc:	e00c      	b.n	800e2f8 <tcp_abandon+0xb8>
 800e2de:	69fb      	ldr	r3, [r7, #28]
 800e2e0:	68db      	ldr	r3, [r3, #12]
 800e2e2:	687a      	ldr	r2, [r7, #4]
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d104      	bne.n	800e2f2 <tcp_abandon+0xb2>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	68da      	ldr	r2, [r3, #12]
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	60da      	str	r2, [r3, #12]
 800e2f0:	e005      	b.n	800e2fe <tcp_abandon+0xbe>
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	68db      	ldr	r3, [r3, #12]
 800e2f6:	61fb      	str	r3, [r7, #28]
 800e2f8:	69fb      	ldr	r3, [r7, #28]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d1ef      	bne.n	800e2de <tcp_abandon+0x9e>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2200      	movs	r2, #0
 800e302:	60da      	str	r2, [r3, #12]
 800e304:	e00b      	b.n	800e31e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	8adb      	ldrh	r3, [r3, #22]
 800e30e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e310:	6879      	ldr	r1, [r7, #4]
 800e312:	4828      	ldr	r0, [pc, #160]	; (800e3b4 <tcp_abandon+0x174>)
 800e314:	f001 f9f0 	bl	800f6f8 <tcp_pcb_remove>
 800e318:	4b27      	ldr	r3, [pc, #156]	; (800e3b8 <tcp_abandon+0x178>)
 800e31a:	2201      	movs	r2, #1
 800e31c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e322:	2b00      	cmp	r3, #0
 800e324:	d004      	beq.n	800e330 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e32a:	4618      	mov	r0, r3
 800e32c:	f000 fec4 	bl	800f0b8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e334:	2b00      	cmp	r3, #0
 800e336:	d004      	beq.n	800e342 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e33c:	4618      	mov	r0, r3
 800e33e:	f000 febb 	bl	800f0b8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e346:	2b00      	cmp	r3, #0
 800e348:	d004      	beq.n	800e354 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e34e:	4618      	mov	r0, r3
 800e350:	f000 feb2 	bl	800f0b8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e356:	2b00      	cmp	r3, #0
 800e358:	d00e      	beq.n	800e378 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e35a:	6879      	ldr	r1, [r7, #4]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	3304      	adds	r3, #4
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	8b12      	ldrh	r2, [r2, #24]
 800e364:	9202      	str	r2, [sp, #8]
 800e366:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e368:	9201      	str	r2, [sp, #4]
 800e36a:	9300      	str	r3, [sp, #0]
 800e36c:	460b      	mov	r3, r1
 800e36e:	697a      	ldr	r2, [r7, #20]
 800e370:	69b9      	ldr	r1, [r7, #24]
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f005 fb90 	bl	8013a98 <tcp_rst>
    }
    last_state = pcb->state;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	7d1b      	ldrb	r3, [r3, #20]
 800e37c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f7ff fcd8 	bl	800dd34 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d004      	beq.n	800e394 <tcp_abandon+0x154>
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	f06f 010c 	mvn.w	r1, #12
 800e390:	68f8      	ldr	r0, [r7, #12]
 800e392:	4798      	blx	r3
  }
}
 800e394:	3728      	adds	r7, #40	; 0x28
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}
 800e39a:	bf00      	nop
 800e39c:	0801bea0 	.word	0x0801bea0
 800e3a0:	0801bfe4 	.word	0x0801bfe4
 800e3a4:	0801bee4 	.word	0x0801bee4
 800e3a8:	0801c000 	.word	0x0801c000
 800e3ac:	2000cf78 	.word	0x2000cf78
 800e3b0:	2000cf6c 	.word	0x2000cf6c
 800e3b4:	2000cf74 	.word	0x2000cf74
 800e3b8:	2000cf7c 	.word	0x2000cf7c

0800e3bc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e3c4:	2101      	movs	r1, #1
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f7ff ff3a 	bl	800e240 <tcp_abandon>
}
 800e3cc:	bf00      	nop
 800e3ce:	3708      	adds	r7, #8
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b088      	sub	sp, #32
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	60b9      	str	r1, [r7, #8]
 800e3de:	4613      	mov	r3, r2
 800e3e0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e3e2:	2304      	movs	r3, #4
 800e3e4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d101      	bne.n	800e3f0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e3ec:	4b3e      	ldr	r3, [pc, #248]	; (800e4e8 <tcp_bind+0x114>)
 800e3ee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d109      	bne.n	800e40a <tcp_bind+0x36>
 800e3f6:	4b3d      	ldr	r3, [pc, #244]	; (800e4ec <tcp_bind+0x118>)
 800e3f8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e3fc:	493c      	ldr	r1, [pc, #240]	; (800e4f0 <tcp_bind+0x11c>)
 800e3fe:	483d      	ldr	r0, [pc, #244]	; (800e4f4 <tcp_bind+0x120>)
 800e400:	f00b f93a 	bl	8019678 <iprintf>
 800e404:	f06f 030f 	mvn.w	r3, #15
 800e408:	e06a      	b.n	800e4e0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	7d1b      	ldrb	r3, [r3, #20]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d009      	beq.n	800e426 <tcp_bind+0x52>
 800e412:	4b36      	ldr	r3, [pc, #216]	; (800e4ec <tcp_bind+0x118>)
 800e414:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e418:	4937      	ldr	r1, [pc, #220]	; (800e4f8 <tcp_bind+0x124>)
 800e41a:	4836      	ldr	r0, [pc, #216]	; (800e4f4 <tcp_bind+0x120>)
 800e41c:	f00b f92c 	bl	8019678 <iprintf>
 800e420:	f06f 0305 	mvn.w	r3, #5
 800e424:	e05c      	b.n	800e4e0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e426:	88fb      	ldrh	r3, [r7, #6]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d109      	bne.n	800e440 <tcp_bind+0x6c>
    port = tcp_new_port();
 800e42c:	f000 f9de 	bl	800e7ec <tcp_new_port>
 800e430:	4603      	mov	r3, r0
 800e432:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e434:	88fb      	ldrh	r3, [r7, #6]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d135      	bne.n	800e4a6 <tcp_bind+0xd2>
      return ERR_BUF;
 800e43a:	f06f 0301 	mvn.w	r3, #1
 800e43e:	e04f      	b.n	800e4e0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e440:	2300      	movs	r3, #0
 800e442:	61fb      	str	r3, [r7, #28]
 800e444:	e02b      	b.n	800e49e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e446:	4a2d      	ldr	r2, [pc, #180]	; (800e4fc <tcp_bind+0x128>)
 800e448:	69fb      	ldr	r3, [r7, #28]
 800e44a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	61bb      	str	r3, [r7, #24]
 800e452:	e01e      	b.n	800e492 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e454:	69bb      	ldr	r3, [r7, #24]
 800e456:	8adb      	ldrh	r3, [r3, #22]
 800e458:	88fa      	ldrh	r2, [r7, #6]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d116      	bne.n	800e48c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e45e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e460:	2b00      	cmp	r3, #0
 800e462:	d010      	beq.n	800e486 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e464:	69bb      	ldr	r3, [r7, #24]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d00c      	beq.n	800e486 <tcp_bind+0xb2>
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d009      	beq.n	800e486 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d005      	beq.n	800e486 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e47a:	69bb      	ldr	r3, [r7, #24]
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e482:	429a      	cmp	r2, r3
 800e484:	d102      	bne.n	800e48c <tcp_bind+0xb8>
              return ERR_USE;
 800e486:	f06f 0307 	mvn.w	r3, #7
 800e48a:	e029      	b.n	800e4e0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	68db      	ldr	r3, [r3, #12]
 800e490:	61bb      	str	r3, [r7, #24]
 800e492:	69bb      	ldr	r3, [r7, #24]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d1dd      	bne.n	800e454 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e498:	69fb      	ldr	r3, [r7, #28]
 800e49a:	3301      	adds	r3, #1
 800e49c:	61fb      	str	r3, [r7, #28]
 800e49e:	69fa      	ldr	r2, [r7, #28]
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	dbcf      	blt.n	800e446 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d00c      	beq.n	800e4c6 <tcp_bind+0xf2>
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d008      	beq.n	800e4c6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d002      	beq.n	800e4c0 <tcp_bind+0xec>
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	e000      	b.n	800e4c2 <tcp_bind+0xee>
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	68fa      	ldr	r2, [r7, #12]
 800e4c4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	88fa      	ldrh	r2, [r7, #6]
 800e4ca:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e4cc:	4b0c      	ldr	r3, [pc, #48]	; (800e500 <tcp_bind+0x12c>)
 800e4ce:	681a      	ldr	r2, [r3, #0]
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	60da      	str	r2, [r3, #12]
 800e4d4:	4a0a      	ldr	r2, [pc, #40]	; (800e500 <tcp_bind+0x12c>)
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	6013      	str	r3, [r2, #0]
 800e4da:	f005 fc9f 	bl	8013e1c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e4de:	2300      	movs	r3, #0
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3720      	adds	r7, #32
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	0801e304 	.word	0x0801e304
 800e4ec:	0801bea0 	.word	0x0801bea0
 800e4f0:	0801c034 	.word	0x0801c034
 800e4f4:	0801bee4 	.word	0x0801bee4
 800e4f8:	0801c04c 	.word	0x0801c04c
 800e4fc:	0801e2cc 	.word	0x0801e2cc
 800e500:	2000cf6c 	.word	0x2000cf6c

0800e504 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	4613      	mov	r3, r2
 800e510:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d106      	bne.n	800e526 <tcp_accept_null+0x22>
 800e518:	4b07      	ldr	r3, [pc, #28]	; (800e538 <tcp_accept_null+0x34>)
 800e51a:	f240 320f 	movw	r2, #783	; 0x30f
 800e51e:	4907      	ldr	r1, [pc, #28]	; (800e53c <tcp_accept_null+0x38>)
 800e520:	4807      	ldr	r0, [pc, #28]	; (800e540 <tcp_accept_null+0x3c>)
 800e522:	f00b f8a9 	bl	8019678 <iprintf>

  tcp_abort(pcb);
 800e526:	68b8      	ldr	r0, [r7, #8]
 800e528:	f7ff ff48 	bl	800e3bc <tcp_abort>

  return ERR_ABRT;
 800e52c:	f06f 030c 	mvn.w	r3, #12
}
 800e530:	4618      	mov	r0, r3
 800e532:	3710      	adds	r7, #16
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}
 800e538:	0801bea0 	.word	0x0801bea0
 800e53c:	0801c074 	.word	0x0801c074
 800e540:	0801bee4 	.word	0x0801bee4

0800e544 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b088      	sub	sp, #32
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60f8      	str	r0, [r7, #12]
 800e54c:	460b      	mov	r3, r1
 800e54e:	607a      	str	r2, [r7, #4]
 800e550:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e552:	2300      	movs	r3, #0
 800e554:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d109      	bne.n	800e570 <tcp_listen_with_backlog_and_err+0x2c>
 800e55c:	4b47      	ldr	r3, [pc, #284]	; (800e67c <tcp_listen_with_backlog_and_err+0x138>)
 800e55e:	f240 3259 	movw	r2, #857	; 0x359
 800e562:	4947      	ldr	r1, [pc, #284]	; (800e680 <tcp_listen_with_backlog_and_err+0x13c>)
 800e564:	4847      	ldr	r0, [pc, #284]	; (800e684 <tcp_listen_with_backlog_and_err+0x140>)
 800e566:	f00b f887 	bl	8019678 <iprintf>
 800e56a:	23f0      	movs	r3, #240	; 0xf0
 800e56c:	76fb      	strb	r3, [r7, #27]
 800e56e:	e079      	b.n	800e664 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	7d1b      	ldrb	r3, [r3, #20]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d009      	beq.n	800e58c <tcp_listen_with_backlog_and_err+0x48>
 800e578:	4b40      	ldr	r3, [pc, #256]	; (800e67c <tcp_listen_with_backlog_and_err+0x138>)
 800e57a:	f240 325a 	movw	r2, #858	; 0x35a
 800e57e:	4942      	ldr	r1, [pc, #264]	; (800e688 <tcp_listen_with_backlog_and_err+0x144>)
 800e580:	4840      	ldr	r0, [pc, #256]	; (800e684 <tcp_listen_with_backlog_and_err+0x140>)
 800e582:	f00b f879 	bl	8019678 <iprintf>
 800e586:	23f1      	movs	r3, #241	; 0xf1
 800e588:	76fb      	strb	r3, [r7, #27]
 800e58a:	e06b      	b.n	800e664 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	7d1b      	ldrb	r3, [r3, #20]
 800e590:	2b01      	cmp	r3, #1
 800e592:	d104      	bne.n	800e59e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e598:	23f7      	movs	r3, #247	; 0xf7
 800e59a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e59c:	e062      	b.n	800e664 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e59e:	2002      	movs	r0, #2
 800e5a0:	f7fe f9b4 	bl	800c90c <memp_malloc>
 800e5a4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e5a6:	69fb      	ldr	r3, [r7, #28]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d102      	bne.n	800e5b2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e5ac:	23ff      	movs	r3, #255	; 0xff
 800e5ae:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e5b0:	e058      	b.n	800e664 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	691a      	ldr	r2, [r3, #16]
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	8ada      	ldrh	r2, [r3, #22]
 800e5be:	69fb      	ldr	r3, [r7, #28]
 800e5c0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e5c2:	69fb      	ldr	r3, [r7, #28]
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	7d5a      	ldrb	r2, [r3, #21]
 800e5cc:	69fb      	ldr	r3, [r7, #28]
 800e5ce:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	7a5a      	ldrb	r2, [r3, #9]
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e5d8:	69fb      	ldr	r3, [r7, #28]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	7ada      	ldrb	r2, [r3, #11]
 800e5e2:	69fb      	ldr	r3, [r7, #28]
 800e5e4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	7a9a      	ldrb	r2, [r3, #10]
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681a      	ldr	r2, [r3, #0]
 800e5f2:	69fb      	ldr	r3, [r7, #28]
 800e5f4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	8adb      	ldrh	r3, [r3, #22]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d021      	beq.n	800e642 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e5fe:	4b23      	ldr	r3, [pc, #140]	; (800e68c <tcp_listen_with_backlog_and_err+0x148>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	429a      	cmp	r2, r3
 800e606:	d105      	bne.n	800e614 <tcp_listen_with_backlog_and_err+0xd0>
 800e608:	4b20      	ldr	r3, [pc, #128]	; (800e68c <tcp_listen_with_backlog_and_err+0x148>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	68db      	ldr	r3, [r3, #12]
 800e60e:	4a1f      	ldr	r2, [pc, #124]	; (800e68c <tcp_listen_with_backlog_and_err+0x148>)
 800e610:	6013      	str	r3, [r2, #0]
 800e612:	e013      	b.n	800e63c <tcp_listen_with_backlog_and_err+0xf8>
 800e614:	4b1d      	ldr	r3, [pc, #116]	; (800e68c <tcp_listen_with_backlog_and_err+0x148>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	617b      	str	r3, [r7, #20]
 800e61a:	e00c      	b.n	800e636 <tcp_listen_with_backlog_and_err+0xf2>
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	68db      	ldr	r3, [r3, #12]
 800e620:	68fa      	ldr	r2, [r7, #12]
 800e622:	429a      	cmp	r2, r3
 800e624:	d104      	bne.n	800e630 <tcp_listen_with_backlog_and_err+0xec>
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	68da      	ldr	r2, [r3, #12]
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	60da      	str	r2, [r3, #12]
 800e62e:	e005      	b.n	800e63c <tcp_listen_with_backlog_and_err+0xf8>
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	617b      	str	r3, [r7, #20]
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d1ef      	bne.n	800e61c <tcp_listen_with_backlog_and_err+0xd8>
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2200      	movs	r2, #0
 800e640:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f7ff fb76 	bl	800dd34 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	4a11      	ldr	r2, [pc, #68]	; (800e690 <tcp_listen_with_backlog_and_err+0x14c>)
 800e64c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e64e:	4b11      	ldr	r3, [pc, #68]	; (800e694 <tcp_listen_with_backlog_and_err+0x150>)
 800e650:	681a      	ldr	r2, [r3, #0]
 800e652:	69fb      	ldr	r3, [r7, #28]
 800e654:	60da      	str	r2, [r3, #12]
 800e656:	4a0f      	ldr	r2, [pc, #60]	; (800e694 <tcp_listen_with_backlog_and_err+0x150>)
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	6013      	str	r3, [r2, #0]
 800e65c:	f005 fbde 	bl	8013e1c <tcp_timer_needed>
  res = ERR_OK;
 800e660:	2300      	movs	r3, #0
 800e662:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d002      	beq.n	800e670 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	7efa      	ldrb	r2, [r7, #27]
 800e66e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e670:	69fb      	ldr	r3, [r7, #28]
}
 800e672:	4618      	mov	r0, r3
 800e674:	3720      	adds	r7, #32
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	0801bea0 	.word	0x0801bea0
 800e680:	0801c094 	.word	0x0801c094
 800e684:	0801bee4 	.word	0x0801bee4
 800e688:	0801c0c4 	.word	0x0801c0c4
 800e68c:	2000cf6c 	.word	0x2000cf6c
 800e690:	0800e505 	.word	0x0800e505
 800e694:	2000cf70 	.word	0x2000cf70

0800e698 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d106      	bne.n	800e6b4 <tcp_update_rcv_ann_wnd+0x1c>
 800e6a6:	4b25      	ldr	r3, [pc, #148]	; (800e73c <tcp_update_rcv_ann_wnd+0xa4>)
 800e6a8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e6ac:	4924      	ldr	r1, [pc, #144]	; (800e740 <tcp_update_rcv_ann_wnd+0xa8>)
 800e6ae:	4825      	ldr	r0, [pc, #148]	; (800e744 <tcp_update_rcv_ann_wnd+0xac>)
 800e6b0:	f00a ffe2 	bl	8019678 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e6bc:	4413      	add	r3, r2
 800e6be:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c4:	687a      	ldr	r2, [r7, #4]
 800e6c6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e6c8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e6cc:	bf28      	it	cs
 800e6ce:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e6d2:	b292      	uxth	r2, r2
 800e6d4:	4413      	add	r3, r2
 800e6d6:	68fa      	ldr	r2, [r7, #12]
 800e6d8:	1ad3      	subs	r3, r2, r3
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	db08      	blt.n	800e6f0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ea:	68fa      	ldr	r2, [r7, #12]
 800e6ec:	1ad3      	subs	r3, r2, r3
 800e6ee:	e020      	b.n	800e732 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f8:	1ad3      	subs	r3, r2, r3
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	dd03      	ble.n	800e706 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2200      	movs	r2, #0
 800e702:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e704:	e014      	b.n	800e730 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70e:	1ad3      	subs	r3, r2, r3
 800e710:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e718:	d306      	bcc.n	800e728 <tcp_update_rcv_ann_wnd+0x90>
 800e71a:	4b08      	ldr	r3, [pc, #32]	; (800e73c <tcp_update_rcv_ann_wnd+0xa4>)
 800e71c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e720:	4909      	ldr	r1, [pc, #36]	; (800e748 <tcp_update_rcv_ann_wnd+0xb0>)
 800e722:	4808      	ldr	r0, [pc, #32]	; (800e744 <tcp_update_rcv_ann_wnd+0xac>)
 800e724:	f00a ffa8 	bl	8019678 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	b29a      	uxth	r2, r3
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e730:	2300      	movs	r3, #0
  }
}
 800e732:	4618      	mov	r0, r3
 800e734:	3710      	adds	r7, #16
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop
 800e73c:	0801bea0 	.word	0x0801bea0
 800e740:	0801c0fc 	.word	0x0801c0fc
 800e744:	0801bee4 	.word	0x0801bee4
 800e748:	0801c120 	.word	0x0801c120

0800e74c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	460b      	mov	r3, r1
 800e756:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d107      	bne.n	800e76e <tcp_recved+0x22>
 800e75e:	4b1f      	ldr	r3, [pc, #124]	; (800e7dc <tcp_recved+0x90>)
 800e760:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e764:	491e      	ldr	r1, [pc, #120]	; (800e7e0 <tcp_recved+0x94>)
 800e766:	481f      	ldr	r0, [pc, #124]	; (800e7e4 <tcp_recved+0x98>)
 800e768:	f00a ff86 	bl	8019678 <iprintf>
 800e76c:	e032      	b.n	800e7d4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	7d1b      	ldrb	r3, [r3, #20]
 800e772:	2b01      	cmp	r3, #1
 800e774:	d106      	bne.n	800e784 <tcp_recved+0x38>
 800e776:	4b19      	ldr	r3, [pc, #100]	; (800e7dc <tcp_recved+0x90>)
 800e778:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e77c:	491a      	ldr	r1, [pc, #104]	; (800e7e8 <tcp_recved+0x9c>)
 800e77e:	4819      	ldr	r0, [pc, #100]	; (800e7e4 <tcp_recved+0x98>)
 800e780:	f00a ff7a 	bl	8019678 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e788:	887b      	ldrh	r3, [r7, #2]
 800e78a:	4413      	add	r3, r2
 800e78c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e78e:	89fb      	ldrh	r3, [r7, #14]
 800e790:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e794:	d804      	bhi.n	800e7a0 <tcp_recved+0x54>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e79a:	89fa      	ldrh	r2, [r7, #14]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d204      	bcs.n	800e7aa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e7a6:	851a      	strh	r2, [r3, #40]	; 0x28
 800e7a8:	e002      	b.n	800e7b0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	89fa      	ldrh	r2, [r7, #14]
 800e7ae:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f7ff ff71 	bl	800e698 <tcp_update_rcv_ann_wnd>
 800e7b6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e7be:	d309      	bcc.n	800e7d4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	8b5b      	ldrh	r3, [r3, #26]
 800e7c4:	f043 0302 	orr.w	r3, r3, #2
 800e7c8:	b29a      	uxth	r2, r3
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f004 fbae 	bl	8012f30 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e7d4:	3710      	adds	r7, #16
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	0801bea0 	.word	0x0801bea0
 800e7e0:	0801c13c 	.word	0x0801c13c
 800e7e4:	0801bee4 	.word	0x0801bee4
 800e7e8:	0801c154 	.word	0x0801c154

0800e7ec <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b083      	sub	sp, #12
 800e7f0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e7f6:	4b1e      	ldr	r3, [pc, #120]	; (800e870 <tcp_new_port+0x84>)
 800e7f8:	881b      	ldrh	r3, [r3, #0]
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	b29a      	uxth	r2, r3
 800e7fe:	4b1c      	ldr	r3, [pc, #112]	; (800e870 <tcp_new_port+0x84>)
 800e800:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e802:	4b1b      	ldr	r3, [pc, #108]	; (800e870 <tcp_new_port+0x84>)
 800e804:	881b      	ldrh	r3, [r3, #0]
 800e806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e80a:	4293      	cmp	r3, r2
 800e80c:	d103      	bne.n	800e816 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e80e:	4b18      	ldr	r3, [pc, #96]	; (800e870 <tcp_new_port+0x84>)
 800e810:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e814:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e816:	2300      	movs	r3, #0
 800e818:	71fb      	strb	r3, [r7, #7]
 800e81a:	e01e      	b.n	800e85a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e81c:	79fb      	ldrb	r3, [r7, #7]
 800e81e:	4a15      	ldr	r2, [pc, #84]	; (800e874 <tcp_new_port+0x88>)
 800e820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	603b      	str	r3, [r7, #0]
 800e828:	e011      	b.n	800e84e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	8ada      	ldrh	r2, [r3, #22]
 800e82e:	4b10      	ldr	r3, [pc, #64]	; (800e870 <tcp_new_port+0x84>)
 800e830:	881b      	ldrh	r3, [r3, #0]
 800e832:	429a      	cmp	r2, r3
 800e834:	d108      	bne.n	800e848 <tcp_new_port+0x5c>
        n++;
 800e836:	88bb      	ldrh	r3, [r7, #4]
 800e838:	3301      	adds	r3, #1
 800e83a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e83c:	88bb      	ldrh	r3, [r7, #4]
 800e83e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e842:	d3d8      	bcc.n	800e7f6 <tcp_new_port+0xa>
          return 0;
 800e844:	2300      	movs	r3, #0
 800e846:	e00d      	b.n	800e864 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	603b      	str	r3, [r7, #0]
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d1ea      	bne.n	800e82a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e854:	79fb      	ldrb	r3, [r7, #7]
 800e856:	3301      	adds	r3, #1
 800e858:	71fb      	strb	r3, [r7, #7]
 800e85a:	79fb      	ldrb	r3, [r7, #7]
 800e85c:	2b03      	cmp	r3, #3
 800e85e:	d9dd      	bls.n	800e81c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e860:	4b03      	ldr	r3, [pc, #12]	; (800e870 <tcp_new_port+0x84>)
 800e862:	881b      	ldrh	r3, [r3, #0]
}
 800e864:	4618      	mov	r0, r3
 800e866:	370c      	adds	r7, #12
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr
 800e870:	20000024 	.word	0x20000024
 800e874:	0801e2cc 	.word	0x0801e2cc

0800e878 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e878:	b5b0      	push	{r4, r5, r7, lr}
 800e87a:	b090      	sub	sp, #64	; 0x40
 800e87c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e87e:	2300      	movs	r3, #0
 800e880:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e884:	4b94      	ldr	r3, [pc, #592]	; (800ead8 <tcp_slowtmr+0x260>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	3301      	adds	r3, #1
 800e88a:	4a93      	ldr	r2, [pc, #588]	; (800ead8 <tcp_slowtmr+0x260>)
 800e88c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e88e:	4b93      	ldr	r3, [pc, #588]	; (800eadc <tcp_slowtmr+0x264>)
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	3301      	adds	r3, #1
 800e894:	b2da      	uxtb	r2, r3
 800e896:	4b91      	ldr	r3, [pc, #580]	; (800eadc <tcp_slowtmr+0x264>)
 800e898:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e89a:	2300      	movs	r3, #0
 800e89c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e89e:	4b90      	ldr	r3, [pc, #576]	; (800eae0 <tcp_slowtmr+0x268>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e8a4:	e29f      	b.n	800ede6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a8:	7d1b      	ldrb	r3, [r3, #20]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d106      	bne.n	800e8bc <tcp_slowtmr+0x44>
 800e8ae:	4b8d      	ldr	r3, [pc, #564]	; (800eae4 <tcp_slowtmr+0x26c>)
 800e8b0:	f240 42be 	movw	r2, #1214	; 0x4be
 800e8b4:	498c      	ldr	r1, [pc, #560]	; (800eae8 <tcp_slowtmr+0x270>)
 800e8b6:	488d      	ldr	r0, [pc, #564]	; (800eaec <tcp_slowtmr+0x274>)
 800e8b8:	f00a fede 	bl	8019678 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8be:	7d1b      	ldrb	r3, [r3, #20]
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d106      	bne.n	800e8d2 <tcp_slowtmr+0x5a>
 800e8c4:	4b87      	ldr	r3, [pc, #540]	; (800eae4 <tcp_slowtmr+0x26c>)
 800e8c6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e8ca:	4989      	ldr	r1, [pc, #548]	; (800eaf0 <tcp_slowtmr+0x278>)
 800e8cc:	4887      	ldr	r0, [pc, #540]	; (800eaec <tcp_slowtmr+0x274>)
 800e8ce:	f00a fed3 	bl	8019678 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d4:	7d1b      	ldrb	r3, [r3, #20]
 800e8d6:	2b0a      	cmp	r3, #10
 800e8d8:	d106      	bne.n	800e8e8 <tcp_slowtmr+0x70>
 800e8da:	4b82      	ldr	r3, [pc, #520]	; (800eae4 <tcp_slowtmr+0x26c>)
 800e8dc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e8e0:	4984      	ldr	r1, [pc, #528]	; (800eaf4 <tcp_slowtmr+0x27c>)
 800e8e2:	4882      	ldr	r0, [pc, #520]	; (800eaec <tcp_slowtmr+0x274>)
 800e8e4:	f00a fec8 	bl	8019678 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ea:	7f9a      	ldrb	r2, [r3, #30]
 800e8ec:	4b7b      	ldr	r3, [pc, #492]	; (800eadc <tcp_slowtmr+0x264>)
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d105      	bne.n	800e900 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fa:	68db      	ldr	r3, [r3, #12]
 800e8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e8fe:	e272      	b.n	800ede6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e900:	4b76      	ldr	r3, [pc, #472]	; (800eadc <tcp_slowtmr+0x264>)
 800e902:	781a      	ldrb	r2, [r3, #0]
 800e904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e906:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e908:	2300      	movs	r3, #0
 800e90a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e90e:	2300      	movs	r3, #0
 800e910:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e916:	7d1b      	ldrb	r3, [r3, #20]
 800e918:	2b02      	cmp	r3, #2
 800e91a:	d10a      	bne.n	800e932 <tcp_slowtmr+0xba>
 800e91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e922:	2b05      	cmp	r3, #5
 800e924:	d905      	bls.n	800e932 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e92a:	3301      	adds	r3, #1
 800e92c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e930:	e11e      	b.n	800eb70 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e934:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e938:	2b0b      	cmp	r3, #11
 800e93a:	d905      	bls.n	800e948 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e93c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e940:	3301      	adds	r3, #1
 800e942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e946:	e113      	b.n	800eb70 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d075      	beq.n	800ea3e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e956:	2b00      	cmp	r3, #0
 800e958:	d006      	beq.n	800e968 <tcp_slowtmr+0xf0>
 800e95a:	4b62      	ldr	r3, [pc, #392]	; (800eae4 <tcp_slowtmr+0x26c>)
 800e95c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e960:	4965      	ldr	r1, [pc, #404]	; (800eaf8 <tcp_slowtmr+0x280>)
 800e962:	4862      	ldr	r0, [pc, #392]	; (800eaec <tcp_slowtmr+0x274>)
 800e964:	f00a fe88 	bl	8019678 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d106      	bne.n	800e97e <tcp_slowtmr+0x106>
 800e970:	4b5c      	ldr	r3, [pc, #368]	; (800eae4 <tcp_slowtmr+0x26c>)
 800e972:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e976:	4961      	ldr	r1, [pc, #388]	; (800eafc <tcp_slowtmr+0x284>)
 800e978:	485c      	ldr	r0, [pc, #368]	; (800eaec <tcp_slowtmr+0x274>)
 800e97a:	f00a fe7d 	bl	8019678 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e980:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e984:	2b0b      	cmp	r3, #11
 800e986:	d905      	bls.n	800e994 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e98c:	3301      	adds	r3, #1
 800e98e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e992:	e0ed      	b.n	800eb70 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e996:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e99a:	3b01      	subs	r3, #1
 800e99c:	4a58      	ldr	r2, [pc, #352]	; (800eb00 <tcp_slowtmr+0x288>)
 800e99e:	5cd3      	ldrb	r3, [r2, r3]
 800e9a0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e9a8:	7c7a      	ldrb	r2, [r7, #17]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d907      	bls.n	800e9be <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	b2da      	uxtb	r2, r3
 800e9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e9c4:	7c7a      	ldrb	r2, [r7, #17]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	f200 80d2 	bhi.w	800eb70 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d108      	bne.n	800e9ec <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e9da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9dc:	f005 f950 	bl	8013c80 <tcp_zero_window_probe>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d014      	beq.n	800ea10 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	623b      	str	r3, [r7, #32]
 800e9ea:	e011      	b.n	800ea10 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9f6:	f004 f815 	bl	8012a24 <tcp_split_unsent_seg>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d107      	bne.n	800ea10 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ea00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea02:	f004 fa95 	bl	8012f30 <tcp_output>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d101      	bne.n	800ea10 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ea10:	6a3b      	ldr	r3, [r7, #32]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	f000 80ac 	beq.w	800eb70 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ea18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ea20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea22:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ea26:	2b06      	cmp	r3, #6
 800ea28:	f200 80a2 	bhi.w	800eb70 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ea2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ea32:	3301      	adds	r3, #1
 800ea34:	b2da      	uxtb	r2, r3
 800ea36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea38:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ea3c:	e098      	b.n	800eb70 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ea3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	db0f      	blt.n	800ea68 <tcp_slowtmr+0x1f0>
 800ea48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ea4e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d008      	beq.n	800ea68 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ea56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea58:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	3301      	adds	r3, #1
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	b21a      	sxth	r2, r3
 800ea64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea66:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ea68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ea6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea70:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ea74:	429a      	cmp	r2, r3
 800ea76:	db7b      	blt.n	800eb70 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ea78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea7a:	f004 fd4b 	bl	8013514 <tcp_rexmit_rto_prepare>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d007      	beq.n	800ea94 <tcp_slowtmr+0x21c>
 800ea84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d171      	bne.n	800eb70 <tcp_slowtmr+0x2f8>
 800ea8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d06d      	beq.n	800eb70 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ea94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea96:	7d1b      	ldrb	r3, [r3, #20]
 800ea98:	2b02      	cmp	r3, #2
 800ea9a:	d03a      	beq.n	800eb12 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ea9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eaa2:	2b0c      	cmp	r3, #12
 800eaa4:	bf28      	it	cs
 800eaa6:	230c      	movcs	r3, #12
 800eaa8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800eaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800eab0:	10db      	asrs	r3, r3, #3
 800eab2:	b21b      	sxth	r3, r3
 800eab4:	461a      	mov	r2, r3
 800eab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eabc:	4413      	add	r3, r2
 800eabe:	7efa      	ldrb	r2, [r7, #27]
 800eac0:	4910      	ldr	r1, [pc, #64]	; (800eb04 <tcp_slowtmr+0x28c>)
 800eac2:	5c8a      	ldrb	r2, [r1, r2]
 800eac4:	4093      	lsls	r3, r2
 800eac6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800eace:	4293      	cmp	r3, r2
 800ead0:	dc1a      	bgt.n	800eb08 <tcp_slowtmr+0x290>
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	b21a      	sxth	r2, r3
 800ead6:	e019      	b.n	800eb0c <tcp_slowtmr+0x294>
 800ead8:	2000cf68 	.word	0x2000cf68
 800eadc:	2000cf7e 	.word	0x2000cf7e
 800eae0:	2000cf74 	.word	0x2000cf74
 800eae4:	0801bea0 	.word	0x0801bea0
 800eae8:	0801c1e4 	.word	0x0801c1e4
 800eaec:	0801bee4 	.word	0x0801bee4
 800eaf0:	0801c210 	.word	0x0801c210
 800eaf4:	0801c23c 	.word	0x0801c23c
 800eaf8:	0801c26c 	.word	0x0801c26c
 800eafc:	0801c2a0 	.word	0x0801c2a0
 800eb00:	0801e2c4 	.word	0x0801e2c4
 800eb04:	0801e2b4 	.word	0x0801e2b4
 800eb08:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800eb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800eb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb14:	2200      	movs	r2, #0
 800eb16:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800eb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eb24:	4293      	cmp	r3, r2
 800eb26:	bf28      	it	cs
 800eb28:	4613      	movcs	r3, r2
 800eb2a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800eb2c:	8a7b      	ldrh	r3, [r7, #18]
 800eb2e:	085b      	lsrs	r3, r3, #1
 800eb30:	b29a      	uxth	r2, r3
 800eb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800eb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800eb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb42:	005b      	lsls	r3, r3, #1
 800eb44:	b29b      	uxth	r3, r3
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d206      	bcs.n	800eb58 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800eb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb4e:	005b      	lsls	r3, r3, #1
 800eb50:	b29a      	uxth	r2, r3
 800eb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800eb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb5a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800eb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800eb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb64:	2200      	movs	r2, #0
 800eb66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800eb6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb6c:	f004 fd42 	bl	80135f4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800eb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb72:	7d1b      	ldrb	r3, [r3, #20]
 800eb74:	2b06      	cmp	r3, #6
 800eb76:	d111      	bne.n	800eb9c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800eb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb7a:	8b5b      	ldrh	r3, [r3, #26]
 800eb7c:	f003 0310 	and.w	r3, r3, #16
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d00b      	beq.n	800eb9c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb84:	4b9d      	ldr	r3, [pc, #628]	; (800edfc <tcp_slowtmr+0x584>)
 800eb86:	681a      	ldr	r2, [r3, #0]
 800eb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8a:	6a1b      	ldr	r3, [r3, #32]
 800eb8c:	1ad3      	subs	r3, r2, r3
 800eb8e:	2b28      	cmp	r3, #40	; 0x28
 800eb90:	d904      	bls.n	800eb9c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800eb92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb96:	3301      	adds	r3, #1
 800eb98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800eb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9e:	7a5b      	ldrb	r3, [r3, #9]
 800eba0:	f003 0308 	and.w	r3, r3, #8
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d04c      	beq.n	800ec42 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800eba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebaa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ebac:	2b04      	cmp	r3, #4
 800ebae:	d003      	beq.n	800ebb8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ebb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ebb4:	2b07      	cmp	r3, #7
 800ebb6:	d144      	bne.n	800ec42 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ebb8:	4b90      	ldr	r3, [pc, #576]	; (800edfc <tcp_slowtmr+0x584>)
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebbe:	6a1b      	ldr	r3, [r3, #32]
 800ebc0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ebc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ebc8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800ebcc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800ebd0:	498b      	ldr	r1, [pc, #556]	; (800ee00 <tcp_slowtmr+0x588>)
 800ebd2:	fba1 1303 	umull	r1, r3, r1, r3
 800ebd6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d90a      	bls.n	800ebf2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ebdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ebe6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ebea:	3301      	adds	r3, #1
 800ebec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ebf0:	e027      	b.n	800ec42 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ebf2:	4b82      	ldr	r3, [pc, #520]	; (800edfc <tcp_slowtmr+0x584>)
 800ebf4:	681a      	ldr	r2, [r3, #0]
 800ebf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf8:	6a1b      	ldr	r3, [r3, #32]
 800ebfa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ebfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfe:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ec02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec04:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ec08:	4618      	mov	r0, r3
 800ec0a:	4b7e      	ldr	r3, [pc, #504]	; (800ee04 <tcp_slowtmr+0x58c>)
 800ec0c:	fb00 f303 	mul.w	r3, r0, r3
 800ec10:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ec12:	497b      	ldr	r1, [pc, #492]	; (800ee00 <tcp_slowtmr+0x588>)
 800ec14:	fba1 1303 	umull	r1, r3, r1, r3
 800ec18:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d911      	bls.n	800ec42 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ec1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec20:	f004 ffee 	bl	8013c00 <tcp_keepalive>
 800ec24:	4603      	mov	r3, r0
 800ec26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ec2a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d107      	bne.n	800ec42 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800ec32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec34:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ec38:	3301      	adds	r3, #1
 800ec3a:	b2da      	uxtb	r2, r3
 800ec3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ec42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d011      	beq.n	800ec6e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ec4a:	4b6c      	ldr	r3, [pc, #432]	; (800edfc <tcp_slowtmr+0x584>)
 800ec4c:	681a      	ldr	r2, [r3, #0]
 800ec4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec50:	6a1b      	ldr	r3, [r3, #32]
 800ec52:	1ad2      	subs	r2, r2, r3
 800ec54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec56:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	005b      	lsls	r3, r3, #1
 800ec60:	440b      	add	r3, r1
 800ec62:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d302      	bcc.n	800ec6e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ec68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec6a:	f000 fea9 	bl	800f9c0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ec6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec70:	7d1b      	ldrb	r3, [r3, #20]
 800ec72:	2b03      	cmp	r3, #3
 800ec74:	d10b      	bne.n	800ec8e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ec76:	4b61      	ldr	r3, [pc, #388]	; (800edfc <tcp_slowtmr+0x584>)
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec7c:	6a1b      	ldr	r3, [r3, #32]
 800ec7e:	1ad3      	subs	r3, r2, r3
 800ec80:	2b28      	cmp	r3, #40	; 0x28
 800ec82:	d904      	bls.n	800ec8e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ec84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec88:	3301      	adds	r3, #1
 800ec8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ec8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec90:	7d1b      	ldrb	r3, [r3, #20]
 800ec92:	2b09      	cmp	r3, #9
 800ec94:	d10b      	bne.n	800ecae <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ec96:	4b59      	ldr	r3, [pc, #356]	; (800edfc <tcp_slowtmr+0x584>)
 800ec98:	681a      	ldr	r2, [r3, #0]
 800ec9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec9c:	6a1b      	ldr	r3, [r3, #32]
 800ec9e:	1ad3      	subs	r3, r2, r3
 800eca0:	2bf0      	cmp	r3, #240	; 0xf0
 800eca2:	d904      	bls.n	800ecae <tcp_slowtmr+0x436>
        ++pcb_remove;
 800eca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eca8:	3301      	adds	r3, #1
 800ecaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ecae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d060      	beq.n	800ed78 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ecb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecbc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ecbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecc0:	f000 fcca 	bl	800f658 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ecc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d010      	beq.n	800ecec <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ecca:	4b4f      	ldr	r3, [pc, #316]	; (800ee08 <tcp_slowtmr+0x590>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d106      	bne.n	800ece2 <tcp_slowtmr+0x46a>
 800ecd4:	4b4d      	ldr	r3, [pc, #308]	; (800ee0c <tcp_slowtmr+0x594>)
 800ecd6:	f240 526d 	movw	r2, #1389	; 0x56d
 800ecda:	494d      	ldr	r1, [pc, #308]	; (800ee10 <tcp_slowtmr+0x598>)
 800ecdc:	484d      	ldr	r0, [pc, #308]	; (800ee14 <tcp_slowtmr+0x59c>)
 800ecde:	f00a fccb 	bl	8019678 <iprintf>
        prev->next = pcb->next;
 800ece2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece4:	68da      	ldr	r2, [r3, #12]
 800ece6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece8:	60da      	str	r2, [r3, #12]
 800ecea:	e00f      	b.n	800ed0c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ecec:	4b46      	ldr	r3, [pc, #280]	; (800ee08 <tcp_slowtmr+0x590>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d006      	beq.n	800ed04 <tcp_slowtmr+0x48c>
 800ecf6:	4b45      	ldr	r3, [pc, #276]	; (800ee0c <tcp_slowtmr+0x594>)
 800ecf8:	f240 5271 	movw	r2, #1393	; 0x571
 800ecfc:	4946      	ldr	r1, [pc, #280]	; (800ee18 <tcp_slowtmr+0x5a0>)
 800ecfe:	4845      	ldr	r0, [pc, #276]	; (800ee14 <tcp_slowtmr+0x59c>)
 800ed00:	f00a fcba 	bl	8019678 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ed04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed06:	68db      	ldr	r3, [r3, #12]
 800ed08:	4a3f      	ldr	r2, [pc, #252]	; (800ee08 <tcp_slowtmr+0x590>)
 800ed0a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ed0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d013      	beq.n	800ed3c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ed14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed16:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ed18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed1a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ed1c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ed1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed20:	3304      	adds	r3, #4
 800ed22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed24:	8ad2      	ldrh	r2, [r2, #22]
 800ed26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed28:	8b09      	ldrh	r1, [r1, #24]
 800ed2a:	9102      	str	r1, [sp, #8]
 800ed2c:	9201      	str	r2, [sp, #4]
 800ed2e:	9300      	str	r3, [sp, #0]
 800ed30:	462b      	mov	r3, r5
 800ed32:	4622      	mov	r2, r4
 800ed34:	4601      	mov	r1, r0
 800ed36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed38:	f004 feae 	bl	8013a98 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ed3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed3e:	691b      	ldr	r3, [r3, #16]
 800ed40:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ed42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed44:	7d1b      	ldrb	r3, [r3, #20]
 800ed46:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ed48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ed4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4e:	68db      	ldr	r3, [r3, #12]
 800ed50:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ed52:	6838      	ldr	r0, [r7, #0]
 800ed54:	f7fe ffee 	bl	800dd34 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ed58:	4b30      	ldr	r3, [pc, #192]	; (800ee1c <tcp_slowtmr+0x5a4>)
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d004      	beq.n	800ed6e <tcp_slowtmr+0x4f6>
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f06f 010c 	mvn.w	r1, #12
 800ed6a:	68b8      	ldr	r0, [r7, #8]
 800ed6c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ed6e:	4b2b      	ldr	r3, [pc, #172]	; (800ee1c <tcp_slowtmr+0x5a4>)
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d037      	beq.n	800ede6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ed76:	e590      	b.n	800e89a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ed78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed7a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ed7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed7e:	68db      	ldr	r3, [r3, #12]
 800ed80:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ed82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed84:	7f1b      	ldrb	r3, [r3, #28]
 800ed86:	3301      	adds	r3, #1
 800ed88:	b2da      	uxtb	r2, r3
 800ed8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ed8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed90:	7f1a      	ldrb	r2, [r3, #28]
 800ed92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed94:	7f5b      	ldrb	r3, [r3, #29]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d325      	bcc.n	800ede6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ed9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800eda0:	4b1e      	ldr	r3, [pc, #120]	; (800ee1c <tcp_slowtmr+0x5a4>)
 800eda2:	2200      	movs	r2, #0
 800eda4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800eda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800edac:	2b00      	cmp	r3, #0
 800edae:	d00b      	beq.n	800edc8 <tcp_slowtmr+0x550>
 800edb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800edb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edb8:	6912      	ldr	r2, [r2, #16]
 800edba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800edbc:	4610      	mov	r0, r2
 800edbe:	4798      	blx	r3
 800edc0:	4603      	mov	r3, r0
 800edc2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800edc6:	e002      	b.n	800edce <tcp_slowtmr+0x556>
 800edc8:	2300      	movs	r3, #0
 800edca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800edce:	4b13      	ldr	r3, [pc, #76]	; (800ee1c <tcp_slowtmr+0x5a4>)
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d000      	beq.n	800edd8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800edd6:	e560      	b.n	800e89a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800edd8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d102      	bne.n	800ede6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ede0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ede2:	f004 f8a5 	bl	8012f30 <tcp_output>
  while (pcb != NULL) {
 800ede6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede8:	2b00      	cmp	r3, #0
 800edea:	f47f ad5c 	bne.w	800e8a6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800edee:	2300      	movs	r3, #0
 800edf0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800edf2:	4b0b      	ldr	r3, [pc, #44]	; (800ee20 <tcp_slowtmr+0x5a8>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800edf8:	e067      	b.n	800eeca <tcp_slowtmr+0x652>
 800edfa:	bf00      	nop
 800edfc:	2000cf68 	.word	0x2000cf68
 800ee00:	10624dd3 	.word	0x10624dd3
 800ee04:	000124f8 	.word	0x000124f8
 800ee08:	2000cf74 	.word	0x2000cf74
 800ee0c:	0801bea0 	.word	0x0801bea0
 800ee10:	0801c2d8 	.word	0x0801c2d8
 800ee14:	0801bee4 	.word	0x0801bee4
 800ee18:	0801c304 	.word	0x0801c304
 800ee1c:	2000cf7c 	.word	0x2000cf7c
 800ee20:	2000cf78 	.word	0x2000cf78
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ee24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee26:	7d1b      	ldrb	r3, [r3, #20]
 800ee28:	2b0a      	cmp	r3, #10
 800ee2a:	d006      	beq.n	800ee3a <tcp_slowtmr+0x5c2>
 800ee2c:	4b2b      	ldr	r3, [pc, #172]	; (800eedc <tcp_slowtmr+0x664>)
 800ee2e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ee32:	492b      	ldr	r1, [pc, #172]	; (800eee0 <tcp_slowtmr+0x668>)
 800ee34:	482b      	ldr	r0, [pc, #172]	; (800eee4 <tcp_slowtmr+0x66c>)
 800ee36:	f00a fc1f 	bl	8019678 <iprintf>
    pcb_remove = 0;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ee40:	4b29      	ldr	r3, [pc, #164]	; (800eee8 <tcp_slowtmr+0x670>)
 800ee42:	681a      	ldr	r2, [r3, #0]
 800ee44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee46:	6a1b      	ldr	r3, [r3, #32]
 800ee48:	1ad3      	subs	r3, r2, r3
 800ee4a:	2bf0      	cmp	r3, #240	; 0xf0
 800ee4c:	d904      	bls.n	800ee58 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ee4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee52:	3301      	adds	r3, #1
 800ee54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ee58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d02f      	beq.n	800eec0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ee60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee62:	f000 fbf9 	bl	800f658 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ee66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d010      	beq.n	800ee8e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ee6c:	4b1f      	ldr	r3, [pc, #124]	; (800eeec <tcp_slowtmr+0x674>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d106      	bne.n	800ee84 <tcp_slowtmr+0x60c>
 800ee76:	4b19      	ldr	r3, [pc, #100]	; (800eedc <tcp_slowtmr+0x664>)
 800ee78:	f240 52af 	movw	r2, #1455	; 0x5af
 800ee7c:	491c      	ldr	r1, [pc, #112]	; (800eef0 <tcp_slowtmr+0x678>)
 800ee7e:	4819      	ldr	r0, [pc, #100]	; (800eee4 <tcp_slowtmr+0x66c>)
 800ee80:	f00a fbfa 	bl	8019678 <iprintf>
        prev->next = pcb->next;
 800ee84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee86:	68da      	ldr	r2, [r3, #12]
 800ee88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8a:	60da      	str	r2, [r3, #12]
 800ee8c:	e00f      	b.n	800eeae <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ee8e:	4b17      	ldr	r3, [pc, #92]	; (800eeec <tcp_slowtmr+0x674>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d006      	beq.n	800eea6 <tcp_slowtmr+0x62e>
 800ee98:	4b10      	ldr	r3, [pc, #64]	; (800eedc <tcp_slowtmr+0x664>)
 800ee9a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ee9e:	4915      	ldr	r1, [pc, #84]	; (800eef4 <tcp_slowtmr+0x67c>)
 800eea0:	4810      	ldr	r0, [pc, #64]	; (800eee4 <tcp_slowtmr+0x66c>)
 800eea2:	f00a fbe9 	bl	8019678 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800eea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea8:	68db      	ldr	r3, [r3, #12]
 800eeaa:	4a10      	ldr	r2, [pc, #64]	; (800eeec <tcp_slowtmr+0x674>)
 800eeac:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800eeae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800eeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800eeb8:	69f8      	ldr	r0, [r7, #28]
 800eeba:	f7fe ff3b 	bl	800dd34 <tcp_free>
 800eebe:	e004      	b.n	800eeca <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800eec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800eec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec6:	68db      	ldr	r3, [r3, #12]
 800eec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800eeca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d1a9      	bne.n	800ee24 <tcp_slowtmr+0x5ac>
    }
  }
}
 800eed0:	bf00      	nop
 800eed2:	bf00      	nop
 800eed4:	3730      	adds	r7, #48	; 0x30
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bdb0      	pop	{r4, r5, r7, pc}
 800eeda:	bf00      	nop
 800eedc:	0801bea0 	.word	0x0801bea0
 800eee0:	0801c330 	.word	0x0801c330
 800eee4:	0801bee4 	.word	0x0801bee4
 800eee8:	2000cf68 	.word	0x2000cf68
 800eeec:	2000cf78 	.word	0x2000cf78
 800eef0:	0801c360 	.word	0x0801c360
 800eef4:	0801c388 	.word	0x0801c388

0800eef8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800eefe:	4b2d      	ldr	r3, [pc, #180]	; (800efb4 <tcp_fasttmr+0xbc>)
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	3301      	adds	r3, #1
 800ef04:	b2da      	uxtb	r2, r3
 800ef06:	4b2b      	ldr	r3, [pc, #172]	; (800efb4 <tcp_fasttmr+0xbc>)
 800ef08:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ef0a:	4b2b      	ldr	r3, [pc, #172]	; (800efb8 <tcp_fasttmr+0xc0>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ef10:	e048      	b.n	800efa4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	7f9a      	ldrb	r2, [r3, #30]
 800ef16:	4b27      	ldr	r3, [pc, #156]	; (800efb4 <tcp_fasttmr+0xbc>)
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d03f      	beq.n	800ef9e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ef1e:	4b25      	ldr	r3, [pc, #148]	; (800efb4 <tcp_fasttmr+0xbc>)
 800ef20:	781a      	ldrb	r2, [r3, #0]
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	8b5b      	ldrh	r3, [r3, #26]
 800ef2a:	f003 0301 	and.w	r3, r3, #1
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d010      	beq.n	800ef54 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	8b5b      	ldrh	r3, [r3, #26]
 800ef36:	f043 0302 	orr.w	r3, r3, #2
 800ef3a:	b29a      	uxth	r2, r3
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f003 fff5 	bl	8012f30 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	8b5b      	ldrh	r3, [r3, #26]
 800ef4a:	f023 0303 	bic.w	r3, r3, #3
 800ef4e:	b29a      	uxth	r2, r3
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	8b5b      	ldrh	r3, [r3, #26]
 800ef58:	f003 0308 	and.w	r3, r3, #8
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d009      	beq.n	800ef74 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	8b5b      	ldrh	r3, [r3, #26]
 800ef64:	f023 0308 	bic.w	r3, r3, #8
 800ef68:	b29a      	uxth	r2, r3
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f7ff f874 	bl	800e05c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	68db      	ldr	r3, [r3, #12]
 800ef78:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d00a      	beq.n	800ef98 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ef82:	4b0e      	ldr	r3, [pc, #56]	; (800efbc <tcp_fasttmr+0xc4>)
 800ef84:	2200      	movs	r2, #0
 800ef86:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 f819 	bl	800efc0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ef8e:	4b0b      	ldr	r3, [pc, #44]	; (800efbc <tcp_fasttmr+0xc4>)
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d000      	beq.n	800ef98 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ef96:	e7b8      	b.n	800ef0a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	607b      	str	r3, [r7, #4]
 800ef9c:	e002      	b.n	800efa4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d1b3      	bne.n	800ef12 <tcp_fasttmr+0x1a>
    }
  }
}
 800efaa:	bf00      	nop
 800efac:	bf00      	nop
 800efae:	3708      	adds	r7, #8
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	2000cf7e 	.word	0x2000cf7e
 800efb8:	2000cf74 	.word	0x2000cf74
 800efbc:	2000cf7c 	.word	0x2000cf7c

0800efc0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800efc0:	b590      	push	{r4, r7, lr}
 800efc2:	b085      	sub	sp, #20
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d109      	bne.n	800efe2 <tcp_process_refused_data+0x22>
 800efce:	4b37      	ldr	r3, [pc, #220]	; (800f0ac <tcp_process_refused_data+0xec>)
 800efd0:	f240 6209 	movw	r2, #1545	; 0x609
 800efd4:	4936      	ldr	r1, [pc, #216]	; (800f0b0 <tcp_process_refused_data+0xf0>)
 800efd6:	4837      	ldr	r0, [pc, #220]	; (800f0b4 <tcp_process_refused_data+0xf4>)
 800efd8:	f00a fb4e 	bl	8019678 <iprintf>
 800efdc:	f06f 030f 	mvn.w	r3, #15
 800efe0:	e060      	b.n	800f0a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800efe6:	7b5b      	ldrb	r3, [r3, #13]
 800efe8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800efee:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2200      	movs	r2, #0
 800eff4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800effc:	2b00      	cmp	r3, #0
 800effe:	d00b      	beq.n	800f018 <tcp_process_refused_data+0x58>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6918      	ldr	r0, [r3, #16]
 800f00a:	2300      	movs	r3, #0
 800f00c:	68ba      	ldr	r2, [r7, #8]
 800f00e:	6879      	ldr	r1, [r7, #4]
 800f010:	47a0      	blx	r4
 800f012:	4603      	mov	r3, r0
 800f014:	73fb      	strb	r3, [r7, #15]
 800f016:	e007      	b.n	800f028 <tcp_process_refused_data+0x68>
 800f018:	2300      	movs	r3, #0
 800f01a:	68ba      	ldr	r2, [r7, #8]
 800f01c:	6879      	ldr	r1, [r7, #4]
 800f01e:	2000      	movs	r0, #0
 800f020:	f000 f8a4 	bl	800f16c <tcp_recv_null>
 800f024:	4603      	mov	r3, r0
 800f026:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d12a      	bne.n	800f086 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f030:	7bbb      	ldrb	r3, [r7, #14]
 800f032:	f003 0320 	and.w	r3, r3, #32
 800f036:	2b00      	cmp	r3, #0
 800f038:	d033      	beq.n	800f0a2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f03e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f042:	d005      	beq.n	800f050 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f048:	3301      	adds	r3, #1
 800f04a:	b29a      	uxth	r2, r3
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f056:	2b00      	cmp	r3, #0
 800f058:	d00b      	beq.n	800f072 <tcp_process_refused_data+0xb2>
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6918      	ldr	r0, [r3, #16]
 800f064:	2300      	movs	r3, #0
 800f066:	2200      	movs	r2, #0
 800f068:	6879      	ldr	r1, [r7, #4]
 800f06a:	47a0      	blx	r4
 800f06c:	4603      	mov	r3, r0
 800f06e:	73fb      	strb	r3, [r7, #15]
 800f070:	e001      	b.n	800f076 <tcp_process_refused_data+0xb6>
 800f072:	2300      	movs	r3, #0
 800f074:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f07a:	f113 0f0d 	cmn.w	r3, #13
 800f07e:	d110      	bne.n	800f0a2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f080:	f06f 030c 	mvn.w	r3, #12
 800f084:	e00e      	b.n	800f0a4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f08a:	f113 0f0d 	cmn.w	r3, #13
 800f08e:	d102      	bne.n	800f096 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f090:	f06f 030c 	mvn.w	r3, #12
 800f094:	e006      	b.n	800f0a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	68ba      	ldr	r2, [r7, #8]
 800f09a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f09c:	f06f 0304 	mvn.w	r3, #4
 800f0a0:	e000      	b.n	800f0a4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f0a2:	2300      	movs	r3, #0
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3714      	adds	r7, #20
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd90      	pop	{r4, r7, pc}
 800f0ac:	0801bea0 	.word	0x0801bea0
 800f0b0:	0801c3b0 	.word	0x0801c3b0
 800f0b4:	0801bee4 	.word	0x0801bee4

0800f0b8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f0c0:	e007      	b.n	800f0d2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 f80a 	bl	800f0e2 <tcp_seg_free>
    seg = next;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d1f4      	bne.n	800f0c2 <tcp_segs_free+0xa>
  }
}
 800f0d8:	bf00      	nop
 800f0da:	bf00      	nop
 800f0dc:	3710      	adds	r7, #16
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	b082      	sub	sp, #8
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d00c      	beq.n	800f10a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d004      	beq.n	800f102 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7fe fb5d 	bl	800d7bc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f102:	6879      	ldr	r1, [r7, #4]
 800f104:	2003      	movs	r0, #3
 800f106:	f7fd fc77 	bl	800c9f8 <memp_free>
  }
}
 800f10a:	bf00      	nop
 800f10c:	3708      	adds	r7, #8
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
	...

0800f114 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d106      	bne.n	800f130 <tcp_seg_copy+0x1c>
 800f122:	4b0f      	ldr	r3, [pc, #60]	; (800f160 <tcp_seg_copy+0x4c>)
 800f124:	f240 6282 	movw	r2, #1666	; 0x682
 800f128:	490e      	ldr	r1, [pc, #56]	; (800f164 <tcp_seg_copy+0x50>)
 800f12a:	480f      	ldr	r0, [pc, #60]	; (800f168 <tcp_seg_copy+0x54>)
 800f12c:	f00a faa4 	bl	8019678 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f130:	2003      	movs	r0, #3
 800f132:	f7fd fbeb 	bl	800c90c <memp_malloc>
 800f136:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d101      	bne.n	800f142 <tcp_seg_copy+0x2e>
    return NULL;
 800f13e:	2300      	movs	r3, #0
 800f140:	e00a      	b.n	800f158 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f142:	2210      	movs	r2, #16
 800f144:	6879      	ldr	r1, [r7, #4]
 800f146:	68f8      	ldr	r0, [r7, #12]
 800f148:	f00a f9a0 	bl	801948c <memcpy>
  pbuf_ref(cseg->p);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	4618      	mov	r0, r3
 800f152:	f7fe fbd9 	bl	800d908 <pbuf_ref>
  return cseg;
 800f156:	68fb      	ldr	r3, [r7, #12]
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3710      	adds	r7, #16
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	0801bea0 	.word	0x0801bea0
 800f164:	0801c3f4 	.word	0x0801c3f4
 800f168:	0801bee4 	.word	0x0801bee4

0800f16c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b084      	sub	sp, #16
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	60b9      	str	r1, [r7, #8]
 800f176:	607a      	str	r2, [r7, #4]
 800f178:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d109      	bne.n	800f194 <tcp_recv_null+0x28>
 800f180:	4b12      	ldr	r3, [pc, #72]	; (800f1cc <tcp_recv_null+0x60>)
 800f182:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f186:	4912      	ldr	r1, [pc, #72]	; (800f1d0 <tcp_recv_null+0x64>)
 800f188:	4812      	ldr	r0, [pc, #72]	; (800f1d4 <tcp_recv_null+0x68>)
 800f18a:	f00a fa75 	bl	8019678 <iprintf>
 800f18e:	f06f 030f 	mvn.w	r3, #15
 800f192:	e016      	b.n	800f1c2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d009      	beq.n	800f1ae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	891b      	ldrh	r3, [r3, #8]
 800f19e:	4619      	mov	r1, r3
 800f1a0:	68b8      	ldr	r0, [r7, #8]
 800f1a2:	f7ff fad3 	bl	800e74c <tcp_recved>
    pbuf_free(p);
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f7fe fb08 	bl	800d7bc <pbuf_free>
 800f1ac:	e008      	b.n	800f1c0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f1ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d104      	bne.n	800f1c0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f1b6:	68b8      	ldr	r0, [r7, #8]
 800f1b8:	f7fe ffba 	bl	800e130 <tcp_close>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	e000      	b.n	800f1c2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f1c0:	2300      	movs	r3, #0
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3710      	adds	r7, #16
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	0801bea0 	.word	0x0801bea0
 800f1d0:	0801c410 	.word	0x0801c410
 800f1d4:	0801bee4 	.word	0x0801bee4

0800f1d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b086      	sub	sp, #24
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	4603      	mov	r3, r0
 800f1e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f1e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	db01      	blt.n	800f1ee <tcp_kill_prio+0x16>
 800f1ea:	79fb      	ldrb	r3, [r7, #7]
 800f1ec:	e000      	b.n	800f1f0 <tcp_kill_prio+0x18>
 800f1ee:	237f      	movs	r3, #127	; 0x7f
 800f1f0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f1f2:	7afb      	ldrb	r3, [r7, #11]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d034      	beq.n	800f262 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f1f8:	7afb      	ldrb	r3, [r7, #11]
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f1fe:	2300      	movs	r3, #0
 800f200:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f202:	2300      	movs	r3, #0
 800f204:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f206:	4b19      	ldr	r3, [pc, #100]	; (800f26c <tcp_kill_prio+0x94>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	617b      	str	r3, [r7, #20]
 800f20c:	e01f      	b.n	800f24e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	7d5b      	ldrb	r3, [r3, #21]
 800f212:	7afa      	ldrb	r2, [r7, #11]
 800f214:	429a      	cmp	r2, r3
 800f216:	d80c      	bhi.n	800f232 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f21c:	7afa      	ldrb	r2, [r7, #11]
 800f21e:	429a      	cmp	r2, r3
 800f220:	d112      	bne.n	800f248 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f222:	4b13      	ldr	r3, [pc, #76]	; (800f270 <tcp_kill_prio+0x98>)
 800f224:	681a      	ldr	r2, [r3, #0]
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	6a1b      	ldr	r3, [r3, #32]
 800f22a:	1ad3      	subs	r3, r2, r3
 800f22c:	68fa      	ldr	r2, [r7, #12]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d80a      	bhi.n	800f248 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f232:	4b0f      	ldr	r3, [pc, #60]	; (800f270 <tcp_kill_prio+0x98>)
 800f234:	681a      	ldr	r2, [r3, #0]
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	6a1b      	ldr	r3, [r3, #32]
 800f23a:	1ad3      	subs	r3, r2, r3
 800f23c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	7d5b      	ldrb	r3, [r3, #21]
 800f246:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	68db      	ldr	r3, [r3, #12]
 800f24c:	617b      	str	r3, [r7, #20]
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d1dc      	bne.n	800f20e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d004      	beq.n	800f264 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f25a:	6938      	ldr	r0, [r7, #16]
 800f25c:	f7ff f8ae 	bl	800e3bc <tcp_abort>
 800f260:	e000      	b.n	800f264 <tcp_kill_prio+0x8c>
    return;
 800f262:	bf00      	nop
  }
}
 800f264:	3718      	adds	r7, #24
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	2000cf74 	.word	0x2000cf74
 800f270:	2000cf68 	.word	0x2000cf68

0800f274 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b086      	sub	sp, #24
 800f278:	af00      	add	r7, sp, #0
 800f27a:	4603      	mov	r3, r0
 800f27c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f27e:	79fb      	ldrb	r3, [r7, #7]
 800f280:	2b08      	cmp	r3, #8
 800f282:	d009      	beq.n	800f298 <tcp_kill_state+0x24>
 800f284:	79fb      	ldrb	r3, [r7, #7]
 800f286:	2b09      	cmp	r3, #9
 800f288:	d006      	beq.n	800f298 <tcp_kill_state+0x24>
 800f28a:	4b1a      	ldr	r3, [pc, #104]	; (800f2f4 <tcp_kill_state+0x80>)
 800f28c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f290:	4919      	ldr	r1, [pc, #100]	; (800f2f8 <tcp_kill_state+0x84>)
 800f292:	481a      	ldr	r0, [pc, #104]	; (800f2fc <tcp_kill_state+0x88>)
 800f294:	f00a f9f0 	bl	8019678 <iprintf>

  inactivity = 0;
 800f298:	2300      	movs	r3, #0
 800f29a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f29c:	2300      	movs	r3, #0
 800f29e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2a0:	4b17      	ldr	r3, [pc, #92]	; (800f300 <tcp_kill_state+0x8c>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	617b      	str	r3, [r7, #20]
 800f2a6:	e017      	b.n	800f2d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	7d1b      	ldrb	r3, [r3, #20]
 800f2ac:	79fa      	ldrb	r2, [r7, #7]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d10f      	bne.n	800f2d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f2b2:	4b14      	ldr	r3, [pc, #80]	; (800f304 <tcp_kill_state+0x90>)
 800f2b4:	681a      	ldr	r2, [r3, #0]
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	6a1b      	ldr	r3, [r3, #32]
 800f2ba:	1ad3      	subs	r3, r2, r3
 800f2bc:	68fa      	ldr	r2, [r7, #12]
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	d807      	bhi.n	800f2d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f2c2:	4b10      	ldr	r3, [pc, #64]	; (800f304 <tcp_kill_state+0x90>)
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	6a1b      	ldr	r3, [r3, #32]
 800f2ca:	1ad3      	subs	r3, r2, r3
 800f2cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	68db      	ldr	r3, [r3, #12]
 800f2d6:	617b      	str	r3, [r7, #20]
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d1e4      	bne.n	800f2a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d003      	beq.n	800f2ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f2e4:	2100      	movs	r1, #0
 800f2e6:	6938      	ldr	r0, [r7, #16]
 800f2e8:	f7fe ffaa 	bl	800e240 <tcp_abandon>
  }
}
 800f2ec:	bf00      	nop
 800f2ee:	3718      	adds	r7, #24
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	0801bea0 	.word	0x0801bea0
 800f2f8:	0801c42c 	.word	0x0801c42c
 800f2fc:	0801bee4 	.word	0x0801bee4
 800f300:	2000cf74 	.word	0x2000cf74
 800f304:	2000cf68 	.word	0x2000cf68

0800f308 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b084      	sub	sp, #16
 800f30c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f30e:	2300      	movs	r3, #0
 800f310:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f312:	2300      	movs	r3, #0
 800f314:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f316:	4b12      	ldr	r3, [pc, #72]	; (800f360 <tcp_kill_timewait+0x58>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	60fb      	str	r3, [r7, #12]
 800f31c:	e012      	b.n	800f344 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f31e:	4b11      	ldr	r3, [pc, #68]	; (800f364 <tcp_kill_timewait+0x5c>)
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	6a1b      	ldr	r3, [r3, #32]
 800f326:	1ad3      	subs	r3, r2, r3
 800f328:	687a      	ldr	r2, [r7, #4]
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d807      	bhi.n	800f33e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f32e:	4b0d      	ldr	r3, [pc, #52]	; (800f364 <tcp_kill_timewait+0x5c>)
 800f330:	681a      	ldr	r2, [r3, #0]
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	6a1b      	ldr	r3, [r3, #32]
 800f336:	1ad3      	subs	r3, r2, r3
 800f338:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	68db      	ldr	r3, [r3, #12]
 800f342:	60fb      	str	r3, [r7, #12]
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d1e9      	bne.n	800f31e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d002      	beq.n	800f356 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f350:	68b8      	ldr	r0, [r7, #8]
 800f352:	f7ff f833 	bl	800e3bc <tcp_abort>
  }
}
 800f356:	bf00      	nop
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	2000cf78 	.word	0x2000cf78
 800f364:	2000cf68 	.word	0x2000cf68

0800f368 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f36e:	4b10      	ldr	r3, [pc, #64]	; (800f3b0 <tcp_handle_closepend+0x48>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f374:	e014      	b.n	800f3a0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	68db      	ldr	r3, [r3, #12]
 800f37a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	8b5b      	ldrh	r3, [r3, #26]
 800f380:	f003 0308 	and.w	r3, r3, #8
 800f384:	2b00      	cmp	r3, #0
 800f386:	d009      	beq.n	800f39c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	8b5b      	ldrh	r3, [r3, #26]
 800f38c:	f023 0308 	bic.w	r3, r3, #8
 800f390:	b29a      	uxth	r2, r3
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f7fe fe60 	bl	800e05c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d1e7      	bne.n	800f376 <tcp_handle_closepend+0xe>
  }
}
 800f3a6:	bf00      	nop
 800f3a8:	bf00      	nop
 800f3aa:	3708      	adds	r7, #8
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	2000cf74 	.word	0x2000cf74

0800f3b4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b084      	sub	sp, #16
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f3be:	2001      	movs	r0, #1
 800f3c0:	f7fd faa4 	bl	800c90c <memp_malloc>
 800f3c4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d126      	bne.n	800f41a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f3cc:	f7ff ffcc 	bl	800f368 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f3d0:	f7ff ff9a 	bl	800f308 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f3d4:	2001      	movs	r0, #1
 800f3d6:	f7fd fa99 	bl	800c90c <memp_malloc>
 800f3da:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d11b      	bne.n	800f41a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f3e2:	2009      	movs	r0, #9
 800f3e4:	f7ff ff46 	bl	800f274 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f3e8:	2001      	movs	r0, #1
 800f3ea:	f7fd fa8f 	bl	800c90c <memp_malloc>
 800f3ee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d111      	bne.n	800f41a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f3f6:	2008      	movs	r0, #8
 800f3f8:	f7ff ff3c 	bl	800f274 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f3fc:	2001      	movs	r0, #1
 800f3fe:	f7fd fa85 	bl	800c90c <memp_malloc>
 800f402:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d107      	bne.n	800f41a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f40a:	79fb      	ldrb	r3, [r7, #7]
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7ff fee3 	bl	800f1d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f412:	2001      	movs	r0, #1
 800f414:	f7fd fa7a 	bl	800c90c <memp_malloc>
 800f418:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d03f      	beq.n	800f4a0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f420:	229c      	movs	r2, #156	; 0x9c
 800f422:	2100      	movs	r1, #0
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	f00a f83f 	bl	80194a8 <memset>
    pcb->prio = prio;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	79fa      	ldrb	r2, [r7, #7]
 800f42e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f436:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f440:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	22ff      	movs	r2, #255	; 0xff
 800f44e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f456:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2206      	movs	r2, #6
 800f45c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2206      	movs	r2, #6
 800f464:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f46c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2201      	movs	r2, #1
 800f472:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f476:	4b0d      	ldr	r3, [pc, #52]	; (800f4ac <tcp_alloc+0xf8>)
 800f478:	681a      	ldr	r2, [r3, #0]
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f47e:	4b0c      	ldr	r3, [pc, #48]	; (800f4b0 <tcp_alloc+0xfc>)
 800f480:	781a      	ldrb	r2, [r3, #0]
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f48c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	4a08      	ldr	r2, [pc, #32]	; (800f4b4 <tcp_alloc+0x100>)
 800f494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	4a07      	ldr	r2, [pc, #28]	; (800f4b8 <tcp_alloc+0x104>)
 800f49c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3710      	adds	r7, #16
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	bf00      	nop
 800f4ac:	2000cf68 	.word	0x2000cf68
 800f4b0:	2000cf7e 	.word	0x2000cf7e
 800f4b4:	0800f16d 	.word	0x0800f16d
 800f4b8:	006ddd00 	.word	0x006ddd00

0800f4bc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b084      	sub	sp, #16
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f4c6:	2040      	movs	r0, #64	; 0x40
 800f4c8:	f7ff ff74 	bl	800f3b4 <tcp_alloc>
 800f4cc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3710      	adds	r7, #16
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d002      	beq.n	800f4ee <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	683a      	ldr	r2, [r7, #0]
 800f4ec:	611a      	str	r2, [r3, #16]
  }
}
 800f4ee:	bf00      	nop
 800f4f0:	370c      	adds	r7, #12
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f8:	4770      	bx	lr
	...

0800f4fc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 800f504:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d00e      	beq.n	800f52a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	7d1b      	ldrb	r3, [r3, #20]
 800f510:	2b01      	cmp	r3, #1
 800f512:	d106      	bne.n	800f522 <tcp_recv+0x26>
 800f514:	4b07      	ldr	r3, [pc, #28]	; (800f534 <tcp_recv+0x38>)
 800f516:	f240 72df 	movw	r2, #2015	; 0x7df
 800f51a:	4907      	ldr	r1, [pc, #28]	; (800f538 <tcp_recv+0x3c>)
 800f51c:	4807      	ldr	r0, [pc, #28]	; (800f53c <tcp_recv+0x40>)
 800f51e:	f00a f8ab 	bl	8019678 <iprintf>
    pcb->recv = recv;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	683a      	ldr	r2, [r7, #0]
 800f526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f52a:	bf00      	nop
 800f52c:	3708      	adds	r7, #8
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}
 800f532:	bf00      	nop
 800f534:	0801bea0 	.word	0x0801bea0
 800f538:	0801c43c 	.word	0x0801c43c
 800f53c:	0801bee4 	.word	0x0801bee4

0800f540 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b082      	sub	sp, #8
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
 800f548:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d00e      	beq.n	800f56e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	7d1b      	ldrb	r3, [r3, #20]
 800f554:	2b01      	cmp	r3, #1
 800f556:	d106      	bne.n	800f566 <tcp_sent+0x26>
 800f558:	4b07      	ldr	r3, [pc, #28]	; (800f578 <tcp_sent+0x38>)
 800f55a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f55e:	4907      	ldr	r1, [pc, #28]	; (800f57c <tcp_sent+0x3c>)
 800f560:	4807      	ldr	r0, [pc, #28]	; (800f580 <tcp_sent+0x40>)
 800f562:	f00a f889 	bl	8019678 <iprintf>
    pcb->sent = sent;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	683a      	ldr	r2, [r7, #0]
 800f56a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f56e:	bf00      	nop
 800f570:	3708      	adds	r7, #8
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	0801bea0 	.word	0x0801bea0
 800f57c:	0801c464 	.word	0x0801c464
 800f580:	0801bee4 	.word	0x0801bee4

0800f584 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d00e      	beq.n	800f5b2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	7d1b      	ldrb	r3, [r3, #20]
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d106      	bne.n	800f5aa <tcp_err+0x26>
 800f59c:	4b07      	ldr	r3, [pc, #28]	; (800f5bc <tcp_err+0x38>)
 800f59e:	f640 020d 	movw	r2, #2061	; 0x80d
 800f5a2:	4907      	ldr	r1, [pc, #28]	; (800f5c0 <tcp_err+0x3c>)
 800f5a4:	4807      	ldr	r0, [pc, #28]	; (800f5c4 <tcp_err+0x40>)
 800f5a6:	f00a f867 	bl	8019678 <iprintf>
    pcb->errf = err;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	683a      	ldr	r2, [r7, #0]
 800f5ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f5b2:	bf00      	nop
 800f5b4:	3708      	adds	r7, #8
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	0801bea0 	.word	0x0801bea0
 800f5c0:	0801c48c 	.word	0x0801c48c
 800f5c4:	0801bee4 	.word	0x0801bee4

0800f5c8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b085      	sub	sp, #20
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d008      	beq.n	800f5ea <tcp_accept+0x22>
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	7d1b      	ldrb	r3, [r3, #20]
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d104      	bne.n	800f5ea <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	683a      	ldr	r2, [r7, #0]
 800f5e8:	619a      	str	r2, [r3, #24]
  }
}
 800f5ea:	bf00      	nop
 800f5ec:	3714      	adds	r7, #20
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f4:	4770      	bx	lr
	...

0800f5f8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b084      	sub	sp, #16
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	4613      	mov	r3, r2
 800f604:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d107      	bne.n	800f61c <tcp_poll+0x24>
 800f60c:	4b0e      	ldr	r3, [pc, #56]	; (800f648 <tcp_poll+0x50>)
 800f60e:	f640 023d 	movw	r2, #2109	; 0x83d
 800f612:	490e      	ldr	r1, [pc, #56]	; (800f64c <tcp_poll+0x54>)
 800f614:	480e      	ldr	r0, [pc, #56]	; (800f650 <tcp_poll+0x58>)
 800f616:	f00a f82f 	bl	8019678 <iprintf>
 800f61a:	e011      	b.n	800f640 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	7d1b      	ldrb	r3, [r3, #20]
 800f620:	2b01      	cmp	r3, #1
 800f622:	d106      	bne.n	800f632 <tcp_poll+0x3a>
 800f624:	4b08      	ldr	r3, [pc, #32]	; (800f648 <tcp_poll+0x50>)
 800f626:	f640 023e 	movw	r2, #2110	; 0x83e
 800f62a:	490a      	ldr	r1, [pc, #40]	; (800f654 <tcp_poll+0x5c>)
 800f62c:	4808      	ldr	r0, [pc, #32]	; (800f650 <tcp_poll+0x58>)
 800f62e:	f00a f823 	bl	8019678 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	68ba      	ldr	r2, [r7, #8]
 800f636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	79fa      	ldrb	r2, [r7, #7]
 800f63e:	775a      	strb	r2, [r3, #29]
}
 800f640:	3710      	adds	r7, #16
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}
 800f646:	bf00      	nop
 800f648:	0801bea0 	.word	0x0801bea0
 800f64c:	0801c4b4 	.word	0x0801c4b4
 800f650:	0801bee4 	.word	0x0801bee4
 800f654:	0801c4cc 	.word	0x0801c4cc

0800f658 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b082      	sub	sp, #8
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d107      	bne.n	800f676 <tcp_pcb_purge+0x1e>
 800f666:	4b21      	ldr	r3, [pc, #132]	; (800f6ec <tcp_pcb_purge+0x94>)
 800f668:	f640 0251 	movw	r2, #2129	; 0x851
 800f66c:	4920      	ldr	r1, [pc, #128]	; (800f6f0 <tcp_pcb_purge+0x98>)
 800f66e:	4821      	ldr	r0, [pc, #132]	; (800f6f4 <tcp_pcb_purge+0x9c>)
 800f670:	f00a f802 	bl	8019678 <iprintf>
 800f674:	e037      	b.n	800f6e6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	7d1b      	ldrb	r3, [r3, #20]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d033      	beq.n	800f6e6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f682:	2b0a      	cmp	r3, #10
 800f684:	d02f      	beq.n	800f6e6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f68a:	2b01      	cmp	r3, #1
 800f68c:	d02b      	beq.n	800f6e6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f692:	2b00      	cmp	r3, #0
 800f694:	d007      	beq.n	800f6a6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fe f88e 	bl	800d7bc <pbuf_free>
      pcb->refused_data = NULL;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d002      	beq.n	800f6b4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f000 f986 	bl	800f9c0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6ba:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7ff fcf9 	bl	800f0b8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7ff fcf4 	bl	800f0b8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	66da      	str	r2, [r3, #108]	; 0x6c
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f6e6:	3708      	adds	r7, #8
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}
 800f6ec:	0801bea0 	.word	0x0801bea0
 800f6f0:	0801c4ec 	.word	0x0801c4ec
 800f6f4:	0801bee4 	.word	0x0801bee4

0800f6f8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b084      	sub	sp, #16
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d106      	bne.n	800f716 <tcp_pcb_remove+0x1e>
 800f708:	4b3e      	ldr	r3, [pc, #248]	; (800f804 <tcp_pcb_remove+0x10c>)
 800f70a:	f640 0283 	movw	r2, #2179	; 0x883
 800f70e:	493e      	ldr	r1, [pc, #248]	; (800f808 <tcp_pcb_remove+0x110>)
 800f710:	483e      	ldr	r0, [pc, #248]	; (800f80c <tcp_pcb_remove+0x114>)
 800f712:	f009 ffb1 	bl	8019678 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d106      	bne.n	800f72a <tcp_pcb_remove+0x32>
 800f71c:	4b39      	ldr	r3, [pc, #228]	; (800f804 <tcp_pcb_remove+0x10c>)
 800f71e:	f640 0284 	movw	r2, #2180	; 0x884
 800f722:	493b      	ldr	r1, [pc, #236]	; (800f810 <tcp_pcb_remove+0x118>)
 800f724:	4839      	ldr	r0, [pc, #228]	; (800f80c <tcp_pcb_remove+0x114>)
 800f726:	f009 ffa7 	bl	8019678 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	683a      	ldr	r2, [r7, #0]
 800f730:	429a      	cmp	r2, r3
 800f732:	d105      	bne.n	800f740 <tcp_pcb_remove+0x48>
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	68da      	ldr	r2, [r3, #12]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	601a      	str	r2, [r3, #0]
 800f73e:	e013      	b.n	800f768 <tcp_pcb_remove+0x70>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	60fb      	str	r3, [r7, #12]
 800f746:	e00c      	b.n	800f762 <tcp_pcb_remove+0x6a>
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	68db      	ldr	r3, [r3, #12]
 800f74c:	683a      	ldr	r2, [r7, #0]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d104      	bne.n	800f75c <tcp_pcb_remove+0x64>
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	68da      	ldr	r2, [r3, #12]
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	60da      	str	r2, [r3, #12]
 800f75a:	e005      	b.n	800f768 <tcp_pcb_remove+0x70>
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	68db      	ldr	r3, [r3, #12]
 800f760:	60fb      	str	r3, [r7, #12]
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d1ef      	bne.n	800f748 <tcp_pcb_remove+0x50>
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	2200      	movs	r2, #0
 800f76c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f76e:	6838      	ldr	r0, [r7, #0]
 800f770:	f7ff ff72 	bl	800f658 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	7d1b      	ldrb	r3, [r3, #20]
 800f778:	2b0a      	cmp	r3, #10
 800f77a:	d013      	beq.n	800f7a4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f780:	2b01      	cmp	r3, #1
 800f782:	d00f      	beq.n	800f7a4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	8b5b      	ldrh	r3, [r3, #26]
 800f788:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d009      	beq.n	800f7a4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	8b5b      	ldrh	r3, [r3, #26]
 800f794:	f043 0302 	orr.w	r3, r3, #2
 800f798:	b29a      	uxth	r2, r3
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f79e:	6838      	ldr	r0, [r7, #0]
 800f7a0:	f003 fbc6 	bl	8012f30 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	7d1b      	ldrb	r3, [r3, #20]
 800f7a8:	2b01      	cmp	r3, #1
 800f7aa:	d020      	beq.n	800f7ee <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d006      	beq.n	800f7c2 <tcp_pcb_remove+0xca>
 800f7b4:	4b13      	ldr	r3, [pc, #76]	; (800f804 <tcp_pcb_remove+0x10c>)
 800f7b6:	f640 0293 	movw	r2, #2195	; 0x893
 800f7ba:	4916      	ldr	r1, [pc, #88]	; (800f814 <tcp_pcb_remove+0x11c>)
 800f7bc:	4813      	ldr	r0, [pc, #76]	; (800f80c <tcp_pcb_remove+0x114>)
 800f7be:	f009 ff5b 	bl	8019678 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d006      	beq.n	800f7d8 <tcp_pcb_remove+0xe0>
 800f7ca:	4b0e      	ldr	r3, [pc, #56]	; (800f804 <tcp_pcb_remove+0x10c>)
 800f7cc:	f640 0294 	movw	r2, #2196	; 0x894
 800f7d0:	4911      	ldr	r1, [pc, #68]	; (800f818 <tcp_pcb_remove+0x120>)
 800f7d2:	480e      	ldr	r0, [pc, #56]	; (800f80c <tcp_pcb_remove+0x114>)
 800f7d4:	f009 ff50 	bl	8019678 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d006      	beq.n	800f7ee <tcp_pcb_remove+0xf6>
 800f7e0:	4b08      	ldr	r3, [pc, #32]	; (800f804 <tcp_pcb_remove+0x10c>)
 800f7e2:	f640 0296 	movw	r2, #2198	; 0x896
 800f7e6:	490d      	ldr	r1, [pc, #52]	; (800f81c <tcp_pcb_remove+0x124>)
 800f7e8:	4808      	ldr	r0, [pc, #32]	; (800f80c <tcp_pcb_remove+0x114>)
 800f7ea:	f009 ff45 	bl	8019678 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f7fa:	bf00      	nop
 800f7fc:	3710      	adds	r7, #16
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}
 800f802:	bf00      	nop
 800f804:	0801bea0 	.word	0x0801bea0
 800f808:	0801c508 	.word	0x0801c508
 800f80c:	0801bee4 	.word	0x0801bee4
 800f810:	0801c524 	.word	0x0801c524
 800f814:	0801c544 	.word	0x0801c544
 800f818:	0801c55c 	.word	0x0801c55c
 800f81c:	0801c578 	.word	0x0801c578

0800f820 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d106      	bne.n	800f83c <tcp_next_iss+0x1c>
 800f82e:	4b0a      	ldr	r3, [pc, #40]	; (800f858 <tcp_next_iss+0x38>)
 800f830:	f640 02af 	movw	r2, #2223	; 0x8af
 800f834:	4909      	ldr	r1, [pc, #36]	; (800f85c <tcp_next_iss+0x3c>)
 800f836:	480a      	ldr	r0, [pc, #40]	; (800f860 <tcp_next_iss+0x40>)
 800f838:	f009 ff1e 	bl	8019678 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f83c:	4b09      	ldr	r3, [pc, #36]	; (800f864 <tcp_next_iss+0x44>)
 800f83e:	681a      	ldr	r2, [r3, #0]
 800f840:	4b09      	ldr	r3, [pc, #36]	; (800f868 <tcp_next_iss+0x48>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	4413      	add	r3, r2
 800f846:	4a07      	ldr	r2, [pc, #28]	; (800f864 <tcp_next_iss+0x44>)
 800f848:	6013      	str	r3, [r2, #0]
  return iss;
 800f84a:	4b06      	ldr	r3, [pc, #24]	; (800f864 <tcp_next_iss+0x44>)
 800f84c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3708      	adds	r7, #8
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
 800f856:	bf00      	nop
 800f858:	0801bea0 	.word	0x0801bea0
 800f85c:	0801c590 	.word	0x0801c590
 800f860:	0801bee4 	.word	0x0801bee4
 800f864:	20000028 	.word	0x20000028
 800f868:	2000cf68 	.word	0x2000cf68

0800f86c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b086      	sub	sp, #24
 800f870:	af00      	add	r7, sp, #0
 800f872:	4603      	mov	r3, r0
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	607a      	str	r2, [r7, #4]
 800f878:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d106      	bne.n	800f88e <tcp_eff_send_mss_netif+0x22>
 800f880:	4b14      	ldr	r3, [pc, #80]	; (800f8d4 <tcp_eff_send_mss_netif+0x68>)
 800f882:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f886:	4914      	ldr	r1, [pc, #80]	; (800f8d8 <tcp_eff_send_mss_netif+0x6c>)
 800f888:	4814      	ldr	r0, [pc, #80]	; (800f8dc <tcp_eff_send_mss_netif+0x70>)
 800f88a:	f009 fef5 	bl	8019678 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d101      	bne.n	800f898 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f894:	89fb      	ldrh	r3, [r7, #14]
 800f896:	e019      	b.n	800f8cc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f89c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f89e:	8afb      	ldrh	r3, [r7, #22]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d012      	beq.n	800f8ca <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f8a4:	2328      	movs	r3, #40	; 0x28
 800f8a6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f8a8:	8afa      	ldrh	r2, [r7, #22]
 800f8aa:	8abb      	ldrh	r3, [r7, #20]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d904      	bls.n	800f8ba <tcp_eff_send_mss_netif+0x4e>
 800f8b0:	8afa      	ldrh	r2, [r7, #22]
 800f8b2:	8abb      	ldrh	r3, [r7, #20]
 800f8b4:	1ad3      	subs	r3, r2, r3
 800f8b6:	b29b      	uxth	r3, r3
 800f8b8:	e000      	b.n	800f8bc <tcp_eff_send_mss_netif+0x50>
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f8be:	8a7a      	ldrh	r2, [r7, #18]
 800f8c0:	89fb      	ldrh	r3, [r7, #14]
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	bf28      	it	cs
 800f8c6:	4613      	movcs	r3, r2
 800f8c8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f8ca:	89fb      	ldrh	r3, [r7, #14]
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3718      	adds	r7, #24
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	0801bea0 	.word	0x0801bea0
 800f8d8:	0801c5ac 	.word	0x0801c5ac
 800f8dc:	0801bee4 	.word	0x0801bee4

0800f8e0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b084      	sub	sp, #16
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d119      	bne.n	800f928 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f8f4:	4b10      	ldr	r3, [pc, #64]	; (800f938 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f8f6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f8fa:	4910      	ldr	r1, [pc, #64]	; (800f93c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f8fc:	4810      	ldr	r0, [pc, #64]	; (800f940 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f8fe:	f009 febb 	bl	8019678 <iprintf>

  while (pcb != NULL) {
 800f902:	e011      	b.n	800f928 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681a      	ldr	r2, [r3, #0]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	429a      	cmp	r2, r3
 800f90e:	d108      	bne.n	800f922 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f916:	68f8      	ldr	r0, [r7, #12]
 800f918:	f7fe fd50 	bl	800e3bc <tcp_abort>
      pcb = next;
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	60fb      	str	r3, [r7, #12]
 800f920:	e002      	b.n	800f928 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	68db      	ldr	r3, [r3, #12]
 800f926:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d1ea      	bne.n	800f904 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f92e:	bf00      	nop
 800f930:	bf00      	nop
 800f932:	3710      	adds	r7, #16
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}
 800f938:	0801bea0 	.word	0x0801bea0
 800f93c:	0801c5d4 	.word	0x0801c5d4
 800f940:	0801bee4 	.word	0x0801bee4

0800f944 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b084      	sub	sp, #16
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d02a      	beq.n	800f9aa <tcp_netif_ip_addr_changed+0x66>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d026      	beq.n	800f9aa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f95c:	4b15      	ldr	r3, [pc, #84]	; (800f9b4 <tcp_netif_ip_addr_changed+0x70>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	4619      	mov	r1, r3
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f7ff ffbc 	bl	800f8e0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f968:	4b13      	ldr	r3, [pc, #76]	; (800f9b8 <tcp_netif_ip_addr_changed+0x74>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	4619      	mov	r1, r3
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f7ff ffb6 	bl	800f8e0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d017      	beq.n	800f9aa <tcp_netif_ip_addr_changed+0x66>
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d013      	beq.n	800f9aa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f982:	4b0e      	ldr	r3, [pc, #56]	; (800f9bc <tcp_netif_ip_addr_changed+0x78>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	60fb      	str	r3, [r7, #12]
 800f988:	e00c      	b.n	800f9a4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	681a      	ldr	r2, [r3, #0]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	429a      	cmp	r2, r3
 800f994:	d103      	bne.n	800f99e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	681a      	ldr	r2, [r3, #0]
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	68db      	ldr	r3, [r3, #12]
 800f9a2:	60fb      	str	r3, [r7, #12]
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d1ef      	bne.n	800f98a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f9aa:	bf00      	nop
 800f9ac:	3710      	adds	r7, #16
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}
 800f9b2:	bf00      	nop
 800f9b4:	2000cf74 	.word	0x2000cf74
 800f9b8:	2000cf6c 	.word	0x2000cf6c
 800f9bc:	2000cf70 	.word	0x2000cf70

0800f9c0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b082      	sub	sp, #8
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d007      	beq.n	800f9e0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f7ff fb6f 	bl	800f0b8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f9e0:	bf00      	nop
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f9e8:	b590      	push	{r4, r7, lr}
 800f9ea:	b08d      	sub	sp, #52	; 0x34
 800f9ec:	af04      	add	r7, sp, #16
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d105      	bne.n	800fa04 <tcp_input+0x1c>
 800f9f8:	4b9b      	ldr	r3, [pc, #620]	; (800fc68 <tcp_input+0x280>)
 800f9fa:	2283      	movs	r2, #131	; 0x83
 800f9fc:	499b      	ldr	r1, [pc, #620]	; (800fc6c <tcp_input+0x284>)
 800f9fe:	489c      	ldr	r0, [pc, #624]	; (800fc70 <tcp_input+0x288>)
 800fa00:	f009 fe3a 	bl	8019678 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	685b      	ldr	r3, [r3, #4]
 800fa08:	4a9a      	ldr	r2, [pc, #616]	; (800fc74 <tcp_input+0x28c>)
 800fa0a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	895b      	ldrh	r3, [r3, #10]
 800fa10:	2b13      	cmp	r3, #19
 800fa12:	f240 83d1 	bls.w	80101b8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fa16:	4b98      	ldr	r3, [pc, #608]	; (800fc78 <tcp_input+0x290>)
 800fa18:	695b      	ldr	r3, [r3, #20]
 800fa1a:	4a97      	ldr	r2, [pc, #604]	; (800fc78 <tcp_input+0x290>)
 800fa1c:	6812      	ldr	r2, [r2, #0]
 800fa1e:	4611      	mov	r1, r2
 800fa20:	4618      	mov	r0, r3
 800fa22:	f008 fa61 	bl	8017ee8 <ip4_addr_isbroadcast_u32>
 800fa26:	4603      	mov	r3, r0
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	f040 83c7 	bne.w	80101bc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fa2e:	4b92      	ldr	r3, [pc, #584]	; (800fc78 <tcp_input+0x290>)
 800fa30:	695b      	ldr	r3, [r3, #20]
 800fa32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fa36:	2be0      	cmp	r3, #224	; 0xe0
 800fa38:	f000 83c0 	beq.w	80101bc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fa3c:	4b8d      	ldr	r3, [pc, #564]	; (800fc74 <tcp_input+0x28c>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	899b      	ldrh	r3, [r3, #12]
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7fc fa89 	bl	800bf5c <lwip_htons>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	0b1b      	lsrs	r3, r3, #12
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	009b      	lsls	r3, r3, #2
 800fa54:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fa56:	7cbb      	ldrb	r3, [r7, #18]
 800fa58:	2b13      	cmp	r3, #19
 800fa5a:	f240 83b1 	bls.w	80101c0 <tcp_input+0x7d8>
 800fa5e:	7cbb      	ldrb	r3, [r7, #18]
 800fa60:	b29a      	uxth	r2, r3
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	891b      	ldrh	r3, [r3, #8]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	f200 83aa 	bhi.w	80101c0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fa6c:	7cbb      	ldrb	r3, [r7, #18]
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	3b14      	subs	r3, #20
 800fa72:	b29a      	uxth	r2, r3
 800fa74:	4b81      	ldr	r3, [pc, #516]	; (800fc7c <tcp_input+0x294>)
 800fa76:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fa78:	4b81      	ldr	r3, [pc, #516]	; (800fc80 <tcp_input+0x298>)
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	895a      	ldrh	r2, [r3, #10]
 800fa82:	7cbb      	ldrb	r3, [r7, #18]
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d309      	bcc.n	800fa9e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fa8a:	4b7c      	ldr	r3, [pc, #496]	; (800fc7c <tcp_input+0x294>)
 800fa8c:	881a      	ldrh	r2, [r3, #0]
 800fa8e:	4b7d      	ldr	r3, [pc, #500]	; (800fc84 <tcp_input+0x29c>)
 800fa90:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fa92:	7cbb      	ldrb	r3, [r7, #18]
 800fa94:	4619      	mov	r1, r3
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f7fd fdd8 	bl	800d64c <pbuf_remove_header>
 800fa9c:	e04e      	b.n	800fb3c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d105      	bne.n	800fab2 <tcp_input+0xca>
 800faa6:	4b70      	ldr	r3, [pc, #448]	; (800fc68 <tcp_input+0x280>)
 800faa8:	22c2      	movs	r2, #194	; 0xc2
 800faaa:	4977      	ldr	r1, [pc, #476]	; (800fc88 <tcp_input+0x2a0>)
 800faac:	4870      	ldr	r0, [pc, #448]	; (800fc70 <tcp_input+0x288>)
 800faae:	f009 fde3 	bl	8019678 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fab2:	2114      	movs	r1, #20
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f7fd fdc9 	bl	800d64c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	895a      	ldrh	r2, [r3, #10]
 800fabe:	4b71      	ldr	r3, [pc, #452]	; (800fc84 <tcp_input+0x29c>)
 800fac0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fac2:	4b6e      	ldr	r3, [pc, #440]	; (800fc7c <tcp_input+0x294>)
 800fac4:	881a      	ldrh	r2, [r3, #0]
 800fac6:	4b6f      	ldr	r3, [pc, #444]	; (800fc84 <tcp_input+0x29c>)
 800fac8:	881b      	ldrh	r3, [r3, #0]
 800faca:	1ad3      	subs	r3, r2, r3
 800facc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800face:	4b6d      	ldr	r3, [pc, #436]	; (800fc84 <tcp_input+0x29c>)
 800fad0:	881b      	ldrh	r3, [r3, #0]
 800fad2:	4619      	mov	r1, r3
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7fd fdb9 	bl	800d64c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	895b      	ldrh	r3, [r3, #10]
 800fae0:	8a3a      	ldrh	r2, [r7, #16]
 800fae2:	429a      	cmp	r2, r3
 800fae4:	f200 836e 	bhi.w	80101c4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	4a64      	ldr	r2, [pc, #400]	; (800fc80 <tcp_input+0x298>)
 800faf0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	8a3a      	ldrh	r2, [r7, #16]
 800faf8:	4611      	mov	r1, r2
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7fd fda6 	bl	800d64c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	891a      	ldrh	r2, [r3, #8]
 800fb04:	8a3b      	ldrh	r3, [r7, #16]
 800fb06:	1ad3      	subs	r3, r2, r3
 800fb08:	b29a      	uxth	r2, r3
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	895b      	ldrh	r3, [r3, #10]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d005      	beq.n	800fb22 <tcp_input+0x13a>
 800fb16:	4b54      	ldr	r3, [pc, #336]	; (800fc68 <tcp_input+0x280>)
 800fb18:	22df      	movs	r2, #223	; 0xdf
 800fb1a:	495c      	ldr	r1, [pc, #368]	; (800fc8c <tcp_input+0x2a4>)
 800fb1c:	4854      	ldr	r0, [pc, #336]	; (800fc70 <tcp_input+0x288>)
 800fb1e:	f009 fdab 	bl	8019678 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	891a      	ldrh	r2, [r3, #8]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	891b      	ldrh	r3, [r3, #8]
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d005      	beq.n	800fb3c <tcp_input+0x154>
 800fb30:	4b4d      	ldr	r3, [pc, #308]	; (800fc68 <tcp_input+0x280>)
 800fb32:	22e0      	movs	r2, #224	; 0xe0
 800fb34:	4956      	ldr	r1, [pc, #344]	; (800fc90 <tcp_input+0x2a8>)
 800fb36:	484e      	ldr	r0, [pc, #312]	; (800fc70 <tcp_input+0x288>)
 800fb38:	f009 fd9e 	bl	8019678 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fb3c:	4b4d      	ldr	r3, [pc, #308]	; (800fc74 <tcp_input+0x28c>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	881b      	ldrh	r3, [r3, #0]
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	4a4b      	ldr	r2, [pc, #300]	; (800fc74 <tcp_input+0x28c>)
 800fb46:	6814      	ldr	r4, [r2, #0]
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f7fc fa07 	bl	800bf5c <lwip_htons>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fb52:	4b48      	ldr	r3, [pc, #288]	; (800fc74 <tcp_input+0x28c>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	885b      	ldrh	r3, [r3, #2]
 800fb58:	b29b      	uxth	r3, r3
 800fb5a:	4a46      	ldr	r2, [pc, #280]	; (800fc74 <tcp_input+0x28c>)
 800fb5c:	6814      	ldr	r4, [r2, #0]
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fc f9fc 	bl	800bf5c <lwip_htons>
 800fb64:	4603      	mov	r3, r0
 800fb66:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fb68:	4b42      	ldr	r3, [pc, #264]	; (800fc74 <tcp_input+0x28c>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	685b      	ldr	r3, [r3, #4]
 800fb6e:	4a41      	ldr	r2, [pc, #260]	; (800fc74 <tcp_input+0x28c>)
 800fb70:	6814      	ldr	r4, [r2, #0]
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7fc fa07 	bl	800bf86 <lwip_htonl>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	6063      	str	r3, [r4, #4]
 800fb7c:	6863      	ldr	r3, [r4, #4]
 800fb7e:	4a45      	ldr	r2, [pc, #276]	; (800fc94 <tcp_input+0x2ac>)
 800fb80:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fb82:	4b3c      	ldr	r3, [pc, #240]	; (800fc74 <tcp_input+0x28c>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	689b      	ldr	r3, [r3, #8]
 800fb88:	4a3a      	ldr	r2, [pc, #232]	; (800fc74 <tcp_input+0x28c>)
 800fb8a:	6814      	ldr	r4, [r2, #0]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7fc f9fa 	bl	800bf86 <lwip_htonl>
 800fb92:	4603      	mov	r3, r0
 800fb94:	60a3      	str	r3, [r4, #8]
 800fb96:	68a3      	ldr	r3, [r4, #8]
 800fb98:	4a3f      	ldr	r2, [pc, #252]	; (800fc98 <tcp_input+0x2b0>)
 800fb9a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fb9c:	4b35      	ldr	r3, [pc, #212]	; (800fc74 <tcp_input+0x28c>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	89db      	ldrh	r3, [r3, #14]
 800fba2:	b29b      	uxth	r3, r3
 800fba4:	4a33      	ldr	r2, [pc, #204]	; (800fc74 <tcp_input+0x28c>)
 800fba6:	6814      	ldr	r4, [r2, #0]
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7fc f9d7 	bl	800bf5c <lwip_htons>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fbb2:	4b30      	ldr	r3, [pc, #192]	; (800fc74 <tcp_input+0x28c>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	899b      	ldrh	r3, [r3, #12]
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fc f9ce 	bl	800bf5c <lwip_htons>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fbc8:	b2da      	uxtb	r2, r3
 800fbca:	4b34      	ldr	r3, [pc, #208]	; (800fc9c <tcp_input+0x2b4>)
 800fbcc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	891a      	ldrh	r2, [r3, #8]
 800fbd2:	4b33      	ldr	r3, [pc, #204]	; (800fca0 <tcp_input+0x2b8>)
 800fbd4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fbd6:	4b31      	ldr	r3, [pc, #196]	; (800fc9c <tcp_input+0x2b4>)
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	f003 0303 	and.w	r3, r3, #3
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d00c      	beq.n	800fbfc <tcp_input+0x214>
    tcplen++;
 800fbe2:	4b2f      	ldr	r3, [pc, #188]	; (800fca0 <tcp_input+0x2b8>)
 800fbe4:	881b      	ldrh	r3, [r3, #0]
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	b29a      	uxth	r2, r3
 800fbea:	4b2d      	ldr	r3, [pc, #180]	; (800fca0 <tcp_input+0x2b8>)
 800fbec:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	891a      	ldrh	r2, [r3, #8]
 800fbf2:	4b2b      	ldr	r3, [pc, #172]	; (800fca0 <tcp_input+0x2b8>)
 800fbf4:	881b      	ldrh	r3, [r3, #0]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	f200 82e6 	bhi.w	80101c8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc00:	4b28      	ldr	r3, [pc, #160]	; (800fca4 <tcp_input+0x2bc>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	61fb      	str	r3, [r7, #28]
 800fc06:	e09d      	b.n	800fd44 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	7d1b      	ldrb	r3, [r3, #20]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d105      	bne.n	800fc1c <tcp_input+0x234>
 800fc10:	4b15      	ldr	r3, [pc, #84]	; (800fc68 <tcp_input+0x280>)
 800fc12:	22fb      	movs	r2, #251	; 0xfb
 800fc14:	4924      	ldr	r1, [pc, #144]	; (800fca8 <tcp_input+0x2c0>)
 800fc16:	4816      	ldr	r0, [pc, #88]	; (800fc70 <tcp_input+0x288>)
 800fc18:	f009 fd2e 	bl	8019678 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	7d1b      	ldrb	r3, [r3, #20]
 800fc20:	2b0a      	cmp	r3, #10
 800fc22:	d105      	bne.n	800fc30 <tcp_input+0x248>
 800fc24:	4b10      	ldr	r3, [pc, #64]	; (800fc68 <tcp_input+0x280>)
 800fc26:	22fc      	movs	r2, #252	; 0xfc
 800fc28:	4920      	ldr	r1, [pc, #128]	; (800fcac <tcp_input+0x2c4>)
 800fc2a:	4811      	ldr	r0, [pc, #68]	; (800fc70 <tcp_input+0x288>)
 800fc2c:	f009 fd24 	bl	8019678 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fc30:	69fb      	ldr	r3, [r7, #28]
 800fc32:	7d1b      	ldrb	r3, [r3, #20]
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	d105      	bne.n	800fc44 <tcp_input+0x25c>
 800fc38:	4b0b      	ldr	r3, [pc, #44]	; (800fc68 <tcp_input+0x280>)
 800fc3a:	22fd      	movs	r2, #253	; 0xfd
 800fc3c:	491c      	ldr	r1, [pc, #112]	; (800fcb0 <tcp_input+0x2c8>)
 800fc3e:	480c      	ldr	r0, [pc, #48]	; (800fc70 <tcp_input+0x288>)
 800fc40:	f009 fd1a 	bl	8019678 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc44:	69fb      	ldr	r3, [r7, #28]
 800fc46:	7a1b      	ldrb	r3, [r3, #8]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d033      	beq.n	800fcb4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fc4c:	69fb      	ldr	r3, [r7, #28]
 800fc4e:	7a1a      	ldrb	r2, [r3, #8]
 800fc50:	4b09      	ldr	r3, [pc, #36]	; (800fc78 <tcp_input+0x290>)
 800fc52:	685b      	ldr	r3, [r3, #4]
 800fc54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc58:	3301      	adds	r3, #1
 800fc5a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d029      	beq.n	800fcb4 <tcp_input+0x2cc>
      prev = pcb;
 800fc60:	69fb      	ldr	r3, [r7, #28]
 800fc62:	61bb      	str	r3, [r7, #24]
      continue;
 800fc64:	e06b      	b.n	800fd3e <tcp_input+0x356>
 800fc66:	bf00      	nop
 800fc68:	0801c608 	.word	0x0801c608
 800fc6c:	0801c63c 	.word	0x0801c63c
 800fc70:	0801c654 	.word	0x0801c654
 800fc74:	2000cf90 	.word	0x2000cf90
 800fc78:	200097f4 	.word	0x200097f4
 800fc7c:	2000cf94 	.word	0x2000cf94
 800fc80:	2000cf98 	.word	0x2000cf98
 800fc84:	2000cf96 	.word	0x2000cf96
 800fc88:	0801c67c 	.word	0x0801c67c
 800fc8c:	0801c68c 	.word	0x0801c68c
 800fc90:	0801c698 	.word	0x0801c698
 800fc94:	2000cfa0 	.word	0x2000cfa0
 800fc98:	2000cfa4 	.word	0x2000cfa4
 800fc9c:	2000cfac 	.word	0x2000cfac
 800fca0:	2000cfaa 	.word	0x2000cfaa
 800fca4:	2000cf74 	.word	0x2000cf74
 800fca8:	0801c6b8 	.word	0x0801c6b8
 800fcac:	0801c6e0 	.word	0x0801c6e0
 800fcb0:	0801c70c 	.word	0x0801c70c
    }

    if (pcb->remote_port == tcphdr->src &&
 800fcb4:	69fb      	ldr	r3, [r7, #28]
 800fcb6:	8b1a      	ldrh	r2, [r3, #24]
 800fcb8:	4b72      	ldr	r3, [pc, #456]	; (800fe84 <tcp_input+0x49c>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	881b      	ldrh	r3, [r3, #0]
 800fcbe:	b29b      	uxth	r3, r3
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	d13a      	bne.n	800fd3a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fcc4:	69fb      	ldr	r3, [r7, #28]
 800fcc6:	8ada      	ldrh	r2, [r3, #22]
 800fcc8:	4b6e      	ldr	r3, [pc, #440]	; (800fe84 <tcp_input+0x49c>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	885b      	ldrh	r3, [r3, #2]
 800fcce:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d132      	bne.n	800fd3a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fcd4:	69fb      	ldr	r3, [r7, #28]
 800fcd6:	685a      	ldr	r2, [r3, #4]
 800fcd8:	4b6b      	ldr	r3, [pc, #428]	; (800fe88 <tcp_input+0x4a0>)
 800fcda:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d12c      	bne.n	800fd3a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fce0:	69fb      	ldr	r3, [r7, #28]
 800fce2:	681a      	ldr	r2, [r3, #0]
 800fce4:	4b68      	ldr	r3, [pc, #416]	; (800fe88 <tcp_input+0x4a0>)
 800fce6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d126      	bne.n	800fd3a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	68db      	ldr	r3, [r3, #12]
 800fcf0:	69fa      	ldr	r2, [r7, #28]
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d106      	bne.n	800fd04 <tcp_input+0x31c>
 800fcf6:	4b65      	ldr	r3, [pc, #404]	; (800fe8c <tcp_input+0x4a4>)
 800fcf8:	f240 120d 	movw	r2, #269	; 0x10d
 800fcfc:	4964      	ldr	r1, [pc, #400]	; (800fe90 <tcp_input+0x4a8>)
 800fcfe:	4865      	ldr	r0, [pc, #404]	; (800fe94 <tcp_input+0x4ac>)
 800fd00:	f009 fcba 	bl	8019678 <iprintf>
      if (prev != NULL) {
 800fd04:	69bb      	ldr	r3, [r7, #24]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d00a      	beq.n	800fd20 <tcp_input+0x338>
        prev->next = pcb->next;
 800fd0a:	69fb      	ldr	r3, [r7, #28]
 800fd0c:	68da      	ldr	r2, [r3, #12]
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fd12:	4b61      	ldr	r3, [pc, #388]	; (800fe98 <tcp_input+0x4b0>)
 800fd14:	681a      	ldr	r2, [r3, #0]
 800fd16:	69fb      	ldr	r3, [r7, #28]
 800fd18:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fd1a:	4a5f      	ldr	r2, [pc, #380]	; (800fe98 <tcp_input+0x4b0>)
 800fd1c:	69fb      	ldr	r3, [r7, #28]
 800fd1e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fd20:	69fb      	ldr	r3, [r7, #28]
 800fd22:	68db      	ldr	r3, [r3, #12]
 800fd24:	69fa      	ldr	r2, [r7, #28]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d111      	bne.n	800fd4e <tcp_input+0x366>
 800fd2a:	4b58      	ldr	r3, [pc, #352]	; (800fe8c <tcp_input+0x4a4>)
 800fd2c:	f240 1215 	movw	r2, #277	; 0x115
 800fd30:	495a      	ldr	r1, [pc, #360]	; (800fe9c <tcp_input+0x4b4>)
 800fd32:	4858      	ldr	r0, [pc, #352]	; (800fe94 <tcp_input+0x4ac>)
 800fd34:	f009 fca0 	bl	8019678 <iprintf>
      break;
 800fd38:	e009      	b.n	800fd4e <tcp_input+0x366>
    }
    prev = pcb;
 800fd3a:	69fb      	ldr	r3, [r7, #28]
 800fd3c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd3e:	69fb      	ldr	r3, [r7, #28]
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	61fb      	str	r3, [r7, #28]
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	f47f af5e 	bne.w	800fc08 <tcp_input+0x220>
 800fd4c:	e000      	b.n	800fd50 <tcp_input+0x368>
      break;
 800fd4e:	bf00      	nop
  }

  if (pcb == NULL) {
 800fd50:	69fb      	ldr	r3, [r7, #28]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	f040 80aa 	bne.w	800feac <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd58:	4b51      	ldr	r3, [pc, #324]	; (800fea0 <tcp_input+0x4b8>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	61fb      	str	r3, [r7, #28]
 800fd5e:	e03f      	b.n	800fde0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fd60:	69fb      	ldr	r3, [r7, #28]
 800fd62:	7d1b      	ldrb	r3, [r3, #20]
 800fd64:	2b0a      	cmp	r3, #10
 800fd66:	d006      	beq.n	800fd76 <tcp_input+0x38e>
 800fd68:	4b48      	ldr	r3, [pc, #288]	; (800fe8c <tcp_input+0x4a4>)
 800fd6a:	f240 121f 	movw	r2, #287	; 0x11f
 800fd6e:	494d      	ldr	r1, [pc, #308]	; (800fea4 <tcp_input+0x4bc>)
 800fd70:	4848      	ldr	r0, [pc, #288]	; (800fe94 <tcp_input+0x4ac>)
 800fd72:	f009 fc81 	bl	8019678 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	7a1b      	ldrb	r3, [r3, #8]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d009      	beq.n	800fd92 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fd7e:	69fb      	ldr	r3, [r7, #28]
 800fd80:	7a1a      	ldrb	r2, [r3, #8]
 800fd82:	4b41      	ldr	r3, [pc, #260]	; (800fe88 <tcp_input+0x4a0>)
 800fd84:	685b      	ldr	r3, [r3, #4]
 800fd86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fd8a:	3301      	adds	r3, #1
 800fd8c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d122      	bne.n	800fdd8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fd92:	69fb      	ldr	r3, [r7, #28]
 800fd94:	8b1a      	ldrh	r2, [r3, #24]
 800fd96:	4b3b      	ldr	r3, [pc, #236]	; (800fe84 <tcp_input+0x49c>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	881b      	ldrh	r3, [r3, #0]
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	d11b      	bne.n	800fdda <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fda2:	69fb      	ldr	r3, [r7, #28]
 800fda4:	8ada      	ldrh	r2, [r3, #22]
 800fda6:	4b37      	ldr	r3, [pc, #220]	; (800fe84 <tcp_input+0x49c>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	885b      	ldrh	r3, [r3, #2]
 800fdac:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d113      	bne.n	800fdda <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fdb2:	69fb      	ldr	r3, [r7, #28]
 800fdb4:	685a      	ldr	r2, [r3, #4]
 800fdb6:	4b34      	ldr	r3, [pc, #208]	; (800fe88 <tcp_input+0x4a0>)
 800fdb8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d10d      	bne.n	800fdda <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fdbe:	69fb      	ldr	r3, [r7, #28]
 800fdc0:	681a      	ldr	r2, [r3, #0]
 800fdc2:	4b31      	ldr	r3, [pc, #196]	; (800fe88 <tcp_input+0x4a0>)
 800fdc4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d107      	bne.n	800fdda <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fdca:	69f8      	ldr	r0, [r7, #28]
 800fdcc:	f000 fb56 	bl	801047c <tcp_timewait_input>
        }
        pbuf_free(p);
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f7fd fcf3 	bl	800d7bc <pbuf_free>
        return;
 800fdd6:	e1fd      	b.n	80101d4 <tcp_input+0x7ec>
        continue;
 800fdd8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fdda:	69fb      	ldr	r3, [r7, #28]
 800fddc:	68db      	ldr	r3, [r3, #12]
 800fdde:	61fb      	str	r3, [r7, #28]
 800fde0:	69fb      	ldr	r3, [r7, #28]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d1bc      	bne.n	800fd60 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fde6:	2300      	movs	r3, #0
 800fde8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fdea:	4b2f      	ldr	r3, [pc, #188]	; (800fea8 <tcp_input+0x4c0>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	617b      	str	r3, [r7, #20]
 800fdf0:	e02a      	b.n	800fe48 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	7a1b      	ldrb	r3, [r3, #8]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d00c      	beq.n	800fe14 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	7a1a      	ldrb	r2, [r3, #8]
 800fdfe:	4b22      	ldr	r3, [pc, #136]	; (800fe88 <tcp_input+0x4a0>)
 800fe00:	685b      	ldr	r3, [r3, #4]
 800fe02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fe06:	3301      	adds	r3, #1
 800fe08:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	d002      	beq.n	800fe14 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	61bb      	str	r3, [r7, #24]
        continue;
 800fe12:	e016      	b.n	800fe42 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	8ada      	ldrh	r2, [r3, #22]
 800fe18:	4b1a      	ldr	r3, [pc, #104]	; (800fe84 <tcp_input+0x49c>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	885b      	ldrh	r3, [r3, #2]
 800fe1e:	b29b      	uxth	r3, r3
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d10c      	bne.n	800fe3e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	681a      	ldr	r2, [r3, #0]
 800fe28:	4b17      	ldr	r3, [pc, #92]	; (800fe88 <tcp_input+0x4a0>)
 800fe2a:	695b      	ldr	r3, [r3, #20]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d00f      	beq.n	800fe50 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d00d      	beq.n	800fe52 <tcp_input+0x46a>
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d009      	beq.n	800fe52 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	617b      	str	r3, [r7, #20]
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d1d1      	bne.n	800fdf2 <tcp_input+0x40a>
 800fe4e:	e000      	b.n	800fe52 <tcp_input+0x46a>
            break;
 800fe50:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d029      	beq.n	800feac <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fe58:	69bb      	ldr	r3, [r7, #24]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d00a      	beq.n	800fe74 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	68da      	ldr	r2, [r3, #12]
 800fe62:	69bb      	ldr	r3, [r7, #24]
 800fe64:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fe66:	4b10      	ldr	r3, [pc, #64]	; (800fea8 <tcp_input+0x4c0>)
 800fe68:	681a      	ldr	r2, [r3, #0]
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fe6e:	4a0e      	ldr	r2, [pc, #56]	; (800fea8 <tcp_input+0x4c0>)
 800fe70:	697b      	ldr	r3, [r7, #20]
 800fe72:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fe74:	6978      	ldr	r0, [r7, #20]
 800fe76:	f000 fa03 	bl	8010280 <tcp_listen_input>
      }
      pbuf_free(p);
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f7fd fc9e 	bl	800d7bc <pbuf_free>
      return;
 800fe80:	e1a8      	b.n	80101d4 <tcp_input+0x7ec>
 800fe82:	bf00      	nop
 800fe84:	2000cf90 	.word	0x2000cf90
 800fe88:	200097f4 	.word	0x200097f4
 800fe8c:	0801c608 	.word	0x0801c608
 800fe90:	0801c734 	.word	0x0801c734
 800fe94:	0801c654 	.word	0x0801c654
 800fe98:	2000cf74 	.word	0x2000cf74
 800fe9c:	0801c760 	.word	0x0801c760
 800fea0:	2000cf78 	.word	0x2000cf78
 800fea4:	0801c78c 	.word	0x0801c78c
 800fea8:	2000cf70 	.word	0x2000cf70
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800feac:	69fb      	ldr	r3, [r7, #28]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	f000 8158 	beq.w	8010164 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800feb4:	4b95      	ldr	r3, [pc, #596]	; (801010c <tcp_input+0x724>)
 800feb6:	2200      	movs	r2, #0
 800feb8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	891a      	ldrh	r2, [r3, #8]
 800febe:	4b93      	ldr	r3, [pc, #588]	; (801010c <tcp_input+0x724>)
 800fec0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fec2:	4a92      	ldr	r2, [pc, #584]	; (801010c <tcp_input+0x724>)
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fec8:	4b91      	ldr	r3, [pc, #580]	; (8010110 <tcp_input+0x728>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	4a8f      	ldr	r2, [pc, #572]	; (801010c <tcp_input+0x724>)
 800fece:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fed0:	4b90      	ldr	r3, [pc, #576]	; (8010114 <tcp_input+0x72c>)
 800fed2:	2200      	movs	r2, #0
 800fed4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fed6:	4b90      	ldr	r3, [pc, #576]	; (8010118 <tcp_input+0x730>)
 800fed8:	2200      	movs	r2, #0
 800feda:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fedc:	4b8f      	ldr	r3, [pc, #572]	; (801011c <tcp_input+0x734>)
 800fede:	2200      	movs	r2, #0
 800fee0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fee2:	4b8f      	ldr	r3, [pc, #572]	; (8010120 <tcp_input+0x738>)
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	f003 0308 	and.w	r3, r3, #8
 800feea:	2b00      	cmp	r3, #0
 800feec:	d006      	beq.n	800fefc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	7b5b      	ldrb	r3, [r3, #13]
 800fef2:	f043 0301 	orr.w	r3, r3, #1
 800fef6:	b2da      	uxtb	r2, r3
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fefc:	69fb      	ldr	r3, [r7, #28]
 800fefe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d017      	beq.n	800ff34 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ff04:	69f8      	ldr	r0, [r7, #28]
 800ff06:	f7ff f85b 	bl	800efc0 <tcp_process_refused_data>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	f113 0f0d 	cmn.w	r3, #13
 800ff10:	d007      	beq.n	800ff22 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ff12:	69fb      	ldr	r3, [r7, #28]
 800ff14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d00c      	beq.n	800ff34 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ff1a:	4b82      	ldr	r3, [pc, #520]	; (8010124 <tcp_input+0x73c>)
 800ff1c:	881b      	ldrh	r3, [r3, #0]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d008      	beq.n	800ff34 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ff22:	69fb      	ldr	r3, [r7, #28]
 800ff24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	f040 80e3 	bne.w	80100f2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ff2c:	69f8      	ldr	r0, [r7, #28]
 800ff2e:	f003 fe05 	bl	8013b3c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ff32:	e0de      	b.n	80100f2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800ff34:	4a7c      	ldr	r2, [pc, #496]	; (8010128 <tcp_input+0x740>)
 800ff36:	69fb      	ldr	r3, [r7, #28]
 800ff38:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ff3a:	69f8      	ldr	r0, [r7, #28]
 800ff3c:	f000 fb18 	bl	8010570 <tcp_process>
 800ff40:	4603      	mov	r3, r0
 800ff42:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ff44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff48:	f113 0f0d 	cmn.w	r3, #13
 800ff4c:	f000 80d3 	beq.w	80100f6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800ff50:	4b71      	ldr	r3, [pc, #452]	; (8010118 <tcp_input+0x730>)
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	f003 0308 	and.w	r3, r3, #8
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d015      	beq.n	800ff88 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d008      	beq.n	800ff78 <tcp_input+0x590>
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff6c:	69fa      	ldr	r2, [r7, #28]
 800ff6e:	6912      	ldr	r2, [r2, #16]
 800ff70:	f06f 010d 	mvn.w	r1, #13
 800ff74:	4610      	mov	r0, r2
 800ff76:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ff78:	69f9      	ldr	r1, [r7, #28]
 800ff7a:	486c      	ldr	r0, [pc, #432]	; (801012c <tcp_input+0x744>)
 800ff7c:	f7ff fbbc 	bl	800f6f8 <tcp_pcb_remove>
        tcp_free(pcb);
 800ff80:	69f8      	ldr	r0, [r7, #28]
 800ff82:	f7fd fed7 	bl	800dd34 <tcp_free>
 800ff86:	e0da      	b.n	801013e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ff8c:	4b63      	ldr	r3, [pc, #396]	; (801011c <tcp_input+0x734>)
 800ff8e:	881b      	ldrh	r3, [r3, #0]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d01d      	beq.n	800ffd0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ff94:	4b61      	ldr	r3, [pc, #388]	; (801011c <tcp_input+0x734>)
 800ff96:	881b      	ldrh	r3, [r3, #0]
 800ff98:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ff9a:	69fb      	ldr	r3, [r7, #28]
 800ff9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d00a      	beq.n	800ffba <tcp_input+0x5d2>
 800ffa4:	69fb      	ldr	r3, [r7, #28]
 800ffa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffaa:	69fa      	ldr	r2, [r7, #28]
 800ffac:	6910      	ldr	r0, [r2, #16]
 800ffae:	89fa      	ldrh	r2, [r7, #14]
 800ffb0:	69f9      	ldr	r1, [r7, #28]
 800ffb2:	4798      	blx	r3
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	74fb      	strb	r3, [r7, #19]
 800ffb8:	e001      	b.n	800ffbe <tcp_input+0x5d6>
 800ffba:	2300      	movs	r3, #0
 800ffbc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ffbe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ffc2:	f113 0f0d 	cmn.w	r3, #13
 800ffc6:	f000 8098 	beq.w	80100fa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ffca:	4b54      	ldr	r3, [pc, #336]	; (801011c <tcp_input+0x734>)
 800ffcc:	2200      	movs	r2, #0
 800ffce:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ffd0:	69f8      	ldr	r0, [r7, #28]
 800ffd2:	f000 f915 	bl	8010200 <tcp_input_delayed_close>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	f040 8090 	bne.w	80100fe <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ffde:	4b4d      	ldr	r3, [pc, #308]	; (8010114 <tcp_input+0x72c>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d041      	beq.n	801006a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d006      	beq.n	800fffc <tcp_input+0x614>
 800ffee:	4b50      	ldr	r3, [pc, #320]	; (8010130 <tcp_input+0x748>)
 800fff0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fff4:	494f      	ldr	r1, [pc, #316]	; (8010134 <tcp_input+0x74c>)
 800fff6:	4850      	ldr	r0, [pc, #320]	; (8010138 <tcp_input+0x750>)
 800fff8:	f009 fb3e 	bl	8019678 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fffc:	69fb      	ldr	r3, [r7, #28]
 800fffe:	8b5b      	ldrh	r3, [r3, #26]
 8010000:	f003 0310 	and.w	r3, r3, #16
 8010004:	2b00      	cmp	r3, #0
 8010006:	d008      	beq.n	801001a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010008:	4b42      	ldr	r3, [pc, #264]	; (8010114 <tcp_input+0x72c>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	4618      	mov	r0, r3
 801000e:	f7fd fbd5 	bl	800d7bc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010012:	69f8      	ldr	r0, [r7, #28]
 8010014:	f7fe f9d2 	bl	800e3bc <tcp_abort>
            goto aborted;
 8010018:	e091      	b.n	801013e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801001a:	69fb      	ldr	r3, [r7, #28]
 801001c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010020:	2b00      	cmp	r3, #0
 8010022:	d00c      	beq.n	801003e <tcp_input+0x656>
 8010024:	69fb      	ldr	r3, [r7, #28]
 8010026:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801002a:	69fb      	ldr	r3, [r7, #28]
 801002c:	6918      	ldr	r0, [r3, #16]
 801002e:	4b39      	ldr	r3, [pc, #228]	; (8010114 <tcp_input+0x72c>)
 8010030:	681a      	ldr	r2, [r3, #0]
 8010032:	2300      	movs	r3, #0
 8010034:	69f9      	ldr	r1, [r7, #28]
 8010036:	47a0      	blx	r4
 8010038:	4603      	mov	r3, r0
 801003a:	74fb      	strb	r3, [r7, #19]
 801003c:	e008      	b.n	8010050 <tcp_input+0x668>
 801003e:	4b35      	ldr	r3, [pc, #212]	; (8010114 <tcp_input+0x72c>)
 8010040:	681a      	ldr	r2, [r3, #0]
 8010042:	2300      	movs	r3, #0
 8010044:	69f9      	ldr	r1, [r7, #28]
 8010046:	2000      	movs	r0, #0
 8010048:	f7ff f890 	bl	800f16c <tcp_recv_null>
 801004c:	4603      	mov	r3, r0
 801004e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010050:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010054:	f113 0f0d 	cmn.w	r3, #13
 8010058:	d053      	beq.n	8010102 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801005a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d003      	beq.n	801006a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010062:	4b2c      	ldr	r3, [pc, #176]	; (8010114 <tcp_input+0x72c>)
 8010064:	681a      	ldr	r2, [r3, #0]
 8010066:	69fb      	ldr	r3, [r7, #28]
 8010068:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801006a:	4b2b      	ldr	r3, [pc, #172]	; (8010118 <tcp_input+0x730>)
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	f003 0320 	and.w	r3, r3, #32
 8010072:	2b00      	cmp	r3, #0
 8010074:	d030      	beq.n	80100d8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010076:	69fb      	ldr	r3, [r7, #28]
 8010078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801007a:	2b00      	cmp	r3, #0
 801007c:	d009      	beq.n	8010092 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801007e:	69fb      	ldr	r3, [r7, #28]
 8010080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010082:	7b5a      	ldrb	r2, [r3, #13]
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010088:	f042 0220 	orr.w	r2, r2, #32
 801008c:	b2d2      	uxtb	r2, r2
 801008e:	735a      	strb	r2, [r3, #13]
 8010090:	e022      	b.n	80100d8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010092:	69fb      	ldr	r3, [r7, #28]
 8010094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010096:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801009a:	d005      	beq.n	80100a8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801009c:	69fb      	ldr	r3, [r7, #28]
 801009e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100a0:	3301      	adds	r3, #1
 80100a2:	b29a      	uxth	r2, r3
 80100a4:	69fb      	ldr	r3, [r7, #28]
 80100a6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80100a8:	69fb      	ldr	r3, [r7, #28]
 80100aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d00b      	beq.n	80100ca <tcp_input+0x6e2>
 80100b2:	69fb      	ldr	r3, [r7, #28]
 80100b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80100b8:	69fb      	ldr	r3, [r7, #28]
 80100ba:	6918      	ldr	r0, [r3, #16]
 80100bc:	2300      	movs	r3, #0
 80100be:	2200      	movs	r2, #0
 80100c0:	69f9      	ldr	r1, [r7, #28]
 80100c2:	47a0      	blx	r4
 80100c4:	4603      	mov	r3, r0
 80100c6:	74fb      	strb	r3, [r7, #19]
 80100c8:	e001      	b.n	80100ce <tcp_input+0x6e6>
 80100ca:	2300      	movs	r3, #0
 80100cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80100ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80100d2:	f113 0f0d 	cmn.w	r3, #13
 80100d6:	d016      	beq.n	8010106 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80100d8:	4b13      	ldr	r3, [pc, #76]	; (8010128 <tcp_input+0x740>)
 80100da:	2200      	movs	r2, #0
 80100dc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80100de:	69f8      	ldr	r0, [r7, #28]
 80100e0:	f000 f88e 	bl	8010200 <tcp_input_delayed_close>
 80100e4:	4603      	mov	r3, r0
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d128      	bne.n	801013c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80100ea:	69f8      	ldr	r0, [r7, #28]
 80100ec:	f002 ff20 	bl	8012f30 <tcp_output>
 80100f0:	e025      	b.n	801013e <tcp_input+0x756>
        goto aborted;
 80100f2:	bf00      	nop
 80100f4:	e023      	b.n	801013e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80100f6:	bf00      	nop
 80100f8:	e021      	b.n	801013e <tcp_input+0x756>
              goto aborted;
 80100fa:	bf00      	nop
 80100fc:	e01f      	b.n	801013e <tcp_input+0x756>
          goto aborted;
 80100fe:	bf00      	nop
 8010100:	e01d      	b.n	801013e <tcp_input+0x756>
            goto aborted;
 8010102:	bf00      	nop
 8010104:	e01b      	b.n	801013e <tcp_input+0x756>
              goto aborted;
 8010106:	bf00      	nop
 8010108:	e019      	b.n	801013e <tcp_input+0x756>
 801010a:	bf00      	nop
 801010c:	2000cf80 	.word	0x2000cf80
 8010110:	2000cf90 	.word	0x2000cf90
 8010114:	2000cfb0 	.word	0x2000cfb0
 8010118:	2000cfad 	.word	0x2000cfad
 801011c:	2000cfa8 	.word	0x2000cfa8
 8010120:	2000cfac 	.word	0x2000cfac
 8010124:	2000cfaa 	.word	0x2000cfaa
 8010128:	2000cfb4 	.word	0x2000cfb4
 801012c:	2000cf74 	.word	0x2000cf74
 8010130:	0801c608 	.word	0x0801c608
 8010134:	0801c7bc 	.word	0x0801c7bc
 8010138:	0801c654 	.word	0x0801c654
          goto aborted;
 801013c:	bf00      	nop
    tcp_input_pcb = NULL;
 801013e:	4b27      	ldr	r3, [pc, #156]	; (80101dc <tcp_input+0x7f4>)
 8010140:	2200      	movs	r2, #0
 8010142:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010144:	4b26      	ldr	r3, [pc, #152]	; (80101e0 <tcp_input+0x7f8>)
 8010146:	2200      	movs	r2, #0
 8010148:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801014a:	4b26      	ldr	r3, [pc, #152]	; (80101e4 <tcp_input+0x7fc>)
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d03f      	beq.n	80101d2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8010152:	4b24      	ldr	r3, [pc, #144]	; (80101e4 <tcp_input+0x7fc>)
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	4618      	mov	r0, r3
 8010158:	f7fd fb30 	bl	800d7bc <pbuf_free>
      inseg.p = NULL;
 801015c:	4b21      	ldr	r3, [pc, #132]	; (80101e4 <tcp_input+0x7fc>)
 801015e:	2200      	movs	r2, #0
 8010160:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010162:	e036      	b.n	80101d2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010164:	4b20      	ldr	r3, [pc, #128]	; (80101e8 <tcp_input+0x800>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	899b      	ldrh	r3, [r3, #12]
 801016a:	b29b      	uxth	r3, r3
 801016c:	4618      	mov	r0, r3
 801016e:	f7fb fef5 	bl	800bf5c <lwip_htons>
 8010172:	4603      	mov	r3, r0
 8010174:	b2db      	uxtb	r3, r3
 8010176:	f003 0304 	and.w	r3, r3, #4
 801017a:	2b00      	cmp	r3, #0
 801017c:	d118      	bne.n	80101b0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801017e:	4b1b      	ldr	r3, [pc, #108]	; (80101ec <tcp_input+0x804>)
 8010180:	6819      	ldr	r1, [r3, #0]
 8010182:	4b1b      	ldr	r3, [pc, #108]	; (80101f0 <tcp_input+0x808>)
 8010184:	881b      	ldrh	r3, [r3, #0]
 8010186:	461a      	mov	r2, r3
 8010188:	4b1a      	ldr	r3, [pc, #104]	; (80101f4 <tcp_input+0x80c>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801018e:	4b16      	ldr	r3, [pc, #88]	; (80101e8 <tcp_input+0x800>)
 8010190:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010192:	885b      	ldrh	r3, [r3, #2]
 8010194:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010196:	4a14      	ldr	r2, [pc, #80]	; (80101e8 <tcp_input+0x800>)
 8010198:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801019a:	8812      	ldrh	r2, [r2, #0]
 801019c:	b292      	uxth	r2, r2
 801019e:	9202      	str	r2, [sp, #8]
 80101a0:	9301      	str	r3, [sp, #4]
 80101a2:	4b15      	ldr	r3, [pc, #84]	; (80101f8 <tcp_input+0x810>)
 80101a4:	9300      	str	r3, [sp, #0]
 80101a6:	4b15      	ldr	r3, [pc, #84]	; (80101fc <tcp_input+0x814>)
 80101a8:	4602      	mov	r2, r0
 80101aa:	2000      	movs	r0, #0
 80101ac:	f003 fc74 	bl	8013a98 <tcp_rst>
    pbuf_free(p);
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f7fd fb03 	bl	800d7bc <pbuf_free>
  return;
 80101b6:	e00c      	b.n	80101d2 <tcp_input+0x7ea>
    goto dropped;
 80101b8:	bf00      	nop
 80101ba:	e006      	b.n	80101ca <tcp_input+0x7e2>
    goto dropped;
 80101bc:	bf00      	nop
 80101be:	e004      	b.n	80101ca <tcp_input+0x7e2>
    goto dropped;
 80101c0:	bf00      	nop
 80101c2:	e002      	b.n	80101ca <tcp_input+0x7e2>
      goto dropped;
 80101c4:	bf00      	nop
 80101c6:	e000      	b.n	80101ca <tcp_input+0x7e2>
      goto dropped;
 80101c8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f7fd faf6 	bl	800d7bc <pbuf_free>
 80101d0:	e000      	b.n	80101d4 <tcp_input+0x7ec>
  return;
 80101d2:	bf00      	nop
}
 80101d4:	3724      	adds	r7, #36	; 0x24
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd90      	pop	{r4, r7, pc}
 80101da:	bf00      	nop
 80101dc:	2000cfb4 	.word	0x2000cfb4
 80101e0:	2000cfb0 	.word	0x2000cfb0
 80101e4:	2000cf80 	.word	0x2000cf80
 80101e8:	2000cf90 	.word	0x2000cf90
 80101ec:	2000cfa4 	.word	0x2000cfa4
 80101f0:	2000cfaa 	.word	0x2000cfaa
 80101f4:	2000cfa0 	.word	0x2000cfa0
 80101f8:	20009804 	.word	0x20009804
 80101fc:	20009808 	.word	0x20009808

08010200 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d106      	bne.n	801021c <tcp_input_delayed_close+0x1c>
 801020e:	4b17      	ldr	r3, [pc, #92]	; (801026c <tcp_input_delayed_close+0x6c>)
 8010210:	f240 225a 	movw	r2, #602	; 0x25a
 8010214:	4916      	ldr	r1, [pc, #88]	; (8010270 <tcp_input_delayed_close+0x70>)
 8010216:	4817      	ldr	r0, [pc, #92]	; (8010274 <tcp_input_delayed_close+0x74>)
 8010218:	f009 fa2e 	bl	8019678 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801021c:	4b16      	ldr	r3, [pc, #88]	; (8010278 <tcp_input_delayed_close+0x78>)
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	f003 0310 	and.w	r3, r3, #16
 8010224:	2b00      	cmp	r3, #0
 8010226:	d01c      	beq.n	8010262 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	8b5b      	ldrh	r3, [r3, #26]
 801022c:	f003 0310 	and.w	r3, r3, #16
 8010230:	2b00      	cmp	r3, #0
 8010232:	d10d      	bne.n	8010250 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801023a:	2b00      	cmp	r3, #0
 801023c:	d008      	beq.n	8010250 <tcp_input_delayed_close+0x50>
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010244:	687a      	ldr	r2, [r7, #4]
 8010246:	6912      	ldr	r2, [r2, #16]
 8010248:	f06f 010e 	mvn.w	r1, #14
 801024c:	4610      	mov	r0, r2
 801024e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010250:	6879      	ldr	r1, [r7, #4]
 8010252:	480a      	ldr	r0, [pc, #40]	; (801027c <tcp_input_delayed_close+0x7c>)
 8010254:	f7ff fa50 	bl	800f6f8 <tcp_pcb_remove>
    tcp_free(pcb);
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f7fd fd6b 	bl	800dd34 <tcp_free>
    return 1;
 801025e:	2301      	movs	r3, #1
 8010260:	e000      	b.n	8010264 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010262:	2300      	movs	r3, #0
}
 8010264:	4618      	mov	r0, r3
 8010266:	3708      	adds	r7, #8
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}
 801026c:	0801c608 	.word	0x0801c608
 8010270:	0801c7d8 	.word	0x0801c7d8
 8010274:	0801c654 	.word	0x0801c654
 8010278:	2000cfad 	.word	0x2000cfad
 801027c:	2000cf74 	.word	0x2000cf74

08010280 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010280:	b590      	push	{r4, r7, lr}
 8010282:	b08b      	sub	sp, #44	; 0x2c
 8010284:	af04      	add	r7, sp, #16
 8010286:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010288:	4b6f      	ldr	r3, [pc, #444]	; (8010448 <tcp_listen_input+0x1c8>)
 801028a:	781b      	ldrb	r3, [r3, #0]
 801028c:	f003 0304 	and.w	r3, r3, #4
 8010290:	2b00      	cmp	r3, #0
 8010292:	f040 80d2 	bne.w	801043a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d106      	bne.n	80102aa <tcp_listen_input+0x2a>
 801029c:	4b6b      	ldr	r3, [pc, #428]	; (801044c <tcp_listen_input+0x1cc>)
 801029e:	f240 2281 	movw	r2, #641	; 0x281
 80102a2:	496b      	ldr	r1, [pc, #428]	; (8010450 <tcp_listen_input+0x1d0>)
 80102a4:	486b      	ldr	r0, [pc, #428]	; (8010454 <tcp_listen_input+0x1d4>)
 80102a6:	f009 f9e7 	bl	8019678 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80102aa:	4b67      	ldr	r3, [pc, #412]	; (8010448 <tcp_listen_input+0x1c8>)
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	f003 0310 	and.w	r3, r3, #16
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d019      	beq.n	80102ea <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102b6:	4b68      	ldr	r3, [pc, #416]	; (8010458 <tcp_listen_input+0x1d8>)
 80102b8:	6819      	ldr	r1, [r3, #0]
 80102ba:	4b68      	ldr	r3, [pc, #416]	; (801045c <tcp_listen_input+0x1dc>)
 80102bc:	881b      	ldrh	r3, [r3, #0]
 80102be:	461a      	mov	r2, r3
 80102c0:	4b67      	ldr	r3, [pc, #412]	; (8010460 <tcp_listen_input+0x1e0>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102c6:	4b67      	ldr	r3, [pc, #412]	; (8010464 <tcp_listen_input+0x1e4>)
 80102c8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102ca:	885b      	ldrh	r3, [r3, #2]
 80102cc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102ce:	4a65      	ldr	r2, [pc, #404]	; (8010464 <tcp_listen_input+0x1e4>)
 80102d0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102d2:	8812      	ldrh	r2, [r2, #0]
 80102d4:	b292      	uxth	r2, r2
 80102d6:	9202      	str	r2, [sp, #8]
 80102d8:	9301      	str	r3, [sp, #4]
 80102da:	4b63      	ldr	r3, [pc, #396]	; (8010468 <tcp_listen_input+0x1e8>)
 80102dc:	9300      	str	r3, [sp, #0]
 80102de:	4b63      	ldr	r3, [pc, #396]	; (801046c <tcp_listen_input+0x1ec>)
 80102e0:	4602      	mov	r2, r0
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f003 fbd8 	bl	8013a98 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80102e8:	e0a9      	b.n	801043e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80102ea:	4b57      	ldr	r3, [pc, #348]	; (8010448 <tcp_listen_input+0x1c8>)
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	f003 0302 	and.w	r3, r3, #2
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	f000 80a3 	beq.w	801043e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	7d5b      	ldrb	r3, [r3, #21]
 80102fc:	4618      	mov	r0, r3
 80102fe:	f7ff f859 	bl	800f3b4 <tcp_alloc>
 8010302:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010304:	697b      	ldr	r3, [r7, #20]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d111      	bne.n	801032e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	699b      	ldr	r3, [r3, #24]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d00a      	beq.n	8010328 <tcp_listen_input+0xa8>
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	699b      	ldr	r3, [r3, #24]
 8010316:	687a      	ldr	r2, [r7, #4]
 8010318:	6910      	ldr	r0, [r2, #16]
 801031a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801031e:	2100      	movs	r1, #0
 8010320:	4798      	blx	r3
 8010322:	4603      	mov	r3, r0
 8010324:	73bb      	strb	r3, [r7, #14]
      return;
 8010326:	e08b      	b.n	8010440 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010328:	23f0      	movs	r3, #240	; 0xf0
 801032a:	73bb      	strb	r3, [r7, #14]
      return;
 801032c:	e088      	b.n	8010440 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801032e:	4b50      	ldr	r3, [pc, #320]	; (8010470 <tcp_listen_input+0x1f0>)
 8010330:	695a      	ldr	r2, [r3, #20]
 8010332:	697b      	ldr	r3, [r7, #20]
 8010334:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010336:	4b4e      	ldr	r3, [pc, #312]	; (8010470 <tcp_listen_input+0x1f0>)
 8010338:	691a      	ldr	r2, [r3, #16]
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	8ada      	ldrh	r2, [r3, #22]
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010346:	4b47      	ldr	r3, [pc, #284]	; (8010464 <tcp_listen_input+0x1e4>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	881b      	ldrh	r3, [r3, #0]
 801034c:	b29a      	uxth	r2, r3
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	2203      	movs	r2, #3
 8010356:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010358:	4b41      	ldr	r3, [pc, #260]	; (8010460 <tcp_listen_input+0x1e0>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	1c5a      	adds	r2, r3, #1
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801036a:	6978      	ldr	r0, [r7, #20]
 801036c:	f7ff fa58 	bl	800f820 <tcp_next_iss>
 8010370:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	693a      	ldr	r2, [r7, #16]
 8010376:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	693a      	ldr	r2, [r7, #16]
 801037c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	693a      	ldr	r2, [r7, #16]
 8010382:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	693a      	ldr	r2, [r7, #16]
 8010388:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801038a:	4b35      	ldr	r3, [pc, #212]	; (8010460 <tcp_listen_input+0x1e0>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	1e5a      	subs	r2, r3, #1
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	691a      	ldr	r2, [r3, #16]
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	7a5b      	ldrb	r3, [r3, #9]
 80103a6:	f003 030c 	and.w	r3, r3, #12
 80103aa:	b2da      	uxtb	r2, r3
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	7a1a      	ldrb	r2, [r3, #8]
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80103b8:	4b2e      	ldr	r3, [pc, #184]	; (8010474 <tcp_listen_input+0x1f4>)
 80103ba:	681a      	ldr	r2, [r3, #0]
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	60da      	str	r2, [r3, #12]
 80103c0:	4a2c      	ldr	r2, [pc, #176]	; (8010474 <tcp_listen_input+0x1f4>)
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	6013      	str	r3, [r2, #0]
 80103c6:	f003 fd29 	bl	8013e1c <tcp_timer_needed>
 80103ca:	4b2b      	ldr	r3, [pc, #172]	; (8010478 <tcp_listen_input+0x1f8>)
 80103cc:	2201      	movs	r2, #1
 80103ce:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80103d0:	6978      	ldr	r0, [r7, #20]
 80103d2:	f001 fd8f 	bl	8011ef4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80103d6:	4b23      	ldr	r3, [pc, #140]	; (8010464 <tcp_listen_input+0x1e4>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	89db      	ldrh	r3, [r3, #14]
 80103dc:	b29a      	uxth	r2, r3
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	3304      	adds	r3, #4
 80103f8:	4618      	mov	r0, r3
 80103fa:	f007 fac1 	bl	8017980 <ip4_route>
 80103fe:	4601      	mov	r1, r0
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	3304      	adds	r3, #4
 8010404:	461a      	mov	r2, r3
 8010406:	4620      	mov	r0, r4
 8010408:	f7ff fa30 	bl	800f86c <tcp_eff_send_mss_netif>
 801040c:	4603      	mov	r3, r0
 801040e:	461a      	mov	r2, r3
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010414:	2112      	movs	r1, #18
 8010416:	6978      	ldr	r0, [r7, #20]
 8010418:	f002 fc9c 	bl	8012d54 <tcp_enqueue_flags>
 801041c:	4603      	mov	r3, r0
 801041e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d004      	beq.n	8010432 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010428:	2100      	movs	r1, #0
 801042a:	6978      	ldr	r0, [r7, #20]
 801042c:	f7fd ff08 	bl	800e240 <tcp_abandon>
      return;
 8010430:	e006      	b.n	8010440 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010432:	6978      	ldr	r0, [r7, #20]
 8010434:	f002 fd7c 	bl	8012f30 <tcp_output>
  return;
 8010438:	e001      	b.n	801043e <tcp_listen_input+0x1be>
    return;
 801043a:	bf00      	nop
 801043c:	e000      	b.n	8010440 <tcp_listen_input+0x1c0>
  return;
 801043e:	bf00      	nop
}
 8010440:	371c      	adds	r7, #28
 8010442:	46bd      	mov	sp, r7
 8010444:	bd90      	pop	{r4, r7, pc}
 8010446:	bf00      	nop
 8010448:	2000cfac 	.word	0x2000cfac
 801044c:	0801c608 	.word	0x0801c608
 8010450:	0801c800 	.word	0x0801c800
 8010454:	0801c654 	.word	0x0801c654
 8010458:	2000cfa4 	.word	0x2000cfa4
 801045c:	2000cfaa 	.word	0x2000cfaa
 8010460:	2000cfa0 	.word	0x2000cfa0
 8010464:	2000cf90 	.word	0x2000cf90
 8010468:	20009804 	.word	0x20009804
 801046c:	20009808 	.word	0x20009808
 8010470:	200097f4 	.word	0x200097f4
 8010474:	2000cf74 	.word	0x2000cf74
 8010478:	2000cf7c 	.word	0x2000cf7c

0801047c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b086      	sub	sp, #24
 8010480:	af04      	add	r7, sp, #16
 8010482:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010484:	4b2f      	ldr	r3, [pc, #188]	; (8010544 <tcp_timewait_input+0xc8>)
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	f003 0304 	and.w	r3, r3, #4
 801048c:	2b00      	cmp	r3, #0
 801048e:	d153      	bne.n	8010538 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d106      	bne.n	80104a4 <tcp_timewait_input+0x28>
 8010496:	4b2c      	ldr	r3, [pc, #176]	; (8010548 <tcp_timewait_input+0xcc>)
 8010498:	f240 22ee 	movw	r2, #750	; 0x2ee
 801049c:	492b      	ldr	r1, [pc, #172]	; (801054c <tcp_timewait_input+0xd0>)
 801049e:	482c      	ldr	r0, [pc, #176]	; (8010550 <tcp_timewait_input+0xd4>)
 80104a0:	f009 f8ea 	bl	8019678 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80104a4:	4b27      	ldr	r3, [pc, #156]	; (8010544 <tcp_timewait_input+0xc8>)
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	f003 0302 	and.w	r3, r3, #2
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d02a      	beq.n	8010506 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80104b0:	4b28      	ldr	r3, [pc, #160]	; (8010554 <tcp_timewait_input+0xd8>)
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104b8:	1ad3      	subs	r3, r2, r3
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	db2d      	blt.n	801051a <tcp_timewait_input+0x9e>
 80104be:	4b25      	ldr	r3, [pc, #148]	; (8010554 <tcp_timewait_input+0xd8>)
 80104c0:	681a      	ldr	r2, [r3, #0]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104c6:	6879      	ldr	r1, [r7, #4]
 80104c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80104ca:	440b      	add	r3, r1
 80104cc:	1ad3      	subs	r3, r2, r3
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	dc23      	bgt.n	801051a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104d2:	4b21      	ldr	r3, [pc, #132]	; (8010558 <tcp_timewait_input+0xdc>)
 80104d4:	6819      	ldr	r1, [r3, #0]
 80104d6:	4b21      	ldr	r3, [pc, #132]	; (801055c <tcp_timewait_input+0xe0>)
 80104d8:	881b      	ldrh	r3, [r3, #0]
 80104da:	461a      	mov	r2, r3
 80104dc:	4b1d      	ldr	r3, [pc, #116]	; (8010554 <tcp_timewait_input+0xd8>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104e2:	4b1f      	ldr	r3, [pc, #124]	; (8010560 <tcp_timewait_input+0xe4>)
 80104e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104e6:	885b      	ldrh	r3, [r3, #2]
 80104e8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104ea:	4a1d      	ldr	r2, [pc, #116]	; (8010560 <tcp_timewait_input+0xe4>)
 80104ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104ee:	8812      	ldrh	r2, [r2, #0]
 80104f0:	b292      	uxth	r2, r2
 80104f2:	9202      	str	r2, [sp, #8]
 80104f4:	9301      	str	r3, [sp, #4]
 80104f6:	4b1b      	ldr	r3, [pc, #108]	; (8010564 <tcp_timewait_input+0xe8>)
 80104f8:	9300      	str	r3, [sp, #0]
 80104fa:	4b1b      	ldr	r3, [pc, #108]	; (8010568 <tcp_timewait_input+0xec>)
 80104fc:	4602      	mov	r2, r0
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f003 faca 	bl	8013a98 <tcp_rst>
      return;
 8010504:	e01b      	b.n	801053e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010506:	4b0f      	ldr	r3, [pc, #60]	; (8010544 <tcp_timewait_input+0xc8>)
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	f003 0301 	and.w	r3, r3, #1
 801050e:	2b00      	cmp	r3, #0
 8010510:	d003      	beq.n	801051a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010512:	4b16      	ldr	r3, [pc, #88]	; (801056c <tcp_timewait_input+0xf0>)
 8010514:	681a      	ldr	r2, [r3, #0]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801051a:	4b10      	ldr	r3, [pc, #64]	; (801055c <tcp_timewait_input+0xe0>)
 801051c:	881b      	ldrh	r3, [r3, #0]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d00c      	beq.n	801053c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	8b5b      	ldrh	r3, [r3, #26]
 8010526:	f043 0302 	orr.w	r3, r3, #2
 801052a:	b29a      	uxth	r2, r3
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f002 fcfd 	bl	8012f30 <tcp_output>
  }
  return;
 8010536:	e001      	b.n	801053c <tcp_timewait_input+0xc0>
    return;
 8010538:	bf00      	nop
 801053a:	e000      	b.n	801053e <tcp_timewait_input+0xc2>
  return;
 801053c:	bf00      	nop
}
 801053e:	3708      	adds	r7, #8
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}
 8010544:	2000cfac 	.word	0x2000cfac
 8010548:	0801c608 	.word	0x0801c608
 801054c:	0801c820 	.word	0x0801c820
 8010550:	0801c654 	.word	0x0801c654
 8010554:	2000cfa0 	.word	0x2000cfa0
 8010558:	2000cfa4 	.word	0x2000cfa4
 801055c:	2000cfaa 	.word	0x2000cfaa
 8010560:	2000cf90 	.word	0x2000cf90
 8010564:	20009804 	.word	0x20009804
 8010568:	20009808 	.word	0x20009808
 801056c:	2000cf68 	.word	0x2000cf68

08010570 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010570:	b590      	push	{r4, r7, lr}
 8010572:	b08d      	sub	sp, #52	; 0x34
 8010574:	af04      	add	r7, sp, #16
 8010576:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010578:	2300      	movs	r3, #0
 801057a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801057c:	2300      	movs	r3, #0
 801057e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d106      	bne.n	8010594 <tcp_process+0x24>
 8010586:	4b9d      	ldr	r3, [pc, #628]	; (80107fc <tcp_process+0x28c>)
 8010588:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801058c:	499c      	ldr	r1, [pc, #624]	; (8010800 <tcp_process+0x290>)
 801058e:	489d      	ldr	r0, [pc, #628]	; (8010804 <tcp_process+0x294>)
 8010590:	f009 f872 	bl	8019678 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010594:	4b9c      	ldr	r3, [pc, #624]	; (8010808 <tcp_process+0x298>)
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	f003 0304 	and.w	r3, r3, #4
 801059c:	2b00      	cmp	r3, #0
 801059e:	d04e      	beq.n	801063e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	7d1b      	ldrb	r3, [r3, #20]
 80105a4:	2b02      	cmp	r3, #2
 80105a6:	d108      	bne.n	80105ba <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105ac:	4b97      	ldr	r3, [pc, #604]	; (801080c <tcp_process+0x29c>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d123      	bne.n	80105fc <tcp_process+0x8c>
        acceptable = 1;
 80105b4:	2301      	movs	r3, #1
 80105b6:	76fb      	strb	r3, [r7, #27]
 80105b8:	e020      	b.n	80105fc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105be:	4b94      	ldr	r3, [pc, #592]	; (8010810 <tcp_process+0x2a0>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d102      	bne.n	80105cc <tcp_process+0x5c>
        acceptable = 1;
 80105c6:	2301      	movs	r3, #1
 80105c8:	76fb      	strb	r3, [r7, #27]
 80105ca:	e017      	b.n	80105fc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80105cc:	4b90      	ldr	r3, [pc, #576]	; (8010810 <tcp_process+0x2a0>)
 80105ce:	681a      	ldr	r2, [r3, #0]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105d4:	1ad3      	subs	r3, r2, r3
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	db10      	blt.n	80105fc <tcp_process+0x8c>
 80105da:	4b8d      	ldr	r3, [pc, #564]	; (8010810 <tcp_process+0x2a0>)
 80105dc:	681a      	ldr	r2, [r3, #0]
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105e2:	6879      	ldr	r1, [r7, #4]
 80105e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80105e6:	440b      	add	r3, r1
 80105e8:	1ad3      	subs	r3, r2, r3
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	dc06      	bgt.n	80105fc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	8b5b      	ldrh	r3, [r3, #26]
 80105f2:	f043 0302 	orr.w	r3, r3, #2
 80105f6:	b29a      	uxth	r2, r3
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80105fc:	7efb      	ldrb	r3, [r7, #27]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d01b      	beq.n	801063a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	7d1b      	ldrb	r3, [r3, #20]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d106      	bne.n	8010618 <tcp_process+0xa8>
 801060a:	4b7c      	ldr	r3, [pc, #496]	; (80107fc <tcp_process+0x28c>)
 801060c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010610:	4980      	ldr	r1, [pc, #512]	; (8010814 <tcp_process+0x2a4>)
 8010612:	487c      	ldr	r0, [pc, #496]	; (8010804 <tcp_process+0x294>)
 8010614:	f009 f830 	bl	8019678 <iprintf>
      recv_flags |= TF_RESET;
 8010618:	4b7f      	ldr	r3, [pc, #508]	; (8010818 <tcp_process+0x2a8>)
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	f043 0308 	orr.w	r3, r3, #8
 8010620:	b2da      	uxtb	r2, r3
 8010622:	4b7d      	ldr	r3, [pc, #500]	; (8010818 <tcp_process+0x2a8>)
 8010624:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	8b5b      	ldrh	r3, [r3, #26]
 801062a:	f023 0301 	bic.w	r3, r3, #1
 801062e:	b29a      	uxth	r2, r3
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010634:	f06f 030d 	mvn.w	r3, #13
 8010638:	e37a      	b.n	8010d30 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801063a:	2300      	movs	r3, #0
 801063c:	e378      	b.n	8010d30 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801063e:	4b72      	ldr	r3, [pc, #456]	; (8010808 <tcp_process+0x298>)
 8010640:	781b      	ldrb	r3, [r3, #0]
 8010642:	f003 0302 	and.w	r3, r3, #2
 8010646:	2b00      	cmp	r3, #0
 8010648:	d010      	beq.n	801066c <tcp_process+0xfc>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	7d1b      	ldrb	r3, [r3, #20]
 801064e:	2b02      	cmp	r3, #2
 8010650:	d00c      	beq.n	801066c <tcp_process+0xfc>
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	7d1b      	ldrb	r3, [r3, #20]
 8010656:	2b03      	cmp	r3, #3
 8010658:	d008      	beq.n	801066c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	8b5b      	ldrh	r3, [r3, #26]
 801065e:	f043 0302 	orr.w	r3, r3, #2
 8010662:	b29a      	uxth	r2, r3
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010668:	2300      	movs	r3, #0
 801066a:	e361      	b.n	8010d30 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	8b5b      	ldrh	r3, [r3, #26]
 8010670:	f003 0310 	and.w	r3, r3, #16
 8010674:	2b00      	cmp	r3, #0
 8010676:	d103      	bne.n	8010680 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010678:	4b68      	ldr	r3, [pc, #416]	; (801081c <tcp_process+0x2ac>)
 801067a:	681a      	ldr	r2, [r3, #0]
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2200      	movs	r2, #0
 8010684:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2200      	movs	r2, #0
 801068c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f001 fc2f 	bl	8011ef4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	7d1b      	ldrb	r3, [r3, #20]
 801069a:	3b02      	subs	r3, #2
 801069c:	2b07      	cmp	r3, #7
 801069e:	f200 8337 	bhi.w	8010d10 <tcp_process+0x7a0>
 80106a2:	a201      	add	r2, pc, #4	; (adr r2, 80106a8 <tcp_process+0x138>)
 80106a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106a8:	080106c9 	.word	0x080106c9
 80106ac:	080108f9 	.word	0x080108f9
 80106b0:	08010a71 	.word	0x08010a71
 80106b4:	08010a9b 	.word	0x08010a9b
 80106b8:	08010bbf 	.word	0x08010bbf
 80106bc:	08010a71 	.word	0x08010a71
 80106c0:	08010c4b 	.word	0x08010c4b
 80106c4:	08010cdb 	.word	0x08010cdb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80106c8:	4b4f      	ldr	r3, [pc, #316]	; (8010808 <tcp_process+0x298>)
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	f003 0310 	and.w	r3, r3, #16
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	f000 80e4 	beq.w	801089e <tcp_process+0x32e>
 80106d6:	4b4c      	ldr	r3, [pc, #304]	; (8010808 <tcp_process+0x298>)
 80106d8:	781b      	ldrb	r3, [r3, #0]
 80106da:	f003 0302 	and.w	r3, r3, #2
 80106de:	2b00      	cmp	r3, #0
 80106e0:	f000 80dd 	beq.w	801089e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106e8:	1c5a      	adds	r2, r3, #1
 80106ea:	4b48      	ldr	r3, [pc, #288]	; (801080c <tcp_process+0x29c>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	429a      	cmp	r2, r3
 80106f0:	f040 80d5 	bne.w	801089e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80106f4:	4b46      	ldr	r3, [pc, #280]	; (8010810 <tcp_process+0x2a0>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	1c5a      	adds	r2, r3, #1
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010706:	4b41      	ldr	r3, [pc, #260]	; (801080c <tcp_process+0x29c>)
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801070e:	4b44      	ldr	r3, [pc, #272]	; (8010820 <tcp_process+0x2b0>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	89db      	ldrh	r3, [r3, #14]
 8010714:	b29a      	uxth	r2, r3
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010728:	4b39      	ldr	r3, [pc, #228]	; (8010810 <tcp_process+0x2a0>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	1e5a      	subs	r2, r3, #1
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2204      	movs	r2, #4
 8010736:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	3304      	adds	r3, #4
 8010740:	4618      	mov	r0, r3
 8010742:	f007 f91d 	bl	8017980 <ip4_route>
 8010746:	4601      	mov	r1, r0
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	3304      	adds	r3, #4
 801074c:	461a      	mov	r2, r3
 801074e:	4620      	mov	r0, r4
 8010750:	f7ff f88c 	bl	800f86c <tcp_eff_send_mss_netif>
 8010754:	4603      	mov	r3, r0
 8010756:	461a      	mov	r2, r3
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010760:	009a      	lsls	r2, r3, #2
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010766:	005b      	lsls	r3, r3, #1
 8010768:	f241 111c 	movw	r1, #4380	; 0x111c
 801076c:	428b      	cmp	r3, r1
 801076e:	bf38      	it	cc
 8010770:	460b      	movcc	r3, r1
 8010772:	429a      	cmp	r2, r3
 8010774:	d204      	bcs.n	8010780 <tcp_process+0x210>
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801077a:	009b      	lsls	r3, r3, #2
 801077c:	b29b      	uxth	r3, r3
 801077e:	e00d      	b.n	801079c <tcp_process+0x22c>
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010784:	005b      	lsls	r3, r3, #1
 8010786:	f241 121c 	movw	r2, #4380	; 0x111c
 801078a:	4293      	cmp	r3, r2
 801078c:	d904      	bls.n	8010798 <tcp_process+0x228>
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010792:	005b      	lsls	r3, r3, #1
 8010794:	b29b      	uxth	r3, r3
 8010796:	e001      	b.n	801079c <tcp_process+0x22c>
 8010798:	f241 131c 	movw	r3, #4380	; 0x111c
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d106      	bne.n	80107ba <tcp_process+0x24a>
 80107ac:	4b13      	ldr	r3, [pc, #76]	; (80107fc <tcp_process+0x28c>)
 80107ae:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80107b2:	491c      	ldr	r1, [pc, #112]	; (8010824 <tcp_process+0x2b4>)
 80107b4:	4813      	ldr	r0, [pc, #76]	; (8010804 <tcp_process+0x294>)
 80107b6:	f008 ff5f 	bl	8019678 <iprintf>
        --pcb->snd_queuelen;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80107c0:	3b01      	subs	r3, #1
 80107c2:	b29a      	uxth	r2, r3
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107ce:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80107d0:	69fb      	ldr	r3, [r7, #28]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d12a      	bne.n	801082c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107da:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d106      	bne.n	80107f0 <tcp_process+0x280>
 80107e2:	4b06      	ldr	r3, [pc, #24]	; (80107fc <tcp_process+0x28c>)
 80107e4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80107e8:	490f      	ldr	r1, [pc, #60]	; (8010828 <tcp_process+0x2b8>)
 80107ea:	4806      	ldr	r0, [pc, #24]	; (8010804 <tcp_process+0x294>)
 80107ec:	f008 ff44 	bl	8019678 <iprintf>
          pcb->unsent = rseg->next;
 80107f0:	69fb      	ldr	r3, [r7, #28]
 80107f2:	681a      	ldr	r2, [r3, #0]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80107f8:	e01c      	b.n	8010834 <tcp_process+0x2c4>
 80107fa:	bf00      	nop
 80107fc:	0801c608 	.word	0x0801c608
 8010800:	0801c840 	.word	0x0801c840
 8010804:	0801c654 	.word	0x0801c654
 8010808:	2000cfac 	.word	0x2000cfac
 801080c:	2000cfa4 	.word	0x2000cfa4
 8010810:	2000cfa0 	.word	0x2000cfa0
 8010814:	0801c85c 	.word	0x0801c85c
 8010818:	2000cfad 	.word	0x2000cfad
 801081c:	2000cf68 	.word	0x2000cf68
 8010820:	2000cf90 	.word	0x2000cf90
 8010824:	0801c87c 	.word	0x0801c87c
 8010828:	0801c894 	.word	0x0801c894
        } else {
          pcb->unacked = rseg->next;
 801082c:	69fb      	ldr	r3, [r7, #28]
 801082e:	681a      	ldr	r2, [r3, #0]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010834:	69f8      	ldr	r0, [r7, #28]
 8010836:	f7fe fc54 	bl	800f0e2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801083e:	2b00      	cmp	r3, #0
 8010840:	d104      	bne.n	801084c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010848:	861a      	strh	r2, [r3, #48]	; 0x30
 801084a:	e006      	b.n	801085a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2200      	movs	r2, #0
 8010850:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2200      	movs	r2, #0
 8010856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010860:	2b00      	cmp	r3, #0
 8010862:	d00a      	beq.n	801087a <tcp_process+0x30a>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801086a:	687a      	ldr	r2, [r7, #4]
 801086c:	6910      	ldr	r0, [r2, #16]
 801086e:	2200      	movs	r2, #0
 8010870:	6879      	ldr	r1, [r7, #4]
 8010872:	4798      	blx	r3
 8010874:	4603      	mov	r3, r0
 8010876:	76bb      	strb	r3, [r7, #26]
 8010878:	e001      	b.n	801087e <tcp_process+0x30e>
 801087a:	2300      	movs	r3, #0
 801087c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801087e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010882:	f113 0f0d 	cmn.w	r3, #13
 8010886:	d102      	bne.n	801088e <tcp_process+0x31e>
          return ERR_ABRT;
 8010888:	f06f 030c 	mvn.w	r3, #12
 801088c:	e250      	b.n	8010d30 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	8b5b      	ldrh	r3, [r3, #26]
 8010892:	f043 0302 	orr.w	r3, r3, #2
 8010896:	b29a      	uxth	r2, r3
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801089c:	e23a      	b.n	8010d14 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801089e:	4b98      	ldr	r3, [pc, #608]	; (8010b00 <tcp_process+0x590>)
 80108a0:	781b      	ldrb	r3, [r3, #0]
 80108a2:	f003 0310 	and.w	r3, r3, #16
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	f000 8234 	beq.w	8010d14 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108ac:	4b95      	ldr	r3, [pc, #596]	; (8010b04 <tcp_process+0x594>)
 80108ae:	6819      	ldr	r1, [r3, #0]
 80108b0:	4b95      	ldr	r3, [pc, #596]	; (8010b08 <tcp_process+0x598>)
 80108b2:	881b      	ldrh	r3, [r3, #0]
 80108b4:	461a      	mov	r2, r3
 80108b6:	4b95      	ldr	r3, [pc, #596]	; (8010b0c <tcp_process+0x59c>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108bc:	4b94      	ldr	r3, [pc, #592]	; (8010b10 <tcp_process+0x5a0>)
 80108be:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108c0:	885b      	ldrh	r3, [r3, #2]
 80108c2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108c4:	4a92      	ldr	r2, [pc, #584]	; (8010b10 <tcp_process+0x5a0>)
 80108c6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108c8:	8812      	ldrh	r2, [r2, #0]
 80108ca:	b292      	uxth	r2, r2
 80108cc:	9202      	str	r2, [sp, #8]
 80108ce:	9301      	str	r3, [sp, #4]
 80108d0:	4b90      	ldr	r3, [pc, #576]	; (8010b14 <tcp_process+0x5a4>)
 80108d2:	9300      	str	r3, [sp, #0]
 80108d4:	4b90      	ldr	r3, [pc, #576]	; (8010b18 <tcp_process+0x5a8>)
 80108d6:	4602      	mov	r2, r0
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f003 f8dd 	bl	8013a98 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80108e4:	2b05      	cmp	r3, #5
 80108e6:	f200 8215 	bhi.w	8010d14 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2200      	movs	r2, #0
 80108ee:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f002 fea7 	bl	8013644 <tcp_rexmit_rto>
      break;
 80108f6:	e20d      	b.n	8010d14 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80108f8:	4b81      	ldr	r3, [pc, #516]	; (8010b00 <tcp_process+0x590>)
 80108fa:	781b      	ldrb	r3, [r3, #0]
 80108fc:	f003 0310 	and.w	r3, r3, #16
 8010900:	2b00      	cmp	r3, #0
 8010902:	f000 80a1 	beq.w	8010a48 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010906:	4b7f      	ldr	r3, [pc, #508]	; (8010b04 <tcp_process+0x594>)
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801090e:	1ad3      	subs	r3, r2, r3
 8010910:	3b01      	subs	r3, #1
 8010912:	2b00      	cmp	r3, #0
 8010914:	db7e      	blt.n	8010a14 <tcp_process+0x4a4>
 8010916:	4b7b      	ldr	r3, [pc, #492]	; (8010b04 <tcp_process+0x594>)
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801091e:	1ad3      	subs	r3, r2, r3
 8010920:	2b00      	cmp	r3, #0
 8010922:	dc77      	bgt.n	8010a14 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2204      	movs	r2, #4
 8010928:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801092e:	2b00      	cmp	r3, #0
 8010930:	d102      	bne.n	8010938 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010932:	23fa      	movs	r3, #250	; 0xfa
 8010934:	76bb      	strb	r3, [r7, #26]
 8010936:	e01d      	b.n	8010974 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801093c:	699b      	ldr	r3, [r3, #24]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d106      	bne.n	8010950 <tcp_process+0x3e0>
 8010942:	4b76      	ldr	r3, [pc, #472]	; (8010b1c <tcp_process+0x5ac>)
 8010944:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010948:	4975      	ldr	r1, [pc, #468]	; (8010b20 <tcp_process+0x5b0>)
 801094a:	4876      	ldr	r0, [pc, #472]	; (8010b24 <tcp_process+0x5b4>)
 801094c:	f008 fe94 	bl	8019678 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010954:	699b      	ldr	r3, [r3, #24]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d00a      	beq.n	8010970 <tcp_process+0x400>
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801095e:	699b      	ldr	r3, [r3, #24]
 8010960:	687a      	ldr	r2, [r7, #4]
 8010962:	6910      	ldr	r0, [r2, #16]
 8010964:	2200      	movs	r2, #0
 8010966:	6879      	ldr	r1, [r7, #4]
 8010968:	4798      	blx	r3
 801096a:	4603      	mov	r3, r0
 801096c:	76bb      	strb	r3, [r7, #26]
 801096e:	e001      	b.n	8010974 <tcp_process+0x404>
 8010970:	23f0      	movs	r3, #240	; 0xf0
 8010972:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010974:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d00a      	beq.n	8010992 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801097c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010980:	f113 0f0d 	cmn.w	r3, #13
 8010984:	d002      	beq.n	801098c <tcp_process+0x41c>
              tcp_abort(pcb);
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f7fd fd18 	bl	800e3bc <tcp_abort>
            }
            return ERR_ABRT;
 801098c:	f06f 030c 	mvn.w	r3, #12
 8010990:	e1ce      	b.n	8010d30 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f000 fae0 	bl	8010f58 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010998:	4b63      	ldr	r3, [pc, #396]	; (8010b28 <tcp_process+0x5b8>)
 801099a:	881b      	ldrh	r3, [r3, #0]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d005      	beq.n	80109ac <tcp_process+0x43c>
            recv_acked--;
 80109a0:	4b61      	ldr	r3, [pc, #388]	; (8010b28 <tcp_process+0x5b8>)
 80109a2:	881b      	ldrh	r3, [r3, #0]
 80109a4:	3b01      	subs	r3, #1
 80109a6:	b29a      	uxth	r2, r3
 80109a8:	4b5f      	ldr	r3, [pc, #380]	; (8010b28 <tcp_process+0x5b8>)
 80109aa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109b0:	009a      	lsls	r2, r3, #2
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109b6:	005b      	lsls	r3, r3, #1
 80109b8:	f241 111c 	movw	r1, #4380	; 0x111c
 80109bc:	428b      	cmp	r3, r1
 80109be:	bf38      	it	cc
 80109c0:	460b      	movcc	r3, r1
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d204      	bcs.n	80109d0 <tcp_process+0x460>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109ca:	009b      	lsls	r3, r3, #2
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	e00d      	b.n	80109ec <tcp_process+0x47c>
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109d4:	005b      	lsls	r3, r3, #1
 80109d6:	f241 121c 	movw	r2, #4380	; 0x111c
 80109da:	4293      	cmp	r3, r2
 80109dc:	d904      	bls.n	80109e8 <tcp_process+0x478>
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109e2:	005b      	lsls	r3, r3, #1
 80109e4:	b29b      	uxth	r3, r3
 80109e6:	e001      	b.n	80109ec <tcp_process+0x47c>
 80109e8:	f241 131c 	movw	r3, #4380	; 0x111c
 80109ec:	687a      	ldr	r2, [r7, #4]
 80109ee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80109f2:	4b4e      	ldr	r3, [pc, #312]	; (8010b2c <tcp_process+0x5bc>)
 80109f4:	781b      	ldrb	r3, [r3, #0]
 80109f6:	f003 0320 	and.w	r3, r3, #32
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d037      	beq.n	8010a6e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	8b5b      	ldrh	r3, [r3, #26]
 8010a02:	f043 0302 	orr.w	r3, r3, #2
 8010a06:	b29a      	uxth	r2, r3
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2207      	movs	r2, #7
 8010a10:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010a12:	e02c      	b.n	8010a6e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a14:	4b3b      	ldr	r3, [pc, #236]	; (8010b04 <tcp_process+0x594>)
 8010a16:	6819      	ldr	r1, [r3, #0]
 8010a18:	4b3b      	ldr	r3, [pc, #236]	; (8010b08 <tcp_process+0x598>)
 8010a1a:	881b      	ldrh	r3, [r3, #0]
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	4b3b      	ldr	r3, [pc, #236]	; (8010b0c <tcp_process+0x59c>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a24:	4b3a      	ldr	r3, [pc, #232]	; (8010b10 <tcp_process+0x5a0>)
 8010a26:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a28:	885b      	ldrh	r3, [r3, #2]
 8010a2a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a2c:	4a38      	ldr	r2, [pc, #224]	; (8010b10 <tcp_process+0x5a0>)
 8010a2e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a30:	8812      	ldrh	r2, [r2, #0]
 8010a32:	b292      	uxth	r2, r2
 8010a34:	9202      	str	r2, [sp, #8]
 8010a36:	9301      	str	r3, [sp, #4]
 8010a38:	4b36      	ldr	r3, [pc, #216]	; (8010b14 <tcp_process+0x5a4>)
 8010a3a:	9300      	str	r3, [sp, #0]
 8010a3c:	4b36      	ldr	r3, [pc, #216]	; (8010b18 <tcp_process+0x5a8>)
 8010a3e:	4602      	mov	r2, r0
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f003 f829 	bl	8013a98 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010a46:	e167      	b.n	8010d18 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010a48:	4b2d      	ldr	r3, [pc, #180]	; (8010b00 <tcp_process+0x590>)
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	f003 0302 	and.w	r3, r3, #2
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	f000 8161 	beq.w	8010d18 <tcp_process+0x7a8>
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a5a:	1e5a      	subs	r2, r3, #1
 8010a5c:	4b2b      	ldr	r3, [pc, #172]	; (8010b0c <tcp_process+0x59c>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	f040 8159 	bne.w	8010d18 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	f002 fe0e 	bl	8013688 <tcp_rexmit>
      break;
 8010a6c:	e154      	b.n	8010d18 <tcp_process+0x7a8>
 8010a6e:	e153      	b.n	8010d18 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f000 fa71 	bl	8010f58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010a76:	4b2d      	ldr	r3, [pc, #180]	; (8010b2c <tcp_process+0x5bc>)
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	f003 0320 	and.w	r3, r3, #32
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	f000 814c 	beq.w	8010d1c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	8b5b      	ldrh	r3, [r3, #26]
 8010a88:	f043 0302 	orr.w	r3, r3, #2
 8010a8c:	b29a      	uxth	r2, r3
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2207      	movs	r2, #7
 8010a96:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010a98:	e140      	b.n	8010d1c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f000 fa5c 	bl	8010f58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010aa0:	4b22      	ldr	r3, [pc, #136]	; (8010b2c <tcp_process+0x5bc>)
 8010aa2:	781b      	ldrb	r3, [r3, #0]
 8010aa4:	f003 0320 	and.w	r3, r3, #32
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d071      	beq.n	8010b90 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010aac:	4b14      	ldr	r3, [pc, #80]	; (8010b00 <tcp_process+0x590>)
 8010aae:	781b      	ldrb	r3, [r3, #0]
 8010ab0:	f003 0310 	and.w	r3, r3, #16
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d060      	beq.n	8010b7a <tcp_process+0x60a>
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010abc:	4b11      	ldr	r3, [pc, #68]	; (8010b04 <tcp_process+0x594>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d15a      	bne.n	8010b7a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d156      	bne.n	8010b7a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	8b5b      	ldrh	r3, [r3, #26]
 8010ad0:	f043 0302 	orr.w	r3, r3, #2
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f7fe fdbc 	bl	800f658 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010ae0:	4b13      	ldr	r3, [pc, #76]	; (8010b30 <tcp_process+0x5c0>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	687a      	ldr	r2, [r7, #4]
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d105      	bne.n	8010af6 <tcp_process+0x586>
 8010aea:	4b11      	ldr	r3, [pc, #68]	; (8010b30 <tcp_process+0x5c0>)
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	68db      	ldr	r3, [r3, #12]
 8010af0:	4a0f      	ldr	r2, [pc, #60]	; (8010b30 <tcp_process+0x5c0>)
 8010af2:	6013      	str	r3, [r2, #0]
 8010af4:	e02e      	b.n	8010b54 <tcp_process+0x5e4>
 8010af6:	4b0e      	ldr	r3, [pc, #56]	; (8010b30 <tcp_process+0x5c0>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	617b      	str	r3, [r7, #20]
 8010afc:	e027      	b.n	8010b4e <tcp_process+0x5de>
 8010afe:	bf00      	nop
 8010b00:	2000cfac 	.word	0x2000cfac
 8010b04:	2000cfa4 	.word	0x2000cfa4
 8010b08:	2000cfaa 	.word	0x2000cfaa
 8010b0c:	2000cfa0 	.word	0x2000cfa0
 8010b10:	2000cf90 	.word	0x2000cf90
 8010b14:	20009804 	.word	0x20009804
 8010b18:	20009808 	.word	0x20009808
 8010b1c:	0801c608 	.word	0x0801c608
 8010b20:	0801c8a8 	.word	0x0801c8a8
 8010b24:	0801c654 	.word	0x0801c654
 8010b28:	2000cfa8 	.word	0x2000cfa8
 8010b2c:	2000cfad 	.word	0x2000cfad
 8010b30:	2000cf74 	.word	0x2000cf74
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	68db      	ldr	r3, [r3, #12]
 8010b38:	687a      	ldr	r2, [r7, #4]
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d104      	bne.n	8010b48 <tcp_process+0x5d8>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	68da      	ldr	r2, [r3, #12]
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	60da      	str	r2, [r3, #12]
 8010b46:	e005      	b.n	8010b54 <tcp_process+0x5e4>
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	68db      	ldr	r3, [r3, #12]
 8010b4c:	617b      	str	r3, [r7, #20]
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d1ef      	bne.n	8010b34 <tcp_process+0x5c4>
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2200      	movs	r2, #0
 8010b58:	60da      	str	r2, [r3, #12]
 8010b5a:	4b77      	ldr	r3, [pc, #476]	; (8010d38 <tcp_process+0x7c8>)
 8010b5c:	2201      	movs	r2, #1
 8010b5e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	220a      	movs	r2, #10
 8010b64:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010b66:	4b75      	ldr	r3, [pc, #468]	; (8010d3c <tcp_process+0x7cc>)
 8010b68:	681a      	ldr	r2, [r3, #0]
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	60da      	str	r2, [r3, #12]
 8010b6e:	4a73      	ldr	r2, [pc, #460]	; (8010d3c <tcp_process+0x7cc>)
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6013      	str	r3, [r2, #0]
 8010b74:	f003 f952 	bl	8013e1c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010b78:	e0d2      	b.n	8010d20 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	8b5b      	ldrh	r3, [r3, #26]
 8010b7e:	f043 0302 	orr.w	r3, r3, #2
 8010b82:	b29a      	uxth	r2, r3
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2208      	movs	r2, #8
 8010b8c:	751a      	strb	r2, [r3, #20]
      break;
 8010b8e:	e0c7      	b.n	8010d20 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010b90:	4b6b      	ldr	r3, [pc, #428]	; (8010d40 <tcp_process+0x7d0>)
 8010b92:	781b      	ldrb	r3, [r3, #0]
 8010b94:	f003 0310 	and.w	r3, r3, #16
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	f000 80c1 	beq.w	8010d20 <tcp_process+0x7b0>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ba2:	4b68      	ldr	r3, [pc, #416]	; (8010d44 <tcp_process+0x7d4>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	f040 80ba 	bne.w	8010d20 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f040 80b5 	bne.w	8010d20 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	2206      	movs	r2, #6
 8010bba:	751a      	strb	r2, [r3, #20]
      break;
 8010bbc:	e0b0      	b.n	8010d20 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f000 f9ca 	bl	8010f58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010bc4:	4b60      	ldr	r3, [pc, #384]	; (8010d48 <tcp_process+0x7d8>)
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	f003 0320 	and.w	r3, r3, #32
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	f000 80a9 	beq.w	8010d24 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	8b5b      	ldrh	r3, [r3, #26]
 8010bd6:	f043 0302 	orr.w	r3, r3, #2
 8010bda:	b29a      	uxth	r2, r3
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f7fe fd39 	bl	800f658 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010be6:	4b59      	ldr	r3, [pc, #356]	; (8010d4c <tcp_process+0x7dc>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	687a      	ldr	r2, [r7, #4]
 8010bec:	429a      	cmp	r2, r3
 8010bee:	d105      	bne.n	8010bfc <tcp_process+0x68c>
 8010bf0:	4b56      	ldr	r3, [pc, #344]	; (8010d4c <tcp_process+0x7dc>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	68db      	ldr	r3, [r3, #12]
 8010bf6:	4a55      	ldr	r2, [pc, #340]	; (8010d4c <tcp_process+0x7dc>)
 8010bf8:	6013      	str	r3, [r2, #0]
 8010bfa:	e013      	b.n	8010c24 <tcp_process+0x6b4>
 8010bfc:	4b53      	ldr	r3, [pc, #332]	; (8010d4c <tcp_process+0x7dc>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	613b      	str	r3, [r7, #16]
 8010c02:	e00c      	b.n	8010c1e <tcp_process+0x6ae>
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	68db      	ldr	r3, [r3, #12]
 8010c08:	687a      	ldr	r2, [r7, #4]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d104      	bne.n	8010c18 <tcp_process+0x6a8>
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	68da      	ldr	r2, [r3, #12]
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	60da      	str	r2, [r3, #12]
 8010c16:	e005      	b.n	8010c24 <tcp_process+0x6b4>
 8010c18:	693b      	ldr	r3, [r7, #16]
 8010c1a:	68db      	ldr	r3, [r3, #12]
 8010c1c:	613b      	str	r3, [r7, #16]
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d1ef      	bne.n	8010c04 <tcp_process+0x694>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2200      	movs	r2, #0
 8010c28:	60da      	str	r2, [r3, #12]
 8010c2a:	4b43      	ldr	r3, [pc, #268]	; (8010d38 <tcp_process+0x7c8>)
 8010c2c:	2201      	movs	r2, #1
 8010c2e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	220a      	movs	r2, #10
 8010c34:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010c36:	4b41      	ldr	r3, [pc, #260]	; (8010d3c <tcp_process+0x7cc>)
 8010c38:	681a      	ldr	r2, [r3, #0]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	60da      	str	r2, [r3, #12]
 8010c3e:	4a3f      	ldr	r2, [pc, #252]	; (8010d3c <tcp_process+0x7cc>)
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6013      	str	r3, [r2, #0]
 8010c44:	f003 f8ea 	bl	8013e1c <tcp_timer_needed>
      }
      break;
 8010c48:	e06c      	b.n	8010d24 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f000 f984 	bl	8010f58 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010c50:	4b3b      	ldr	r3, [pc, #236]	; (8010d40 <tcp_process+0x7d0>)
 8010c52:	781b      	ldrb	r3, [r3, #0]
 8010c54:	f003 0310 	and.w	r3, r3, #16
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d065      	beq.n	8010d28 <tcp_process+0x7b8>
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c60:	4b38      	ldr	r3, [pc, #224]	; (8010d44 <tcp_process+0x7d4>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d15f      	bne.n	8010d28 <tcp_process+0x7b8>
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d15b      	bne.n	8010d28 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f7fe fcf1 	bl	800f658 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010c76:	4b35      	ldr	r3, [pc, #212]	; (8010d4c <tcp_process+0x7dc>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	687a      	ldr	r2, [r7, #4]
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	d105      	bne.n	8010c8c <tcp_process+0x71c>
 8010c80:	4b32      	ldr	r3, [pc, #200]	; (8010d4c <tcp_process+0x7dc>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	68db      	ldr	r3, [r3, #12]
 8010c86:	4a31      	ldr	r2, [pc, #196]	; (8010d4c <tcp_process+0x7dc>)
 8010c88:	6013      	str	r3, [r2, #0]
 8010c8a:	e013      	b.n	8010cb4 <tcp_process+0x744>
 8010c8c:	4b2f      	ldr	r3, [pc, #188]	; (8010d4c <tcp_process+0x7dc>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	60fb      	str	r3, [r7, #12]
 8010c92:	e00c      	b.n	8010cae <tcp_process+0x73e>
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	68db      	ldr	r3, [r3, #12]
 8010c98:	687a      	ldr	r2, [r7, #4]
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	d104      	bne.n	8010ca8 <tcp_process+0x738>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	68da      	ldr	r2, [r3, #12]
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	60da      	str	r2, [r3, #12]
 8010ca6:	e005      	b.n	8010cb4 <tcp_process+0x744>
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	68db      	ldr	r3, [r3, #12]
 8010cac:	60fb      	str	r3, [r7, #12]
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d1ef      	bne.n	8010c94 <tcp_process+0x724>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	60da      	str	r2, [r3, #12]
 8010cba:	4b1f      	ldr	r3, [pc, #124]	; (8010d38 <tcp_process+0x7c8>)
 8010cbc:	2201      	movs	r2, #1
 8010cbe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	220a      	movs	r2, #10
 8010cc4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010cc6:	4b1d      	ldr	r3, [pc, #116]	; (8010d3c <tcp_process+0x7cc>)
 8010cc8:	681a      	ldr	r2, [r3, #0]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	60da      	str	r2, [r3, #12]
 8010cce:	4a1b      	ldr	r2, [pc, #108]	; (8010d3c <tcp_process+0x7cc>)
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6013      	str	r3, [r2, #0]
 8010cd4:	f003 f8a2 	bl	8013e1c <tcp_timer_needed>
      }
      break;
 8010cd8:	e026      	b.n	8010d28 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f000 f93c 	bl	8010f58 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010ce0:	4b17      	ldr	r3, [pc, #92]	; (8010d40 <tcp_process+0x7d0>)
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	f003 0310 	and.w	r3, r3, #16
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d01f      	beq.n	8010d2c <tcp_process+0x7bc>
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010cf0:	4b14      	ldr	r3, [pc, #80]	; (8010d44 <tcp_process+0x7d4>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d119      	bne.n	8010d2c <tcp_process+0x7bc>
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d115      	bne.n	8010d2c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010d00:	4b11      	ldr	r3, [pc, #68]	; (8010d48 <tcp_process+0x7d8>)
 8010d02:	781b      	ldrb	r3, [r3, #0]
 8010d04:	f043 0310 	orr.w	r3, r3, #16
 8010d08:	b2da      	uxtb	r2, r3
 8010d0a:	4b0f      	ldr	r3, [pc, #60]	; (8010d48 <tcp_process+0x7d8>)
 8010d0c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010d0e:	e00d      	b.n	8010d2c <tcp_process+0x7bc>
    default:
      break;
 8010d10:	bf00      	nop
 8010d12:	e00c      	b.n	8010d2e <tcp_process+0x7be>
      break;
 8010d14:	bf00      	nop
 8010d16:	e00a      	b.n	8010d2e <tcp_process+0x7be>
      break;
 8010d18:	bf00      	nop
 8010d1a:	e008      	b.n	8010d2e <tcp_process+0x7be>
      break;
 8010d1c:	bf00      	nop
 8010d1e:	e006      	b.n	8010d2e <tcp_process+0x7be>
      break;
 8010d20:	bf00      	nop
 8010d22:	e004      	b.n	8010d2e <tcp_process+0x7be>
      break;
 8010d24:	bf00      	nop
 8010d26:	e002      	b.n	8010d2e <tcp_process+0x7be>
      break;
 8010d28:	bf00      	nop
 8010d2a:	e000      	b.n	8010d2e <tcp_process+0x7be>
      break;
 8010d2c:	bf00      	nop
  }
  return ERR_OK;
 8010d2e:	2300      	movs	r3, #0
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	3724      	adds	r7, #36	; 0x24
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd90      	pop	{r4, r7, pc}
 8010d38:	2000cf7c 	.word	0x2000cf7c
 8010d3c:	2000cf78 	.word	0x2000cf78
 8010d40:	2000cfac 	.word	0x2000cfac
 8010d44:	2000cfa4 	.word	0x2000cfa4
 8010d48:	2000cfad 	.word	0x2000cfad
 8010d4c:	2000cf74 	.word	0x2000cf74

08010d50 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010d50:	b590      	push	{r4, r7, lr}
 8010d52:	b085      	sub	sp, #20
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d106      	bne.n	8010d6e <tcp_oos_insert_segment+0x1e>
 8010d60:	4b3b      	ldr	r3, [pc, #236]	; (8010e50 <tcp_oos_insert_segment+0x100>)
 8010d62:	f240 421f 	movw	r2, #1055	; 0x41f
 8010d66:	493b      	ldr	r1, [pc, #236]	; (8010e54 <tcp_oos_insert_segment+0x104>)
 8010d68:	483b      	ldr	r0, [pc, #236]	; (8010e58 <tcp_oos_insert_segment+0x108>)
 8010d6a:	f008 fc85 	bl	8019678 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	68db      	ldr	r3, [r3, #12]
 8010d72:	899b      	ldrh	r3, [r3, #12]
 8010d74:	b29b      	uxth	r3, r3
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7fb f8f0 	bl	800bf5c <lwip_htons>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	b2db      	uxtb	r3, r3
 8010d80:	f003 0301 	and.w	r3, r3, #1
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d028      	beq.n	8010dda <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010d88:	6838      	ldr	r0, [r7, #0]
 8010d8a:	f7fe f995 	bl	800f0b8 <tcp_segs_free>
    next = NULL;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	603b      	str	r3, [r7, #0]
 8010d92:	e056      	b.n	8010e42 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	68db      	ldr	r3, [r3, #12]
 8010d98:	899b      	ldrh	r3, [r3, #12]
 8010d9a:	b29b      	uxth	r3, r3
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7fb f8dd 	bl	800bf5c <lwip_htons>
 8010da2:	4603      	mov	r3, r0
 8010da4:	b2db      	uxtb	r3, r3
 8010da6:	f003 0301 	and.w	r3, r3, #1
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d00d      	beq.n	8010dca <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	68db      	ldr	r3, [r3, #12]
 8010db2:	899b      	ldrh	r3, [r3, #12]
 8010db4:	b29c      	uxth	r4, r3
 8010db6:	2001      	movs	r0, #1
 8010db8:	f7fb f8d0 	bl	800bf5c <lwip_htons>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	461a      	mov	r2, r3
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	68db      	ldr	r3, [r3, #12]
 8010dc4:	4322      	orrs	r2, r4
 8010dc6:	b292      	uxth	r2, r2
 8010dc8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010dd4:	68f8      	ldr	r0, [r7, #12]
 8010dd6:	f7fe f984 	bl	800f0e2 <tcp_seg_free>
    while (next &&
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d00e      	beq.n	8010dfe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	891b      	ldrh	r3, [r3, #8]
 8010de4:	461a      	mov	r2, r3
 8010de6:	4b1d      	ldr	r3, [pc, #116]	; (8010e5c <tcp_oos_insert_segment+0x10c>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	441a      	add	r2, r3
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	68db      	ldr	r3, [r3, #12]
 8010df0:	685b      	ldr	r3, [r3, #4]
 8010df2:	6839      	ldr	r1, [r7, #0]
 8010df4:	8909      	ldrh	r1, [r1, #8]
 8010df6:	440b      	add	r3, r1
 8010df8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	daca      	bge.n	8010d94 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d01e      	beq.n	8010e42 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	891b      	ldrh	r3, [r3, #8]
 8010e08:	461a      	mov	r2, r3
 8010e0a:	4b14      	ldr	r3, [pc, #80]	; (8010e5c <tcp_oos_insert_segment+0x10c>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	441a      	add	r2, r3
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	68db      	ldr	r3, [r3, #12]
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	dd12      	ble.n	8010e42 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	b29a      	uxth	r2, r3
 8010e24:	4b0d      	ldr	r3, [pc, #52]	; (8010e5c <tcp_oos_insert_segment+0x10c>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	1ad3      	subs	r3, r2, r3
 8010e2c:	b29a      	uxth	r2, r3
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	685a      	ldr	r2, [r3, #4]
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	891b      	ldrh	r3, [r3, #8]
 8010e3a:	4619      	mov	r1, r3
 8010e3c:	4610      	mov	r0, r2
 8010e3e:	f7fc fb05 	bl	800d44c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	683a      	ldr	r2, [r7, #0]
 8010e46:	601a      	str	r2, [r3, #0]
}
 8010e48:	bf00      	nop
 8010e4a:	3714      	adds	r7, #20
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd90      	pop	{r4, r7, pc}
 8010e50:	0801c608 	.word	0x0801c608
 8010e54:	0801c8c8 	.word	0x0801c8c8
 8010e58:	0801c654 	.word	0x0801c654
 8010e5c:	2000cfa0 	.word	0x2000cfa0

08010e60 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010e60:	b5b0      	push	{r4, r5, r7, lr}
 8010e62:	b086      	sub	sp, #24
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	60f8      	str	r0, [r7, #12]
 8010e68:	60b9      	str	r1, [r7, #8]
 8010e6a:	607a      	str	r2, [r7, #4]
 8010e6c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010e6e:	e03e      	b.n	8010eee <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	685b      	ldr	r3, [r3, #4]
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7fc fd2a 	bl	800d8d8 <pbuf_clen>
 8010e84:	4603      	mov	r3, r0
 8010e86:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e8e:	8a7a      	ldrh	r2, [r7, #18]
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d906      	bls.n	8010ea2 <tcp_free_acked_segments+0x42>
 8010e94:	4b2a      	ldr	r3, [pc, #168]	; (8010f40 <tcp_free_acked_segments+0xe0>)
 8010e96:	f240 4257 	movw	r2, #1111	; 0x457
 8010e9a:	492a      	ldr	r1, [pc, #168]	; (8010f44 <tcp_free_acked_segments+0xe4>)
 8010e9c:	482a      	ldr	r0, [pc, #168]	; (8010f48 <tcp_free_acked_segments+0xe8>)
 8010e9e:	f008 fbeb 	bl	8019678 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010ea8:	8a7b      	ldrh	r3, [r7, #18]
 8010eaa:	1ad3      	subs	r3, r2, r3
 8010eac:	b29a      	uxth	r2, r3
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010eb4:	697b      	ldr	r3, [r7, #20]
 8010eb6:	891a      	ldrh	r2, [r3, #8]
 8010eb8:	4b24      	ldr	r3, [pc, #144]	; (8010f4c <tcp_free_acked_segments+0xec>)
 8010eba:	881b      	ldrh	r3, [r3, #0]
 8010ebc:	4413      	add	r3, r2
 8010ebe:	b29a      	uxth	r2, r3
 8010ec0:	4b22      	ldr	r3, [pc, #136]	; (8010f4c <tcp_free_acked_segments+0xec>)
 8010ec2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010ec4:	6978      	ldr	r0, [r7, #20]
 8010ec6:	f7fe f90c 	bl	800f0e2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d00c      	beq.n	8010eee <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d109      	bne.n	8010eee <tcp_free_acked_segments+0x8e>
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d106      	bne.n	8010eee <tcp_free_acked_segments+0x8e>
 8010ee0:	4b17      	ldr	r3, [pc, #92]	; (8010f40 <tcp_free_acked_segments+0xe0>)
 8010ee2:	f240 4261 	movw	r2, #1121	; 0x461
 8010ee6:	491a      	ldr	r1, [pc, #104]	; (8010f50 <tcp_free_acked_segments+0xf0>)
 8010ee8:	4817      	ldr	r0, [pc, #92]	; (8010f48 <tcp_free_acked_segments+0xe8>)
 8010eea:	f008 fbc5 	bl	8019678 <iprintf>
  while (seg_list != NULL &&
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d020      	beq.n	8010f36 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	68db      	ldr	r3, [r3, #12]
 8010ef8:	685b      	ldr	r3, [r3, #4]
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7fb f843 	bl	800bf86 <lwip_htonl>
 8010f00:	4604      	mov	r4, r0
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	891b      	ldrh	r3, [r3, #8]
 8010f06:	461d      	mov	r5, r3
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	68db      	ldr	r3, [r3, #12]
 8010f0c:	899b      	ldrh	r3, [r3, #12]
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	4618      	mov	r0, r3
 8010f12:	f7fb f823 	bl	800bf5c <lwip_htons>
 8010f16:	4603      	mov	r3, r0
 8010f18:	b2db      	uxtb	r3, r3
 8010f1a:	f003 0303 	and.w	r3, r3, #3
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d001      	beq.n	8010f26 <tcp_free_acked_segments+0xc6>
 8010f22:	2301      	movs	r3, #1
 8010f24:	e000      	b.n	8010f28 <tcp_free_acked_segments+0xc8>
 8010f26:	2300      	movs	r3, #0
 8010f28:	442b      	add	r3, r5
 8010f2a:	18e2      	adds	r2, r4, r3
 8010f2c:	4b09      	ldr	r3, [pc, #36]	; (8010f54 <tcp_free_acked_segments+0xf4>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	dd9c      	ble.n	8010e70 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010f36:	68bb      	ldr	r3, [r7, #8]
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3718      	adds	r7, #24
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8010f40:	0801c608 	.word	0x0801c608
 8010f44:	0801c8f0 	.word	0x0801c8f0
 8010f48:	0801c654 	.word	0x0801c654
 8010f4c:	2000cfa8 	.word	0x2000cfa8
 8010f50:	0801c918 	.word	0x0801c918
 8010f54:	2000cfa4 	.word	0x2000cfa4

08010f58 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010f58:	b5b0      	push	{r4, r5, r7, lr}
 8010f5a:	b094      	sub	sp, #80	; 0x50
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010f60:	2300      	movs	r3, #0
 8010f62:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d106      	bne.n	8010f78 <tcp_receive+0x20>
 8010f6a:	4b91      	ldr	r3, [pc, #580]	; (80111b0 <tcp_receive+0x258>)
 8010f6c:	f240 427b 	movw	r2, #1147	; 0x47b
 8010f70:	4990      	ldr	r1, [pc, #576]	; (80111b4 <tcp_receive+0x25c>)
 8010f72:	4891      	ldr	r0, [pc, #580]	; (80111b8 <tcp_receive+0x260>)
 8010f74:	f008 fb80 	bl	8019678 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	7d1b      	ldrb	r3, [r3, #20]
 8010f7c:	2b03      	cmp	r3, #3
 8010f7e:	d806      	bhi.n	8010f8e <tcp_receive+0x36>
 8010f80:	4b8b      	ldr	r3, [pc, #556]	; (80111b0 <tcp_receive+0x258>)
 8010f82:	f240 427c 	movw	r2, #1148	; 0x47c
 8010f86:	498d      	ldr	r1, [pc, #564]	; (80111bc <tcp_receive+0x264>)
 8010f88:	488b      	ldr	r0, [pc, #556]	; (80111b8 <tcp_receive+0x260>)
 8010f8a:	f008 fb75 	bl	8019678 <iprintf>

  if (flags & TCP_ACK) {
 8010f8e:	4b8c      	ldr	r3, [pc, #560]	; (80111c0 <tcp_receive+0x268>)
 8010f90:	781b      	ldrb	r3, [r3, #0]
 8010f92:	f003 0310 	and.w	r3, r3, #16
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	f000 8264 	beq.w	8011464 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fa8:	4413      	add	r3, r2
 8010faa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010fb0:	4b84      	ldr	r3, [pc, #528]	; (80111c4 <tcp_receive+0x26c>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	1ad3      	subs	r3, r2, r3
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	db1b      	blt.n	8010ff2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010fbe:	4b81      	ldr	r3, [pc, #516]	; (80111c4 <tcp_receive+0x26c>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	d106      	bne.n	8010fd4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010fca:	4b7f      	ldr	r3, [pc, #508]	; (80111c8 <tcp_receive+0x270>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	1ad3      	subs	r3, r2, r3
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	db0e      	blt.n	8010ff2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010fd8:	4b7b      	ldr	r3, [pc, #492]	; (80111c8 <tcp_receive+0x270>)
 8010fda:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	d125      	bne.n	801102c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010fe0:	4b7a      	ldr	r3, [pc, #488]	; (80111cc <tcp_receive+0x274>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	89db      	ldrh	r3, [r3, #14]
 8010fe6:	b29a      	uxth	r2, r3
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d91c      	bls.n	801102c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010ff2:	4b76      	ldr	r3, [pc, #472]	; (80111cc <tcp_receive+0x274>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	89db      	ldrh	r3, [r3, #14]
 8010ff8:	b29a      	uxth	r2, r3
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801100c:	429a      	cmp	r2, r3
 801100e:	d205      	bcs.n	801101c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801101c:	4b69      	ldr	r3, [pc, #420]	; (80111c4 <tcp_receive+0x26c>)
 801101e:	681a      	ldr	r2, [r3, #0]
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011024:	4b68      	ldr	r3, [pc, #416]	; (80111c8 <tcp_receive+0x270>)
 8011026:	681a      	ldr	r2, [r3, #0]
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801102c:	4b66      	ldr	r3, [pc, #408]	; (80111c8 <tcp_receive+0x270>)
 801102e:	681a      	ldr	r2, [r3, #0]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011034:	1ad3      	subs	r3, r2, r3
 8011036:	2b00      	cmp	r3, #0
 8011038:	dc58      	bgt.n	80110ec <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801103a:	4b65      	ldr	r3, [pc, #404]	; (80111d0 <tcp_receive+0x278>)
 801103c:	881b      	ldrh	r3, [r3, #0]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d14b      	bne.n	80110da <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011046:	687a      	ldr	r2, [r7, #4]
 8011048:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801104c:	4413      	add	r3, r2
 801104e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011050:	429a      	cmp	r2, r3
 8011052:	d142      	bne.n	80110da <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801105a:	2b00      	cmp	r3, #0
 801105c:	db3d      	blt.n	80110da <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011062:	4b59      	ldr	r3, [pc, #356]	; (80111c8 <tcp_receive+0x270>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	429a      	cmp	r2, r3
 8011068:	d137      	bne.n	80110da <tcp_receive+0x182>
              found_dupack = 1;
 801106a:	2301      	movs	r3, #1
 801106c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011074:	2bff      	cmp	r3, #255	; 0xff
 8011076:	d007      	beq.n	8011088 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801107e:	3301      	adds	r3, #1
 8011080:	b2da      	uxtb	r2, r3
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801108e:	2b03      	cmp	r3, #3
 8011090:	d91b      	bls.n	80110ca <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801109c:	4413      	add	r3, r2
 801109e:	b29a      	uxth	r2, r3
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d30a      	bcc.n	80110c0 <tcp_receive+0x168>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110b4:	4413      	add	r3, r2
 80110b6:	b29a      	uxth	r2, r3
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80110be:	e004      	b.n	80110ca <tcp_receive+0x172>
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80110d0:	2b02      	cmp	r3, #2
 80110d2:	d902      	bls.n	80110da <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f002 fb43 	bl	8013760 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80110da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110dc:	2b00      	cmp	r3, #0
 80110de:	f040 8161 	bne.w	80113a4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2200      	movs	r2, #0
 80110e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80110ea:	e15b      	b.n	80113a4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110ec:	4b36      	ldr	r3, [pc, #216]	; (80111c8 <tcp_receive+0x270>)
 80110ee:	681a      	ldr	r2, [r3, #0]
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110f4:	1ad3      	subs	r3, r2, r3
 80110f6:	3b01      	subs	r3, #1
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	f2c0 814e 	blt.w	801139a <tcp_receive+0x442>
 80110fe:	4b32      	ldr	r3, [pc, #200]	; (80111c8 <tcp_receive+0x270>)
 8011100:	681a      	ldr	r2, [r3, #0]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011106:	1ad3      	subs	r3, r2, r3
 8011108:	2b00      	cmp	r3, #0
 801110a:	f300 8146 	bgt.w	801139a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	8b5b      	ldrh	r3, [r3, #26]
 8011112:	f003 0304 	and.w	r3, r3, #4
 8011116:	2b00      	cmp	r3, #0
 8011118:	d010      	beq.n	801113c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	8b5b      	ldrh	r3, [r3, #26]
 801111e:	f023 0304 	bic.w	r3, r3, #4
 8011122:	b29a      	uxth	r2, r3
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2200      	movs	r2, #0
 8011138:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2200      	movs	r2, #0
 8011140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801114a:	10db      	asrs	r3, r3, #3
 801114c:	b21b      	sxth	r3, r3
 801114e:	b29a      	uxth	r2, r3
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011156:	b29b      	uxth	r3, r3
 8011158:	4413      	add	r3, r2
 801115a:	b29b      	uxth	r3, r3
 801115c:	b21a      	sxth	r2, r3
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011164:	4b18      	ldr	r3, [pc, #96]	; (80111c8 <tcp_receive+0x270>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	b29a      	uxth	r2, r3
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801116e:	b29b      	uxth	r3, r3
 8011170:	1ad3      	subs	r3, r2, r3
 8011172:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2200      	movs	r2, #0
 8011178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801117c:	4b12      	ldr	r3, [pc, #72]	; (80111c8 <tcp_receive+0x270>)
 801117e:	681a      	ldr	r2, [r3, #0]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	7d1b      	ldrb	r3, [r3, #20]
 8011188:	2b03      	cmp	r3, #3
 801118a:	f240 8097 	bls.w	80112bc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801119a:	429a      	cmp	r2, r3
 801119c:	d245      	bcs.n	801122a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	8b5b      	ldrh	r3, [r3, #26]
 80111a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d014      	beq.n	80111d4 <tcp_receive+0x27c>
 80111aa:	2301      	movs	r3, #1
 80111ac:	e013      	b.n	80111d6 <tcp_receive+0x27e>
 80111ae:	bf00      	nop
 80111b0:	0801c608 	.word	0x0801c608
 80111b4:	0801c938 	.word	0x0801c938
 80111b8:	0801c654 	.word	0x0801c654
 80111bc:	0801c954 	.word	0x0801c954
 80111c0:	2000cfac 	.word	0x2000cfac
 80111c4:	2000cfa0 	.word	0x2000cfa0
 80111c8:	2000cfa4 	.word	0x2000cfa4
 80111cc:	2000cf90 	.word	0x2000cf90
 80111d0:	2000cfaa 	.word	0x2000cfaa
 80111d4:	2302      	movs	r3, #2
 80111d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80111da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80111de:	b29a      	uxth	r2, r3
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111e4:	fb12 f303 	smulbb	r3, r2, r3
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80111ec:	4293      	cmp	r3, r2
 80111ee:	bf28      	it	cs
 80111f0:	4613      	movcs	r3, r2
 80111f2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80111fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80111fc:	4413      	add	r3, r2
 80111fe:	b29a      	uxth	r2, r3
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011206:	429a      	cmp	r2, r3
 8011208:	d309      	bcc.n	801121e <tcp_receive+0x2c6>
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011210:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011212:	4413      	add	r3, r2
 8011214:	b29a      	uxth	r2, r3
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801121c:	e04e      	b.n	80112bc <tcp_receive+0x364>
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011224:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011228:	e048      	b.n	80112bc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011230:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011232:	4413      	add	r3, r2
 8011234:	b29a      	uxth	r2, r3
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801123c:	429a      	cmp	r2, r3
 801123e:	d309      	bcc.n	8011254 <tcp_receive+0x2fc>
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011246:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011248:	4413      	add	r3, r2
 801124a:	b29a      	uxth	r2, r3
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011252:	e004      	b.n	801125e <tcp_receive+0x306>
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801125a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801126a:	429a      	cmp	r2, r3
 801126c:	d326      	bcc.n	80112bc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801127a:	1ad3      	subs	r3, r2, r3
 801127c:	b29a      	uxth	r2, r3
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801128e:	4413      	add	r3, r2
 8011290:	b29a      	uxth	r2, r3
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011298:	429a      	cmp	r2, r3
 801129a:	d30a      	bcc.n	80112b2 <tcp_receive+0x35a>
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112a6:	4413      	add	r3, r2
 80112a8:	b29a      	uxth	r2, r3
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80112b0:	e004      	b.n	80112bc <tcp_receive+0x364>
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112c4:	4a98      	ldr	r2, [pc, #608]	; (8011528 <tcp_receive+0x5d0>)
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f7ff fdca 	bl	8010e60 <tcp_free_acked_segments>
 80112cc:	4602      	mov	r2, r0
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112da:	4a94      	ldr	r2, [pc, #592]	; (801152c <tcp_receive+0x5d4>)
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f7ff fdbf 	bl	8010e60 <tcp_free_acked_segments>
 80112e2:	4602      	mov	r2, r0
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d104      	bne.n	80112fa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112f6:	861a      	strh	r2, [r3, #48]	; 0x30
 80112f8:	e002      	b.n	8011300 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2200      	movs	r2, #0
 80112fe:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2200      	movs	r2, #0
 8011304:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801130a:	2b00      	cmp	r3, #0
 801130c:	d103      	bne.n	8011316 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2200      	movs	r2, #0
 8011312:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801131c:	4b84      	ldr	r3, [pc, #528]	; (8011530 <tcp_receive+0x5d8>)
 801131e:	881b      	ldrh	r3, [r3, #0]
 8011320:	4413      	add	r3, r2
 8011322:	b29a      	uxth	r2, r3
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	8b5b      	ldrh	r3, [r3, #26]
 801132e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011332:	2b00      	cmp	r3, #0
 8011334:	d035      	beq.n	80113a2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801133a:	2b00      	cmp	r3, #0
 801133c:	d118      	bne.n	8011370 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011342:	2b00      	cmp	r3, #0
 8011344:	d00c      	beq.n	8011360 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801134e:	68db      	ldr	r3, [r3, #12]
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	4618      	mov	r0, r3
 8011354:	f7fa fe17 	bl	800bf86 <lwip_htonl>
 8011358:	4603      	mov	r3, r0
 801135a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801135c:	2b00      	cmp	r3, #0
 801135e:	dc20      	bgt.n	80113a2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	8b5b      	ldrh	r3, [r3, #26]
 8011364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011368:	b29a      	uxth	r2, r3
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801136e:	e018      	b.n	80113a2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	685b      	ldr	r3, [r3, #4]
 801137c:	4618      	mov	r0, r3
 801137e:	f7fa fe02 	bl	800bf86 <lwip_htonl>
 8011382:	4603      	mov	r3, r0
 8011384:	1ae3      	subs	r3, r4, r3
 8011386:	2b00      	cmp	r3, #0
 8011388:	dc0b      	bgt.n	80113a2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	8b5b      	ldrh	r3, [r3, #26]
 801138e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011392:	b29a      	uxth	r2, r3
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011398:	e003      	b.n	80113a2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f002 fbce 	bl	8013b3c <tcp_send_empty_ack>
 80113a0:	e000      	b.n	80113a4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80113a2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d05b      	beq.n	8011464 <tcp_receive+0x50c>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113b0:	4b60      	ldr	r3, [pc, #384]	; (8011534 <tcp_receive+0x5dc>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	1ad3      	subs	r3, r2, r3
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	da54      	bge.n	8011464 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80113ba:	4b5f      	ldr	r3, [pc, #380]	; (8011538 <tcp_receive+0x5e0>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	b29a      	uxth	r2, r3
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113c4:	b29b      	uxth	r3, r3
 80113c6:	1ad3      	subs	r3, r2, r3
 80113c8:	b29b      	uxth	r3, r3
 80113ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80113ce:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80113d8:	10db      	asrs	r3, r3, #3
 80113da:	b21b      	sxth	r3, r3
 80113dc:	b29b      	uxth	r3, r3
 80113de:	1ad3      	subs	r3, r2, r3
 80113e0:	b29b      	uxth	r3, r3
 80113e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80113ec:	b29a      	uxth	r2, r3
 80113ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80113f2:	4413      	add	r3, r2
 80113f4:	b29b      	uxth	r3, r3
 80113f6:	b21a      	sxth	r2, r3
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80113fc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011400:	2b00      	cmp	r3, #0
 8011402:	da05      	bge.n	8011410 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011404:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011408:	425b      	negs	r3, r3
 801140a:	b29b      	uxth	r3, r3
 801140c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011410:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801141a:	109b      	asrs	r3, r3, #2
 801141c:	b21b      	sxth	r3, r3
 801141e:	b29b      	uxth	r3, r3
 8011420:	1ad3      	subs	r3, r2, r3
 8011422:	b29b      	uxth	r3, r3
 8011424:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801142e:	b29a      	uxth	r2, r3
 8011430:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011434:	4413      	add	r3, r2
 8011436:	b29b      	uxth	r3, r3
 8011438:	b21a      	sxth	r2, r3
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011444:	10db      	asrs	r3, r3, #3
 8011446:	b21b      	sxth	r3, r3
 8011448:	b29a      	uxth	r2, r3
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011450:	b29b      	uxth	r3, r3
 8011452:	4413      	add	r3, r2
 8011454:	b29b      	uxth	r3, r3
 8011456:	b21a      	sxth	r2, r3
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2200      	movs	r2, #0
 8011462:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011464:	4b35      	ldr	r3, [pc, #212]	; (801153c <tcp_receive+0x5e4>)
 8011466:	881b      	ldrh	r3, [r3, #0]
 8011468:	2b00      	cmp	r3, #0
 801146a:	f000 84e2 	beq.w	8011e32 <tcp_receive+0xeda>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	7d1b      	ldrb	r3, [r3, #20]
 8011472:	2b06      	cmp	r3, #6
 8011474:	f200 84dd 	bhi.w	8011e32 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801147c:	4b30      	ldr	r3, [pc, #192]	; (8011540 <tcp_receive+0x5e8>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	1ad3      	subs	r3, r2, r3
 8011482:	3b01      	subs	r3, #1
 8011484:	2b00      	cmp	r3, #0
 8011486:	f2c0 808f 	blt.w	80115a8 <tcp_receive+0x650>
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801148e:	4b2b      	ldr	r3, [pc, #172]	; (801153c <tcp_receive+0x5e4>)
 8011490:	881b      	ldrh	r3, [r3, #0]
 8011492:	4619      	mov	r1, r3
 8011494:	4b2a      	ldr	r3, [pc, #168]	; (8011540 <tcp_receive+0x5e8>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	440b      	add	r3, r1
 801149a:	1ad3      	subs	r3, r2, r3
 801149c:	3301      	adds	r3, #1
 801149e:	2b00      	cmp	r3, #0
 80114a0:	f300 8082 	bgt.w	80115a8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80114a4:	4b27      	ldr	r3, [pc, #156]	; (8011544 <tcp_receive+0x5ec>)
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114ae:	4b24      	ldr	r3, [pc, #144]	; (8011540 <tcp_receive+0x5e8>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	1ad3      	subs	r3, r2, r3
 80114b4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80114b6:	4b23      	ldr	r3, [pc, #140]	; (8011544 <tcp_receive+0x5ec>)
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d106      	bne.n	80114cc <tcp_receive+0x574>
 80114be:	4b22      	ldr	r3, [pc, #136]	; (8011548 <tcp_receive+0x5f0>)
 80114c0:	f240 5294 	movw	r2, #1428	; 0x594
 80114c4:	4921      	ldr	r1, [pc, #132]	; (801154c <tcp_receive+0x5f4>)
 80114c6:	4822      	ldr	r0, [pc, #136]	; (8011550 <tcp_receive+0x5f8>)
 80114c8:	f008 f8d6 	bl	8019678 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80114cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80114d2:	4293      	cmp	r3, r2
 80114d4:	d906      	bls.n	80114e4 <tcp_receive+0x58c>
 80114d6:	4b1c      	ldr	r3, [pc, #112]	; (8011548 <tcp_receive+0x5f0>)
 80114d8:	f240 5295 	movw	r2, #1429	; 0x595
 80114dc:	491d      	ldr	r1, [pc, #116]	; (8011554 <tcp_receive+0x5fc>)
 80114de:	481c      	ldr	r0, [pc, #112]	; (8011550 <tcp_receive+0x5f8>)
 80114e0:	f008 f8ca 	bl	8019678 <iprintf>
      off = (u16_t)off32;
 80114e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80114ea:	4b16      	ldr	r3, [pc, #88]	; (8011544 <tcp_receive+0x5ec>)
 80114ec:	685b      	ldr	r3, [r3, #4]
 80114ee:	891b      	ldrh	r3, [r3, #8]
 80114f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d906      	bls.n	8011506 <tcp_receive+0x5ae>
 80114f8:	4b13      	ldr	r3, [pc, #76]	; (8011548 <tcp_receive+0x5f0>)
 80114fa:	f240 5297 	movw	r2, #1431	; 0x597
 80114fe:	4916      	ldr	r1, [pc, #88]	; (8011558 <tcp_receive+0x600>)
 8011500:	4813      	ldr	r0, [pc, #76]	; (8011550 <tcp_receive+0x5f8>)
 8011502:	f008 f8b9 	bl	8019678 <iprintf>
      inseg.len -= off;
 8011506:	4b0f      	ldr	r3, [pc, #60]	; (8011544 <tcp_receive+0x5ec>)
 8011508:	891a      	ldrh	r2, [r3, #8]
 801150a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801150e:	1ad3      	subs	r3, r2, r3
 8011510:	b29a      	uxth	r2, r3
 8011512:	4b0c      	ldr	r3, [pc, #48]	; (8011544 <tcp_receive+0x5ec>)
 8011514:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011516:	4b0b      	ldr	r3, [pc, #44]	; (8011544 <tcp_receive+0x5ec>)
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	891a      	ldrh	r2, [r3, #8]
 801151c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011520:	1ad3      	subs	r3, r2, r3
 8011522:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011524:	e02a      	b.n	801157c <tcp_receive+0x624>
 8011526:	bf00      	nop
 8011528:	0801c970 	.word	0x0801c970
 801152c:	0801c978 	.word	0x0801c978
 8011530:	2000cfa8 	.word	0x2000cfa8
 8011534:	2000cfa4 	.word	0x2000cfa4
 8011538:	2000cf68 	.word	0x2000cf68
 801153c:	2000cfaa 	.word	0x2000cfaa
 8011540:	2000cfa0 	.word	0x2000cfa0
 8011544:	2000cf80 	.word	0x2000cf80
 8011548:	0801c608 	.word	0x0801c608
 801154c:	0801c980 	.word	0x0801c980
 8011550:	0801c654 	.word	0x0801c654
 8011554:	0801c990 	.word	0x0801c990
 8011558:	0801c9a0 	.word	0x0801c9a0
        off -= p->len;
 801155c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801155e:	895b      	ldrh	r3, [r3, #10]
 8011560:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011564:	1ad3      	subs	r3, r2, r3
 8011566:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801156a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801156c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801156e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011572:	2200      	movs	r2, #0
 8011574:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801157c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801157e:	895b      	ldrh	r3, [r3, #10]
 8011580:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011584:	429a      	cmp	r2, r3
 8011586:	d8e9      	bhi.n	801155c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011588:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801158c:	4619      	mov	r1, r3
 801158e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011590:	f7fc f85c 	bl	800d64c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011598:	4a91      	ldr	r2, [pc, #580]	; (80117e0 <tcp_receive+0x888>)
 801159a:	6013      	str	r3, [r2, #0]
 801159c:	4b91      	ldr	r3, [pc, #580]	; (80117e4 <tcp_receive+0x88c>)
 801159e:	68db      	ldr	r3, [r3, #12]
 80115a0:	4a8f      	ldr	r2, [pc, #572]	; (80117e0 <tcp_receive+0x888>)
 80115a2:	6812      	ldr	r2, [r2, #0]
 80115a4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80115a6:	e00d      	b.n	80115c4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80115a8:	4b8d      	ldr	r3, [pc, #564]	; (80117e0 <tcp_receive+0x888>)
 80115aa:	681a      	ldr	r2, [r3, #0]
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115b0:	1ad3      	subs	r3, r2, r3
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	da06      	bge.n	80115c4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	8b5b      	ldrh	r3, [r3, #26]
 80115ba:	f043 0302 	orr.w	r3, r3, #2
 80115be:	b29a      	uxth	r2, r3
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80115c4:	4b86      	ldr	r3, [pc, #536]	; (80117e0 <tcp_receive+0x888>)
 80115c6:	681a      	ldr	r2, [r3, #0]
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115cc:	1ad3      	subs	r3, r2, r3
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	f2c0 842a 	blt.w	8011e28 <tcp_receive+0xed0>
 80115d4:	4b82      	ldr	r3, [pc, #520]	; (80117e0 <tcp_receive+0x888>)
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115dc:	6879      	ldr	r1, [r7, #4]
 80115de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80115e0:	440b      	add	r3, r1
 80115e2:	1ad3      	subs	r3, r2, r3
 80115e4:	3301      	adds	r3, #1
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	f300 841e 	bgt.w	8011e28 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115f0:	4b7b      	ldr	r3, [pc, #492]	; (80117e0 <tcp_receive+0x888>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	f040 829a 	bne.w	8011b2e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80115fa:	4b7a      	ldr	r3, [pc, #488]	; (80117e4 <tcp_receive+0x88c>)
 80115fc:	891c      	ldrh	r4, [r3, #8]
 80115fe:	4b79      	ldr	r3, [pc, #484]	; (80117e4 <tcp_receive+0x88c>)
 8011600:	68db      	ldr	r3, [r3, #12]
 8011602:	899b      	ldrh	r3, [r3, #12]
 8011604:	b29b      	uxth	r3, r3
 8011606:	4618      	mov	r0, r3
 8011608:	f7fa fca8 	bl	800bf5c <lwip_htons>
 801160c:	4603      	mov	r3, r0
 801160e:	b2db      	uxtb	r3, r3
 8011610:	f003 0303 	and.w	r3, r3, #3
 8011614:	2b00      	cmp	r3, #0
 8011616:	d001      	beq.n	801161c <tcp_receive+0x6c4>
 8011618:	2301      	movs	r3, #1
 801161a:	e000      	b.n	801161e <tcp_receive+0x6c6>
 801161c:	2300      	movs	r3, #0
 801161e:	4423      	add	r3, r4
 8011620:	b29a      	uxth	r2, r3
 8011622:	4b71      	ldr	r3, [pc, #452]	; (80117e8 <tcp_receive+0x890>)
 8011624:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801162a:	4b6f      	ldr	r3, [pc, #444]	; (80117e8 <tcp_receive+0x890>)
 801162c:	881b      	ldrh	r3, [r3, #0]
 801162e:	429a      	cmp	r2, r3
 8011630:	d275      	bcs.n	801171e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011632:	4b6c      	ldr	r3, [pc, #432]	; (80117e4 <tcp_receive+0x88c>)
 8011634:	68db      	ldr	r3, [r3, #12]
 8011636:	899b      	ldrh	r3, [r3, #12]
 8011638:	b29b      	uxth	r3, r3
 801163a:	4618      	mov	r0, r3
 801163c:	f7fa fc8e 	bl	800bf5c <lwip_htons>
 8011640:	4603      	mov	r3, r0
 8011642:	b2db      	uxtb	r3, r3
 8011644:	f003 0301 	and.w	r3, r3, #1
 8011648:	2b00      	cmp	r3, #0
 801164a:	d01f      	beq.n	801168c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801164c:	4b65      	ldr	r3, [pc, #404]	; (80117e4 <tcp_receive+0x88c>)
 801164e:	68db      	ldr	r3, [r3, #12]
 8011650:	899b      	ldrh	r3, [r3, #12]
 8011652:	b29b      	uxth	r3, r3
 8011654:	b21b      	sxth	r3, r3
 8011656:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801165a:	b21c      	sxth	r4, r3
 801165c:	4b61      	ldr	r3, [pc, #388]	; (80117e4 <tcp_receive+0x88c>)
 801165e:	68db      	ldr	r3, [r3, #12]
 8011660:	899b      	ldrh	r3, [r3, #12]
 8011662:	b29b      	uxth	r3, r3
 8011664:	4618      	mov	r0, r3
 8011666:	f7fa fc79 	bl	800bf5c <lwip_htons>
 801166a:	4603      	mov	r3, r0
 801166c:	b2db      	uxtb	r3, r3
 801166e:	b29b      	uxth	r3, r3
 8011670:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011674:	b29b      	uxth	r3, r3
 8011676:	4618      	mov	r0, r3
 8011678:	f7fa fc70 	bl	800bf5c <lwip_htons>
 801167c:	4603      	mov	r3, r0
 801167e:	b21b      	sxth	r3, r3
 8011680:	4323      	orrs	r3, r4
 8011682:	b21a      	sxth	r2, r3
 8011684:	4b57      	ldr	r3, [pc, #348]	; (80117e4 <tcp_receive+0x88c>)
 8011686:	68db      	ldr	r3, [r3, #12]
 8011688:	b292      	uxth	r2, r2
 801168a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011690:	4b54      	ldr	r3, [pc, #336]	; (80117e4 <tcp_receive+0x88c>)
 8011692:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011694:	4b53      	ldr	r3, [pc, #332]	; (80117e4 <tcp_receive+0x88c>)
 8011696:	68db      	ldr	r3, [r3, #12]
 8011698:	899b      	ldrh	r3, [r3, #12]
 801169a:	b29b      	uxth	r3, r3
 801169c:	4618      	mov	r0, r3
 801169e:	f7fa fc5d 	bl	800bf5c <lwip_htons>
 80116a2:	4603      	mov	r3, r0
 80116a4:	b2db      	uxtb	r3, r3
 80116a6:	f003 0302 	and.w	r3, r3, #2
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d005      	beq.n	80116ba <tcp_receive+0x762>
            inseg.len -= 1;
 80116ae:	4b4d      	ldr	r3, [pc, #308]	; (80117e4 <tcp_receive+0x88c>)
 80116b0:	891b      	ldrh	r3, [r3, #8]
 80116b2:	3b01      	subs	r3, #1
 80116b4:	b29a      	uxth	r2, r3
 80116b6:	4b4b      	ldr	r3, [pc, #300]	; (80117e4 <tcp_receive+0x88c>)
 80116b8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80116ba:	4b4a      	ldr	r3, [pc, #296]	; (80117e4 <tcp_receive+0x88c>)
 80116bc:	685b      	ldr	r3, [r3, #4]
 80116be:	4a49      	ldr	r2, [pc, #292]	; (80117e4 <tcp_receive+0x88c>)
 80116c0:	8912      	ldrh	r2, [r2, #8]
 80116c2:	4611      	mov	r1, r2
 80116c4:	4618      	mov	r0, r3
 80116c6:	f7fb fec1 	bl	800d44c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80116ca:	4b46      	ldr	r3, [pc, #280]	; (80117e4 <tcp_receive+0x88c>)
 80116cc:	891c      	ldrh	r4, [r3, #8]
 80116ce:	4b45      	ldr	r3, [pc, #276]	; (80117e4 <tcp_receive+0x88c>)
 80116d0:	68db      	ldr	r3, [r3, #12]
 80116d2:	899b      	ldrh	r3, [r3, #12]
 80116d4:	b29b      	uxth	r3, r3
 80116d6:	4618      	mov	r0, r3
 80116d8:	f7fa fc40 	bl	800bf5c <lwip_htons>
 80116dc:	4603      	mov	r3, r0
 80116de:	b2db      	uxtb	r3, r3
 80116e0:	f003 0303 	and.w	r3, r3, #3
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d001      	beq.n	80116ec <tcp_receive+0x794>
 80116e8:	2301      	movs	r3, #1
 80116ea:	e000      	b.n	80116ee <tcp_receive+0x796>
 80116ec:	2300      	movs	r3, #0
 80116ee:	4423      	add	r3, r4
 80116f0:	b29a      	uxth	r2, r3
 80116f2:	4b3d      	ldr	r3, [pc, #244]	; (80117e8 <tcp_receive+0x890>)
 80116f4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80116f6:	4b3c      	ldr	r3, [pc, #240]	; (80117e8 <tcp_receive+0x890>)
 80116f8:	881b      	ldrh	r3, [r3, #0]
 80116fa:	461a      	mov	r2, r3
 80116fc:	4b38      	ldr	r3, [pc, #224]	; (80117e0 <tcp_receive+0x888>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	441a      	add	r2, r3
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011706:	6879      	ldr	r1, [r7, #4]
 8011708:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801170a:	440b      	add	r3, r1
 801170c:	429a      	cmp	r2, r3
 801170e:	d006      	beq.n	801171e <tcp_receive+0x7c6>
 8011710:	4b36      	ldr	r3, [pc, #216]	; (80117ec <tcp_receive+0x894>)
 8011712:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011716:	4936      	ldr	r1, [pc, #216]	; (80117f0 <tcp_receive+0x898>)
 8011718:	4836      	ldr	r0, [pc, #216]	; (80117f4 <tcp_receive+0x89c>)
 801171a:	f007 ffad 	bl	8019678 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011722:	2b00      	cmp	r3, #0
 8011724:	f000 80e7 	beq.w	80118f6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011728:	4b2e      	ldr	r3, [pc, #184]	; (80117e4 <tcp_receive+0x88c>)
 801172a:	68db      	ldr	r3, [r3, #12]
 801172c:	899b      	ldrh	r3, [r3, #12]
 801172e:	b29b      	uxth	r3, r3
 8011730:	4618      	mov	r0, r3
 8011732:	f7fa fc13 	bl	800bf5c <lwip_htons>
 8011736:	4603      	mov	r3, r0
 8011738:	b2db      	uxtb	r3, r3
 801173a:	f003 0301 	and.w	r3, r3, #1
 801173e:	2b00      	cmp	r3, #0
 8011740:	d010      	beq.n	8011764 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011742:	e00a      	b.n	801175a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011748:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801174e:	681a      	ldr	r2, [r3, #0]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011754:	68f8      	ldr	r0, [r7, #12]
 8011756:	f7fd fcc4 	bl	800f0e2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801175e:	2b00      	cmp	r3, #0
 8011760:	d1f0      	bne.n	8011744 <tcp_receive+0x7ec>
 8011762:	e0c8      	b.n	80118f6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011768:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801176a:	e052      	b.n	8011812 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801176c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801176e:	68db      	ldr	r3, [r3, #12]
 8011770:	899b      	ldrh	r3, [r3, #12]
 8011772:	b29b      	uxth	r3, r3
 8011774:	4618      	mov	r0, r3
 8011776:	f7fa fbf1 	bl	800bf5c <lwip_htons>
 801177a:	4603      	mov	r3, r0
 801177c:	b2db      	uxtb	r3, r3
 801177e:	f003 0301 	and.w	r3, r3, #1
 8011782:	2b00      	cmp	r3, #0
 8011784:	d03d      	beq.n	8011802 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011786:	4b17      	ldr	r3, [pc, #92]	; (80117e4 <tcp_receive+0x88c>)
 8011788:	68db      	ldr	r3, [r3, #12]
 801178a:	899b      	ldrh	r3, [r3, #12]
 801178c:	b29b      	uxth	r3, r3
 801178e:	4618      	mov	r0, r3
 8011790:	f7fa fbe4 	bl	800bf5c <lwip_htons>
 8011794:	4603      	mov	r3, r0
 8011796:	b2db      	uxtb	r3, r3
 8011798:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801179c:	2b00      	cmp	r3, #0
 801179e:	d130      	bne.n	8011802 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80117a0:	4b10      	ldr	r3, [pc, #64]	; (80117e4 <tcp_receive+0x88c>)
 80117a2:	68db      	ldr	r3, [r3, #12]
 80117a4:	899b      	ldrh	r3, [r3, #12]
 80117a6:	b29c      	uxth	r4, r3
 80117a8:	2001      	movs	r0, #1
 80117aa:	f7fa fbd7 	bl	800bf5c <lwip_htons>
 80117ae:	4603      	mov	r3, r0
 80117b0:	461a      	mov	r2, r3
 80117b2:	4b0c      	ldr	r3, [pc, #48]	; (80117e4 <tcp_receive+0x88c>)
 80117b4:	68db      	ldr	r3, [r3, #12]
 80117b6:	4322      	orrs	r2, r4
 80117b8:	b292      	uxth	r2, r2
 80117ba:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80117bc:	4b09      	ldr	r3, [pc, #36]	; (80117e4 <tcp_receive+0x88c>)
 80117be:	891c      	ldrh	r4, [r3, #8]
 80117c0:	4b08      	ldr	r3, [pc, #32]	; (80117e4 <tcp_receive+0x88c>)
 80117c2:	68db      	ldr	r3, [r3, #12]
 80117c4:	899b      	ldrh	r3, [r3, #12]
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7fa fbc7 	bl	800bf5c <lwip_htons>
 80117ce:	4603      	mov	r3, r0
 80117d0:	b2db      	uxtb	r3, r3
 80117d2:	f003 0303 	and.w	r3, r3, #3
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d00e      	beq.n	80117f8 <tcp_receive+0x8a0>
 80117da:	2301      	movs	r3, #1
 80117dc:	e00d      	b.n	80117fa <tcp_receive+0x8a2>
 80117de:	bf00      	nop
 80117e0:	2000cfa0 	.word	0x2000cfa0
 80117e4:	2000cf80 	.word	0x2000cf80
 80117e8:	2000cfaa 	.word	0x2000cfaa
 80117ec:	0801c608 	.word	0x0801c608
 80117f0:	0801c9b0 	.word	0x0801c9b0
 80117f4:	0801c654 	.word	0x0801c654
 80117f8:	2300      	movs	r3, #0
 80117fa:	4423      	add	r3, r4
 80117fc:	b29a      	uxth	r2, r3
 80117fe:	4b98      	ldr	r3, [pc, #608]	; (8011a60 <tcp_receive+0xb08>)
 8011800:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011804:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801180c:	6938      	ldr	r0, [r7, #16]
 801180e:	f7fd fc68 	bl	800f0e2 <tcp_seg_free>
            while (next &&
 8011812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011814:	2b00      	cmp	r3, #0
 8011816:	d00e      	beq.n	8011836 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011818:	4b91      	ldr	r3, [pc, #580]	; (8011a60 <tcp_receive+0xb08>)
 801181a:	881b      	ldrh	r3, [r3, #0]
 801181c:	461a      	mov	r2, r3
 801181e:	4b91      	ldr	r3, [pc, #580]	; (8011a64 <tcp_receive+0xb0c>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	441a      	add	r2, r3
 8011824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011826:	68db      	ldr	r3, [r3, #12]
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801182c:	8909      	ldrh	r1, [r1, #8]
 801182e:	440b      	add	r3, r1
 8011830:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011832:	2b00      	cmp	r3, #0
 8011834:	da9a      	bge.n	801176c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011838:	2b00      	cmp	r3, #0
 801183a:	d059      	beq.n	80118f0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801183c:	4b88      	ldr	r3, [pc, #544]	; (8011a60 <tcp_receive+0xb08>)
 801183e:	881b      	ldrh	r3, [r3, #0]
 8011840:	461a      	mov	r2, r3
 8011842:	4b88      	ldr	r3, [pc, #544]	; (8011a64 <tcp_receive+0xb0c>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	441a      	add	r2, r3
 8011848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801184a:	68db      	ldr	r3, [r3, #12]
 801184c:	685b      	ldr	r3, [r3, #4]
 801184e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011850:	2b00      	cmp	r3, #0
 8011852:	dd4d      	ble.n	80118f0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011856:	68db      	ldr	r3, [r3, #12]
 8011858:	685b      	ldr	r3, [r3, #4]
 801185a:	b29a      	uxth	r2, r3
 801185c:	4b81      	ldr	r3, [pc, #516]	; (8011a64 <tcp_receive+0xb0c>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	b29b      	uxth	r3, r3
 8011862:	1ad3      	subs	r3, r2, r3
 8011864:	b29a      	uxth	r2, r3
 8011866:	4b80      	ldr	r3, [pc, #512]	; (8011a68 <tcp_receive+0xb10>)
 8011868:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801186a:	4b7f      	ldr	r3, [pc, #508]	; (8011a68 <tcp_receive+0xb10>)
 801186c:	68db      	ldr	r3, [r3, #12]
 801186e:	899b      	ldrh	r3, [r3, #12]
 8011870:	b29b      	uxth	r3, r3
 8011872:	4618      	mov	r0, r3
 8011874:	f7fa fb72 	bl	800bf5c <lwip_htons>
 8011878:	4603      	mov	r3, r0
 801187a:	b2db      	uxtb	r3, r3
 801187c:	f003 0302 	and.w	r3, r3, #2
 8011880:	2b00      	cmp	r3, #0
 8011882:	d005      	beq.n	8011890 <tcp_receive+0x938>
                inseg.len -= 1;
 8011884:	4b78      	ldr	r3, [pc, #480]	; (8011a68 <tcp_receive+0xb10>)
 8011886:	891b      	ldrh	r3, [r3, #8]
 8011888:	3b01      	subs	r3, #1
 801188a:	b29a      	uxth	r2, r3
 801188c:	4b76      	ldr	r3, [pc, #472]	; (8011a68 <tcp_receive+0xb10>)
 801188e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011890:	4b75      	ldr	r3, [pc, #468]	; (8011a68 <tcp_receive+0xb10>)
 8011892:	685b      	ldr	r3, [r3, #4]
 8011894:	4a74      	ldr	r2, [pc, #464]	; (8011a68 <tcp_receive+0xb10>)
 8011896:	8912      	ldrh	r2, [r2, #8]
 8011898:	4611      	mov	r1, r2
 801189a:	4618      	mov	r0, r3
 801189c:	f7fb fdd6 	bl	800d44c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80118a0:	4b71      	ldr	r3, [pc, #452]	; (8011a68 <tcp_receive+0xb10>)
 80118a2:	891c      	ldrh	r4, [r3, #8]
 80118a4:	4b70      	ldr	r3, [pc, #448]	; (8011a68 <tcp_receive+0xb10>)
 80118a6:	68db      	ldr	r3, [r3, #12]
 80118a8:	899b      	ldrh	r3, [r3, #12]
 80118aa:	b29b      	uxth	r3, r3
 80118ac:	4618      	mov	r0, r3
 80118ae:	f7fa fb55 	bl	800bf5c <lwip_htons>
 80118b2:	4603      	mov	r3, r0
 80118b4:	b2db      	uxtb	r3, r3
 80118b6:	f003 0303 	and.w	r3, r3, #3
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d001      	beq.n	80118c2 <tcp_receive+0x96a>
 80118be:	2301      	movs	r3, #1
 80118c0:	e000      	b.n	80118c4 <tcp_receive+0x96c>
 80118c2:	2300      	movs	r3, #0
 80118c4:	4423      	add	r3, r4
 80118c6:	b29a      	uxth	r2, r3
 80118c8:	4b65      	ldr	r3, [pc, #404]	; (8011a60 <tcp_receive+0xb08>)
 80118ca:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80118cc:	4b64      	ldr	r3, [pc, #400]	; (8011a60 <tcp_receive+0xb08>)
 80118ce:	881b      	ldrh	r3, [r3, #0]
 80118d0:	461a      	mov	r2, r3
 80118d2:	4b64      	ldr	r3, [pc, #400]	; (8011a64 <tcp_receive+0xb0c>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	441a      	add	r2, r3
 80118d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118da:	68db      	ldr	r3, [r3, #12]
 80118dc:	685b      	ldr	r3, [r3, #4]
 80118de:	429a      	cmp	r2, r3
 80118e0:	d006      	beq.n	80118f0 <tcp_receive+0x998>
 80118e2:	4b62      	ldr	r3, [pc, #392]	; (8011a6c <tcp_receive+0xb14>)
 80118e4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80118e8:	4961      	ldr	r1, [pc, #388]	; (8011a70 <tcp_receive+0xb18>)
 80118ea:	4862      	ldr	r0, [pc, #392]	; (8011a74 <tcp_receive+0xb1c>)
 80118ec:	f007 fec4 	bl	8019678 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80118f4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80118f6:	4b5a      	ldr	r3, [pc, #360]	; (8011a60 <tcp_receive+0xb08>)
 80118f8:	881b      	ldrh	r3, [r3, #0]
 80118fa:	461a      	mov	r2, r3
 80118fc:	4b59      	ldr	r3, [pc, #356]	; (8011a64 <tcp_receive+0xb0c>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	441a      	add	r2, r3
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801190a:	4b55      	ldr	r3, [pc, #340]	; (8011a60 <tcp_receive+0xb08>)
 801190c:	881b      	ldrh	r3, [r3, #0]
 801190e:	429a      	cmp	r2, r3
 8011910:	d206      	bcs.n	8011920 <tcp_receive+0x9c8>
 8011912:	4b56      	ldr	r3, [pc, #344]	; (8011a6c <tcp_receive+0xb14>)
 8011914:	f240 6207 	movw	r2, #1543	; 0x607
 8011918:	4957      	ldr	r1, [pc, #348]	; (8011a78 <tcp_receive+0xb20>)
 801191a:	4856      	ldr	r0, [pc, #344]	; (8011a74 <tcp_receive+0xb1c>)
 801191c:	f007 feac 	bl	8019678 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011924:	4b4e      	ldr	r3, [pc, #312]	; (8011a60 <tcp_receive+0xb08>)
 8011926:	881b      	ldrh	r3, [r3, #0]
 8011928:	1ad3      	subs	r3, r2, r3
 801192a:	b29a      	uxth	r2, r3
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f7fc feb1 	bl	800e698 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011936:	4b4c      	ldr	r3, [pc, #304]	; (8011a68 <tcp_receive+0xb10>)
 8011938:	685b      	ldr	r3, [r3, #4]
 801193a:	891b      	ldrh	r3, [r3, #8]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d006      	beq.n	801194e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011940:	4b49      	ldr	r3, [pc, #292]	; (8011a68 <tcp_receive+0xb10>)
 8011942:	685b      	ldr	r3, [r3, #4]
 8011944:	4a4d      	ldr	r2, [pc, #308]	; (8011a7c <tcp_receive+0xb24>)
 8011946:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011948:	4b47      	ldr	r3, [pc, #284]	; (8011a68 <tcp_receive+0xb10>)
 801194a:	2200      	movs	r2, #0
 801194c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801194e:	4b46      	ldr	r3, [pc, #280]	; (8011a68 <tcp_receive+0xb10>)
 8011950:	68db      	ldr	r3, [r3, #12]
 8011952:	899b      	ldrh	r3, [r3, #12]
 8011954:	b29b      	uxth	r3, r3
 8011956:	4618      	mov	r0, r3
 8011958:	f7fa fb00 	bl	800bf5c <lwip_htons>
 801195c:	4603      	mov	r3, r0
 801195e:	b2db      	uxtb	r3, r3
 8011960:	f003 0301 	and.w	r3, r3, #1
 8011964:	2b00      	cmp	r3, #0
 8011966:	f000 80b8 	beq.w	8011ada <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801196a:	4b45      	ldr	r3, [pc, #276]	; (8011a80 <tcp_receive+0xb28>)
 801196c:	781b      	ldrb	r3, [r3, #0]
 801196e:	f043 0320 	orr.w	r3, r3, #32
 8011972:	b2da      	uxtb	r2, r3
 8011974:	4b42      	ldr	r3, [pc, #264]	; (8011a80 <tcp_receive+0xb28>)
 8011976:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011978:	e0af      	b.n	8011ada <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801197e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011984:	68db      	ldr	r3, [r3, #12]
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	4a36      	ldr	r2, [pc, #216]	; (8011a64 <tcp_receive+0xb0c>)
 801198a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	891b      	ldrh	r3, [r3, #8]
 8011990:	461c      	mov	r4, r3
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	68db      	ldr	r3, [r3, #12]
 8011996:	899b      	ldrh	r3, [r3, #12]
 8011998:	b29b      	uxth	r3, r3
 801199a:	4618      	mov	r0, r3
 801199c:	f7fa fade 	bl	800bf5c <lwip_htons>
 80119a0:	4603      	mov	r3, r0
 80119a2:	b2db      	uxtb	r3, r3
 80119a4:	f003 0303 	and.w	r3, r3, #3
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d001      	beq.n	80119b0 <tcp_receive+0xa58>
 80119ac:	2301      	movs	r3, #1
 80119ae:	e000      	b.n	80119b2 <tcp_receive+0xa5a>
 80119b0:	2300      	movs	r3, #0
 80119b2:	191a      	adds	r2, r3, r4
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119b8:	441a      	add	r2, r3
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80119c2:	461c      	mov	r4, r3
 80119c4:	68bb      	ldr	r3, [r7, #8]
 80119c6:	891b      	ldrh	r3, [r3, #8]
 80119c8:	461d      	mov	r5, r3
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	68db      	ldr	r3, [r3, #12]
 80119ce:	899b      	ldrh	r3, [r3, #12]
 80119d0:	b29b      	uxth	r3, r3
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7fa fac2 	bl	800bf5c <lwip_htons>
 80119d8:	4603      	mov	r3, r0
 80119da:	b2db      	uxtb	r3, r3
 80119dc:	f003 0303 	and.w	r3, r3, #3
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d001      	beq.n	80119e8 <tcp_receive+0xa90>
 80119e4:	2301      	movs	r3, #1
 80119e6:	e000      	b.n	80119ea <tcp_receive+0xa92>
 80119e8:	2300      	movs	r3, #0
 80119ea:	442b      	add	r3, r5
 80119ec:	429c      	cmp	r4, r3
 80119ee:	d206      	bcs.n	80119fe <tcp_receive+0xaa6>
 80119f0:	4b1e      	ldr	r3, [pc, #120]	; (8011a6c <tcp_receive+0xb14>)
 80119f2:	f240 622b 	movw	r2, #1579	; 0x62b
 80119f6:	4923      	ldr	r1, [pc, #140]	; (8011a84 <tcp_receive+0xb2c>)
 80119f8:	481e      	ldr	r0, [pc, #120]	; (8011a74 <tcp_receive+0xb1c>)
 80119fa:	f007 fe3d 	bl	8019678 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	891b      	ldrh	r3, [r3, #8]
 8011a02:	461c      	mov	r4, r3
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	68db      	ldr	r3, [r3, #12]
 8011a08:	899b      	ldrh	r3, [r3, #12]
 8011a0a:	b29b      	uxth	r3, r3
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7fa faa5 	bl	800bf5c <lwip_htons>
 8011a12:	4603      	mov	r3, r0
 8011a14:	b2db      	uxtb	r3, r3
 8011a16:	f003 0303 	and.w	r3, r3, #3
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d001      	beq.n	8011a22 <tcp_receive+0xaca>
 8011a1e:	2301      	movs	r3, #1
 8011a20:	e000      	b.n	8011a24 <tcp_receive+0xacc>
 8011a22:	2300      	movs	r3, #0
 8011a24:	1919      	adds	r1, r3, r4
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011a2a:	b28b      	uxth	r3, r1
 8011a2c:	1ad3      	subs	r3, r2, r3
 8011a2e:	b29a      	uxth	r2, r3
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011a34:	6878      	ldr	r0, [r7, #4]
 8011a36:	f7fc fe2f 	bl	800e698 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	685b      	ldr	r3, [r3, #4]
 8011a3e:	891b      	ldrh	r3, [r3, #8]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d028      	beq.n	8011a96 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011a44:	4b0d      	ldr	r3, [pc, #52]	; (8011a7c <tcp_receive+0xb24>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d01d      	beq.n	8011a88 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011a4c:	4b0b      	ldr	r3, [pc, #44]	; (8011a7c <tcp_receive+0xb24>)
 8011a4e:	681a      	ldr	r2, [r3, #0]
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	685b      	ldr	r3, [r3, #4]
 8011a54:	4619      	mov	r1, r3
 8011a56:	4610      	mov	r0, r2
 8011a58:	f7fb ff7e 	bl	800d958 <pbuf_cat>
 8011a5c:	e018      	b.n	8011a90 <tcp_receive+0xb38>
 8011a5e:	bf00      	nop
 8011a60:	2000cfaa 	.word	0x2000cfaa
 8011a64:	2000cfa0 	.word	0x2000cfa0
 8011a68:	2000cf80 	.word	0x2000cf80
 8011a6c:	0801c608 	.word	0x0801c608
 8011a70:	0801c9e8 	.word	0x0801c9e8
 8011a74:	0801c654 	.word	0x0801c654
 8011a78:	0801ca24 	.word	0x0801ca24
 8011a7c:	2000cfb0 	.word	0x2000cfb0
 8011a80:	2000cfad 	.word	0x2000cfad
 8011a84:	0801ca44 	.word	0x0801ca44
            } else {
              recv_data = cseg->p;
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	685b      	ldr	r3, [r3, #4]
 8011a8c:	4a70      	ldr	r2, [pc, #448]	; (8011c50 <tcp_receive+0xcf8>)
 8011a8e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	2200      	movs	r2, #0
 8011a94:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	68db      	ldr	r3, [r3, #12]
 8011a9a:	899b      	ldrh	r3, [r3, #12]
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7fa fa5c 	bl	800bf5c <lwip_htons>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	f003 0301 	and.w	r3, r3, #1
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d00d      	beq.n	8011acc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011ab0:	4b68      	ldr	r3, [pc, #416]	; (8011c54 <tcp_receive+0xcfc>)
 8011ab2:	781b      	ldrb	r3, [r3, #0]
 8011ab4:	f043 0320 	orr.w	r3, r3, #32
 8011ab8:	b2da      	uxtb	r2, r3
 8011aba:	4b66      	ldr	r3, [pc, #408]	; (8011c54 <tcp_receive+0xcfc>)
 8011abc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	7d1b      	ldrb	r3, [r3, #20]
 8011ac2:	2b04      	cmp	r3, #4
 8011ac4:	d102      	bne.n	8011acc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2207      	movs	r2, #7
 8011aca:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011acc:	68bb      	ldr	r3, [r7, #8]
 8011ace:	681a      	ldr	r2, [r3, #0]
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011ad4:	68b8      	ldr	r0, [r7, #8]
 8011ad6:	f7fd fb04 	bl	800f0e2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d008      	beq.n	8011af4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ae6:	68db      	ldr	r3, [r3, #12]
 8011ae8:	685a      	ldr	r2, [r3, #4]
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011aee:	429a      	cmp	r2, r3
 8011af0:	f43f af43 	beq.w	801197a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	8b5b      	ldrh	r3, [r3, #26]
 8011af8:	f003 0301 	and.w	r3, r3, #1
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d00e      	beq.n	8011b1e <tcp_receive+0xbc6>
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	8b5b      	ldrh	r3, [r3, #26]
 8011b04:	f023 0301 	bic.w	r3, r3, #1
 8011b08:	b29a      	uxth	r2, r3
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	835a      	strh	r2, [r3, #26]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	8b5b      	ldrh	r3, [r3, #26]
 8011b12:	f043 0302 	orr.w	r3, r3, #2
 8011b16:	b29a      	uxth	r2, r3
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011b1c:	e188      	b.n	8011e30 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	8b5b      	ldrh	r3, [r3, #26]
 8011b22:	f043 0301 	orr.w	r3, r3, #1
 8011b26:	b29a      	uxth	r2, r3
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011b2c:	e180      	b.n	8011e30 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d106      	bne.n	8011b44 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011b36:	4848      	ldr	r0, [pc, #288]	; (8011c58 <tcp_receive+0xd00>)
 8011b38:	f7fd faec 	bl	800f114 <tcp_seg_copy>
 8011b3c:	4602      	mov	r2, r0
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	675a      	str	r2, [r3, #116]	; 0x74
 8011b42:	e16d      	b.n	8011e20 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011b44:	2300      	movs	r3, #0
 8011b46:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b4e:	e157      	b.n	8011e00 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b52:	68db      	ldr	r3, [r3, #12]
 8011b54:	685a      	ldr	r2, [r3, #4]
 8011b56:	4b41      	ldr	r3, [pc, #260]	; (8011c5c <tcp_receive+0xd04>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d11d      	bne.n	8011b9a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011b5e:	4b3e      	ldr	r3, [pc, #248]	; (8011c58 <tcp_receive+0xd00>)
 8011b60:	891a      	ldrh	r2, [r3, #8]
 8011b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b64:	891b      	ldrh	r3, [r3, #8]
 8011b66:	429a      	cmp	r2, r3
 8011b68:	f240 814f 	bls.w	8011e0a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011b6c:	483a      	ldr	r0, [pc, #232]	; (8011c58 <tcp_receive+0xd00>)
 8011b6e:	f7fd fad1 	bl	800f114 <tcp_seg_copy>
 8011b72:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	f000 8149 	beq.w	8011e0e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d003      	beq.n	8011b8a <tcp_receive+0xc32>
                    prev->next = cseg;
 8011b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b84:	697a      	ldr	r2, [r7, #20]
 8011b86:	601a      	str	r2, [r3, #0]
 8011b88:	e002      	b.n	8011b90 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	697a      	ldr	r2, [r7, #20]
 8011b8e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011b90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011b92:	6978      	ldr	r0, [r7, #20]
 8011b94:	f7ff f8dc 	bl	8010d50 <tcp_oos_insert_segment>
                }
                break;
 8011b98:	e139      	b.n	8011e0e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d117      	bne.n	8011bd0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011ba0:	4b2e      	ldr	r3, [pc, #184]	; (8011c5c <tcp_receive+0xd04>)
 8011ba2:	681a      	ldr	r2, [r3, #0]
 8011ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ba6:	68db      	ldr	r3, [r3, #12]
 8011ba8:	685b      	ldr	r3, [r3, #4]
 8011baa:	1ad3      	subs	r3, r2, r3
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	da57      	bge.n	8011c60 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011bb0:	4829      	ldr	r0, [pc, #164]	; (8011c58 <tcp_receive+0xd00>)
 8011bb2:	f7fd faaf 	bl	800f114 <tcp_seg_copy>
 8011bb6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011bb8:	69bb      	ldr	r3, [r7, #24]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	f000 8129 	beq.w	8011e12 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	69ba      	ldr	r2, [r7, #24]
 8011bc4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011bc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011bc8:	69b8      	ldr	r0, [r7, #24]
 8011bca:	f7ff f8c1 	bl	8010d50 <tcp_oos_insert_segment>
                  }
                  break;
 8011bce:	e120      	b.n	8011e12 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011bd0:	4b22      	ldr	r3, [pc, #136]	; (8011c5c <tcp_receive+0xd04>)
 8011bd2:	681a      	ldr	r2, [r3, #0]
 8011bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bd6:	68db      	ldr	r3, [r3, #12]
 8011bd8:	685b      	ldr	r3, [r3, #4]
 8011bda:	1ad3      	subs	r3, r2, r3
 8011bdc:	3b01      	subs	r3, #1
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	db3e      	blt.n	8011c60 <tcp_receive+0xd08>
 8011be2:	4b1e      	ldr	r3, [pc, #120]	; (8011c5c <tcp_receive+0xd04>)
 8011be4:	681a      	ldr	r2, [r3, #0]
 8011be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be8:	68db      	ldr	r3, [r3, #12]
 8011bea:	685b      	ldr	r3, [r3, #4]
 8011bec:	1ad3      	subs	r3, r2, r3
 8011bee:	3301      	adds	r3, #1
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	dc35      	bgt.n	8011c60 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011bf4:	4818      	ldr	r0, [pc, #96]	; (8011c58 <tcp_receive+0xd00>)
 8011bf6:	f7fd fa8d 	bl	800f114 <tcp_seg_copy>
 8011bfa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011bfc:	69fb      	ldr	r3, [r7, #28]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	f000 8109 	beq.w	8011e16 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c06:	68db      	ldr	r3, [r3, #12]
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c0c:	8912      	ldrh	r2, [r2, #8]
 8011c0e:	441a      	add	r2, r3
 8011c10:	4b12      	ldr	r3, [pc, #72]	; (8011c5c <tcp_receive+0xd04>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	1ad3      	subs	r3, r2, r3
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	dd12      	ble.n	8011c40 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011c1a:	4b10      	ldr	r3, [pc, #64]	; (8011c5c <tcp_receive+0xd04>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	b29a      	uxth	r2, r3
 8011c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c22:	68db      	ldr	r3, [r3, #12]
 8011c24:	685b      	ldr	r3, [r3, #4]
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	1ad3      	subs	r3, r2, r3
 8011c2a:	b29a      	uxth	r2, r3
 8011c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c2e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c32:	685a      	ldr	r2, [r3, #4]
 8011c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c36:	891b      	ldrh	r3, [r3, #8]
 8011c38:	4619      	mov	r1, r3
 8011c3a:	4610      	mov	r0, r2
 8011c3c:	f7fb fc06 	bl	800d44c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c42:	69fa      	ldr	r2, [r7, #28]
 8011c44:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011c46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011c48:	69f8      	ldr	r0, [r7, #28]
 8011c4a:	f7ff f881 	bl	8010d50 <tcp_oos_insert_segment>
                  }
                  break;
 8011c4e:	e0e2      	b.n	8011e16 <tcp_receive+0xebe>
 8011c50:	2000cfb0 	.word	0x2000cfb0
 8011c54:	2000cfad 	.word	0x2000cfad
 8011c58:	2000cf80 	.word	0x2000cf80
 8011c5c:	2000cfa0 	.word	0x2000cfa0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c62:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	f040 80c6 	bne.w	8011dfa <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011c6e:	4b80      	ldr	r3, [pc, #512]	; (8011e70 <tcp_receive+0xf18>)
 8011c70:	681a      	ldr	r2, [r3, #0]
 8011c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c74:	68db      	ldr	r3, [r3, #12]
 8011c76:	685b      	ldr	r3, [r3, #4]
 8011c78:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	f340 80bd 	ble.w	8011dfa <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	899b      	ldrh	r3, [r3, #12]
 8011c86:	b29b      	uxth	r3, r3
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7fa f967 	bl	800bf5c <lwip_htons>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	b2db      	uxtb	r3, r3
 8011c92:	f003 0301 	and.w	r3, r3, #1
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	f040 80bf 	bne.w	8011e1a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011c9c:	4875      	ldr	r0, [pc, #468]	; (8011e74 <tcp_receive+0xf1c>)
 8011c9e:	f7fd fa39 	bl	800f114 <tcp_seg_copy>
 8011ca2:	4602      	mov	r2, r0
 8011ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ca6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	f000 80b6 	beq.w	8011e1e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cb4:	68db      	ldr	r3, [r3, #12]
 8011cb6:	685b      	ldr	r3, [r3, #4]
 8011cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011cba:	8912      	ldrh	r2, [r2, #8]
 8011cbc:	441a      	add	r2, r3
 8011cbe:	4b6c      	ldr	r3, [pc, #432]	; (8011e70 <tcp_receive+0xf18>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	1ad3      	subs	r3, r2, r3
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	dd12      	ble.n	8011cee <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011cc8:	4b69      	ldr	r3, [pc, #420]	; (8011e70 <tcp_receive+0xf18>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	b29a      	uxth	r2, r3
 8011cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd0:	68db      	ldr	r3, [r3, #12]
 8011cd2:	685b      	ldr	r3, [r3, #4]
 8011cd4:	b29b      	uxth	r3, r3
 8011cd6:	1ad3      	subs	r3, r2, r3
 8011cd8:	b29a      	uxth	r2, r3
 8011cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cdc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce0:	685a      	ldr	r2, [r3, #4]
 8011ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce4:	891b      	ldrh	r3, [r3, #8]
 8011ce6:	4619      	mov	r1, r3
 8011ce8:	4610      	mov	r0, r2
 8011cea:	f7fb fbaf 	bl	800d44c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011cee:	4b62      	ldr	r3, [pc, #392]	; (8011e78 <tcp_receive+0xf20>)
 8011cf0:	881b      	ldrh	r3, [r3, #0]
 8011cf2:	461a      	mov	r2, r3
 8011cf4:	4b5e      	ldr	r3, [pc, #376]	; (8011e70 <tcp_receive+0xf18>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	441a      	add	r2, r3
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cfe:	6879      	ldr	r1, [r7, #4]
 8011d00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011d02:	440b      	add	r3, r1
 8011d04:	1ad3      	subs	r3, r2, r3
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	f340 8089 	ble.w	8011e1e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	68db      	ldr	r3, [r3, #12]
 8011d12:	899b      	ldrh	r3, [r3, #12]
 8011d14:	b29b      	uxth	r3, r3
 8011d16:	4618      	mov	r0, r3
 8011d18:	f7fa f920 	bl	800bf5c <lwip_htons>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	b2db      	uxtb	r3, r3
 8011d20:	f003 0301 	and.w	r3, r3, #1
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d022      	beq.n	8011d6e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	68db      	ldr	r3, [r3, #12]
 8011d2e:	899b      	ldrh	r3, [r3, #12]
 8011d30:	b29b      	uxth	r3, r3
 8011d32:	b21b      	sxth	r3, r3
 8011d34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011d38:	b21c      	sxth	r4, r3
 8011d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	68db      	ldr	r3, [r3, #12]
 8011d40:	899b      	ldrh	r3, [r3, #12]
 8011d42:	b29b      	uxth	r3, r3
 8011d44:	4618      	mov	r0, r3
 8011d46:	f7fa f909 	bl	800bf5c <lwip_htons>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	b2db      	uxtb	r3, r3
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011d54:	b29b      	uxth	r3, r3
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7fa f900 	bl	800bf5c <lwip_htons>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	b21b      	sxth	r3, r3
 8011d60:	4323      	orrs	r3, r4
 8011d62:	b21a      	sxth	r2, r3
 8011d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	68db      	ldr	r3, [r3, #12]
 8011d6a:	b292      	uxth	r2, r2
 8011d6c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d72:	b29a      	uxth	r2, r3
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d78:	4413      	add	r3, r2
 8011d7a:	b299      	uxth	r1, r3
 8011d7c:	4b3c      	ldr	r3, [pc, #240]	; (8011e70 <tcp_receive+0xf18>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	b29a      	uxth	r2, r3
 8011d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	1a8a      	subs	r2, r1, r2
 8011d88:	b292      	uxth	r2, r2
 8011d8a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	685a      	ldr	r2, [r3, #4]
 8011d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	891b      	ldrh	r3, [r3, #8]
 8011d98:	4619      	mov	r1, r3
 8011d9a:	4610      	mov	r0, r2
 8011d9c:	f7fb fb56 	bl	800d44c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	891c      	ldrh	r4, [r3, #8]
 8011da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	68db      	ldr	r3, [r3, #12]
 8011dac:	899b      	ldrh	r3, [r3, #12]
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	4618      	mov	r0, r3
 8011db2:	f7fa f8d3 	bl	800bf5c <lwip_htons>
 8011db6:	4603      	mov	r3, r0
 8011db8:	b2db      	uxtb	r3, r3
 8011dba:	f003 0303 	and.w	r3, r3, #3
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d001      	beq.n	8011dc6 <tcp_receive+0xe6e>
 8011dc2:	2301      	movs	r3, #1
 8011dc4:	e000      	b.n	8011dc8 <tcp_receive+0xe70>
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	4423      	add	r3, r4
 8011dca:	b29a      	uxth	r2, r3
 8011dcc:	4b2a      	ldr	r3, [pc, #168]	; (8011e78 <tcp_receive+0xf20>)
 8011dce:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011dd0:	4b29      	ldr	r3, [pc, #164]	; (8011e78 <tcp_receive+0xf20>)
 8011dd2:	881b      	ldrh	r3, [r3, #0]
 8011dd4:	461a      	mov	r2, r3
 8011dd6:	4b26      	ldr	r3, [pc, #152]	; (8011e70 <tcp_receive+0xf18>)
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	441a      	add	r2, r3
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de0:	6879      	ldr	r1, [r7, #4]
 8011de2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011de4:	440b      	add	r3, r1
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d019      	beq.n	8011e1e <tcp_receive+0xec6>
 8011dea:	4b24      	ldr	r3, [pc, #144]	; (8011e7c <tcp_receive+0xf24>)
 8011dec:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011df0:	4923      	ldr	r1, [pc, #140]	; (8011e80 <tcp_receive+0xf28>)
 8011df2:	4824      	ldr	r0, [pc, #144]	; (8011e84 <tcp_receive+0xf2c>)
 8011df4:	f007 fc40 	bl	8019678 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011df8:	e011      	b.n	8011e1e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8011e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	f47f aea4 	bne.w	8011b50 <tcp_receive+0xbf8>
 8011e08:	e00a      	b.n	8011e20 <tcp_receive+0xec8>
                break;
 8011e0a:	bf00      	nop
 8011e0c:	e008      	b.n	8011e20 <tcp_receive+0xec8>
                break;
 8011e0e:	bf00      	nop
 8011e10:	e006      	b.n	8011e20 <tcp_receive+0xec8>
                  break;
 8011e12:	bf00      	nop
 8011e14:	e004      	b.n	8011e20 <tcp_receive+0xec8>
                  break;
 8011e16:	bf00      	nop
 8011e18:	e002      	b.n	8011e20 <tcp_receive+0xec8>
                  break;
 8011e1a:	bf00      	nop
 8011e1c:	e000      	b.n	8011e20 <tcp_receive+0xec8>
                break;
 8011e1e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f001 fe8b 	bl	8013b3c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011e26:	e003      	b.n	8011e30 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f001 fe87 	bl	8013b3c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011e2e:	e01a      	b.n	8011e66 <tcp_receive+0xf0e>
 8011e30:	e019      	b.n	8011e66 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011e32:	4b0f      	ldr	r3, [pc, #60]	; (8011e70 <tcp_receive+0xf18>)
 8011e34:	681a      	ldr	r2, [r3, #0]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e3a:	1ad3      	subs	r3, r2, r3
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	db0a      	blt.n	8011e56 <tcp_receive+0xefe>
 8011e40:	4b0b      	ldr	r3, [pc, #44]	; (8011e70 <tcp_receive+0xf18>)
 8011e42:	681a      	ldr	r2, [r3, #0]
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e48:	6879      	ldr	r1, [r7, #4]
 8011e4a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011e4c:	440b      	add	r3, r1
 8011e4e:	1ad3      	subs	r3, r2, r3
 8011e50:	3301      	adds	r3, #1
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	dd07      	ble.n	8011e66 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	8b5b      	ldrh	r3, [r3, #26]
 8011e5a:	f043 0302 	orr.w	r3, r3, #2
 8011e5e:	b29a      	uxth	r2, r3
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011e64:	e7ff      	b.n	8011e66 <tcp_receive+0xf0e>
 8011e66:	bf00      	nop
 8011e68:	3750      	adds	r7, #80	; 0x50
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8011e6e:	bf00      	nop
 8011e70:	2000cfa0 	.word	0x2000cfa0
 8011e74:	2000cf80 	.word	0x2000cf80
 8011e78:	2000cfaa 	.word	0x2000cfaa
 8011e7c:	0801c608 	.word	0x0801c608
 8011e80:	0801c9b0 	.word	0x0801c9b0
 8011e84:	0801c654 	.word	0x0801c654

08011e88 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b083      	sub	sp, #12
 8011e8c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011e8e:	4b15      	ldr	r3, [pc, #84]	; (8011ee4 <tcp_get_next_optbyte+0x5c>)
 8011e90:	881b      	ldrh	r3, [r3, #0]
 8011e92:	1c5a      	adds	r2, r3, #1
 8011e94:	b291      	uxth	r1, r2
 8011e96:	4a13      	ldr	r2, [pc, #76]	; (8011ee4 <tcp_get_next_optbyte+0x5c>)
 8011e98:	8011      	strh	r1, [r2, #0]
 8011e9a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011e9c:	4b12      	ldr	r3, [pc, #72]	; (8011ee8 <tcp_get_next_optbyte+0x60>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d004      	beq.n	8011eae <tcp_get_next_optbyte+0x26>
 8011ea4:	4b11      	ldr	r3, [pc, #68]	; (8011eec <tcp_get_next_optbyte+0x64>)
 8011ea6:	881b      	ldrh	r3, [r3, #0]
 8011ea8:	88fa      	ldrh	r2, [r7, #6]
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	d208      	bcs.n	8011ec0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011eae:	4b10      	ldr	r3, [pc, #64]	; (8011ef0 <tcp_get_next_optbyte+0x68>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	3314      	adds	r3, #20
 8011eb4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011eb6:	88fb      	ldrh	r3, [r7, #6]
 8011eb8:	683a      	ldr	r2, [r7, #0]
 8011eba:	4413      	add	r3, r2
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	e00b      	b.n	8011ed8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011ec0:	88fb      	ldrh	r3, [r7, #6]
 8011ec2:	b2da      	uxtb	r2, r3
 8011ec4:	4b09      	ldr	r3, [pc, #36]	; (8011eec <tcp_get_next_optbyte+0x64>)
 8011ec6:	881b      	ldrh	r3, [r3, #0]
 8011ec8:	b2db      	uxtb	r3, r3
 8011eca:	1ad3      	subs	r3, r2, r3
 8011ecc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011ece:	4b06      	ldr	r3, [pc, #24]	; (8011ee8 <tcp_get_next_optbyte+0x60>)
 8011ed0:	681a      	ldr	r2, [r3, #0]
 8011ed2:	797b      	ldrb	r3, [r7, #5]
 8011ed4:	4413      	add	r3, r2
 8011ed6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	370c      	adds	r7, #12
 8011edc:	46bd      	mov	sp, r7
 8011ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee2:	4770      	bx	lr
 8011ee4:	2000cf9c 	.word	0x2000cf9c
 8011ee8:	2000cf98 	.word	0x2000cf98
 8011eec:	2000cf96 	.word	0x2000cf96
 8011ef0:	2000cf90 	.word	0x2000cf90

08011ef4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b084      	sub	sp, #16
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d106      	bne.n	8011f10 <tcp_parseopt+0x1c>
 8011f02:	4b32      	ldr	r3, [pc, #200]	; (8011fcc <tcp_parseopt+0xd8>)
 8011f04:	f240 727d 	movw	r2, #1917	; 0x77d
 8011f08:	4931      	ldr	r1, [pc, #196]	; (8011fd0 <tcp_parseopt+0xdc>)
 8011f0a:	4832      	ldr	r0, [pc, #200]	; (8011fd4 <tcp_parseopt+0xe0>)
 8011f0c:	f007 fbb4 	bl	8019678 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011f10:	4b31      	ldr	r3, [pc, #196]	; (8011fd8 <tcp_parseopt+0xe4>)
 8011f12:	881b      	ldrh	r3, [r3, #0]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d055      	beq.n	8011fc4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011f18:	4b30      	ldr	r3, [pc, #192]	; (8011fdc <tcp_parseopt+0xe8>)
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	801a      	strh	r2, [r3, #0]
 8011f1e:	e045      	b.n	8011fac <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011f20:	f7ff ffb2 	bl	8011e88 <tcp_get_next_optbyte>
 8011f24:	4603      	mov	r3, r0
 8011f26:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011f28:	7bfb      	ldrb	r3, [r7, #15]
 8011f2a:	2b02      	cmp	r3, #2
 8011f2c:	d006      	beq.n	8011f3c <tcp_parseopt+0x48>
 8011f2e:	2b02      	cmp	r3, #2
 8011f30:	dc2b      	bgt.n	8011f8a <tcp_parseopt+0x96>
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d041      	beq.n	8011fba <tcp_parseopt+0xc6>
 8011f36:	2b01      	cmp	r3, #1
 8011f38:	d127      	bne.n	8011f8a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011f3a:	e037      	b.n	8011fac <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011f3c:	f7ff ffa4 	bl	8011e88 <tcp_get_next_optbyte>
 8011f40:	4603      	mov	r3, r0
 8011f42:	2b04      	cmp	r3, #4
 8011f44:	d13b      	bne.n	8011fbe <tcp_parseopt+0xca>
 8011f46:	4b25      	ldr	r3, [pc, #148]	; (8011fdc <tcp_parseopt+0xe8>)
 8011f48:	881b      	ldrh	r3, [r3, #0]
 8011f4a:	3301      	adds	r3, #1
 8011f4c:	4a22      	ldr	r2, [pc, #136]	; (8011fd8 <tcp_parseopt+0xe4>)
 8011f4e:	8812      	ldrh	r2, [r2, #0]
 8011f50:	4293      	cmp	r3, r2
 8011f52:	da34      	bge.n	8011fbe <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011f54:	f7ff ff98 	bl	8011e88 <tcp_get_next_optbyte>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	b29b      	uxth	r3, r3
 8011f5c:	021b      	lsls	r3, r3, #8
 8011f5e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011f60:	f7ff ff92 	bl	8011e88 <tcp_get_next_optbyte>
 8011f64:	4603      	mov	r3, r0
 8011f66:	b29a      	uxth	r2, r3
 8011f68:	89bb      	ldrh	r3, [r7, #12]
 8011f6a:	4313      	orrs	r3, r2
 8011f6c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011f6e:	89bb      	ldrh	r3, [r7, #12]
 8011f70:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011f74:	d804      	bhi.n	8011f80 <tcp_parseopt+0x8c>
 8011f76:	89bb      	ldrh	r3, [r7, #12]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d001      	beq.n	8011f80 <tcp_parseopt+0x8c>
 8011f7c:	89ba      	ldrh	r2, [r7, #12]
 8011f7e:	e001      	b.n	8011f84 <tcp_parseopt+0x90>
 8011f80:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011f88:	e010      	b.n	8011fac <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011f8a:	f7ff ff7d 	bl	8011e88 <tcp_get_next_optbyte>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011f92:	7afb      	ldrb	r3, [r7, #11]
 8011f94:	2b01      	cmp	r3, #1
 8011f96:	d914      	bls.n	8011fc2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011f98:	7afb      	ldrb	r3, [r7, #11]
 8011f9a:	b29a      	uxth	r2, r3
 8011f9c:	4b0f      	ldr	r3, [pc, #60]	; (8011fdc <tcp_parseopt+0xe8>)
 8011f9e:	881b      	ldrh	r3, [r3, #0]
 8011fa0:	4413      	add	r3, r2
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	3b02      	subs	r3, #2
 8011fa6:	b29a      	uxth	r2, r3
 8011fa8:	4b0c      	ldr	r3, [pc, #48]	; (8011fdc <tcp_parseopt+0xe8>)
 8011faa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011fac:	4b0b      	ldr	r3, [pc, #44]	; (8011fdc <tcp_parseopt+0xe8>)
 8011fae:	881a      	ldrh	r2, [r3, #0]
 8011fb0:	4b09      	ldr	r3, [pc, #36]	; (8011fd8 <tcp_parseopt+0xe4>)
 8011fb2:	881b      	ldrh	r3, [r3, #0]
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	d3b3      	bcc.n	8011f20 <tcp_parseopt+0x2c>
 8011fb8:	e004      	b.n	8011fc4 <tcp_parseopt+0xd0>
          return;
 8011fba:	bf00      	nop
 8011fbc:	e002      	b.n	8011fc4 <tcp_parseopt+0xd0>
            return;
 8011fbe:	bf00      	nop
 8011fc0:	e000      	b.n	8011fc4 <tcp_parseopt+0xd0>
            return;
 8011fc2:	bf00      	nop
      }
    }
  }
}
 8011fc4:	3710      	adds	r7, #16
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}
 8011fca:	bf00      	nop
 8011fcc:	0801c608 	.word	0x0801c608
 8011fd0:	0801ca6c 	.word	0x0801ca6c
 8011fd4:	0801c654 	.word	0x0801c654
 8011fd8:	2000cf94 	.word	0x2000cf94
 8011fdc:	2000cf9c 	.word	0x2000cf9c

08011fe0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011fe4:	4b05      	ldr	r3, [pc, #20]	; (8011ffc <tcp_trigger_input_pcb_close+0x1c>)
 8011fe6:	781b      	ldrb	r3, [r3, #0]
 8011fe8:	f043 0310 	orr.w	r3, r3, #16
 8011fec:	b2da      	uxtb	r2, r3
 8011fee:	4b03      	ldr	r3, [pc, #12]	; (8011ffc <tcp_trigger_input_pcb_close+0x1c>)
 8011ff0:	701a      	strb	r2, [r3, #0]
}
 8011ff2:	bf00      	nop
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffa:	4770      	bx	lr
 8011ffc:	2000cfad 	.word	0x2000cfad

08012000 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b084      	sub	sp, #16
 8012004:	af00      	add	r7, sp, #0
 8012006:	60f8      	str	r0, [r7, #12]
 8012008:	60b9      	str	r1, [r7, #8]
 801200a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d00a      	beq.n	8012028 <tcp_route+0x28>
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	7a1b      	ldrb	r3, [r3, #8]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d006      	beq.n	8012028 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	7a1b      	ldrb	r3, [r3, #8]
 801201e:	4618      	mov	r0, r3
 8012020:	f7fb f80c 	bl	800d03c <netif_get_by_index>
 8012024:	4603      	mov	r3, r0
 8012026:	e003      	b.n	8012030 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f005 fca9 	bl	8017980 <ip4_route>
 801202e:	4603      	mov	r3, r0
  }
}
 8012030:	4618      	mov	r0, r3
 8012032:	3710      	adds	r7, #16
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}

08012038 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012038:	b590      	push	{r4, r7, lr}
 801203a:	b087      	sub	sp, #28
 801203c:	af00      	add	r7, sp, #0
 801203e:	60f8      	str	r0, [r7, #12]
 8012040:	60b9      	str	r1, [r7, #8]
 8012042:	603b      	str	r3, [r7, #0]
 8012044:	4613      	mov	r3, r2
 8012046:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d105      	bne.n	801205a <tcp_create_segment+0x22>
 801204e:	4b44      	ldr	r3, [pc, #272]	; (8012160 <tcp_create_segment+0x128>)
 8012050:	22a3      	movs	r2, #163	; 0xa3
 8012052:	4944      	ldr	r1, [pc, #272]	; (8012164 <tcp_create_segment+0x12c>)
 8012054:	4844      	ldr	r0, [pc, #272]	; (8012168 <tcp_create_segment+0x130>)
 8012056:	f007 fb0f 	bl	8019678 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d105      	bne.n	801206c <tcp_create_segment+0x34>
 8012060:	4b3f      	ldr	r3, [pc, #252]	; (8012160 <tcp_create_segment+0x128>)
 8012062:	22a4      	movs	r2, #164	; 0xa4
 8012064:	4941      	ldr	r1, [pc, #260]	; (801216c <tcp_create_segment+0x134>)
 8012066:	4840      	ldr	r0, [pc, #256]	; (8012168 <tcp_create_segment+0x130>)
 8012068:	f007 fb06 	bl	8019678 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801206c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012070:	009b      	lsls	r3, r3, #2
 8012072:	b2db      	uxtb	r3, r3
 8012074:	f003 0304 	and.w	r3, r3, #4
 8012078:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801207a:	2003      	movs	r0, #3
 801207c:	f7fa fc46 	bl	800c90c <memp_malloc>
 8012080:	6138      	str	r0, [r7, #16]
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d104      	bne.n	8012092 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012088:	68b8      	ldr	r0, [r7, #8]
 801208a:	f7fb fb97 	bl	800d7bc <pbuf_free>
    return NULL;
 801208e:	2300      	movs	r3, #0
 8012090:	e061      	b.n	8012156 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012098:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	2200      	movs	r2, #0
 801209e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80120a0:	693b      	ldr	r3, [r7, #16]
 80120a2:	68ba      	ldr	r2, [r7, #8]
 80120a4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80120a6:	68bb      	ldr	r3, [r7, #8]
 80120a8:	891a      	ldrh	r2, [r3, #8]
 80120aa:	7dfb      	ldrb	r3, [r7, #23]
 80120ac:	b29b      	uxth	r3, r3
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d205      	bcs.n	80120be <tcp_create_segment+0x86>
 80120b2:	4b2b      	ldr	r3, [pc, #172]	; (8012160 <tcp_create_segment+0x128>)
 80120b4:	22b0      	movs	r2, #176	; 0xb0
 80120b6:	492e      	ldr	r1, [pc, #184]	; (8012170 <tcp_create_segment+0x138>)
 80120b8:	482b      	ldr	r0, [pc, #172]	; (8012168 <tcp_create_segment+0x130>)
 80120ba:	f007 fadd 	bl	8019678 <iprintf>
  seg->len = p->tot_len - optlen;
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	891a      	ldrh	r2, [r3, #8]
 80120c2:	7dfb      	ldrb	r3, [r7, #23]
 80120c4:	b29b      	uxth	r3, r3
 80120c6:	1ad3      	subs	r3, r2, r3
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	693b      	ldr	r3, [r7, #16]
 80120cc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80120ce:	2114      	movs	r1, #20
 80120d0:	68b8      	ldr	r0, [r7, #8]
 80120d2:	f7fb faab 	bl	800d62c <pbuf_add_header>
 80120d6:	4603      	mov	r3, r0
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d004      	beq.n	80120e6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80120dc:	6938      	ldr	r0, [r7, #16]
 80120de:	f7fd f800 	bl	800f0e2 <tcp_seg_free>
    return NULL;
 80120e2:	2300      	movs	r3, #0
 80120e4:	e037      	b.n	8012156 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80120e6:	693b      	ldr	r3, [r7, #16]
 80120e8:	685b      	ldr	r3, [r3, #4]
 80120ea:	685a      	ldr	r2, [r3, #4]
 80120ec:	693b      	ldr	r3, [r7, #16]
 80120ee:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	8ada      	ldrh	r2, [r3, #22]
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	68dc      	ldr	r4, [r3, #12]
 80120f8:	4610      	mov	r0, r2
 80120fa:	f7f9 ff2f 	bl	800bf5c <lwip_htons>
 80120fe:	4603      	mov	r3, r0
 8012100:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	8b1a      	ldrh	r2, [r3, #24]
 8012106:	693b      	ldr	r3, [r7, #16]
 8012108:	68dc      	ldr	r4, [r3, #12]
 801210a:	4610      	mov	r0, r2
 801210c:	f7f9 ff26 	bl	800bf5c <lwip_htons>
 8012110:	4603      	mov	r3, r0
 8012112:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	68dc      	ldr	r4, [r3, #12]
 8012118:	6838      	ldr	r0, [r7, #0]
 801211a:	f7f9 ff34 	bl	800bf86 <lwip_htonl>
 801211e:	4603      	mov	r3, r0
 8012120:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012122:	7dfb      	ldrb	r3, [r7, #23]
 8012124:	089b      	lsrs	r3, r3, #2
 8012126:	b2db      	uxtb	r3, r3
 8012128:	b29b      	uxth	r3, r3
 801212a:	3305      	adds	r3, #5
 801212c:	b29b      	uxth	r3, r3
 801212e:	031b      	lsls	r3, r3, #12
 8012130:	b29a      	uxth	r2, r3
 8012132:	79fb      	ldrb	r3, [r7, #7]
 8012134:	b29b      	uxth	r3, r3
 8012136:	4313      	orrs	r3, r2
 8012138:	b29a      	uxth	r2, r3
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	68dc      	ldr	r4, [r3, #12]
 801213e:	4610      	mov	r0, r2
 8012140:	f7f9 ff0c 	bl	800bf5c <lwip_htons>
 8012144:	4603      	mov	r3, r0
 8012146:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012148:	693b      	ldr	r3, [r7, #16]
 801214a:	68db      	ldr	r3, [r3, #12]
 801214c:	2200      	movs	r2, #0
 801214e:	749a      	strb	r2, [r3, #18]
 8012150:	2200      	movs	r2, #0
 8012152:	74da      	strb	r2, [r3, #19]
  return seg;
 8012154:	693b      	ldr	r3, [r7, #16]
}
 8012156:	4618      	mov	r0, r3
 8012158:	371c      	adds	r7, #28
 801215a:	46bd      	mov	sp, r7
 801215c:	bd90      	pop	{r4, r7, pc}
 801215e:	bf00      	nop
 8012160:	0801ca88 	.word	0x0801ca88
 8012164:	0801cabc 	.word	0x0801cabc
 8012168:	0801cadc 	.word	0x0801cadc
 801216c:	0801cb04 	.word	0x0801cb04
 8012170:	0801cb28 	.word	0x0801cb28

08012174 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b086      	sub	sp, #24
 8012178:	af00      	add	r7, sp, #0
 801217a:	607b      	str	r3, [r7, #4]
 801217c:	4603      	mov	r3, r0
 801217e:	73fb      	strb	r3, [r7, #15]
 8012180:	460b      	mov	r3, r1
 8012182:	81bb      	strh	r3, [r7, #12]
 8012184:	4613      	mov	r3, r2
 8012186:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012188:	89bb      	ldrh	r3, [r7, #12]
 801218a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d105      	bne.n	801219e <tcp_pbuf_prealloc+0x2a>
 8012192:	4b30      	ldr	r3, [pc, #192]	; (8012254 <tcp_pbuf_prealloc+0xe0>)
 8012194:	22e8      	movs	r2, #232	; 0xe8
 8012196:	4930      	ldr	r1, [pc, #192]	; (8012258 <tcp_pbuf_prealloc+0xe4>)
 8012198:	4830      	ldr	r0, [pc, #192]	; (801225c <tcp_pbuf_prealloc+0xe8>)
 801219a:	f007 fa6d 	bl	8019678 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801219e:	6a3b      	ldr	r3, [r7, #32]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d105      	bne.n	80121b0 <tcp_pbuf_prealloc+0x3c>
 80121a4:	4b2b      	ldr	r3, [pc, #172]	; (8012254 <tcp_pbuf_prealloc+0xe0>)
 80121a6:	22e9      	movs	r2, #233	; 0xe9
 80121a8:	492d      	ldr	r1, [pc, #180]	; (8012260 <tcp_pbuf_prealloc+0xec>)
 80121aa:	482c      	ldr	r0, [pc, #176]	; (801225c <tcp_pbuf_prealloc+0xe8>)
 80121ac:	f007 fa64 	bl	8019678 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80121b0:	89ba      	ldrh	r2, [r7, #12]
 80121b2:	897b      	ldrh	r3, [r7, #10]
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d221      	bcs.n	80121fc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80121b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80121bc:	f003 0302 	and.w	r3, r3, #2
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d111      	bne.n	80121e8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80121c4:	6a3b      	ldr	r3, [r7, #32]
 80121c6:	8b5b      	ldrh	r3, [r3, #26]
 80121c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d115      	bne.n	80121fc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80121d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d007      	beq.n	80121e8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80121d8:	6a3b      	ldr	r3, [r7, #32]
 80121da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d103      	bne.n	80121e8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80121e0:	6a3b      	ldr	r3, [r7, #32]
 80121e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d009      	beq.n	80121fc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80121e8:	89bb      	ldrh	r3, [r7, #12]
 80121ea:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80121ee:	f023 0203 	bic.w	r2, r3, #3
 80121f2:	897b      	ldrh	r3, [r7, #10]
 80121f4:	4293      	cmp	r3, r2
 80121f6:	bf28      	it	cs
 80121f8:	4613      	movcs	r3, r2
 80121fa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80121fc:	8af9      	ldrh	r1, [r7, #22]
 80121fe:	7bfb      	ldrb	r3, [r7, #15]
 8012200:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012204:	4618      	mov	r0, r3
 8012206:	f7fa ffc3 	bl	800d190 <pbuf_alloc>
 801220a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801220c:	693b      	ldr	r3, [r7, #16]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d101      	bne.n	8012216 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012212:	2300      	movs	r3, #0
 8012214:	e019      	b.n	801224a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012216:	693b      	ldr	r3, [r7, #16]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d006      	beq.n	801222c <tcp_pbuf_prealloc+0xb8>
 801221e:	4b0d      	ldr	r3, [pc, #52]	; (8012254 <tcp_pbuf_prealloc+0xe0>)
 8012220:	f240 120b 	movw	r2, #267	; 0x10b
 8012224:	490f      	ldr	r1, [pc, #60]	; (8012264 <tcp_pbuf_prealloc+0xf0>)
 8012226:	480d      	ldr	r0, [pc, #52]	; (801225c <tcp_pbuf_prealloc+0xe8>)
 8012228:	f007 fa26 	bl	8019678 <iprintf>
  *oversize = p->len - length;
 801222c:	693b      	ldr	r3, [r7, #16]
 801222e:	895a      	ldrh	r2, [r3, #10]
 8012230:	89bb      	ldrh	r3, [r7, #12]
 8012232:	1ad3      	subs	r3, r2, r3
 8012234:	b29a      	uxth	r2, r3
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	89ba      	ldrh	r2, [r7, #12]
 801223e:	811a      	strh	r2, [r3, #8]
 8012240:	693b      	ldr	r3, [r7, #16]
 8012242:	891a      	ldrh	r2, [r3, #8]
 8012244:	693b      	ldr	r3, [r7, #16]
 8012246:	815a      	strh	r2, [r3, #10]
  return p;
 8012248:	693b      	ldr	r3, [r7, #16]
}
 801224a:	4618      	mov	r0, r3
 801224c:	3718      	adds	r7, #24
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}
 8012252:	bf00      	nop
 8012254:	0801ca88 	.word	0x0801ca88
 8012258:	0801cb40 	.word	0x0801cb40
 801225c:	0801cadc 	.word	0x0801cadc
 8012260:	0801cb64 	.word	0x0801cb64
 8012264:	0801cb84 	.word	0x0801cb84

08012268 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b082      	sub	sp, #8
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	460b      	mov	r3, r1
 8012272:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d106      	bne.n	8012288 <tcp_write_checks+0x20>
 801227a:	4b33      	ldr	r3, [pc, #204]	; (8012348 <tcp_write_checks+0xe0>)
 801227c:	f240 1233 	movw	r2, #307	; 0x133
 8012280:	4932      	ldr	r1, [pc, #200]	; (801234c <tcp_write_checks+0xe4>)
 8012282:	4833      	ldr	r0, [pc, #204]	; (8012350 <tcp_write_checks+0xe8>)
 8012284:	f007 f9f8 	bl	8019678 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	7d1b      	ldrb	r3, [r3, #20]
 801228c:	2b04      	cmp	r3, #4
 801228e:	d00e      	beq.n	80122ae <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012294:	2b07      	cmp	r3, #7
 8012296:	d00a      	beq.n	80122ae <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801229c:	2b02      	cmp	r3, #2
 801229e:	d006      	beq.n	80122ae <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80122a4:	2b03      	cmp	r3, #3
 80122a6:	d002      	beq.n	80122ae <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80122a8:	f06f 030a 	mvn.w	r3, #10
 80122ac:	e048      	b.n	8012340 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80122ae:	887b      	ldrh	r3, [r7, #2]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d101      	bne.n	80122b8 <tcp_write_checks+0x50>
    return ERR_OK;
 80122b4:	2300      	movs	r3, #0
 80122b6:	e043      	b.n	8012340 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80122be:	887a      	ldrh	r2, [r7, #2]
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d909      	bls.n	80122d8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	8b5b      	ldrh	r3, [r3, #26]
 80122c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122cc:	b29a      	uxth	r2, r3
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80122d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80122d6:	e033      	b.n	8012340 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80122de:	2b08      	cmp	r3, #8
 80122e0:	d909      	bls.n	80122f6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	8b5b      	ldrh	r3, [r3, #26]
 80122e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122ea:	b29a      	uxth	r2, r3
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80122f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80122f4:	e024      	b.n	8012340 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d00f      	beq.n	8012320 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012304:	2b00      	cmp	r3, #0
 8012306:	d11a      	bne.n	801233e <tcp_write_checks+0xd6>
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801230c:	2b00      	cmp	r3, #0
 801230e:	d116      	bne.n	801233e <tcp_write_checks+0xd6>
 8012310:	4b0d      	ldr	r3, [pc, #52]	; (8012348 <tcp_write_checks+0xe0>)
 8012312:	f240 1255 	movw	r2, #341	; 0x155
 8012316:	490f      	ldr	r1, [pc, #60]	; (8012354 <tcp_write_checks+0xec>)
 8012318:	480d      	ldr	r0, [pc, #52]	; (8012350 <tcp_write_checks+0xe8>)
 801231a:	f007 f9ad 	bl	8019678 <iprintf>
 801231e:	e00e      	b.n	801233e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012324:	2b00      	cmp	r3, #0
 8012326:	d103      	bne.n	8012330 <tcp_write_checks+0xc8>
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801232c:	2b00      	cmp	r3, #0
 801232e:	d006      	beq.n	801233e <tcp_write_checks+0xd6>
 8012330:	4b05      	ldr	r3, [pc, #20]	; (8012348 <tcp_write_checks+0xe0>)
 8012332:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8012336:	4908      	ldr	r1, [pc, #32]	; (8012358 <tcp_write_checks+0xf0>)
 8012338:	4805      	ldr	r0, [pc, #20]	; (8012350 <tcp_write_checks+0xe8>)
 801233a:	f007 f99d 	bl	8019678 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801233e:	2300      	movs	r3, #0
}
 8012340:	4618      	mov	r0, r3
 8012342:	3708      	adds	r7, #8
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}
 8012348:	0801ca88 	.word	0x0801ca88
 801234c:	0801cb98 	.word	0x0801cb98
 8012350:	0801cadc 	.word	0x0801cadc
 8012354:	0801cbb8 	.word	0x0801cbb8
 8012358:	0801cbf4 	.word	0x0801cbf4

0801235c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801235c:	b590      	push	{r4, r7, lr}
 801235e:	b09b      	sub	sp, #108	; 0x6c
 8012360:	af04      	add	r7, sp, #16
 8012362:	60f8      	str	r0, [r7, #12]
 8012364:	60b9      	str	r1, [r7, #8]
 8012366:	4611      	mov	r1, r2
 8012368:	461a      	mov	r2, r3
 801236a:	460b      	mov	r3, r1
 801236c:	80fb      	strh	r3, [r7, #6]
 801236e:	4613      	mov	r3, r2
 8012370:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012372:	2300      	movs	r3, #0
 8012374:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012376:	2300      	movs	r3, #0
 8012378:	653b      	str	r3, [r7, #80]	; 0x50
 801237a:	2300      	movs	r3, #0
 801237c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801237e:	2300      	movs	r3, #0
 8012380:	64bb      	str	r3, [r7, #72]	; 0x48
 8012382:	2300      	movs	r3, #0
 8012384:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012386:	2300      	movs	r3, #0
 8012388:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801238c:	2300      	movs	r3, #0
 801238e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012392:	2300      	movs	r3, #0
 8012394:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012396:	2300      	movs	r3, #0
 8012398:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801239a:	2300      	movs	r3, #0
 801239c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d109      	bne.n	80123b8 <tcp_write+0x5c>
 80123a4:	4ba4      	ldr	r3, [pc, #656]	; (8012638 <tcp_write+0x2dc>)
 80123a6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80123aa:	49a4      	ldr	r1, [pc, #656]	; (801263c <tcp_write+0x2e0>)
 80123ac:	48a4      	ldr	r0, [pc, #656]	; (8012640 <tcp_write+0x2e4>)
 80123ae:	f007 f963 	bl	8019678 <iprintf>
 80123b2:	f06f 030f 	mvn.w	r3, #15
 80123b6:	e32a      	b.n	8012a0e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80123be:	085b      	lsrs	r3, r3, #1
 80123c0:	b29a      	uxth	r2, r3
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80123c6:	4293      	cmp	r3, r2
 80123c8:	bf28      	it	cs
 80123ca:	4613      	movcs	r3, r2
 80123cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80123ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d102      	bne.n	80123da <tcp_write+0x7e>
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80123d8:	e000      	b.n	80123dc <tcp_write+0x80>
 80123da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80123dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d109      	bne.n	80123f8 <tcp_write+0x9c>
 80123e4:	4b94      	ldr	r3, [pc, #592]	; (8012638 <tcp_write+0x2dc>)
 80123e6:	f240 12ad 	movw	r2, #429	; 0x1ad
 80123ea:	4996      	ldr	r1, [pc, #600]	; (8012644 <tcp_write+0x2e8>)
 80123ec:	4894      	ldr	r0, [pc, #592]	; (8012640 <tcp_write+0x2e4>)
 80123ee:	f007 f943 	bl	8019678 <iprintf>
 80123f2:	f06f 030f 	mvn.w	r3, #15
 80123f6:	e30a      	b.n	8012a0e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80123f8:	88fb      	ldrh	r3, [r7, #6]
 80123fa:	4619      	mov	r1, r3
 80123fc:	68f8      	ldr	r0, [r7, #12]
 80123fe:	f7ff ff33 	bl	8012268 <tcp_write_checks>
 8012402:	4603      	mov	r3, r0
 8012404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012408:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801240c:	2b00      	cmp	r3, #0
 801240e:	d002      	beq.n	8012416 <tcp_write+0xba>
    return err;
 8012410:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012414:	e2fb      	b.n	8012a0e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801241c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012420:	2300      	movs	r3, #0
 8012422:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801242a:	2b00      	cmp	r3, #0
 801242c:	f000 80f6 	beq.w	801261c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012434:	653b      	str	r3, [r7, #80]	; 0x50
 8012436:	e002      	b.n	801243e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801243e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d1f8      	bne.n	8012438 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012448:	7a9b      	ldrb	r3, [r3, #10]
 801244a:	009b      	lsls	r3, r3, #2
 801244c:	b29b      	uxth	r3, r3
 801244e:	f003 0304 	and.w	r3, r3, #4
 8012452:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012454:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012458:	891b      	ldrh	r3, [r3, #8]
 801245a:	4619      	mov	r1, r3
 801245c:	8c3b      	ldrh	r3, [r7, #32]
 801245e:	440b      	add	r3, r1
 8012460:	429a      	cmp	r2, r3
 8012462:	da06      	bge.n	8012472 <tcp_write+0x116>
 8012464:	4b74      	ldr	r3, [pc, #464]	; (8012638 <tcp_write+0x2dc>)
 8012466:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801246a:	4977      	ldr	r1, [pc, #476]	; (8012648 <tcp_write+0x2ec>)
 801246c:	4874      	ldr	r0, [pc, #464]	; (8012640 <tcp_write+0x2e4>)
 801246e:	f007 f903 	bl	8019678 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012474:	891a      	ldrh	r2, [r3, #8]
 8012476:	8c3b      	ldrh	r3, [r7, #32]
 8012478:	4413      	add	r3, r2
 801247a:	b29b      	uxth	r3, r3
 801247c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801247e:	1ad3      	subs	r3, r2, r3
 8012480:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012488:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801248a:	8a7b      	ldrh	r3, [r7, #18]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d026      	beq.n	80124de <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012490:	8a7b      	ldrh	r3, [r7, #18]
 8012492:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012494:	429a      	cmp	r2, r3
 8012496:	d206      	bcs.n	80124a6 <tcp_write+0x14a>
 8012498:	4b67      	ldr	r3, [pc, #412]	; (8012638 <tcp_write+0x2dc>)
 801249a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801249e:	496b      	ldr	r1, [pc, #428]	; (801264c <tcp_write+0x2f0>)
 80124a0:	4867      	ldr	r0, [pc, #412]	; (8012640 <tcp_write+0x2e4>)
 80124a2:	f007 f8e9 	bl	8019678 <iprintf>
      seg = last_unsent;
 80124a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124a8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80124aa:	8a7b      	ldrh	r3, [r7, #18]
 80124ac:	88fa      	ldrh	r2, [r7, #6]
 80124ae:	4293      	cmp	r3, r2
 80124b0:	bf28      	it	cs
 80124b2:	4613      	movcs	r3, r2
 80124b4:	b29b      	uxth	r3, r3
 80124b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80124b8:	4293      	cmp	r3, r2
 80124ba:	bf28      	it	cs
 80124bc:	4613      	movcs	r3, r2
 80124be:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80124c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80124c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80124c6:	4413      	add	r3, r2
 80124c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80124cc:	8a7a      	ldrh	r2, [r7, #18]
 80124ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80124d0:	1ad3      	subs	r3, r2, r3
 80124d2:	b29b      	uxth	r3, r3
 80124d4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80124d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80124d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80124da:	1ad3      	subs	r3, r2, r3
 80124dc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80124de:	8a7b      	ldrh	r3, [r7, #18]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d00b      	beq.n	80124fc <tcp_write+0x1a0>
 80124e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80124e8:	88fb      	ldrh	r3, [r7, #6]
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d006      	beq.n	80124fc <tcp_write+0x1a0>
 80124ee:	4b52      	ldr	r3, [pc, #328]	; (8012638 <tcp_write+0x2dc>)
 80124f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80124f4:	4956      	ldr	r1, [pc, #344]	; (8012650 <tcp_write+0x2f4>)
 80124f6:	4852      	ldr	r0, [pc, #328]	; (8012640 <tcp_write+0x2e4>)
 80124f8:	f007 f8be 	bl	8019678 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80124fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012500:	88fb      	ldrh	r3, [r7, #6]
 8012502:	429a      	cmp	r2, r3
 8012504:	f080 8167 	bcs.w	80127d6 <tcp_write+0x47a>
 8012508:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801250a:	2b00      	cmp	r3, #0
 801250c:	f000 8163 	beq.w	80127d6 <tcp_write+0x47a>
 8012510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012512:	891b      	ldrh	r3, [r3, #8]
 8012514:	2b00      	cmp	r3, #0
 8012516:	f000 815e 	beq.w	80127d6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801251a:	88fa      	ldrh	r2, [r7, #6]
 801251c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012520:	1ad2      	subs	r2, r2, r3
 8012522:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012524:	4293      	cmp	r3, r2
 8012526:	bfa8      	it	ge
 8012528:	4613      	movge	r3, r2
 801252a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801252c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801252e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012530:	797b      	ldrb	r3, [r7, #5]
 8012532:	f003 0301 	and.w	r3, r3, #1
 8012536:	2b00      	cmp	r3, #0
 8012538:	d027      	beq.n	801258a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801253a:	f107 0012 	add.w	r0, r7, #18
 801253e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012540:	8bf9      	ldrh	r1, [r7, #30]
 8012542:	2301      	movs	r3, #1
 8012544:	9302      	str	r3, [sp, #8]
 8012546:	797b      	ldrb	r3, [r7, #5]
 8012548:	9301      	str	r3, [sp, #4]
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	9300      	str	r3, [sp, #0]
 801254e:	4603      	mov	r3, r0
 8012550:	2000      	movs	r0, #0
 8012552:	f7ff fe0f 	bl	8012174 <tcp_pbuf_prealloc>
 8012556:	6578      	str	r0, [r7, #84]	; 0x54
 8012558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801255a:	2b00      	cmp	r3, #0
 801255c:	f000 8225 	beq.w	80129aa <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012562:	6858      	ldr	r0, [r3, #4]
 8012564:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012568:	68ba      	ldr	r2, [r7, #8]
 801256a:	4413      	add	r3, r2
 801256c:	8bfa      	ldrh	r2, [r7, #30]
 801256e:	4619      	mov	r1, r3
 8012570:	f006 ff8c 	bl	801948c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012574:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012576:	f7fb f9af 	bl	800d8d8 <pbuf_clen>
 801257a:	4603      	mov	r3, r0
 801257c:	461a      	mov	r2, r3
 801257e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012582:	4413      	add	r3, r2
 8012584:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012588:	e041      	b.n	801260e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801258a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801258c:	685b      	ldr	r3, [r3, #4]
 801258e:	637b      	str	r3, [r7, #52]	; 0x34
 8012590:	e002      	b.n	8012598 <tcp_write+0x23c>
 8012592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	637b      	str	r3, [r7, #52]	; 0x34
 8012598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d1f8      	bne.n	8012592 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80125a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125a2:	7b1b      	ldrb	r3, [r3, #12]
 80125a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d115      	bne.n	80125d8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80125ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125ae:	685b      	ldr	r3, [r3, #4]
 80125b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125b2:	8952      	ldrh	r2, [r2, #10]
 80125b4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80125b6:	68ba      	ldr	r2, [r7, #8]
 80125b8:	429a      	cmp	r2, r3
 80125ba:	d10d      	bne.n	80125d8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80125bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d006      	beq.n	80125d2 <tcp_write+0x276>
 80125c4:	4b1c      	ldr	r3, [pc, #112]	; (8012638 <tcp_write+0x2dc>)
 80125c6:	f240 2231 	movw	r2, #561	; 0x231
 80125ca:	4922      	ldr	r1, [pc, #136]	; (8012654 <tcp_write+0x2f8>)
 80125cc:	481c      	ldr	r0, [pc, #112]	; (8012640 <tcp_write+0x2e4>)
 80125ce:	f007 f853 	bl	8019678 <iprintf>
          extendlen = seglen;
 80125d2:	8bfb      	ldrh	r3, [r7, #30]
 80125d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80125d6:	e01a      	b.n	801260e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80125d8:	8bfb      	ldrh	r3, [r7, #30]
 80125da:	2201      	movs	r2, #1
 80125dc:	4619      	mov	r1, r3
 80125de:	2000      	movs	r0, #0
 80125e0:	f7fa fdd6 	bl	800d190 <pbuf_alloc>
 80125e4:	6578      	str	r0, [r7, #84]	; 0x54
 80125e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	f000 81e0 	beq.w	80129ae <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80125ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125f2:	68ba      	ldr	r2, [r7, #8]
 80125f4:	441a      	add	r2, r3
 80125f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80125f8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80125fa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80125fc:	f7fb f96c 	bl	800d8d8 <pbuf_clen>
 8012600:	4603      	mov	r3, r0
 8012602:	461a      	mov	r2, r3
 8012604:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012608:	4413      	add	r3, r2
 801260a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801260e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012612:	8bfb      	ldrh	r3, [r7, #30]
 8012614:	4413      	add	r3, r2
 8012616:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801261a:	e0dc      	b.n	80127d6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012622:	2b00      	cmp	r3, #0
 8012624:	f000 80d7 	beq.w	80127d6 <tcp_write+0x47a>
 8012628:	4b03      	ldr	r3, [pc, #12]	; (8012638 <tcp_write+0x2dc>)
 801262a:	f240 224a 	movw	r2, #586	; 0x24a
 801262e:	490a      	ldr	r1, [pc, #40]	; (8012658 <tcp_write+0x2fc>)
 8012630:	4803      	ldr	r0, [pc, #12]	; (8012640 <tcp_write+0x2e4>)
 8012632:	f007 f821 	bl	8019678 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012636:	e0ce      	b.n	80127d6 <tcp_write+0x47a>
 8012638:	0801ca88 	.word	0x0801ca88
 801263c:	0801cc28 	.word	0x0801cc28
 8012640:	0801cadc 	.word	0x0801cadc
 8012644:	0801cc40 	.word	0x0801cc40
 8012648:	0801cc74 	.word	0x0801cc74
 801264c:	0801cc8c 	.word	0x0801cc8c
 8012650:	0801ccac 	.word	0x0801ccac
 8012654:	0801cccc 	.word	0x0801cccc
 8012658:	0801ccf8 	.word	0x0801ccf8
    struct pbuf *p;
    u16_t left = len - pos;
 801265c:	88fa      	ldrh	r2, [r7, #6]
 801265e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012662:	1ad3      	subs	r3, r2, r3
 8012664:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012666:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801266a:	b29b      	uxth	r3, r3
 801266c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801266e:	1ad3      	subs	r3, r2, r3
 8012670:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012672:	8b7a      	ldrh	r2, [r7, #26]
 8012674:	8bbb      	ldrh	r3, [r7, #28]
 8012676:	4293      	cmp	r3, r2
 8012678:	bf28      	it	cs
 801267a:	4613      	movcs	r3, r2
 801267c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801267e:	797b      	ldrb	r3, [r7, #5]
 8012680:	f003 0301 	and.w	r3, r3, #1
 8012684:	2b00      	cmp	r3, #0
 8012686:	d036      	beq.n	80126f6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012688:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801268c:	b29a      	uxth	r2, r3
 801268e:	8b3b      	ldrh	r3, [r7, #24]
 8012690:	4413      	add	r3, r2
 8012692:	b299      	uxth	r1, r3
 8012694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012696:	2b00      	cmp	r3, #0
 8012698:	bf0c      	ite	eq
 801269a:	2301      	moveq	r3, #1
 801269c:	2300      	movne	r3, #0
 801269e:	b2db      	uxtb	r3, r3
 80126a0:	f107 0012 	add.w	r0, r7, #18
 80126a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80126a6:	9302      	str	r3, [sp, #8]
 80126a8:	797b      	ldrb	r3, [r7, #5]
 80126aa:	9301      	str	r3, [sp, #4]
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	9300      	str	r3, [sp, #0]
 80126b0:	4603      	mov	r3, r0
 80126b2:	2036      	movs	r0, #54	; 0x36
 80126b4:	f7ff fd5e 	bl	8012174 <tcp_pbuf_prealloc>
 80126b8:	6338      	str	r0, [r7, #48]	; 0x30
 80126ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126bc:	2b00      	cmp	r3, #0
 80126be:	f000 8178 	beq.w	80129b2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80126c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c4:	895b      	ldrh	r3, [r3, #10]
 80126c6:	8b3a      	ldrh	r2, [r7, #24]
 80126c8:	429a      	cmp	r2, r3
 80126ca:	d906      	bls.n	80126da <tcp_write+0x37e>
 80126cc:	4b8c      	ldr	r3, [pc, #560]	; (8012900 <tcp_write+0x5a4>)
 80126ce:	f240 2266 	movw	r2, #614	; 0x266
 80126d2:	498c      	ldr	r1, [pc, #560]	; (8012904 <tcp_write+0x5a8>)
 80126d4:	488c      	ldr	r0, [pc, #560]	; (8012908 <tcp_write+0x5ac>)
 80126d6:	f006 ffcf 	bl	8019678 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80126da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126dc:	685a      	ldr	r2, [r3, #4]
 80126de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80126e2:	18d0      	adds	r0, r2, r3
 80126e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80126e8:	68ba      	ldr	r2, [r7, #8]
 80126ea:	4413      	add	r3, r2
 80126ec:	8b3a      	ldrh	r2, [r7, #24]
 80126ee:	4619      	mov	r1, r3
 80126f0:	f006 fecc 	bl	801948c <memcpy>
 80126f4:	e02f      	b.n	8012756 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80126f6:	8a7b      	ldrh	r3, [r7, #18]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d006      	beq.n	801270a <tcp_write+0x3ae>
 80126fc:	4b80      	ldr	r3, [pc, #512]	; (8012900 <tcp_write+0x5a4>)
 80126fe:	f240 2271 	movw	r2, #625	; 0x271
 8012702:	4982      	ldr	r1, [pc, #520]	; (801290c <tcp_write+0x5b0>)
 8012704:	4880      	ldr	r0, [pc, #512]	; (8012908 <tcp_write+0x5ac>)
 8012706:	f006 ffb7 	bl	8019678 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801270a:	8b3b      	ldrh	r3, [r7, #24]
 801270c:	2201      	movs	r2, #1
 801270e:	4619      	mov	r1, r3
 8012710:	2036      	movs	r0, #54	; 0x36
 8012712:	f7fa fd3d 	bl	800d190 <pbuf_alloc>
 8012716:	6178      	str	r0, [r7, #20]
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	2b00      	cmp	r3, #0
 801271c:	f000 814b 	beq.w	80129b6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012720:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012724:	68ba      	ldr	r2, [r7, #8]
 8012726:	441a      	add	r2, r3
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801272c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012730:	b29b      	uxth	r3, r3
 8012732:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012736:	4619      	mov	r1, r3
 8012738:	2036      	movs	r0, #54	; 0x36
 801273a:	f7fa fd29 	bl	800d190 <pbuf_alloc>
 801273e:	6338      	str	r0, [r7, #48]	; 0x30
 8012740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012742:	2b00      	cmp	r3, #0
 8012744:	d103      	bne.n	801274e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012746:	6978      	ldr	r0, [r7, #20]
 8012748:	f7fb f838 	bl	800d7bc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801274c:	e136      	b.n	80129bc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801274e:	6979      	ldr	r1, [r7, #20]
 8012750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012752:	f7fb f901 	bl	800d958 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012756:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012758:	f7fb f8be 	bl	800d8d8 <pbuf_clen>
 801275c:	4603      	mov	r3, r0
 801275e:	461a      	mov	r2, r3
 8012760:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012764:	4413      	add	r3, r2
 8012766:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801276a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801276e:	2b09      	cmp	r3, #9
 8012770:	d903      	bls.n	801277a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012772:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012774:	f7fb f822 	bl	800d7bc <pbuf_free>
      goto memerr;
 8012778:	e120      	b.n	80129bc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801277e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012782:	441a      	add	r2, r3
 8012784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012788:	9300      	str	r3, [sp, #0]
 801278a:	4613      	mov	r3, r2
 801278c:	2200      	movs	r2, #0
 801278e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012790:	68f8      	ldr	r0, [r7, #12]
 8012792:	f7ff fc51 	bl	8012038 <tcp_create_segment>
 8012796:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801279a:	2b00      	cmp	r3, #0
 801279c:	f000 810d 	beq.w	80129ba <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80127a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d102      	bne.n	80127ac <tcp_write+0x450>
      queue = seg;
 80127a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127a8:	647b      	str	r3, [r7, #68]	; 0x44
 80127aa:	e00c      	b.n	80127c6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80127ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d106      	bne.n	80127c0 <tcp_write+0x464>
 80127b2:	4b53      	ldr	r3, [pc, #332]	; (8012900 <tcp_write+0x5a4>)
 80127b4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80127b8:	4955      	ldr	r1, [pc, #340]	; (8012910 <tcp_write+0x5b4>)
 80127ba:	4853      	ldr	r0, [pc, #332]	; (8012908 <tcp_write+0x5ac>)
 80127bc:	f006 ff5c 	bl	8019678 <iprintf>
      prev_seg->next = seg;
 80127c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80127c4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80127c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127c8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80127ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80127ce:	8b3b      	ldrh	r3, [r7, #24]
 80127d0:	4413      	add	r3, r2
 80127d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80127d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80127da:	88fb      	ldrh	r3, [r7, #6]
 80127dc:	429a      	cmp	r2, r3
 80127de:	f4ff af3d 	bcc.w	801265c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80127e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d02c      	beq.n	8012842 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80127e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127ea:	685b      	ldr	r3, [r3, #4]
 80127ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127ee:	e01e      	b.n	801282e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80127f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f2:	891a      	ldrh	r2, [r3, #8]
 80127f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80127f6:	4413      	add	r3, r2
 80127f8:	b29a      	uxth	r2, r3
 80127fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127fc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80127fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d110      	bne.n	8012828 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012808:	685b      	ldr	r3, [r3, #4]
 801280a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801280c:	8952      	ldrh	r2, [r2, #10]
 801280e:	4413      	add	r3, r2
 8012810:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012812:	68b9      	ldr	r1, [r7, #8]
 8012814:	4618      	mov	r0, r3
 8012816:	f006 fe39 	bl	801948c <memcpy>
        p->len += oversize_used;
 801281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801281c:	895a      	ldrh	r2, [r3, #10]
 801281e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012820:	4413      	add	r3, r2
 8012822:	b29a      	uxth	r2, r3
 8012824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012826:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012830:	2b00      	cmp	r3, #0
 8012832:	d1dd      	bne.n	80127f0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012836:	891a      	ldrh	r2, [r3, #8]
 8012838:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801283a:	4413      	add	r3, r2
 801283c:	b29a      	uxth	r2, r3
 801283e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012840:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012842:	8a7a      	ldrh	r2, [r7, #18]
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801284a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801284c:	2b00      	cmp	r3, #0
 801284e:	d018      	beq.n	8012882 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012852:	2b00      	cmp	r3, #0
 8012854:	d106      	bne.n	8012864 <tcp_write+0x508>
 8012856:	4b2a      	ldr	r3, [pc, #168]	; (8012900 <tcp_write+0x5a4>)
 8012858:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801285c:	492d      	ldr	r1, [pc, #180]	; (8012914 <tcp_write+0x5b8>)
 801285e:	482a      	ldr	r0, [pc, #168]	; (8012908 <tcp_write+0x5ac>)
 8012860:	f006 ff0a 	bl	8019678 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801286a:	4618      	mov	r0, r3
 801286c:	f7fb f874 	bl	800d958 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012872:	891a      	ldrh	r2, [r3, #8]
 8012874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012876:	891b      	ldrh	r3, [r3, #8]
 8012878:	4413      	add	r3, r2
 801287a:	b29a      	uxth	r2, r3
 801287c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801287e:	811a      	strh	r2, [r3, #8]
 8012880:	e037      	b.n	80128f2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012882:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012884:	2b00      	cmp	r3, #0
 8012886:	d034      	beq.n	80128f2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801288a:	2b00      	cmp	r3, #0
 801288c:	d003      	beq.n	8012896 <tcp_write+0x53a>
 801288e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012890:	685b      	ldr	r3, [r3, #4]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d106      	bne.n	80128a4 <tcp_write+0x548>
 8012896:	4b1a      	ldr	r3, [pc, #104]	; (8012900 <tcp_write+0x5a4>)
 8012898:	f240 22e6 	movw	r2, #742	; 0x2e6
 801289c:	491e      	ldr	r1, [pc, #120]	; (8012918 <tcp_write+0x5bc>)
 801289e:	481a      	ldr	r0, [pc, #104]	; (8012908 <tcp_write+0x5ac>)
 80128a0:	f006 feea 	bl	8019678 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80128a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128a6:	685b      	ldr	r3, [r3, #4]
 80128a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80128aa:	e009      	b.n	80128c0 <tcp_write+0x564>
      p->tot_len += extendlen;
 80128ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ae:	891a      	ldrh	r2, [r3, #8]
 80128b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80128b2:	4413      	add	r3, r2
 80128b4:	b29a      	uxth	r2, r3
 80128b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128b8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80128ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	62bb      	str	r3, [r7, #40]	; 0x28
 80128c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d1f1      	bne.n	80128ac <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80128c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ca:	891a      	ldrh	r2, [r3, #8]
 80128cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80128ce:	4413      	add	r3, r2
 80128d0:	b29a      	uxth	r2, r3
 80128d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80128d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d8:	895a      	ldrh	r2, [r3, #10]
 80128da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80128dc:	4413      	add	r3, r2
 80128de:	b29a      	uxth	r2, r3
 80128e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80128e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128e6:	891a      	ldrh	r2, [r3, #8]
 80128e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80128ea:	4413      	add	r3, r2
 80128ec:	b29a      	uxth	r2, r3
 80128ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128f0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80128f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d111      	bne.n	801291c <tcp_write+0x5c0>
    pcb->unsent = queue;
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80128fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80128fe:	e010      	b.n	8012922 <tcp_write+0x5c6>
 8012900:	0801ca88 	.word	0x0801ca88
 8012904:	0801cd28 	.word	0x0801cd28
 8012908:	0801cadc 	.word	0x0801cadc
 801290c:	0801cd68 	.word	0x0801cd68
 8012910:	0801cd78 	.word	0x0801cd78
 8012914:	0801cd8c 	.word	0x0801cd8c
 8012918:	0801cdc4 	.word	0x0801cdc4
  } else {
    last_unsent->next = queue;
 801291c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801291e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012920:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012926:	88fb      	ldrh	r3, [r7, #6]
 8012928:	441a      	add	r2, r3
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012934:	88fb      	ldrh	r3, [r7, #6]
 8012936:	1ad3      	subs	r3, r2, r3
 8012938:	b29a      	uxth	r2, r3
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012946:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012950:	2b00      	cmp	r3, #0
 8012952:	d00e      	beq.n	8012972 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012958:	2b00      	cmp	r3, #0
 801295a:	d10a      	bne.n	8012972 <tcp_write+0x616>
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012960:	2b00      	cmp	r3, #0
 8012962:	d106      	bne.n	8012972 <tcp_write+0x616>
 8012964:	4b2c      	ldr	r3, [pc, #176]	; (8012a18 <tcp_write+0x6bc>)
 8012966:	f240 3212 	movw	r2, #786	; 0x312
 801296a:	492c      	ldr	r1, [pc, #176]	; (8012a1c <tcp_write+0x6c0>)
 801296c:	482c      	ldr	r0, [pc, #176]	; (8012a20 <tcp_write+0x6c4>)
 801296e:	f006 fe83 	bl	8019678 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012974:	2b00      	cmp	r3, #0
 8012976:	d016      	beq.n	80129a6 <tcp_write+0x64a>
 8012978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801297a:	68db      	ldr	r3, [r3, #12]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d012      	beq.n	80129a6 <tcp_write+0x64a>
 8012980:	797b      	ldrb	r3, [r7, #5]
 8012982:	f003 0302 	and.w	r3, r3, #2
 8012986:	2b00      	cmp	r3, #0
 8012988:	d10d      	bne.n	80129a6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801298a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801298c:	68db      	ldr	r3, [r3, #12]
 801298e:	899b      	ldrh	r3, [r3, #12]
 8012990:	b29c      	uxth	r4, r3
 8012992:	2008      	movs	r0, #8
 8012994:	f7f9 fae2 	bl	800bf5c <lwip_htons>
 8012998:	4603      	mov	r3, r0
 801299a:	461a      	mov	r2, r3
 801299c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801299e:	68db      	ldr	r3, [r3, #12]
 80129a0:	4322      	orrs	r2, r4
 80129a2:	b292      	uxth	r2, r2
 80129a4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80129a6:	2300      	movs	r3, #0
 80129a8:	e031      	b.n	8012a0e <tcp_write+0x6b2>
          goto memerr;
 80129aa:	bf00      	nop
 80129ac:	e006      	b.n	80129bc <tcp_write+0x660>
            goto memerr;
 80129ae:	bf00      	nop
 80129b0:	e004      	b.n	80129bc <tcp_write+0x660>
        goto memerr;
 80129b2:	bf00      	nop
 80129b4:	e002      	b.n	80129bc <tcp_write+0x660>
        goto memerr;
 80129b6:	bf00      	nop
 80129b8:	e000      	b.n	80129bc <tcp_write+0x660>
      goto memerr;
 80129ba:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	8b5b      	ldrh	r3, [r3, #26]
 80129c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129c4:	b29a      	uxth	r2, r3
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80129ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d002      	beq.n	80129d6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80129d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80129d2:	f7fa fef3 	bl	800d7bc <pbuf_free>
  }
  if (queue != NULL) {
 80129d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d002      	beq.n	80129e2 <tcp_write+0x686>
    tcp_segs_free(queue);
 80129dc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80129de:	f7fc fb6b 	bl	800f0b8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d00e      	beq.n	8012a0a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d10a      	bne.n	8012a0a <tcp_write+0x6ae>
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d106      	bne.n	8012a0a <tcp_write+0x6ae>
 80129fc:	4b06      	ldr	r3, [pc, #24]	; (8012a18 <tcp_write+0x6bc>)
 80129fe:	f240 3227 	movw	r2, #807	; 0x327
 8012a02:	4906      	ldr	r1, [pc, #24]	; (8012a1c <tcp_write+0x6c0>)
 8012a04:	4806      	ldr	r0, [pc, #24]	; (8012a20 <tcp_write+0x6c4>)
 8012a06:	f006 fe37 	bl	8019678 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	375c      	adds	r7, #92	; 0x5c
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd90      	pop	{r4, r7, pc}
 8012a16:	bf00      	nop
 8012a18:	0801ca88 	.word	0x0801ca88
 8012a1c:	0801cdfc 	.word	0x0801cdfc
 8012a20:	0801cadc 	.word	0x0801cadc

08012a24 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012a24:	b590      	push	{r4, r7, lr}
 8012a26:	b08b      	sub	sp, #44	; 0x2c
 8012a28:	af02      	add	r7, sp, #8
 8012a2a:	6078      	str	r0, [r7, #4]
 8012a2c:	460b      	mov	r3, r1
 8012a2e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012a30:	2300      	movs	r3, #0
 8012a32:	61fb      	str	r3, [r7, #28]
 8012a34:	2300      	movs	r3, #0
 8012a36:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d106      	bne.n	8012a50 <tcp_split_unsent_seg+0x2c>
 8012a42:	4b95      	ldr	r3, [pc, #596]	; (8012c98 <tcp_split_unsent_seg+0x274>)
 8012a44:	f240 324b 	movw	r2, #843	; 0x34b
 8012a48:	4994      	ldr	r1, [pc, #592]	; (8012c9c <tcp_split_unsent_seg+0x278>)
 8012a4a:	4895      	ldr	r0, [pc, #596]	; (8012ca0 <tcp_split_unsent_seg+0x27c>)
 8012a4c:	f006 fe14 	bl	8019678 <iprintf>

  useg = pcb->unsent;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a54:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d102      	bne.n	8012a62 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a60:	e116      	b.n	8012c90 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012a62:	887b      	ldrh	r3, [r7, #2]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d109      	bne.n	8012a7c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012a68:	4b8b      	ldr	r3, [pc, #556]	; (8012c98 <tcp_split_unsent_seg+0x274>)
 8012a6a:	f240 3253 	movw	r2, #851	; 0x353
 8012a6e:	498d      	ldr	r1, [pc, #564]	; (8012ca4 <tcp_split_unsent_seg+0x280>)
 8012a70:	488b      	ldr	r0, [pc, #556]	; (8012ca0 <tcp_split_unsent_seg+0x27c>)
 8012a72:	f006 fe01 	bl	8019678 <iprintf>
    return ERR_VAL;
 8012a76:	f06f 0305 	mvn.w	r3, #5
 8012a7a:	e109      	b.n	8012c90 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	891b      	ldrh	r3, [r3, #8]
 8012a80:	887a      	ldrh	r2, [r7, #2]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d301      	bcc.n	8012a8a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012a86:	2300      	movs	r3, #0
 8012a88:	e102      	b.n	8012c90 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a8e:	887a      	ldrh	r2, [r7, #2]
 8012a90:	429a      	cmp	r2, r3
 8012a92:	d906      	bls.n	8012aa2 <tcp_split_unsent_seg+0x7e>
 8012a94:	4b80      	ldr	r3, [pc, #512]	; (8012c98 <tcp_split_unsent_seg+0x274>)
 8012a96:	f240 325b 	movw	r2, #859	; 0x35b
 8012a9a:	4983      	ldr	r1, [pc, #524]	; (8012ca8 <tcp_split_unsent_seg+0x284>)
 8012a9c:	4880      	ldr	r0, [pc, #512]	; (8012ca0 <tcp_split_unsent_seg+0x27c>)
 8012a9e:	f006 fdeb 	bl	8019678 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	891b      	ldrh	r3, [r3, #8]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d106      	bne.n	8012ab8 <tcp_split_unsent_seg+0x94>
 8012aaa:	4b7b      	ldr	r3, [pc, #492]	; (8012c98 <tcp_split_unsent_seg+0x274>)
 8012aac:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012ab0:	497e      	ldr	r1, [pc, #504]	; (8012cac <tcp_split_unsent_seg+0x288>)
 8012ab2:	487b      	ldr	r0, [pc, #492]	; (8012ca0 <tcp_split_unsent_seg+0x27c>)
 8012ab4:	f006 fde0 	bl	8019678 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	7a9b      	ldrb	r3, [r3, #10]
 8012abc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012abe:	7bfb      	ldrb	r3, [r7, #15]
 8012ac0:	009b      	lsls	r3, r3, #2
 8012ac2:	b2db      	uxtb	r3, r3
 8012ac4:	f003 0304 	and.w	r3, r3, #4
 8012ac8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	891a      	ldrh	r2, [r3, #8]
 8012ace:	887b      	ldrh	r3, [r7, #2]
 8012ad0:	1ad3      	subs	r3, r2, r3
 8012ad2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012ad4:	7bbb      	ldrb	r3, [r7, #14]
 8012ad6:	b29a      	uxth	r2, r3
 8012ad8:	89bb      	ldrh	r3, [r7, #12]
 8012ada:	4413      	add	r3, r2
 8012adc:	b29b      	uxth	r3, r3
 8012ade:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012ae2:	4619      	mov	r1, r3
 8012ae4:	2036      	movs	r0, #54	; 0x36
 8012ae6:	f7fa fb53 	bl	800d190 <pbuf_alloc>
 8012aea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012aec:	693b      	ldr	r3, [r7, #16]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	f000 80b7 	beq.w	8012c62 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012af4:	697b      	ldr	r3, [r7, #20]
 8012af6:	685b      	ldr	r3, [r3, #4]
 8012af8:	891a      	ldrh	r2, [r3, #8]
 8012afa:	697b      	ldr	r3, [r7, #20]
 8012afc:	891b      	ldrh	r3, [r3, #8]
 8012afe:	1ad3      	subs	r3, r2, r3
 8012b00:	b29a      	uxth	r2, r3
 8012b02:	887b      	ldrh	r3, [r7, #2]
 8012b04:	4413      	add	r3, r2
 8012b06:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	6858      	ldr	r0, [r3, #4]
 8012b0c:	693b      	ldr	r3, [r7, #16]
 8012b0e:	685a      	ldr	r2, [r3, #4]
 8012b10:	7bbb      	ldrb	r3, [r7, #14]
 8012b12:	18d1      	adds	r1, r2, r3
 8012b14:	897b      	ldrh	r3, [r7, #10]
 8012b16:	89ba      	ldrh	r2, [r7, #12]
 8012b18:	f7fb f856 	bl	800dbc8 <pbuf_copy_partial>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	461a      	mov	r2, r3
 8012b20:	89bb      	ldrh	r3, [r7, #12]
 8012b22:	4293      	cmp	r3, r2
 8012b24:	f040 809f 	bne.w	8012c66 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	68db      	ldr	r3, [r3, #12]
 8012b2c:	899b      	ldrh	r3, [r3, #12]
 8012b2e:	b29b      	uxth	r3, r3
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7f9 fa13 	bl	800bf5c <lwip_htons>
 8012b36:	4603      	mov	r3, r0
 8012b38:	b2db      	uxtb	r3, r3
 8012b3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b3e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012b40:	2300      	movs	r3, #0
 8012b42:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012b44:	7efb      	ldrb	r3, [r7, #27]
 8012b46:	f003 0308 	and.w	r3, r3, #8
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d007      	beq.n	8012b5e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012b4e:	7efb      	ldrb	r3, [r7, #27]
 8012b50:	f023 0308 	bic.w	r3, r3, #8
 8012b54:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012b56:	7ebb      	ldrb	r3, [r7, #26]
 8012b58:	f043 0308 	orr.w	r3, r3, #8
 8012b5c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012b5e:	7efb      	ldrb	r3, [r7, #27]
 8012b60:	f003 0301 	and.w	r3, r3, #1
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d007      	beq.n	8012b78 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012b68:	7efb      	ldrb	r3, [r7, #27]
 8012b6a:	f023 0301 	bic.w	r3, r3, #1
 8012b6e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012b70:	7ebb      	ldrb	r3, [r7, #26]
 8012b72:	f043 0301 	orr.w	r3, r3, #1
 8012b76:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012b78:	697b      	ldr	r3, [r7, #20]
 8012b7a:	68db      	ldr	r3, [r3, #12]
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f7f9 fa01 	bl	800bf86 <lwip_htonl>
 8012b84:	4602      	mov	r2, r0
 8012b86:	887b      	ldrh	r3, [r7, #2]
 8012b88:	18d1      	adds	r1, r2, r3
 8012b8a:	7eba      	ldrb	r2, [r7, #26]
 8012b8c:	7bfb      	ldrb	r3, [r7, #15]
 8012b8e:	9300      	str	r3, [sp, #0]
 8012b90:	460b      	mov	r3, r1
 8012b92:	6939      	ldr	r1, [r7, #16]
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	f7ff fa4f 	bl	8012038 <tcp_create_segment>
 8012b9a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012b9c:	69fb      	ldr	r3, [r7, #28]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d063      	beq.n	8012c6a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	685b      	ldr	r3, [r3, #4]
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f7fa fe96 	bl	800d8d8 <pbuf_clen>
 8012bac:	4603      	mov	r3, r0
 8012bae:	461a      	mov	r2, r3
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012bb6:	1a9b      	subs	r3, r3, r2
 8012bb8:	b29a      	uxth	r2, r3
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012bc0:	697b      	ldr	r3, [r7, #20]
 8012bc2:	6858      	ldr	r0, [r3, #4]
 8012bc4:	697b      	ldr	r3, [r7, #20]
 8012bc6:	685b      	ldr	r3, [r3, #4]
 8012bc8:	891a      	ldrh	r2, [r3, #8]
 8012bca:	89bb      	ldrh	r3, [r7, #12]
 8012bcc:	1ad3      	subs	r3, r2, r3
 8012bce:	b29b      	uxth	r3, r3
 8012bd0:	4619      	mov	r1, r3
 8012bd2:	f7fa fc3b 	bl	800d44c <pbuf_realloc>
  useg->len -= remainder;
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	891a      	ldrh	r2, [r3, #8]
 8012bda:	89bb      	ldrh	r3, [r7, #12]
 8012bdc:	1ad3      	subs	r3, r2, r3
 8012bde:	b29a      	uxth	r2, r3
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	68db      	ldr	r3, [r3, #12]
 8012be8:	899b      	ldrh	r3, [r3, #12]
 8012bea:	b29c      	uxth	r4, r3
 8012bec:	7efb      	ldrb	r3, [r7, #27]
 8012bee:	b29b      	uxth	r3, r3
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f7f9 f9b3 	bl	800bf5c <lwip_htons>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	697b      	ldr	r3, [r7, #20]
 8012bfc:	68db      	ldr	r3, [r3, #12]
 8012bfe:	4322      	orrs	r2, r4
 8012c00:	b292      	uxth	r2, r2
 8012c02:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012c04:	697b      	ldr	r3, [r7, #20]
 8012c06:	685b      	ldr	r3, [r3, #4]
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f7fa fe65 	bl	800d8d8 <pbuf_clen>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	461a      	mov	r2, r3
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c18:	4413      	add	r3, r2
 8012c1a:	b29a      	uxth	r2, r3
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012c22:	69fb      	ldr	r3, [r7, #28]
 8012c24:	685b      	ldr	r3, [r3, #4]
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7fa fe56 	bl	800d8d8 <pbuf_clen>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	461a      	mov	r2, r3
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c36:	4413      	add	r3, r2
 8012c38:	b29a      	uxth	r2, r3
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	681a      	ldr	r2, [r3, #0]
 8012c44:	69fb      	ldr	r3, [r7, #28]
 8012c46:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012c48:	697b      	ldr	r3, [r7, #20]
 8012c4a:	69fa      	ldr	r2, [r7, #28]
 8012c4c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012c4e:	69fb      	ldr	r3, [r7, #28]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d103      	bne.n	8012c5e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2200      	movs	r2, #0
 8012c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	e016      	b.n	8012c90 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012c62:	bf00      	nop
 8012c64:	e002      	b.n	8012c6c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012c66:	bf00      	nop
 8012c68:	e000      	b.n	8012c6c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012c6a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012c6c:	69fb      	ldr	r3, [r7, #28]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d006      	beq.n	8012c80 <tcp_split_unsent_seg+0x25c>
 8012c72:	4b09      	ldr	r3, [pc, #36]	; (8012c98 <tcp_split_unsent_seg+0x274>)
 8012c74:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012c78:	490d      	ldr	r1, [pc, #52]	; (8012cb0 <tcp_split_unsent_seg+0x28c>)
 8012c7a:	4809      	ldr	r0, [pc, #36]	; (8012ca0 <tcp_split_unsent_seg+0x27c>)
 8012c7c:	f006 fcfc 	bl	8019678 <iprintf>
  if (p != NULL) {
 8012c80:	693b      	ldr	r3, [r7, #16]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d002      	beq.n	8012c8c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012c86:	6938      	ldr	r0, [r7, #16]
 8012c88:	f7fa fd98 	bl	800d7bc <pbuf_free>
  }

  return ERR_MEM;
 8012c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012c90:	4618      	mov	r0, r3
 8012c92:	3724      	adds	r7, #36	; 0x24
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd90      	pop	{r4, r7, pc}
 8012c98:	0801ca88 	.word	0x0801ca88
 8012c9c:	0801ce1c 	.word	0x0801ce1c
 8012ca0:	0801cadc 	.word	0x0801cadc
 8012ca4:	0801ce40 	.word	0x0801ce40
 8012ca8:	0801ce64 	.word	0x0801ce64
 8012cac:	0801ce74 	.word	0x0801ce74
 8012cb0:	0801ce84 	.word	0x0801ce84

08012cb4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012cb4:	b590      	push	{r4, r7, lr}
 8012cb6:	b085      	sub	sp, #20
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d106      	bne.n	8012cd0 <tcp_send_fin+0x1c>
 8012cc2:	4b21      	ldr	r3, [pc, #132]	; (8012d48 <tcp_send_fin+0x94>)
 8012cc4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012cc8:	4920      	ldr	r1, [pc, #128]	; (8012d4c <tcp_send_fin+0x98>)
 8012cca:	4821      	ldr	r0, [pc, #132]	; (8012d50 <tcp_send_fin+0x9c>)
 8012ccc:	f006 fcd4 	bl	8019678 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d02e      	beq.n	8012d36 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cdc:	60fb      	str	r3, [r7, #12]
 8012cde:	e002      	b.n	8012ce6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d1f8      	bne.n	8012ce0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	68db      	ldr	r3, [r3, #12]
 8012cf2:	899b      	ldrh	r3, [r3, #12]
 8012cf4:	b29b      	uxth	r3, r3
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f7f9 f930 	bl	800bf5c <lwip_htons>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	b2db      	uxtb	r3, r3
 8012d00:	f003 0307 	and.w	r3, r3, #7
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d116      	bne.n	8012d36 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	68db      	ldr	r3, [r3, #12]
 8012d0c:	899b      	ldrh	r3, [r3, #12]
 8012d0e:	b29c      	uxth	r4, r3
 8012d10:	2001      	movs	r0, #1
 8012d12:	f7f9 f923 	bl	800bf5c <lwip_htons>
 8012d16:	4603      	mov	r3, r0
 8012d18:	461a      	mov	r2, r3
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	68db      	ldr	r3, [r3, #12]
 8012d1e:	4322      	orrs	r2, r4
 8012d20:	b292      	uxth	r2, r2
 8012d22:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	8b5b      	ldrh	r3, [r3, #26]
 8012d28:	f043 0320 	orr.w	r3, r3, #32
 8012d2c:	b29a      	uxth	r2, r3
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012d32:	2300      	movs	r3, #0
 8012d34:	e004      	b.n	8012d40 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012d36:	2101      	movs	r1, #1
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	f000 f80b 	bl	8012d54 <tcp_enqueue_flags>
 8012d3e:	4603      	mov	r3, r0
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3714      	adds	r7, #20
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd90      	pop	{r4, r7, pc}
 8012d48:	0801ca88 	.word	0x0801ca88
 8012d4c:	0801ce90 	.word	0x0801ce90
 8012d50:	0801cadc 	.word	0x0801cadc

08012d54 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b08a      	sub	sp, #40	; 0x28
 8012d58:	af02      	add	r7, sp, #8
 8012d5a:	6078      	str	r0, [r7, #4]
 8012d5c:	460b      	mov	r3, r1
 8012d5e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012d60:	2300      	movs	r3, #0
 8012d62:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012d64:	2300      	movs	r3, #0
 8012d66:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012d68:	78fb      	ldrb	r3, [r7, #3]
 8012d6a:	f003 0303 	and.w	r3, r3, #3
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d106      	bne.n	8012d80 <tcp_enqueue_flags+0x2c>
 8012d72:	4b67      	ldr	r3, [pc, #412]	; (8012f10 <tcp_enqueue_flags+0x1bc>)
 8012d74:	f240 4211 	movw	r2, #1041	; 0x411
 8012d78:	4966      	ldr	r1, [pc, #408]	; (8012f14 <tcp_enqueue_flags+0x1c0>)
 8012d7a:	4867      	ldr	r0, [pc, #412]	; (8012f18 <tcp_enqueue_flags+0x1c4>)
 8012d7c:	f006 fc7c 	bl	8019678 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d106      	bne.n	8012d94 <tcp_enqueue_flags+0x40>
 8012d86:	4b62      	ldr	r3, [pc, #392]	; (8012f10 <tcp_enqueue_flags+0x1bc>)
 8012d88:	f240 4213 	movw	r2, #1043	; 0x413
 8012d8c:	4963      	ldr	r1, [pc, #396]	; (8012f1c <tcp_enqueue_flags+0x1c8>)
 8012d8e:	4862      	ldr	r0, [pc, #392]	; (8012f18 <tcp_enqueue_flags+0x1c4>)
 8012d90:	f006 fc72 	bl	8019678 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012d94:	78fb      	ldrb	r3, [r7, #3]
 8012d96:	f003 0302 	and.w	r3, r3, #2
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d001      	beq.n	8012da2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012d9e:	2301      	movs	r3, #1
 8012da0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012da2:	7ffb      	ldrb	r3, [r7, #31]
 8012da4:	009b      	lsls	r3, r3, #2
 8012da6:	b2db      	uxtb	r3, r3
 8012da8:	f003 0304 	and.w	r3, r3, #4
 8012dac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012dae:	7dfb      	ldrb	r3, [r7, #23]
 8012db0:	b29b      	uxth	r3, r3
 8012db2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012db6:	4619      	mov	r1, r3
 8012db8:	2036      	movs	r0, #54	; 0x36
 8012dba:	f7fa f9e9 	bl	800d190 <pbuf_alloc>
 8012dbe:	6138      	str	r0, [r7, #16]
 8012dc0:	693b      	ldr	r3, [r7, #16]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d109      	bne.n	8012dda <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	8b5b      	ldrh	r3, [r3, #26]
 8012dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012dce:	b29a      	uxth	r2, r3
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012dd8:	e095      	b.n	8012f06 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	895a      	ldrh	r2, [r3, #10]
 8012dde:	7dfb      	ldrb	r3, [r7, #23]
 8012de0:	b29b      	uxth	r3, r3
 8012de2:	429a      	cmp	r2, r3
 8012de4:	d206      	bcs.n	8012df4 <tcp_enqueue_flags+0xa0>
 8012de6:	4b4a      	ldr	r3, [pc, #296]	; (8012f10 <tcp_enqueue_flags+0x1bc>)
 8012de8:	f240 4239 	movw	r2, #1081	; 0x439
 8012dec:	494c      	ldr	r1, [pc, #304]	; (8012f20 <tcp_enqueue_flags+0x1cc>)
 8012dee:	484a      	ldr	r0, [pc, #296]	; (8012f18 <tcp_enqueue_flags+0x1c4>)
 8012df0:	f006 fc42 	bl	8019678 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012df8:	78fa      	ldrb	r2, [r7, #3]
 8012dfa:	7ffb      	ldrb	r3, [r7, #31]
 8012dfc:	9300      	str	r3, [sp, #0]
 8012dfe:	460b      	mov	r3, r1
 8012e00:	6939      	ldr	r1, [r7, #16]
 8012e02:	6878      	ldr	r0, [r7, #4]
 8012e04:	f7ff f918 	bl	8012038 <tcp_create_segment>
 8012e08:	60f8      	str	r0, [r7, #12]
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d109      	bne.n	8012e24 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	8b5b      	ldrh	r3, [r3, #26]
 8012e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e18:	b29a      	uxth	r2, r3
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e22:	e070      	b.n	8012f06 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	68db      	ldr	r3, [r3, #12]
 8012e28:	f003 0303 	and.w	r3, r3, #3
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d006      	beq.n	8012e3e <tcp_enqueue_flags+0xea>
 8012e30:	4b37      	ldr	r3, [pc, #220]	; (8012f10 <tcp_enqueue_flags+0x1bc>)
 8012e32:	f240 4242 	movw	r2, #1090	; 0x442
 8012e36:	493b      	ldr	r1, [pc, #236]	; (8012f24 <tcp_enqueue_flags+0x1d0>)
 8012e38:	4837      	ldr	r0, [pc, #220]	; (8012f18 <tcp_enqueue_flags+0x1c4>)
 8012e3a:	f006 fc1d 	bl	8019678 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	891b      	ldrh	r3, [r3, #8]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d006      	beq.n	8012e54 <tcp_enqueue_flags+0x100>
 8012e46:	4b32      	ldr	r3, [pc, #200]	; (8012f10 <tcp_enqueue_flags+0x1bc>)
 8012e48:	f240 4243 	movw	r2, #1091	; 0x443
 8012e4c:	4936      	ldr	r1, [pc, #216]	; (8012f28 <tcp_enqueue_flags+0x1d4>)
 8012e4e:	4832      	ldr	r0, [pc, #200]	; (8012f18 <tcp_enqueue_flags+0x1c4>)
 8012e50:	f006 fc12 	bl	8019678 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d103      	bne.n	8012e64 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	68fa      	ldr	r2, [r7, #12]
 8012e60:	66da      	str	r2, [r3, #108]	; 0x6c
 8012e62:	e00d      	b.n	8012e80 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e68:	61bb      	str	r3, [r7, #24]
 8012e6a:	e002      	b.n	8012e72 <tcp_enqueue_flags+0x11e>
 8012e6c:	69bb      	ldr	r3, [r7, #24]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	61bb      	str	r3, [r7, #24]
 8012e72:	69bb      	ldr	r3, [r7, #24]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d1f8      	bne.n	8012e6c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012e7a:	69bb      	ldr	r3, [r7, #24]
 8012e7c:	68fa      	ldr	r2, [r7, #12]
 8012e7e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2200      	movs	r2, #0
 8012e84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012e88:	78fb      	ldrb	r3, [r7, #3]
 8012e8a:	f003 0302 	and.w	r3, r3, #2
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d104      	bne.n	8012e9c <tcp_enqueue_flags+0x148>
 8012e92:	78fb      	ldrb	r3, [r7, #3]
 8012e94:	f003 0301 	and.w	r3, r3, #1
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d004      	beq.n	8012ea6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012ea0:	1c5a      	adds	r2, r3, #1
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012ea6:	78fb      	ldrb	r3, [r7, #3]
 8012ea8:	f003 0301 	and.w	r3, r3, #1
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d006      	beq.n	8012ebe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	8b5b      	ldrh	r3, [r3, #26]
 8012eb4:	f043 0320 	orr.w	r3, r3, #32
 8012eb8:	b29a      	uxth	r2, r3
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	685b      	ldr	r3, [r3, #4]
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f7fa fd08 	bl	800d8d8 <pbuf_clen>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	461a      	mov	r2, r3
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ed2:	4413      	add	r3, r2
 8012ed4:	b29a      	uxth	r2, r3
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d00e      	beq.n	8012f04 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d10a      	bne.n	8012f04 <tcp_enqueue_flags+0x1b0>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d106      	bne.n	8012f04 <tcp_enqueue_flags+0x1b0>
 8012ef6:	4b06      	ldr	r3, [pc, #24]	; (8012f10 <tcp_enqueue_flags+0x1bc>)
 8012ef8:	f240 4265 	movw	r2, #1125	; 0x465
 8012efc:	490b      	ldr	r1, [pc, #44]	; (8012f2c <tcp_enqueue_flags+0x1d8>)
 8012efe:	4806      	ldr	r0, [pc, #24]	; (8012f18 <tcp_enqueue_flags+0x1c4>)
 8012f00:	f006 fbba 	bl	8019678 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012f04:	2300      	movs	r3, #0
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	3720      	adds	r7, #32
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}
 8012f0e:	bf00      	nop
 8012f10:	0801ca88 	.word	0x0801ca88
 8012f14:	0801ceac 	.word	0x0801ceac
 8012f18:	0801cadc 	.word	0x0801cadc
 8012f1c:	0801cf04 	.word	0x0801cf04
 8012f20:	0801cf24 	.word	0x0801cf24
 8012f24:	0801cf60 	.word	0x0801cf60
 8012f28:	0801cf78 	.word	0x0801cf78
 8012f2c:	0801cfa4 	.word	0x0801cfa4

08012f30 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012f30:	b5b0      	push	{r4, r5, r7, lr}
 8012f32:	b08a      	sub	sp, #40	; 0x28
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d106      	bne.n	8012f4c <tcp_output+0x1c>
 8012f3e:	4b8a      	ldr	r3, [pc, #552]	; (8013168 <tcp_output+0x238>)
 8012f40:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012f44:	4989      	ldr	r1, [pc, #548]	; (801316c <tcp_output+0x23c>)
 8012f46:	488a      	ldr	r0, [pc, #552]	; (8013170 <tcp_output+0x240>)
 8012f48:	f006 fb96 	bl	8019678 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	7d1b      	ldrb	r3, [r3, #20]
 8012f50:	2b01      	cmp	r3, #1
 8012f52:	d106      	bne.n	8012f62 <tcp_output+0x32>
 8012f54:	4b84      	ldr	r3, [pc, #528]	; (8013168 <tcp_output+0x238>)
 8012f56:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012f5a:	4986      	ldr	r1, [pc, #536]	; (8013174 <tcp_output+0x244>)
 8012f5c:	4884      	ldr	r0, [pc, #528]	; (8013170 <tcp_output+0x240>)
 8012f5e:	f006 fb8b 	bl	8019678 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012f62:	4b85      	ldr	r3, [pc, #532]	; (8013178 <tcp_output+0x248>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	687a      	ldr	r2, [r7, #4]
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d101      	bne.n	8012f70 <tcp_output+0x40>
    return ERR_OK;
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	e1ce      	b.n	801330e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012f7c:	4293      	cmp	r3, r2
 8012f7e:	bf28      	it	cs
 8012f80:	4613      	movcs	r3, r2
 8012f82:	b29b      	uxth	r3, r3
 8012f84:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f8a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d10b      	bne.n	8012faa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	8b5b      	ldrh	r3, [r3, #26]
 8012f96:	f003 0302 	and.w	r3, r3, #2
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	f000 81aa 	beq.w	80132f4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012fa0:	6878      	ldr	r0, [r7, #4]
 8012fa2:	f000 fdcb 	bl	8013b3c <tcp_send_empty_ack>
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	e1b1      	b.n	801330e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012faa:	6879      	ldr	r1, [r7, #4]
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	3304      	adds	r3, #4
 8012fb0:	461a      	mov	r2, r3
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f7ff f824 	bl	8012000 <tcp_route>
 8012fb8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d102      	bne.n	8012fc6 <tcp_output+0x96>
    return ERR_RTE;
 8012fc0:	f06f 0303 	mvn.w	r3, #3
 8012fc4:	e1a3      	b.n	801330e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d003      	beq.n	8012fd4 <tcp_output+0xa4>
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d111      	bne.n	8012ff8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d002      	beq.n	8012fe0 <tcp_output+0xb0>
 8012fda:	697b      	ldr	r3, [r7, #20]
 8012fdc:	3304      	adds	r3, #4
 8012fde:	e000      	b.n	8012fe2 <tcp_output+0xb2>
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012fe4:	693b      	ldr	r3, [r7, #16]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d102      	bne.n	8012ff0 <tcp_output+0xc0>
      return ERR_RTE;
 8012fea:	f06f 0303 	mvn.w	r3, #3
 8012fee:	e18e      	b.n	801330e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	681a      	ldr	r2, [r3, #0]
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ffa:	68db      	ldr	r3, [r3, #12]
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	4618      	mov	r0, r3
 8013000:	f7f8 ffc1 	bl	800bf86 <lwip_htonl>
 8013004:	4602      	mov	r2, r0
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801300a:	1ad3      	subs	r3, r2, r3
 801300c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801300e:	8912      	ldrh	r2, [r2, #8]
 8013010:	4413      	add	r3, r2
 8013012:	69ba      	ldr	r2, [r7, #24]
 8013014:	429a      	cmp	r2, r3
 8013016:	d227      	bcs.n	8013068 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801301e:	461a      	mov	r2, r3
 8013020:	69bb      	ldr	r3, [r7, #24]
 8013022:	4293      	cmp	r3, r2
 8013024:	d114      	bne.n	8013050 <tcp_output+0x120>
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801302a:	2b00      	cmp	r3, #0
 801302c:	d110      	bne.n	8013050 <tcp_output+0x120>
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013034:	2b00      	cmp	r3, #0
 8013036:	d10b      	bne.n	8013050 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2200      	movs	r2, #0
 801303c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2201      	movs	r2, #1
 8013044:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2200      	movs	r2, #0
 801304c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	8b5b      	ldrh	r3, [r3, #26]
 8013054:	f003 0302 	and.w	r3, r3, #2
 8013058:	2b00      	cmp	r3, #0
 801305a:	f000 814d 	beq.w	80132f8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f000 fd6c 	bl	8013b3c <tcp_send_empty_ack>
 8013064:	4603      	mov	r3, r0
 8013066:	e152      	b.n	801330e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2200      	movs	r2, #0
 801306c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013074:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013076:	6a3b      	ldr	r3, [r7, #32]
 8013078:	2b00      	cmp	r3, #0
 801307a:	f000 811c 	beq.w	80132b6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801307e:	e002      	b.n	8013086 <tcp_output+0x156>
 8013080:	6a3b      	ldr	r3, [r7, #32]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	623b      	str	r3, [r7, #32]
 8013086:	6a3b      	ldr	r3, [r7, #32]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d1f8      	bne.n	8013080 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801308e:	e112      	b.n	80132b6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013092:	68db      	ldr	r3, [r3, #12]
 8013094:	899b      	ldrh	r3, [r3, #12]
 8013096:	b29b      	uxth	r3, r3
 8013098:	4618      	mov	r0, r3
 801309a:	f7f8 ff5f 	bl	800bf5c <lwip_htons>
 801309e:	4603      	mov	r3, r0
 80130a0:	b2db      	uxtb	r3, r3
 80130a2:	f003 0304 	and.w	r3, r3, #4
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d006      	beq.n	80130b8 <tcp_output+0x188>
 80130aa:	4b2f      	ldr	r3, [pc, #188]	; (8013168 <tcp_output+0x238>)
 80130ac:	f240 5236 	movw	r2, #1334	; 0x536
 80130b0:	4932      	ldr	r1, [pc, #200]	; (801317c <tcp_output+0x24c>)
 80130b2:	482f      	ldr	r0, [pc, #188]	; (8013170 <tcp_output+0x240>)
 80130b4:	f006 fae0 	bl	8019678 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d01f      	beq.n	8013100 <tcp_output+0x1d0>
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	8b5b      	ldrh	r3, [r3, #26]
 80130c4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d119      	bne.n	8013100 <tcp_output+0x1d0>
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d00b      	beq.n	80130ec <tcp_output+0x1bc>
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d110      	bne.n	8013100 <tcp_output+0x1d0>
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130e2:	891a      	ldrh	r2, [r3, #8]
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130e8:	429a      	cmp	r2, r3
 80130ea:	d209      	bcs.n	8013100 <tcp_output+0x1d0>
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d004      	beq.n	8013100 <tcp_output+0x1d0>
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80130fc:	2b08      	cmp	r3, #8
 80130fe:	d901      	bls.n	8013104 <tcp_output+0x1d4>
 8013100:	2301      	movs	r3, #1
 8013102:	e000      	b.n	8013106 <tcp_output+0x1d6>
 8013104:	2300      	movs	r3, #0
 8013106:	2b00      	cmp	r3, #0
 8013108:	d106      	bne.n	8013118 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	8b5b      	ldrh	r3, [r3, #26]
 801310e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013112:	2b00      	cmp	r3, #0
 8013114:	f000 80e4 	beq.w	80132e0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	7d1b      	ldrb	r3, [r3, #20]
 801311c:	2b02      	cmp	r3, #2
 801311e:	d00d      	beq.n	801313c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013122:	68db      	ldr	r3, [r3, #12]
 8013124:	899b      	ldrh	r3, [r3, #12]
 8013126:	b29c      	uxth	r4, r3
 8013128:	2010      	movs	r0, #16
 801312a:	f7f8 ff17 	bl	800bf5c <lwip_htons>
 801312e:	4603      	mov	r3, r0
 8013130:	461a      	mov	r2, r3
 8013132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013134:	68db      	ldr	r3, [r3, #12]
 8013136:	4322      	orrs	r2, r4
 8013138:	b292      	uxth	r2, r2
 801313a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801313c:	697a      	ldr	r2, [r7, #20]
 801313e:	6879      	ldr	r1, [r7, #4]
 8013140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013142:	f000 f909 	bl	8013358 <tcp_output_segment>
 8013146:	4603      	mov	r3, r0
 8013148:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801314a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d016      	beq.n	8013180 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	8b5b      	ldrh	r3, [r3, #26]
 8013156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801315a:	b29a      	uxth	r2, r3
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	835a      	strh	r2, [r3, #26]
      return err;
 8013160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013164:	e0d3      	b.n	801330e <tcp_output+0x3de>
 8013166:	bf00      	nop
 8013168:	0801ca88 	.word	0x0801ca88
 801316c:	0801cfcc 	.word	0x0801cfcc
 8013170:	0801cadc 	.word	0x0801cadc
 8013174:	0801cfe4 	.word	0x0801cfe4
 8013178:	2000cfb4 	.word	0x2000cfb4
 801317c:	0801d00c 	.word	0x0801d00c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013182:	681a      	ldr	r2, [r3, #0]
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	7d1b      	ldrb	r3, [r3, #20]
 801318c:	2b02      	cmp	r3, #2
 801318e:	d006      	beq.n	801319e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	8b5b      	ldrh	r3, [r3, #26]
 8013194:	f023 0303 	bic.w	r3, r3, #3
 8013198:	b29a      	uxth	r2, r3
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a0:	68db      	ldr	r3, [r3, #12]
 80131a2:	685b      	ldr	r3, [r3, #4]
 80131a4:	4618      	mov	r0, r3
 80131a6:	f7f8 feee 	bl	800bf86 <lwip_htonl>
 80131aa:	4604      	mov	r4, r0
 80131ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ae:	891b      	ldrh	r3, [r3, #8]
 80131b0:	461d      	mov	r5, r3
 80131b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b4:	68db      	ldr	r3, [r3, #12]
 80131b6:	899b      	ldrh	r3, [r3, #12]
 80131b8:	b29b      	uxth	r3, r3
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7f8 fece 	bl	800bf5c <lwip_htons>
 80131c0:	4603      	mov	r3, r0
 80131c2:	b2db      	uxtb	r3, r3
 80131c4:	f003 0303 	and.w	r3, r3, #3
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d001      	beq.n	80131d0 <tcp_output+0x2a0>
 80131cc:	2301      	movs	r3, #1
 80131ce:	e000      	b.n	80131d2 <tcp_output+0x2a2>
 80131d0:	2300      	movs	r3, #0
 80131d2:	442b      	add	r3, r5
 80131d4:	4423      	add	r3, r4
 80131d6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80131dc:	68bb      	ldr	r3, [r7, #8]
 80131de:	1ad3      	subs	r3, r2, r3
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	da02      	bge.n	80131ea <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	68ba      	ldr	r2, [r7, #8]
 80131e8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80131ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ec:	891b      	ldrh	r3, [r3, #8]
 80131ee:	461c      	mov	r4, r3
 80131f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131f2:	68db      	ldr	r3, [r3, #12]
 80131f4:	899b      	ldrh	r3, [r3, #12]
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7f8 feaf 	bl	800bf5c <lwip_htons>
 80131fe:	4603      	mov	r3, r0
 8013200:	b2db      	uxtb	r3, r3
 8013202:	f003 0303 	and.w	r3, r3, #3
 8013206:	2b00      	cmp	r3, #0
 8013208:	d001      	beq.n	801320e <tcp_output+0x2de>
 801320a:	2301      	movs	r3, #1
 801320c:	e000      	b.n	8013210 <tcp_output+0x2e0>
 801320e:	2300      	movs	r3, #0
 8013210:	4423      	add	r3, r4
 8013212:	2b00      	cmp	r3, #0
 8013214:	d049      	beq.n	80132aa <tcp_output+0x37a>
      seg->next = NULL;
 8013216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013218:	2200      	movs	r2, #0
 801321a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013220:	2b00      	cmp	r3, #0
 8013222:	d105      	bne.n	8013230 <tcp_output+0x300>
        pcb->unacked = seg;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013228:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801322c:	623b      	str	r3, [r7, #32]
 801322e:	e03f      	b.n	80132b0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013232:	68db      	ldr	r3, [r3, #12]
 8013234:	685b      	ldr	r3, [r3, #4]
 8013236:	4618      	mov	r0, r3
 8013238:	f7f8 fea5 	bl	800bf86 <lwip_htonl>
 801323c:	4604      	mov	r4, r0
 801323e:	6a3b      	ldr	r3, [r7, #32]
 8013240:	68db      	ldr	r3, [r3, #12]
 8013242:	685b      	ldr	r3, [r3, #4]
 8013244:	4618      	mov	r0, r3
 8013246:	f7f8 fe9e 	bl	800bf86 <lwip_htonl>
 801324a:	4603      	mov	r3, r0
 801324c:	1ae3      	subs	r3, r4, r3
 801324e:	2b00      	cmp	r3, #0
 8013250:	da24      	bge.n	801329c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	3370      	adds	r3, #112	; 0x70
 8013256:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013258:	e002      	b.n	8013260 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801325a:	69fb      	ldr	r3, [r7, #28]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013260:	69fb      	ldr	r3, [r7, #28]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d011      	beq.n	801328c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013268:	69fb      	ldr	r3, [r7, #28]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	68db      	ldr	r3, [r3, #12]
 801326e:	685b      	ldr	r3, [r3, #4]
 8013270:	4618      	mov	r0, r3
 8013272:	f7f8 fe88 	bl	800bf86 <lwip_htonl>
 8013276:	4604      	mov	r4, r0
 8013278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801327a:	68db      	ldr	r3, [r3, #12]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	4618      	mov	r0, r3
 8013280:	f7f8 fe81 	bl	800bf86 <lwip_htonl>
 8013284:	4603      	mov	r3, r0
 8013286:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013288:	2b00      	cmp	r3, #0
 801328a:	dbe6      	blt.n	801325a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801328c:	69fb      	ldr	r3, [r7, #28]
 801328e:	681a      	ldr	r2, [r3, #0]
 8013290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013292:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013294:	69fb      	ldr	r3, [r7, #28]
 8013296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013298:	601a      	str	r2, [r3, #0]
 801329a:	e009      	b.n	80132b0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801329c:	6a3b      	ldr	r3, [r7, #32]
 801329e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132a0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80132a2:	6a3b      	ldr	r3, [r7, #32]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	623b      	str	r3, [r7, #32]
 80132a8:	e002      	b.n	80132b0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80132aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80132ac:	f7fb ff19 	bl	800f0e2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132b4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80132b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d012      	beq.n	80132e2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80132bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132be:	68db      	ldr	r3, [r3, #12]
 80132c0:	685b      	ldr	r3, [r3, #4]
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7f8 fe5f 	bl	800bf86 <lwip_htonl>
 80132c8:	4602      	mov	r2, r0
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132ce:	1ad3      	subs	r3, r2, r3
 80132d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132d2:	8912      	ldrh	r2, [r2, #8]
 80132d4:	4413      	add	r3, r2
  while (seg != NULL &&
 80132d6:	69ba      	ldr	r2, [r7, #24]
 80132d8:	429a      	cmp	r2, r3
 80132da:	f4bf aed9 	bcs.w	8013090 <tcp_output+0x160>
 80132de:	e000      	b.n	80132e2 <tcp_output+0x3b2>
      break;
 80132e0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d108      	bne.n	80132fc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2200      	movs	r2, #0
 80132ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80132f2:	e004      	b.n	80132fe <tcp_output+0x3ce>
    goto output_done;
 80132f4:	bf00      	nop
 80132f6:	e002      	b.n	80132fe <tcp_output+0x3ce>
    goto output_done;
 80132f8:	bf00      	nop
 80132fa:	e000      	b.n	80132fe <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80132fc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	8b5b      	ldrh	r3, [r3, #26]
 8013302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013306:	b29a      	uxth	r2, r3
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801330c:	2300      	movs	r3, #0
}
 801330e:	4618      	mov	r0, r3
 8013310:	3728      	adds	r7, #40	; 0x28
 8013312:	46bd      	mov	sp, r7
 8013314:	bdb0      	pop	{r4, r5, r7, pc}
 8013316:	bf00      	nop

08013318 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b082      	sub	sp, #8
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d106      	bne.n	8013334 <tcp_output_segment_busy+0x1c>
 8013326:	4b09      	ldr	r3, [pc, #36]	; (801334c <tcp_output_segment_busy+0x34>)
 8013328:	f240 529a 	movw	r2, #1434	; 0x59a
 801332c:	4908      	ldr	r1, [pc, #32]	; (8013350 <tcp_output_segment_busy+0x38>)
 801332e:	4809      	ldr	r0, [pc, #36]	; (8013354 <tcp_output_segment_busy+0x3c>)
 8013330:	f006 f9a2 	bl	8019678 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	685b      	ldr	r3, [r3, #4]
 8013338:	7b9b      	ldrb	r3, [r3, #14]
 801333a:	2b01      	cmp	r3, #1
 801333c:	d001      	beq.n	8013342 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801333e:	2301      	movs	r3, #1
 8013340:	e000      	b.n	8013344 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013342:	2300      	movs	r3, #0
}
 8013344:	4618      	mov	r0, r3
 8013346:	3708      	adds	r7, #8
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}
 801334c:	0801ca88 	.word	0x0801ca88
 8013350:	0801d024 	.word	0x0801d024
 8013354:	0801cadc 	.word	0x0801cadc

08013358 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013358:	b5b0      	push	{r4, r5, r7, lr}
 801335a:	b08c      	sub	sp, #48	; 0x30
 801335c:	af04      	add	r7, sp, #16
 801335e:	60f8      	str	r0, [r7, #12]
 8013360:	60b9      	str	r1, [r7, #8]
 8013362:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d106      	bne.n	8013378 <tcp_output_segment+0x20>
 801336a:	4b63      	ldr	r3, [pc, #396]	; (80134f8 <tcp_output_segment+0x1a0>)
 801336c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013370:	4962      	ldr	r1, [pc, #392]	; (80134fc <tcp_output_segment+0x1a4>)
 8013372:	4863      	ldr	r0, [pc, #396]	; (8013500 <tcp_output_segment+0x1a8>)
 8013374:	f006 f980 	bl	8019678 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013378:	68bb      	ldr	r3, [r7, #8]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d106      	bne.n	801338c <tcp_output_segment+0x34>
 801337e:	4b5e      	ldr	r3, [pc, #376]	; (80134f8 <tcp_output_segment+0x1a0>)
 8013380:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013384:	495f      	ldr	r1, [pc, #380]	; (8013504 <tcp_output_segment+0x1ac>)
 8013386:	485e      	ldr	r0, [pc, #376]	; (8013500 <tcp_output_segment+0x1a8>)
 8013388:	f006 f976 	bl	8019678 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d106      	bne.n	80133a0 <tcp_output_segment+0x48>
 8013392:	4b59      	ldr	r3, [pc, #356]	; (80134f8 <tcp_output_segment+0x1a0>)
 8013394:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013398:	495b      	ldr	r1, [pc, #364]	; (8013508 <tcp_output_segment+0x1b0>)
 801339a:	4859      	ldr	r0, [pc, #356]	; (8013500 <tcp_output_segment+0x1a8>)
 801339c:	f006 f96c 	bl	8019678 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80133a0:	68f8      	ldr	r0, [r7, #12]
 80133a2:	f7ff ffb9 	bl	8013318 <tcp_output_segment_busy>
 80133a6:	4603      	mov	r3, r0
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d001      	beq.n	80133b0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80133ac:	2300      	movs	r3, #0
 80133ae:	e09f      	b.n	80134f0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	68dc      	ldr	r4, [r3, #12]
 80133b8:	4610      	mov	r0, r2
 80133ba:	f7f8 fde4 	bl	800bf86 <lwip_htonl>
 80133be:	4603      	mov	r3, r0
 80133c0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	68dc      	ldr	r4, [r3, #12]
 80133ca:	4610      	mov	r0, r2
 80133cc:	f7f8 fdc6 	bl	800bf5c <lwip_htons>
 80133d0:	4603      	mov	r3, r0
 80133d2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80133d4:	68bb      	ldr	r3, [r7, #8]
 80133d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133d8:	68ba      	ldr	r2, [r7, #8]
 80133da:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80133dc:	441a      	add	r2, r3
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	68db      	ldr	r3, [r3, #12]
 80133e6:	3314      	adds	r3, #20
 80133e8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	7a9b      	ldrb	r3, [r3, #10]
 80133ee:	f003 0301 	and.w	r3, r3, #1
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d015      	beq.n	8013422 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	3304      	adds	r3, #4
 80133fa:	461a      	mov	r2, r3
 80133fc:	6879      	ldr	r1, [r7, #4]
 80133fe:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013402:	f7fc fa33 	bl	800f86c <tcp_eff_send_mss_netif>
 8013406:	4603      	mov	r3, r0
 8013408:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801340a:	8b7b      	ldrh	r3, [r7, #26]
 801340c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013410:	4618      	mov	r0, r3
 8013412:	f7f8 fdb8 	bl	800bf86 <lwip_htonl>
 8013416:	4602      	mov	r2, r0
 8013418:	69fb      	ldr	r3, [r7, #28]
 801341a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801341c:	69fb      	ldr	r3, [r7, #28]
 801341e:	3304      	adds	r3, #4
 8013420:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013422:	68bb      	ldr	r3, [r7, #8]
 8013424:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013428:	2b00      	cmp	r3, #0
 801342a:	da02      	bge.n	8013432 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801342c:	68bb      	ldr	r3, [r7, #8]
 801342e:	2200      	movs	r2, #0
 8013430:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013436:	2b00      	cmp	r3, #0
 8013438:	d10c      	bne.n	8013454 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801343a:	4b34      	ldr	r3, [pc, #208]	; (801350c <tcp_output_segment+0x1b4>)
 801343c:	681a      	ldr	r2, [r3, #0]
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	68db      	ldr	r3, [r3, #12]
 8013446:	685b      	ldr	r3, [r3, #4]
 8013448:	4618      	mov	r0, r3
 801344a:	f7f8 fd9c 	bl	800bf86 <lwip_htonl>
 801344e:	4602      	mov	r2, r0
 8013450:	68bb      	ldr	r3, [r7, #8]
 8013452:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	68da      	ldr	r2, [r3, #12]
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	685b      	ldr	r3, [r3, #4]
 801345c:	685b      	ldr	r3, [r3, #4]
 801345e:	1ad3      	subs	r3, r2, r3
 8013460:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	685b      	ldr	r3, [r3, #4]
 8013466:	8959      	ldrh	r1, [r3, #10]
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	685b      	ldr	r3, [r3, #4]
 801346c:	8b3a      	ldrh	r2, [r7, #24]
 801346e:	1a8a      	subs	r2, r1, r2
 8013470:	b292      	uxth	r2, r2
 8013472:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	685b      	ldr	r3, [r3, #4]
 8013478:	8919      	ldrh	r1, [r3, #8]
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	685b      	ldr	r3, [r3, #4]
 801347e:	8b3a      	ldrh	r2, [r7, #24]
 8013480:	1a8a      	subs	r2, r1, r2
 8013482:	b292      	uxth	r2, r2
 8013484:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	685b      	ldr	r3, [r3, #4]
 801348a:	68fa      	ldr	r2, [r7, #12]
 801348c:	68d2      	ldr	r2, [r2, #12]
 801348e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	68db      	ldr	r3, [r3, #12]
 8013494:	2200      	movs	r2, #0
 8013496:	741a      	strb	r2, [r3, #16]
 8013498:	2200      	movs	r2, #0
 801349a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	68db      	ldr	r3, [r3, #12]
 80134a0:	f103 0214 	add.w	r2, r3, #20
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	7a9b      	ldrb	r3, [r3, #10]
 80134a8:	009b      	lsls	r3, r3, #2
 80134aa:	f003 0304 	and.w	r3, r3, #4
 80134ae:	4413      	add	r3, r2
 80134b0:	69fa      	ldr	r2, [r7, #28]
 80134b2:	429a      	cmp	r2, r3
 80134b4:	d006      	beq.n	80134c4 <tcp_output_segment+0x16c>
 80134b6:	4b10      	ldr	r3, [pc, #64]	; (80134f8 <tcp_output_segment+0x1a0>)
 80134b8:	f240 621c 	movw	r2, #1564	; 0x61c
 80134bc:	4914      	ldr	r1, [pc, #80]	; (8013510 <tcp_output_segment+0x1b8>)
 80134be:	4810      	ldr	r0, [pc, #64]	; (8013500 <tcp_output_segment+0x1a8>)
 80134c0:	f006 f8da 	bl	8019678 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	6858      	ldr	r0, [r3, #4]
 80134c8:	68b9      	ldr	r1, [r7, #8]
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	1d1c      	adds	r4, r3, #4
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	7add      	ldrb	r5, [r3, #11]
 80134d2:	68bb      	ldr	r3, [r7, #8]
 80134d4:	7a9b      	ldrb	r3, [r3, #10]
 80134d6:	687a      	ldr	r2, [r7, #4]
 80134d8:	9202      	str	r2, [sp, #8]
 80134da:	2206      	movs	r2, #6
 80134dc:	9201      	str	r2, [sp, #4]
 80134de:	9300      	str	r3, [sp, #0]
 80134e0:	462b      	mov	r3, r5
 80134e2:	4622      	mov	r2, r4
 80134e4:	f004 fc28 	bl	8017d38 <ip4_output_if>
 80134e8:	4603      	mov	r3, r0
 80134ea:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80134ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80134f0:	4618      	mov	r0, r3
 80134f2:	3720      	adds	r7, #32
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bdb0      	pop	{r4, r5, r7, pc}
 80134f8:	0801ca88 	.word	0x0801ca88
 80134fc:	0801d04c 	.word	0x0801d04c
 8013500:	0801cadc 	.word	0x0801cadc
 8013504:	0801d06c 	.word	0x0801d06c
 8013508:	0801d08c 	.word	0x0801d08c
 801350c:	2000cf68 	.word	0x2000cf68
 8013510:	0801d0b0 	.word	0x0801d0b0

08013514 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013514:	b5b0      	push	{r4, r5, r7, lr}
 8013516:	b084      	sub	sp, #16
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d106      	bne.n	8013530 <tcp_rexmit_rto_prepare+0x1c>
 8013522:	4b31      	ldr	r3, [pc, #196]	; (80135e8 <tcp_rexmit_rto_prepare+0xd4>)
 8013524:	f240 6263 	movw	r2, #1635	; 0x663
 8013528:	4930      	ldr	r1, [pc, #192]	; (80135ec <tcp_rexmit_rto_prepare+0xd8>)
 801352a:	4831      	ldr	r0, [pc, #196]	; (80135f0 <tcp_rexmit_rto_prepare+0xdc>)
 801352c:	f006 f8a4 	bl	8019678 <iprintf>

  if (pcb->unacked == NULL) {
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013534:	2b00      	cmp	r3, #0
 8013536:	d102      	bne.n	801353e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013538:	f06f 0305 	mvn.w	r3, #5
 801353c:	e050      	b.n	80135e0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013542:	60fb      	str	r3, [r7, #12]
 8013544:	e00b      	b.n	801355e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013546:	68f8      	ldr	r0, [r7, #12]
 8013548:	f7ff fee6 	bl	8013318 <tcp_output_segment_busy>
 801354c:	4603      	mov	r3, r0
 801354e:	2b00      	cmp	r3, #0
 8013550:	d002      	beq.n	8013558 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013552:	f06f 0305 	mvn.w	r3, #5
 8013556:	e043      	b.n	80135e0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	60fb      	str	r3, [r7, #12]
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d1ef      	bne.n	8013546 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013566:	68f8      	ldr	r0, [r7, #12]
 8013568:	f7ff fed6 	bl	8013318 <tcp_output_segment_busy>
 801356c:	4603      	mov	r3, r0
 801356e:	2b00      	cmp	r3, #0
 8013570:	d002      	beq.n	8013578 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013572:	f06f 0305 	mvn.w	r3, #5
 8013576:	e033      	b.n	80135e0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2200      	movs	r2, #0
 801358c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	8b5b      	ldrh	r3, [r3, #26]
 8013592:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013596:	b29a      	uxth	r2, r3
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	68db      	ldr	r3, [r3, #12]
 80135a0:	685b      	ldr	r3, [r3, #4]
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7f8 fcef 	bl	800bf86 <lwip_htonl>
 80135a8:	4604      	mov	r4, r0
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	891b      	ldrh	r3, [r3, #8]
 80135ae:	461d      	mov	r5, r3
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	68db      	ldr	r3, [r3, #12]
 80135b4:	899b      	ldrh	r3, [r3, #12]
 80135b6:	b29b      	uxth	r3, r3
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7f8 fccf 	bl	800bf5c <lwip_htons>
 80135be:	4603      	mov	r3, r0
 80135c0:	b2db      	uxtb	r3, r3
 80135c2:	f003 0303 	and.w	r3, r3, #3
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d001      	beq.n	80135ce <tcp_rexmit_rto_prepare+0xba>
 80135ca:	2301      	movs	r3, #1
 80135cc:	e000      	b.n	80135d0 <tcp_rexmit_rto_prepare+0xbc>
 80135ce:	2300      	movs	r3, #0
 80135d0:	442b      	add	r3, r5
 80135d2:	18e2      	adds	r2, r4, r3
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	2200      	movs	r2, #0
 80135dc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80135de:	2300      	movs	r3, #0
}
 80135e0:	4618      	mov	r0, r3
 80135e2:	3710      	adds	r7, #16
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bdb0      	pop	{r4, r5, r7, pc}
 80135e8:	0801ca88 	.word	0x0801ca88
 80135ec:	0801d0c4 	.word	0x0801d0c4
 80135f0:	0801cadc 	.word	0x0801cadc

080135f4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b082      	sub	sp, #8
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d106      	bne.n	8013610 <tcp_rexmit_rto_commit+0x1c>
 8013602:	4b0d      	ldr	r3, [pc, #52]	; (8013638 <tcp_rexmit_rto_commit+0x44>)
 8013604:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013608:	490c      	ldr	r1, [pc, #48]	; (801363c <tcp_rexmit_rto_commit+0x48>)
 801360a:	480d      	ldr	r0, [pc, #52]	; (8013640 <tcp_rexmit_rto_commit+0x4c>)
 801360c:	f006 f834 	bl	8019678 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013616:	2bff      	cmp	r3, #255	; 0xff
 8013618:	d007      	beq.n	801362a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013620:	3301      	adds	r3, #1
 8013622:	b2da      	uxtb	r2, r3
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801362a:	6878      	ldr	r0, [r7, #4]
 801362c:	f7ff fc80 	bl	8012f30 <tcp_output>
}
 8013630:	bf00      	nop
 8013632:	3708      	adds	r7, #8
 8013634:	46bd      	mov	sp, r7
 8013636:	bd80      	pop	{r7, pc}
 8013638:	0801ca88 	.word	0x0801ca88
 801363c:	0801d0e8 	.word	0x0801d0e8
 8013640:	0801cadc 	.word	0x0801cadc

08013644 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b082      	sub	sp, #8
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d106      	bne.n	8013660 <tcp_rexmit_rto+0x1c>
 8013652:	4b0a      	ldr	r3, [pc, #40]	; (801367c <tcp_rexmit_rto+0x38>)
 8013654:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013658:	4909      	ldr	r1, [pc, #36]	; (8013680 <tcp_rexmit_rto+0x3c>)
 801365a:	480a      	ldr	r0, [pc, #40]	; (8013684 <tcp_rexmit_rto+0x40>)
 801365c:	f006 f80c 	bl	8019678 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f7ff ff57 	bl	8013514 <tcp_rexmit_rto_prepare>
 8013666:	4603      	mov	r3, r0
 8013668:	2b00      	cmp	r3, #0
 801366a:	d102      	bne.n	8013672 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f7ff ffc1 	bl	80135f4 <tcp_rexmit_rto_commit>
  }
}
 8013672:	bf00      	nop
 8013674:	3708      	adds	r7, #8
 8013676:	46bd      	mov	sp, r7
 8013678:	bd80      	pop	{r7, pc}
 801367a:	bf00      	nop
 801367c:	0801ca88 	.word	0x0801ca88
 8013680:	0801d10c 	.word	0x0801d10c
 8013684:	0801cadc 	.word	0x0801cadc

08013688 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013688:	b590      	push	{r4, r7, lr}
 801368a:	b085      	sub	sp, #20
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d106      	bne.n	80136a4 <tcp_rexmit+0x1c>
 8013696:	4b2f      	ldr	r3, [pc, #188]	; (8013754 <tcp_rexmit+0xcc>)
 8013698:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801369c:	492e      	ldr	r1, [pc, #184]	; (8013758 <tcp_rexmit+0xd0>)
 801369e:	482f      	ldr	r0, [pc, #188]	; (801375c <tcp_rexmit+0xd4>)
 80136a0:	f005 ffea 	bl	8019678 <iprintf>

  if (pcb->unacked == NULL) {
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d102      	bne.n	80136b2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80136ac:	f06f 0305 	mvn.w	r3, #5
 80136b0:	e04c      	b.n	801374c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136b6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80136b8:	68b8      	ldr	r0, [r7, #8]
 80136ba:	f7ff fe2d 	bl	8013318 <tcp_output_segment_busy>
 80136be:	4603      	mov	r3, r0
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d002      	beq.n	80136ca <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80136c4:	f06f 0305 	mvn.w	r3, #5
 80136c8:	e040      	b.n	801374c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80136ca:	68bb      	ldr	r3, [r7, #8]
 80136cc:	681a      	ldr	r2, [r3, #0]
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	336c      	adds	r3, #108	; 0x6c
 80136d6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80136d8:	e002      	b.n	80136e0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d011      	beq.n	801370c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	68db      	ldr	r3, [r3, #12]
 80136ee:	685b      	ldr	r3, [r3, #4]
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7f8 fc48 	bl	800bf86 <lwip_htonl>
 80136f6:	4604      	mov	r4, r0
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	68db      	ldr	r3, [r3, #12]
 80136fc:	685b      	ldr	r3, [r3, #4]
 80136fe:	4618      	mov	r0, r3
 8013700:	f7f8 fc41 	bl	800bf86 <lwip_htonl>
 8013704:	4603      	mov	r3, r0
 8013706:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013708:	2b00      	cmp	r3, #0
 801370a:	dbe6      	blt.n	80136da <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	681a      	ldr	r2, [r3, #0]
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	68ba      	ldr	r2, [r7, #8]
 8013718:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d103      	bne.n	801372a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2200      	movs	r2, #0
 8013726:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013730:	2bff      	cmp	r3, #255	; 0xff
 8013732:	d007      	beq.n	8013744 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801373a:	3301      	adds	r3, #1
 801373c:	b2da      	uxtb	r2, r3
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2200      	movs	r2, #0
 8013748:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801374a:	2300      	movs	r3, #0
}
 801374c:	4618      	mov	r0, r3
 801374e:	3714      	adds	r7, #20
 8013750:	46bd      	mov	sp, r7
 8013752:	bd90      	pop	{r4, r7, pc}
 8013754:	0801ca88 	.word	0x0801ca88
 8013758:	0801d128 	.word	0x0801d128
 801375c:	0801cadc 	.word	0x0801cadc

08013760 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b082      	sub	sp, #8
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d106      	bne.n	801377c <tcp_rexmit_fast+0x1c>
 801376e:	4b2a      	ldr	r3, [pc, #168]	; (8013818 <tcp_rexmit_fast+0xb8>)
 8013770:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013774:	4929      	ldr	r1, [pc, #164]	; (801381c <tcp_rexmit_fast+0xbc>)
 8013776:	482a      	ldr	r0, [pc, #168]	; (8013820 <tcp_rexmit_fast+0xc0>)
 8013778:	f005 ff7e 	bl	8019678 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013780:	2b00      	cmp	r3, #0
 8013782:	d044      	beq.n	801380e <tcp_rexmit_fast+0xae>
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	8b5b      	ldrh	r3, [r3, #26]
 8013788:	f003 0304 	and.w	r3, r3, #4
 801378c:	2b00      	cmp	r3, #0
 801378e:	d13e      	bne.n	801380e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	f7ff ff79 	bl	8013688 <tcp_rexmit>
 8013796:	4603      	mov	r3, r0
 8013798:	2b00      	cmp	r3, #0
 801379a:	d138      	bne.n	801380e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80137a8:	4293      	cmp	r3, r2
 80137aa:	bf28      	it	cs
 80137ac:	4613      	movcs	r3, r2
 80137ae:	b29b      	uxth	r3, r3
 80137b0:	0fda      	lsrs	r2, r3, #31
 80137b2:	4413      	add	r3, r2
 80137b4:	105b      	asrs	r3, r3, #1
 80137b6:	b29a      	uxth	r2, r3
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80137c4:	461a      	mov	r2, r3
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137ca:	005b      	lsls	r3, r3, #1
 80137cc:	429a      	cmp	r2, r3
 80137ce:	d206      	bcs.n	80137de <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137d4:	005b      	lsls	r3, r3, #1
 80137d6:	b29a      	uxth	r2, r3
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137e8:	4619      	mov	r1, r3
 80137ea:	0049      	lsls	r1, r1, #1
 80137ec:	440b      	add	r3, r1
 80137ee:	b29b      	uxth	r3, r3
 80137f0:	4413      	add	r3, r2
 80137f2:	b29a      	uxth	r2, r3
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	8b5b      	ldrh	r3, [r3, #26]
 80137fe:	f043 0304 	orr.w	r3, r3, #4
 8013802:	b29a      	uxth	r2, r3
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	2200      	movs	r2, #0
 801380c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801380e:	bf00      	nop
 8013810:	3708      	adds	r7, #8
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}
 8013816:	bf00      	nop
 8013818:	0801ca88 	.word	0x0801ca88
 801381c:	0801d140 	.word	0x0801d140
 8013820:	0801cadc 	.word	0x0801cadc

08013824 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b086      	sub	sp, #24
 8013828:	af00      	add	r7, sp, #0
 801382a:	60f8      	str	r0, [r7, #12]
 801382c:	607b      	str	r3, [r7, #4]
 801382e:	460b      	mov	r3, r1
 8013830:	817b      	strh	r3, [r7, #10]
 8013832:	4613      	mov	r3, r2
 8013834:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013836:	897a      	ldrh	r2, [r7, #10]
 8013838:	893b      	ldrh	r3, [r7, #8]
 801383a:	4413      	add	r3, r2
 801383c:	b29b      	uxth	r3, r3
 801383e:	3314      	adds	r3, #20
 8013840:	b29b      	uxth	r3, r3
 8013842:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013846:	4619      	mov	r1, r3
 8013848:	2022      	movs	r0, #34	; 0x22
 801384a:	f7f9 fca1 	bl	800d190 <pbuf_alloc>
 801384e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d04d      	beq.n	80138f2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013856:	897b      	ldrh	r3, [r7, #10]
 8013858:	3313      	adds	r3, #19
 801385a:	697a      	ldr	r2, [r7, #20]
 801385c:	8952      	ldrh	r2, [r2, #10]
 801385e:	4293      	cmp	r3, r2
 8013860:	db06      	blt.n	8013870 <tcp_output_alloc_header_common+0x4c>
 8013862:	4b26      	ldr	r3, [pc, #152]	; (80138fc <tcp_output_alloc_header_common+0xd8>)
 8013864:	f240 7223 	movw	r2, #1827	; 0x723
 8013868:	4925      	ldr	r1, [pc, #148]	; (8013900 <tcp_output_alloc_header_common+0xdc>)
 801386a:	4826      	ldr	r0, [pc, #152]	; (8013904 <tcp_output_alloc_header_common+0xe0>)
 801386c:	f005 ff04 	bl	8019678 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013870:	697b      	ldr	r3, [r7, #20]
 8013872:	685b      	ldr	r3, [r3, #4]
 8013874:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013876:	8c3b      	ldrh	r3, [r7, #32]
 8013878:	4618      	mov	r0, r3
 801387a:	f7f8 fb6f 	bl	800bf5c <lwip_htons>
 801387e:	4603      	mov	r3, r0
 8013880:	461a      	mov	r2, r3
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013888:	4618      	mov	r0, r3
 801388a:	f7f8 fb67 	bl	800bf5c <lwip_htons>
 801388e:	4603      	mov	r3, r0
 8013890:	461a      	mov	r2, r3
 8013892:	693b      	ldr	r3, [r7, #16]
 8013894:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013896:	693b      	ldr	r3, [r7, #16]
 8013898:	687a      	ldr	r2, [r7, #4]
 801389a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801389c:	68f8      	ldr	r0, [r7, #12]
 801389e:	f7f8 fb72 	bl	800bf86 <lwip_htonl>
 80138a2:	4602      	mov	r2, r0
 80138a4:	693b      	ldr	r3, [r7, #16]
 80138a6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80138a8:	897b      	ldrh	r3, [r7, #10]
 80138aa:	089b      	lsrs	r3, r3, #2
 80138ac:	b29b      	uxth	r3, r3
 80138ae:	3305      	adds	r3, #5
 80138b0:	b29b      	uxth	r3, r3
 80138b2:	031b      	lsls	r3, r3, #12
 80138b4:	b29a      	uxth	r2, r3
 80138b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80138ba:	b29b      	uxth	r3, r3
 80138bc:	4313      	orrs	r3, r2
 80138be:	b29b      	uxth	r3, r3
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7f8 fb4b 	bl	800bf5c <lwip_htons>
 80138c6:	4603      	mov	r3, r0
 80138c8:	461a      	mov	r2, r3
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80138ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80138d0:	4618      	mov	r0, r3
 80138d2:	f7f8 fb43 	bl	800bf5c <lwip_htons>
 80138d6:	4603      	mov	r3, r0
 80138d8:	461a      	mov	r2, r3
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	2200      	movs	r2, #0
 80138e2:	741a      	strb	r2, [r3, #16]
 80138e4:	2200      	movs	r2, #0
 80138e6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80138e8:	693b      	ldr	r3, [r7, #16]
 80138ea:	2200      	movs	r2, #0
 80138ec:	749a      	strb	r2, [r3, #18]
 80138ee:	2200      	movs	r2, #0
 80138f0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80138f2:	697b      	ldr	r3, [r7, #20]
}
 80138f4:	4618      	mov	r0, r3
 80138f6:	3718      	adds	r7, #24
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}
 80138fc:	0801ca88 	.word	0x0801ca88
 8013900:	0801d160 	.word	0x0801d160
 8013904:	0801cadc 	.word	0x0801cadc

08013908 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013908:	b5b0      	push	{r4, r5, r7, lr}
 801390a:	b08a      	sub	sp, #40	; 0x28
 801390c:	af04      	add	r7, sp, #16
 801390e:	60f8      	str	r0, [r7, #12]
 8013910:	607b      	str	r3, [r7, #4]
 8013912:	460b      	mov	r3, r1
 8013914:	817b      	strh	r3, [r7, #10]
 8013916:	4613      	mov	r3, r2
 8013918:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d106      	bne.n	801392e <tcp_output_alloc_header+0x26>
 8013920:	4b15      	ldr	r3, [pc, #84]	; (8013978 <tcp_output_alloc_header+0x70>)
 8013922:	f240 7242 	movw	r2, #1858	; 0x742
 8013926:	4915      	ldr	r1, [pc, #84]	; (801397c <tcp_output_alloc_header+0x74>)
 8013928:	4815      	ldr	r0, [pc, #84]	; (8013980 <tcp_output_alloc_header+0x78>)
 801392a:	f005 fea5 	bl	8019678 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	8adb      	ldrh	r3, [r3, #22]
 8013936:	68fa      	ldr	r2, [r7, #12]
 8013938:	8b12      	ldrh	r2, [r2, #24]
 801393a:	68f9      	ldr	r1, [r7, #12]
 801393c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801393e:	893d      	ldrh	r5, [r7, #8]
 8013940:	897c      	ldrh	r4, [r7, #10]
 8013942:	9103      	str	r1, [sp, #12]
 8013944:	2110      	movs	r1, #16
 8013946:	9102      	str	r1, [sp, #8]
 8013948:	9201      	str	r2, [sp, #4]
 801394a:	9300      	str	r3, [sp, #0]
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	462a      	mov	r2, r5
 8013950:	4621      	mov	r1, r4
 8013952:	f7ff ff67 	bl	8013824 <tcp_output_alloc_header_common>
 8013956:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013958:	697b      	ldr	r3, [r7, #20]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d006      	beq.n	801396c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013962:	68fa      	ldr	r2, [r7, #12]
 8013964:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013966:	441a      	add	r2, r3
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801396c:	697b      	ldr	r3, [r7, #20]
}
 801396e:	4618      	mov	r0, r3
 8013970:	3718      	adds	r7, #24
 8013972:	46bd      	mov	sp, r7
 8013974:	bdb0      	pop	{r4, r5, r7, pc}
 8013976:	bf00      	nop
 8013978:	0801ca88 	.word	0x0801ca88
 801397c:	0801d190 	.word	0x0801d190
 8013980:	0801cadc 	.word	0x0801cadc

08013984 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b088      	sub	sp, #32
 8013988:	af00      	add	r7, sp, #0
 801398a:	60f8      	str	r0, [r7, #12]
 801398c:	60b9      	str	r1, [r7, #8]
 801398e:	4611      	mov	r1, r2
 8013990:	461a      	mov	r2, r3
 8013992:	460b      	mov	r3, r1
 8013994:	71fb      	strb	r3, [r7, #7]
 8013996:	4613      	mov	r3, r2
 8013998:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801399a:	2300      	movs	r3, #0
 801399c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801399e:	68bb      	ldr	r3, [r7, #8]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d106      	bne.n	80139b2 <tcp_output_fill_options+0x2e>
 80139a4:	4b13      	ldr	r3, [pc, #76]	; (80139f4 <tcp_output_fill_options+0x70>)
 80139a6:	f240 7256 	movw	r2, #1878	; 0x756
 80139aa:	4913      	ldr	r1, [pc, #76]	; (80139f8 <tcp_output_fill_options+0x74>)
 80139ac:	4813      	ldr	r0, [pc, #76]	; (80139fc <tcp_output_fill_options+0x78>)
 80139ae:	f005 fe63 	bl	8019678 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	685b      	ldr	r3, [r3, #4]
 80139b6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80139b8:	69bb      	ldr	r3, [r7, #24]
 80139ba:	3314      	adds	r3, #20
 80139bc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80139be:	69bb      	ldr	r3, [r7, #24]
 80139c0:	f103 0214 	add.w	r2, r3, #20
 80139c4:	8bfb      	ldrh	r3, [r7, #30]
 80139c6:	009b      	lsls	r3, r3, #2
 80139c8:	4619      	mov	r1, r3
 80139ca:	79fb      	ldrb	r3, [r7, #7]
 80139cc:	009b      	lsls	r3, r3, #2
 80139ce:	f003 0304 	and.w	r3, r3, #4
 80139d2:	440b      	add	r3, r1
 80139d4:	4413      	add	r3, r2
 80139d6:	697a      	ldr	r2, [r7, #20]
 80139d8:	429a      	cmp	r2, r3
 80139da:	d006      	beq.n	80139ea <tcp_output_fill_options+0x66>
 80139dc:	4b05      	ldr	r3, [pc, #20]	; (80139f4 <tcp_output_fill_options+0x70>)
 80139de:	f240 7275 	movw	r2, #1909	; 0x775
 80139e2:	4907      	ldr	r1, [pc, #28]	; (8013a00 <tcp_output_fill_options+0x7c>)
 80139e4:	4805      	ldr	r0, [pc, #20]	; (80139fc <tcp_output_fill_options+0x78>)
 80139e6:	f005 fe47 	bl	8019678 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80139ea:	bf00      	nop
 80139ec:	3720      	adds	r7, #32
 80139ee:	46bd      	mov	sp, r7
 80139f0:	bd80      	pop	{r7, pc}
 80139f2:	bf00      	nop
 80139f4:	0801ca88 	.word	0x0801ca88
 80139f8:	0801d1b8 	.word	0x0801d1b8
 80139fc:	0801cadc 	.word	0x0801cadc
 8013a00:	0801d0b0 	.word	0x0801d0b0

08013a04 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b08a      	sub	sp, #40	; 0x28
 8013a08:	af04      	add	r7, sp, #16
 8013a0a:	60f8      	str	r0, [r7, #12]
 8013a0c:	60b9      	str	r1, [r7, #8]
 8013a0e:	607a      	str	r2, [r7, #4]
 8013a10:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d106      	bne.n	8013a26 <tcp_output_control_segment+0x22>
 8013a18:	4b1c      	ldr	r3, [pc, #112]	; (8013a8c <tcp_output_control_segment+0x88>)
 8013a1a:	f240 7287 	movw	r2, #1927	; 0x787
 8013a1e:	491c      	ldr	r1, [pc, #112]	; (8013a90 <tcp_output_control_segment+0x8c>)
 8013a20:	481c      	ldr	r0, [pc, #112]	; (8013a94 <tcp_output_control_segment+0x90>)
 8013a22:	f005 fe29 	bl	8019678 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013a26:	683a      	ldr	r2, [r7, #0]
 8013a28:	6879      	ldr	r1, [r7, #4]
 8013a2a:	68f8      	ldr	r0, [r7, #12]
 8013a2c:	f7fe fae8 	bl	8012000 <tcp_route>
 8013a30:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d102      	bne.n	8013a3e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013a38:	23fc      	movs	r3, #252	; 0xfc
 8013a3a:	75fb      	strb	r3, [r7, #23]
 8013a3c:	e01c      	b.n	8013a78 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d006      	beq.n	8013a52 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	7adb      	ldrb	r3, [r3, #11]
 8013a48:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	7a9b      	ldrb	r3, [r3, #10]
 8013a4e:	757b      	strb	r3, [r7, #21]
 8013a50:	e003      	b.n	8013a5a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013a52:	23ff      	movs	r3, #255	; 0xff
 8013a54:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013a56:	2300      	movs	r3, #0
 8013a58:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013a5a:	7dba      	ldrb	r2, [r7, #22]
 8013a5c:	693b      	ldr	r3, [r7, #16]
 8013a5e:	9302      	str	r3, [sp, #8]
 8013a60:	2306      	movs	r3, #6
 8013a62:	9301      	str	r3, [sp, #4]
 8013a64:	7d7b      	ldrb	r3, [r7, #21]
 8013a66:	9300      	str	r3, [sp, #0]
 8013a68:	4613      	mov	r3, r2
 8013a6a:	683a      	ldr	r2, [r7, #0]
 8013a6c:	6879      	ldr	r1, [r7, #4]
 8013a6e:	68b8      	ldr	r0, [r7, #8]
 8013a70:	f004 f962 	bl	8017d38 <ip4_output_if>
 8013a74:	4603      	mov	r3, r0
 8013a76:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013a78:	68b8      	ldr	r0, [r7, #8]
 8013a7a:	f7f9 fe9f 	bl	800d7bc <pbuf_free>
  return err;
 8013a7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013a82:	4618      	mov	r0, r3
 8013a84:	3718      	adds	r7, #24
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd80      	pop	{r7, pc}
 8013a8a:	bf00      	nop
 8013a8c:	0801ca88 	.word	0x0801ca88
 8013a90:	0801d1e0 	.word	0x0801d1e0
 8013a94:	0801cadc 	.word	0x0801cadc

08013a98 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013a98:	b590      	push	{r4, r7, lr}
 8013a9a:	b08b      	sub	sp, #44	; 0x2c
 8013a9c:	af04      	add	r7, sp, #16
 8013a9e:	60f8      	str	r0, [r7, #12]
 8013aa0:	60b9      	str	r1, [r7, #8]
 8013aa2:	607a      	str	r2, [r7, #4]
 8013aa4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013aa6:	683b      	ldr	r3, [r7, #0]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d106      	bne.n	8013aba <tcp_rst+0x22>
 8013aac:	4b1f      	ldr	r3, [pc, #124]	; (8013b2c <tcp_rst+0x94>)
 8013aae:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013ab2:	491f      	ldr	r1, [pc, #124]	; (8013b30 <tcp_rst+0x98>)
 8013ab4:	481f      	ldr	r0, [pc, #124]	; (8013b34 <tcp_rst+0x9c>)
 8013ab6:	f005 fddf 	bl	8019678 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d106      	bne.n	8013ace <tcp_rst+0x36>
 8013ac0:	4b1a      	ldr	r3, [pc, #104]	; (8013b2c <tcp_rst+0x94>)
 8013ac2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013ac6:	491c      	ldr	r1, [pc, #112]	; (8013b38 <tcp_rst+0xa0>)
 8013ac8:	481a      	ldr	r0, [pc, #104]	; (8013b34 <tcp_rst+0x9c>)
 8013aca:	f005 fdd5 	bl	8019678 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013ace:	2300      	movs	r3, #0
 8013ad0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013ad2:	f246 0308 	movw	r3, #24584	; 0x6008
 8013ad6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013ad8:	7dfb      	ldrb	r3, [r7, #23]
 8013ada:	b29c      	uxth	r4, r3
 8013adc:	68b8      	ldr	r0, [r7, #8]
 8013ade:	f7f8 fa52 	bl	800bf86 <lwip_htonl>
 8013ae2:	4602      	mov	r2, r0
 8013ae4:	8abb      	ldrh	r3, [r7, #20]
 8013ae6:	9303      	str	r3, [sp, #12]
 8013ae8:	2314      	movs	r3, #20
 8013aea:	9302      	str	r3, [sp, #8]
 8013aec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013aee:	9301      	str	r3, [sp, #4]
 8013af0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013af2:	9300      	str	r3, [sp, #0]
 8013af4:	4613      	mov	r3, r2
 8013af6:	2200      	movs	r2, #0
 8013af8:	4621      	mov	r1, r4
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f7ff fe92 	bl	8013824 <tcp_output_alloc_header_common>
 8013b00:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d00c      	beq.n	8013b22 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013b08:	7dfb      	ldrb	r3, [r7, #23]
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	6939      	ldr	r1, [r7, #16]
 8013b0e:	68f8      	ldr	r0, [r7, #12]
 8013b10:	f7ff ff38 	bl	8013984 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b16:	683a      	ldr	r2, [r7, #0]
 8013b18:	6939      	ldr	r1, [r7, #16]
 8013b1a:	68f8      	ldr	r0, [r7, #12]
 8013b1c:	f7ff ff72 	bl	8013a04 <tcp_output_control_segment>
 8013b20:	e000      	b.n	8013b24 <tcp_rst+0x8c>
    return;
 8013b22:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013b24:	371c      	adds	r7, #28
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd90      	pop	{r4, r7, pc}
 8013b2a:	bf00      	nop
 8013b2c:	0801ca88 	.word	0x0801ca88
 8013b30:	0801d20c 	.word	0x0801d20c
 8013b34:	0801cadc 	.word	0x0801cadc
 8013b38:	0801d228 	.word	0x0801d228

08013b3c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013b3c:	b590      	push	{r4, r7, lr}
 8013b3e:	b087      	sub	sp, #28
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013b44:	2300      	movs	r3, #0
 8013b46:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013b48:	2300      	movs	r3, #0
 8013b4a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d106      	bne.n	8013b60 <tcp_send_empty_ack+0x24>
 8013b52:	4b28      	ldr	r3, [pc, #160]	; (8013bf4 <tcp_send_empty_ack+0xb8>)
 8013b54:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013b58:	4927      	ldr	r1, [pc, #156]	; (8013bf8 <tcp_send_empty_ack+0xbc>)
 8013b5a:	4828      	ldr	r0, [pc, #160]	; (8013bfc <tcp_send_empty_ack+0xc0>)
 8013b5c:	f005 fd8c 	bl	8019678 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013b60:	7dfb      	ldrb	r3, [r7, #23]
 8013b62:	009b      	lsls	r3, r3, #2
 8013b64:	b2db      	uxtb	r3, r3
 8013b66:	f003 0304 	and.w	r3, r3, #4
 8013b6a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013b6c:	7d7b      	ldrb	r3, [r7, #21]
 8013b6e:	b29c      	uxth	r4, r3
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b74:	4618      	mov	r0, r3
 8013b76:	f7f8 fa06 	bl	800bf86 <lwip_htonl>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	4621      	mov	r1, r4
 8013b80:	6878      	ldr	r0, [r7, #4]
 8013b82:	f7ff fec1 	bl	8013908 <tcp_output_alloc_header>
 8013b86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013b88:	693b      	ldr	r3, [r7, #16]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d109      	bne.n	8013ba2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	8b5b      	ldrh	r3, [r3, #26]
 8013b92:	f043 0303 	orr.w	r3, r3, #3
 8013b96:	b29a      	uxth	r2, r3
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013b9c:	f06f 0301 	mvn.w	r3, #1
 8013ba0:	e023      	b.n	8013bea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013ba2:	7dbb      	ldrb	r3, [r7, #22]
 8013ba4:	7dfa      	ldrb	r2, [r7, #23]
 8013ba6:	6939      	ldr	r1, [r7, #16]
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f7ff feeb 	bl	8013984 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013bae:	687a      	ldr	r2, [r7, #4]
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	3304      	adds	r3, #4
 8013bb4:	6939      	ldr	r1, [r7, #16]
 8013bb6:	6878      	ldr	r0, [r7, #4]
 8013bb8:	f7ff ff24 	bl	8013a04 <tcp_output_control_segment>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d007      	beq.n	8013bd8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	8b5b      	ldrh	r3, [r3, #26]
 8013bcc:	f043 0303 	orr.w	r3, r3, #3
 8013bd0:	b29a      	uxth	r2, r3
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	835a      	strh	r2, [r3, #26]
 8013bd6:	e006      	b.n	8013be6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	8b5b      	ldrh	r3, [r3, #26]
 8013bdc:	f023 0303 	bic.w	r3, r3, #3
 8013be0:	b29a      	uxth	r2, r3
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013bea:	4618      	mov	r0, r3
 8013bec:	371c      	adds	r7, #28
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd90      	pop	{r4, r7, pc}
 8013bf2:	bf00      	nop
 8013bf4:	0801ca88 	.word	0x0801ca88
 8013bf8:	0801d244 	.word	0x0801d244
 8013bfc:	0801cadc 	.word	0x0801cadc

08013c00 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013c00:	b590      	push	{r4, r7, lr}
 8013c02:	b087      	sub	sp, #28
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013c08:	2300      	movs	r3, #0
 8013c0a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d106      	bne.n	8013c20 <tcp_keepalive+0x20>
 8013c12:	4b18      	ldr	r3, [pc, #96]	; (8013c74 <tcp_keepalive+0x74>)
 8013c14:	f640 0224 	movw	r2, #2084	; 0x824
 8013c18:	4917      	ldr	r1, [pc, #92]	; (8013c78 <tcp_keepalive+0x78>)
 8013c1a:	4818      	ldr	r0, [pc, #96]	; (8013c7c <tcp_keepalive+0x7c>)
 8013c1c:	f005 fd2c 	bl	8019678 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013c20:	7dfb      	ldrb	r3, [r7, #23]
 8013c22:	b29c      	uxth	r4, r3
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c28:	3b01      	subs	r3, #1
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f7f8 f9ab 	bl	800bf86 <lwip_htonl>
 8013c30:	4603      	mov	r3, r0
 8013c32:	2200      	movs	r2, #0
 8013c34:	4621      	mov	r1, r4
 8013c36:	6878      	ldr	r0, [r7, #4]
 8013c38:	f7ff fe66 	bl	8013908 <tcp_output_alloc_header>
 8013c3c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013c3e:	693b      	ldr	r3, [r7, #16]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d102      	bne.n	8013c4a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c48:	e010      	b.n	8013c6c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013c4a:	7dfb      	ldrb	r3, [r7, #23]
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	6939      	ldr	r1, [r7, #16]
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f7ff fe97 	bl	8013984 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013c56:	687a      	ldr	r2, [r7, #4]
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	3304      	adds	r3, #4
 8013c5c:	6939      	ldr	r1, [r7, #16]
 8013c5e:	6878      	ldr	r0, [r7, #4]
 8013c60:	f7ff fed0 	bl	8013a04 <tcp_output_control_segment>
 8013c64:	4603      	mov	r3, r0
 8013c66:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	371c      	adds	r7, #28
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd90      	pop	{r4, r7, pc}
 8013c74:	0801ca88 	.word	0x0801ca88
 8013c78:	0801d264 	.word	0x0801d264
 8013c7c:	0801cadc 	.word	0x0801cadc

08013c80 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013c80:	b590      	push	{r4, r7, lr}
 8013c82:	b08b      	sub	sp, #44	; 0x2c
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013c88:	2300      	movs	r3, #0
 8013c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d106      	bne.n	8013ca2 <tcp_zero_window_probe+0x22>
 8013c94:	4b4c      	ldr	r3, [pc, #304]	; (8013dc8 <tcp_zero_window_probe+0x148>)
 8013c96:	f640 024f 	movw	r2, #2127	; 0x84f
 8013c9a:	494c      	ldr	r1, [pc, #304]	; (8013dcc <tcp_zero_window_probe+0x14c>)
 8013c9c:	484c      	ldr	r0, [pc, #304]	; (8013dd0 <tcp_zero_window_probe+0x150>)
 8013c9e:	f005 fceb 	bl	8019678 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ca6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013ca8:	6a3b      	ldr	r3, [r7, #32]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d101      	bne.n	8013cb2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013cae:	2300      	movs	r3, #0
 8013cb0:	e086      	b.n	8013dc0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013cb8:	2bff      	cmp	r3, #255	; 0xff
 8013cba:	d007      	beq.n	8013ccc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013cc2:	3301      	adds	r3, #1
 8013cc4:	b2da      	uxtb	r2, r3
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013ccc:	6a3b      	ldr	r3, [r7, #32]
 8013cce:	68db      	ldr	r3, [r3, #12]
 8013cd0:	899b      	ldrh	r3, [r3, #12]
 8013cd2:	b29b      	uxth	r3, r3
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7f8 f941 	bl	800bf5c <lwip_htons>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	b2db      	uxtb	r3, r3
 8013cde:	f003 0301 	and.w	r3, r3, #1
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d005      	beq.n	8013cf2 <tcp_zero_window_probe+0x72>
 8013ce6:	6a3b      	ldr	r3, [r7, #32]
 8013ce8:	891b      	ldrh	r3, [r3, #8]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d101      	bne.n	8013cf2 <tcp_zero_window_probe+0x72>
 8013cee:	2301      	movs	r3, #1
 8013cf0:	e000      	b.n	8013cf4 <tcp_zero_window_probe+0x74>
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013cf6:	7ffb      	ldrb	r3, [r7, #31]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	bf0c      	ite	eq
 8013cfc:	2301      	moveq	r3, #1
 8013cfe:	2300      	movne	r3, #0
 8013d00:	b2db      	uxtb	r3, r3
 8013d02:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d08:	b299      	uxth	r1, r3
 8013d0a:	6a3b      	ldr	r3, [r7, #32]
 8013d0c:	68db      	ldr	r3, [r3, #12]
 8013d0e:	685b      	ldr	r3, [r3, #4]
 8013d10:	8bba      	ldrh	r2, [r7, #28]
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f7ff fdf8 	bl	8013908 <tcp_output_alloc_header>
 8013d18:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013d1a:	69bb      	ldr	r3, [r7, #24]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d102      	bne.n	8013d26 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d24:	e04c      	b.n	8013dc0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013d26:	69bb      	ldr	r3, [r7, #24]
 8013d28:	685b      	ldr	r3, [r3, #4]
 8013d2a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013d2c:	7ffb      	ldrb	r3, [r7, #31]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d011      	beq.n	8013d56 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013d32:	697b      	ldr	r3, [r7, #20]
 8013d34:	899b      	ldrh	r3, [r3, #12]
 8013d36:	b29b      	uxth	r3, r3
 8013d38:	b21b      	sxth	r3, r3
 8013d3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013d3e:	b21c      	sxth	r4, r3
 8013d40:	2011      	movs	r0, #17
 8013d42:	f7f8 f90b 	bl	800bf5c <lwip_htons>
 8013d46:	4603      	mov	r3, r0
 8013d48:	b21b      	sxth	r3, r3
 8013d4a:	4323      	orrs	r3, r4
 8013d4c:	b21b      	sxth	r3, r3
 8013d4e:	b29a      	uxth	r2, r3
 8013d50:	697b      	ldr	r3, [r7, #20]
 8013d52:	819a      	strh	r2, [r3, #12]
 8013d54:	e010      	b.n	8013d78 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013d56:	69bb      	ldr	r3, [r7, #24]
 8013d58:	685b      	ldr	r3, [r3, #4]
 8013d5a:	3314      	adds	r3, #20
 8013d5c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013d5e:	6a3b      	ldr	r3, [r7, #32]
 8013d60:	6858      	ldr	r0, [r3, #4]
 8013d62:	6a3b      	ldr	r3, [r7, #32]
 8013d64:	685b      	ldr	r3, [r3, #4]
 8013d66:	891a      	ldrh	r2, [r3, #8]
 8013d68:	6a3b      	ldr	r3, [r7, #32]
 8013d6a:	891b      	ldrh	r3, [r3, #8]
 8013d6c:	1ad3      	subs	r3, r2, r3
 8013d6e:	b29b      	uxth	r3, r3
 8013d70:	2201      	movs	r2, #1
 8013d72:	6939      	ldr	r1, [r7, #16]
 8013d74:	f7f9 ff28 	bl	800dbc8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013d78:	6a3b      	ldr	r3, [r7, #32]
 8013d7a:	68db      	ldr	r3, [r3, #12]
 8013d7c:	685b      	ldr	r3, [r3, #4]
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7f8 f901 	bl	800bf86 <lwip_htonl>
 8013d84:	4603      	mov	r3, r0
 8013d86:	3301      	adds	r3, #1
 8013d88:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	1ad3      	subs	r3, r2, r3
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	da02      	bge.n	8013d9c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	68fa      	ldr	r2, [r7, #12]
 8013d9a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013da0:	2200      	movs	r2, #0
 8013da2:	69b9      	ldr	r1, [r7, #24]
 8013da4:	6878      	ldr	r0, [r7, #4]
 8013da6:	f7ff fded 	bl	8013984 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013daa:	687a      	ldr	r2, [r7, #4]
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	3304      	adds	r3, #4
 8013db0:	69b9      	ldr	r1, [r7, #24]
 8013db2:	6878      	ldr	r0, [r7, #4]
 8013db4:	f7ff fe26 	bl	8013a04 <tcp_output_control_segment>
 8013db8:	4603      	mov	r3, r0
 8013dba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013dbc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	372c      	adds	r7, #44	; 0x2c
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	bd90      	pop	{r4, r7, pc}
 8013dc8:	0801ca88 	.word	0x0801ca88
 8013dcc:	0801d280 	.word	0x0801d280
 8013dd0:	0801cadc 	.word	0x0801cadc

08013dd4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b082      	sub	sp, #8
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013ddc:	f7f9 ffe2 	bl	800dda4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013de0:	4b0a      	ldr	r3, [pc, #40]	; (8013e0c <tcpip_tcp_timer+0x38>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d103      	bne.n	8013df0 <tcpip_tcp_timer+0x1c>
 8013de8:	4b09      	ldr	r3, [pc, #36]	; (8013e10 <tcpip_tcp_timer+0x3c>)
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d005      	beq.n	8013dfc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013df0:	2200      	movs	r2, #0
 8013df2:	4908      	ldr	r1, [pc, #32]	; (8013e14 <tcpip_tcp_timer+0x40>)
 8013df4:	20fa      	movs	r0, #250	; 0xfa
 8013df6:	f000 f8f3 	bl	8013fe0 <sys_timeout>
 8013dfa:	e003      	b.n	8013e04 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013dfc:	4b06      	ldr	r3, [pc, #24]	; (8013e18 <tcpip_tcp_timer+0x44>)
 8013dfe:	2200      	movs	r2, #0
 8013e00:	601a      	str	r2, [r3, #0]
  }
}
 8013e02:	bf00      	nop
 8013e04:	bf00      	nop
 8013e06:	3708      	adds	r7, #8
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}
 8013e0c:	2000cf74 	.word	0x2000cf74
 8013e10:	2000cf78 	.word	0x2000cf78
 8013e14:	08013dd5 	.word	0x08013dd5
 8013e18:	2000cfc0 	.word	0x2000cfc0

08013e1c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013e20:	4b0a      	ldr	r3, [pc, #40]	; (8013e4c <tcp_timer_needed+0x30>)
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d10f      	bne.n	8013e48 <tcp_timer_needed+0x2c>
 8013e28:	4b09      	ldr	r3, [pc, #36]	; (8013e50 <tcp_timer_needed+0x34>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d103      	bne.n	8013e38 <tcp_timer_needed+0x1c>
 8013e30:	4b08      	ldr	r3, [pc, #32]	; (8013e54 <tcp_timer_needed+0x38>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d007      	beq.n	8013e48 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013e38:	4b04      	ldr	r3, [pc, #16]	; (8013e4c <tcp_timer_needed+0x30>)
 8013e3a:	2201      	movs	r2, #1
 8013e3c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013e3e:	2200      	movs	r2, #0
 8013e40:	4905      	ldr	r1, [pc, #20]	; (8013e58 <tcp_timer_needed+0x3c>)
 8013e42:	20fa      	movs	r0, #250	; 0xfa
 8013e44:	f000 f8cc 	bl	8013fe0 <sys_timeout>
  }
}
 8013e48:	bf00      	nop
 8013e4a:	bd80      	pop	{r7, pc}
 8013e4c:	2000cfc0 	.word	0x2000cfc0
 8013e50:	2000cf74 	.word	0x2000cf74
 8013e54:	2000cf78 	.word	0x2000cf78
 8013e58:	08013dd5 	.word	0x08013dd5

08013e5c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b086      	sub	sp, #24
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	60f8      	str	r0, [r7, #12]
 8013e64:	60b9      	str	r1, [r7, #8]
 8013e66:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013e68:	200a      	movs	r0, #10
 8013e6a:	f7f8 fd4f 	bl	800c90c <memp_malloc>
 8013e6e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013e70:	693b      	ldr	r3, [r7, #16]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d109      	bne.n	8013e8a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013e76:	693b      	ldr	r3, [r7, #16]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d151      	bne.n	8013f20 <sys_timeout_abs+0xc4>
 8013e7c:	4b2a      	ldr	r3, [pc, #168]	; (8013f28 <sys_timeout_abs+0xcc>)
 8013e7e:	22be      	movs	r2, #190	; 0xbe
 8013e80:	492a      	ldr	r1, [pc, #168]	; (8013f2c <sys_timeout_abs+0xd0>)
 8013e82:	482b      	ldr	r0, [pc, #172]	; (8013f30 <sys_timeout_abs+0xd4>)
 8013e84:	f005 fbf8 	bl	8019678 <iprintf>
    return;
 8013e88:	e04a      	b.n	8013f20 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	68ba      	ldr	r2, [r7, #8]
 8013e94:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013e96:	693b      	ldr	r3, [r7, #16]
 8013e98:	687a      	ldr	r2, [r7, #4]
 8013e9a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013e9c:	693b      	ldr	r3, [r7, #16]
 8013e9e:	68fa      	ldr	r2, [r7, #12]
 8013ea0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013ea2:	4b24      	ldr	r3, [pc, #144]	; (8013f34 <sys_timeout_abs+0xd8>)
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d103      	bne.n	8013eb2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013eaa:	4a22      	ldr	r2, [pc, #136]	; (8013f34 <sys_timeout_abs+0xd8>)
 8013eac:	693b      	ldr	r3, [r7, #16]
 8013eae:	6013      	str	r3, [r2, #0]
    return;
 8013eb0:	e037      	b.n	8013f22 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013eb2:	693b      	ldr	r3, [r7, #16]
 8013eb4:	685a      	ldr	r2, [r3, #4]
 8013eb6:	4b1f      	ldr	r3, [pc, #124]	; (8013f34 <sys_timeout_abs+0xd8>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	685b      	ldr	r3, [r3, #4]
 8013ebc:	1ad3      	subs	r3, r2, r3
 8013ebe:	0fdb      	lsrs	r3, r3, #31
 8013ec0:	f003 0301 	and.w	r3, r3, #1
 8013ec4:	b2db      	uxtb	r3, r3
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d007      	beq.n	8013eda <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013eca:	4b1a      	ldr	r3, [pc, #104]	; (8013f34 <sys_timeout_abs+0xd8>)
 8013ecc:	681a      	ldr	r2, [r3, #0]
 8013ece:	693b      	ldr	r3, [r7, #16]
 8013ed0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013ed2:	4a18      	ldr	r2, [pc, #96]	; (8013f34 <sys_timeout_abs+0xd8>)
 8013ed4:	693b      	ldr	r3, [r7, #16]
 8013ed6:	6013      	str	r3, [r2, #0]
 8013ed8:	e023      	b.n	8013f22 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013eda:	4b16      	ldr	r3, [pc, #88]	; (8013f34 <sys_timeout_abs+0xd8>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	617b      	str	r3, [r7, #20]
 8013ee0:	e01a      	b.n	8013f18 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013ee2:	697b      	ldr	r3, [r7, #20]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d00b      	beq.n	8013f02 <sys_timeout_abs+0xa6>
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	685a      	ldr	r2, [r3, #4]
 8013eee:	697b      	ldr	r3, [r7, #20]
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	685b      	ldr	r3, [r3, #4]
 8013ef4:	1ad3      	subs	r3, r2, r3
 8013ef6:	0fdb      	lsrs	r3, r3, #31
 8013ef8:	f003 0301 	and.w	r3, r3, #1
 8013efc:	b2db      	uxtb	r3, r3
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d007      	beq.n	8013f12 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013f02:	697b      	ldr	r3, [r7, #20]
 8013f04:	681a      	ldr	r2, [r3, #0]
 8013f06:	693b      	ldr	r3, [r7, #16]
 8013f08:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013f0a:	697b      	ldr	r3, [r7, #20]
 8013f0c:	693a      	ldr	r2, [r7, #16]
 8013f0e:	601a      	str	r2, [r3, #0]
        break;
 8013f10:	e007      	b.n	8013f22 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013f12:	697b      	ldr	r3, [r7, #20]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	617b      	str	r3, [r7, #20]
 8013f18:	697b      	ldr	r3, [r7, #20]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d1e1      	bne.n	8013ee2 <sys_timeout_abs+0x86>
 8013f1e:	e000      	b.n	8013f22 <sys_timeout_abs+0xc6>
    return;
 8013f20:	bf00      	nop
      }
    }
  }
}
 8013f22:	3718      	adds	r7, #24
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd80      	pop	{r7, pc}
 8013f28:	0801d2a4 	.word	0x0801d2a4
 8013f2c:	0801d2d8 	.word	0x0801d2d8
 8013f30:	0801d318 	.word	0x0801d318
 8013f34:	2000cfb8 	.word	0x2000cfb8

08013f38 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b086      	sub	sp, #24
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013f44:	697b      	ldr	r3, [r7, #20]
 8013f46:	685b      	ldr	r3, [r3, #4]
 8013f48:	4798      	blx	r3

  now = sys_now();
 8013f4a:	f7f0 fc69 	bl	8004820 <sys_now>
 8013f4e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013f50:	697b      	ldr	r3, [r7, #20]
 8013f52:	681a      	ldr	r2, [r3, #0]
 8013f54:	4b0f      	ldr	r3, [pc, #60]	; (8013f94 <lwip_cyclic_timer+0x5c>)
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	4413      	add	r3, r2
 8013f5a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013f5c:	68fa      	ldr	r2, [r7, #12]
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	1ad3      	subs	r3, r2, r3
 8013f62:	0fdb      	lsrs	r3, r3, #31
 8013f64:	f003 0301 	and.w	r3, r3, #1
 8013f68:	b2db      	uxtb	r3, r3
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d009      	beq.n	8013f82 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013f6e:	697b      	ldr	r3, [r7, #20]
 8013f70:	681a      	ldr	r2, [r3, #0]
 8013f72:	693b      	ldr	r3, [r7, #16]
 8013f74:	4413      	add	r3, r2
 8013f76:	687a      	ldr	r2, [r7, #4]
 8013f78:	4907      	ldr	r1, [pc, #28]	; (8013f98 <lwip_cyclic_timer+0x60>)
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f7ff ff6e 	bl	8013e5c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013f80:	e004      	b.n	8013f8c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013f82:	687a      	ldr	r2, [r7, #4]
 8013f84:	4904      	ldr	r1, [pc, #16]	; (8013f98 <lwip_cyclic_timer+0x60>)
 8013f86:	68f8      	ldr	r0, [r7, #12]
 8013f88:	f7ff ff68 	bl	8013e5c <sys_timeout_abs>
}
 8013f8c:	bf00      	nop
 8013f8e:	3718      	adds	r7, #24
 8013f90:	46bd      	mov	sp, r7
 8013f92:	bd80      	pop	{r7, pc}
 8013f94:	2000cfbc 	.word	0x2000cfbc
 8013f98:	08013f39 	.word	0x08013f39

08013f9c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b082      	sub	sp, #8
 8013fa0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013fa2:	2301      	movs	r3, #1
 8013fa4:	607b      	str	r3, [r7, #4]
 8013fa6:	e00e      	b.n	8013fc6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013fa8:	4a0b      	ldr	r2, [pc, #44]	; (8013fd8 <sys_timeouts_init+0x3c>)
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	00db      	lsls	r3, r3, #3
 8013fb4:	4a08      	ldr	r2, [pc, #32]	; (8013fd8 <sys_timeouts_init+0x3c>)
 8013fb6:	4413      	add	r3, r2
 8013fb8:	461a      	mov	r2, r3
 8013fba:	4908      	ldr	r1, [pc, #32]	; (8013fdc <sys_timeouts_init+0x40>)
 8013fbc:	f000 f810 	bl	8013fe0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	3301      	adds	r3, #1
 8013fc4:	607b      	str	r3, [r7, #4]
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	2b04      	cmp	r3, #4
 8013fca:	d9ed      	bls.n	8013fa8 <sys_timeouts_init+0xc>
  }
}
 8013fcc:	bf00      	nop
 8013fce:	bf00      	nop
 8013fd0:	3708      	adds	r7, #8
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	0801e2dc 	.word	0x0801e2dc
 8013fdc:	08013f39 	.word	0x08013f39

08013fe0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b086      	sub	sp, #24
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	60f8      	str	r0, [r7, #12]
 8013fe8:	60b9      	str	r1, [r7, #8]
 8013fea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013ff2:	d306      	bcc.n	8014002 <sys_timeout+0x22>
 8013ff4:	4b0a      	ldr	r3, [pc, #40]	; (8014020 <sys_timeout+0x40>)
 8013ff6:	f240 1229 	movw	r2, #297	; 0x129
 8013ffa:	490a      	ldr	r1, [pc, #40]	; (8014024 <sys_timeout+0x44>)
 8013ffc:	480a      	ldr	r0, [pc, #40]	; (8014028 <sys_timeout+0x48>)
 8013ffe:	f005 fb3b 	bl	8019678 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014002:	f7f0 fc0d 	bl	8004820 <sys_now>
 8014006:	4602      	mov	r2, r0
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	4413      	add	r3, r2
 801400c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801400e:	687a      	ldr	r2, [r7, #4]
 8014010:	68b9      	ldr	r1, [r7, #8]
 8014012:	6978      	ldr	r0, [r7, #20]
 8014014:	f7ff ff22 	bl	8013e5c <sys_timeout_abs>
#endif
}
 8014018:	bf00      	nop
 801401a:	3718      	adds	r7, #24
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}
 8014020:	0801d2a4 	.word	0x0801d2a4
 8014024:	0801d340 	.word	0x0801d340
 8014028:	0801d318 	.word	0x0801d318

0801402c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b084      	sub	sp, #16
 8014030:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014032:	f7f0 fbf5 	bl	8004820 <sys_now>
 8014036:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014038:	4b17      	ldr	r3, [pc, #92]	; (8014098 <sys_check_timeouts+0x6c>)
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801403e:	68bb      	ldr	r3, [r7, #8]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d022      	beq.n	801408a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	685b      	ldr	r3, [r3, #4]
 8014048:	68fa      	ldr	r2, [r7, #12]
 801404a:	1ad3      	subs	r3, r2, r3
 801404c:	0fdb      	lsrs	r3, r3, #31
 801404e:	f003 0301 	and.w	r3, r3, #1
 8014052:	b2db      	uxtb	r3, r3
 8014054:	2b00      	cmp	r3, #0
 8014056:	d11a      	bne.n	801408e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	4a0e      	ldr	r2, [pc, #56]	; (8014098 <sys_check_timeouts+0x6c>)
 801405e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014060:	68bb      	ldr	r3, [r7, #8]
 8014062:	689b      	ldr	r3, [r3, #8]
 8014064:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	68db      	ldr	r3, [r3, #12]
 801406a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801406c:	68bb      	ldr	r3, [r7, #8]
 801406e:	685b      	ldr	r3, [r3, #4]
 8014070:	4a0a      	ldr	r2, [pc, #40]	; (801409c <sys_check_timeouts+0x70>)
 8014072:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014074:	68b9      	ldr	r1, [r7, #8]
 8014076:	200a      	movs	r0, #10
 8014078:	f7f8 fcbe 	bl	800c9f8 <memp_free>
    if (handler != NULL) {
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d0da      	beq.n	8014038 <sys_check_timeouts+0xc>
      handler(arg);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	6838      	ldr	r0, [r7, #0]
 8014086:	4798      	blx	r3
  do {
 8014088:	e7d6      	b.n	8014038 <sys_check_timeouts+0xc>
      return;
 801408a:	bf00      	nop
 801408c:	e000      	b.n	8014090 <sys_check_timeouts+0x64>
      return;
 801408e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014090:	3710      	adds	r7, #16
 8014092:	46bd      	mov	sp, r7
 8014094:	bd80      	pop	{r7, pc}
 8014096:	bf00      	nop
 8014098:	2000cfb8 	.word	0x2000cfb8
 801409c:	2000cfbc 	.word	0x2000cfbc

080140a0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b082      	sub	sp, #8
 80140a4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80140a6:	4b16      	ldr	r3, [pc, #88]	; (8014100 <sys_timeouts_sleeptime+0x60>)
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d102      	bne.n	80140b4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80140ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80140b2:	e020      	b.n	80140f6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80140b4:	f7f0 fbb4 	bl	8004820 <sys_now>
 80140b8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80140ba:	4b11      	ldr	r3, [pc, #68]	; (8014100 <sys_timeouts_sleeptime+0x60>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	685a      	ldr	r2, [r3, #4]
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	1ad3      	subs	r3, r2, r3
 80140c4:	0fdb      	lsrs	r3, r3, #31
 80140c6:	f003 0301 	and.w	r3, r3, #1
 80140ca:	b2db      	uxtb	r3, r3
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d001      	beq.n	80140d4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80140d0:	2300      	movs	r3, #0
 80140d2:	e010      	b.n	80140f6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80140d4:	4b0a      	ldr	r3, [pc, #40]	; (8014100 <sys_timeouts_sleeptime+0x60>)
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	685a      	ldr	r2, [r3, #4]
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	1ad3      	subs	r3, r2, r3
 80140de:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	da06      	bge.n	80140f4 <sys_timeouts_sleeptime+0x54>
 80140e6:	4b07      	ldr	r3, [pc, #28]	; (8014104 <sys_timeouts_sleeptime+0x64>)
 80140e8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80140ec:	4906      	ldr	r1, [pc, #24]	; (8014108 <sys_timeouts_sleeptime+0x68>)
 80140ee:	4807      	ldr	r0, [pc, #28]	; (801410c <sys_timeouts_sleeptime+0x6c>)
 80140f0:	f005 fac2 	bl	8019678 <iprintf>
    return ret;
 80140f4:	683b      	ldr	r3, [r7, #0]
  }
}
 80140f6:	4618      	mov	r0, r3
 80140f8:	3708      	adds	r7, #8
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	bf00      	nop
 8014100:	2000cfb8 	.word	0x2000cfb8
 8014104:	0801d2a4 	.word	0x0801d2a4
 8014108:	0801d378 	.word	0x0801d378
 801410c:	0801d318 	.word	0x0801d318

08014110 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014114:	f005 fb3e 	bl	8019794 <rand>
 8014118:	4603      	mov	r3, r0
 801411a:	b29b      	uxth	r3, r3
 801411c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014120:	b29b      	uxth	r3, r3
 8014122:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014126:	b29a      	uxth	r2, r3
 8014128:	4b01      	ldr	r3, [pc, #4]	; (8014130 <udp_init+0x20>)
 801412a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801412c:	bf00      	nop
 801412e:	bd80      	pop	{r7, pc}
 8014130:	2000002c 	.word	0x2000002c

08014134 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014134:	b480      	push	{r7}
 8014136:	b083      	sub	sp, #12
 8014138:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801413a:	2300      	movs	r3, #0
 801413c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801413e:	4b17      	ldr	r3, [pc, #92]	; (801419c <udp_new_port+0x68>)
 8014140:	881b      	ldrh	r3, [r3, #0]
 8014142:	1c5a      	adds	r2, r3, #1
 8014144:	b291      	uxth	r1, r2
 8014146:	4a15      	ldr	r2, [pc, #84]	; (801419c <udp_new_port+0x68>)
 8014148:	8011      	strh	r1, [r2, #0]
 801414a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801414e:	4293      	cmp	r3, r2
 8014150:	d103      	bne.n	801415a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014152:	4b12      	ldr	r3, [pc, #72]	; (801419c <udp_new_port+0x68>)
 8014154:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014158:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801415a:	4b11      	ldr	r3, [pc, #68]	; (80141a0 <udp_new_port+0x6c>)
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	603b      	str	r3, [r7, #0]
 8014160:	e011      	b.n	8014186 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014162:	683b      	ldr	r3, [r7, #0]
 8014164:	8a5a      	ldrh	r2, [r3, #18]
 8014166:	4b0d      	ldr	r3, [pc, #52]	; (801419c <udp_new_port+0x68>)
 8014168:	881b      	ldrh	r3, [r3, #0]
 801416a:	429a      	cmp	r2, r3
 801416c:	d108      	bne.n	8014180 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801416e:	88fb      	ldrh	r3, [r7, #6]
 8014170:	3301      	adds	r3, #1
 8014172:	80fb      	strh	r3, [r7, #6]
 8014174:	88fb      	ldrh	r3, [r7, #6]
 8014176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801417a:	d3e0      	bcc.n	801413e <udp_new_port+0xa>
        return 0;
 801417c:	2300      	movs	r3, #0
 801417e:	e007      	b.n	8014190 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	68db      	ldr	r3, [r3, #12]
 8014184:	603b      	str	r3, [r7, #0]
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d1ea      	bne.n	8014162 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801418c:	4b03      	ldr	r3, [pc, #12]	; (801419c <udp_new_port+0x68>)
 801418e:	881b      	ldrh	r3, [r3, #0]
}
 8014190:	4618      	mov	r0, r3
 8014192:	370c      	adds	r7, #12
 8014194:	46bd      	mov	sp, r7
 8014196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419a:	4770      	bx	lr
 801419c:	2000002c 	.word	0x2000002c
 80141a0:	2000cfc4 	.word	0x2000cfc4

080141a4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b084      	sub	sp, #16
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	60f8      	str	r0, [r7, #12]
 80141ac:	60b9      	str	r1, [r7, #8]
 80141ae:	4613      	mov	r3, r2
 80141b0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d105      	bne.n	80141c4 <udp_input_local_match+0x20>
 80141b8:	4b27      	ldr	r3, [pc, #156]	; (8014258 <udp_input_local_match+0xb4>)
 80141ba:	2287      	movs	r2, #135	; 0x87
 80141bc:	4927      	ldr	r1, [pc, #156]	; (801425c <udp_input_local_match+0xb8>)
 80141be:	4828      	ldr	r0, [pc, #160]	; (8014260 <udp_input_local_match+0xbc>)
 80141c0:	f005 fa5a 	bl	8019678 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80141c4:	68bb      	ldr	r3, [r7, #8]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d105      	bne.n	80141d6 <udp_input_local_match+0x32>
 80141ca:	4b23      	ldr	r3, [pc, #140]	; (8014258 <udp_input_local_match+0xb4>)
 80141cc:	2288      	movs	r2, #136	; 0x88
 80141ce:	4925      	ldr	r1, [pc, #148]	; (8014264 <udp_input_local_match+0xc0>)
 80141d0:	4823      	ldr	r0, [pc, #140]	; (8014260 <udp_input_local_match+0xbc>)
 80141d2:	f005 fa51 	bl	8019678 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	7a1b      	ldrb	r3, [r3, #8]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d00b      	beq.n	80141f6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	7a1a      	ldrb	r2, [r3, #8]
 80141e2:	4b21      	ldr	r3, [pc, #132]	; (8014268 <udp_input_local_match+0xc4>)
 80141e4:	685b      	ldr	r3, [r3, #4]
 80141e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80141ea:	3301      	adds	r3, #1
 80141ec:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80141ee:	429a      	cmp	r2, r3
 80141f0:	d001      	beq.n	80141f6 <udp_input_local_match+0x52>
    return 0;
 80141f2:	2300      	movs	r3, #0
 80141f4:	e02b      	b.n	801424e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80141f6:	79fb      	ldrb	r3, [r7, #7]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d018      	beq.n	801422e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d013      	beq.n	801422a <udp_input_local_match+0x86>
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d00f      	beq.n	801422a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801420a:	4b17      	ldr	r3, [pc, #92]	; (8014268 <udp_input_local_match+0xc4>)
 801420c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801420e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014212:	d00a      	beq.n	801422a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	681a      	ldr	r2, [r3, #0]
 8014218:	4b13      	ldr	r3, [pc, #76]	; (8014268 <udp_input_local_match+0xc4>)
 801421a:	695b      	ldr	r3, [r3, #20]
 801421c:	405a      	eors	r2, r3
 801421e:	68bb      	ldr	r3, [r7, #8]
 8014220:	3308      	adds	r3, #8
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014226:	2b00      	cmp	r3, #0
 8014228:	d110      	bne.n	801424c <udp_input_local_match+0xa8>
          return 1;
 801422a:	2301      	movs	r3, #1
 801422c:	e00f      	b.n	801424e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d009      	beq.n	8014248 <udp_input_local_match+0xa4>
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d005      	beq.n	8014248 <udp_input_local_match+0xa4>
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	681a      	ldr	r2, [r3, #0]
 8014240:	4b09      	ldr	r3, [pc, #36]	; (8014268 <udp_input_local_match+0xc4>)
 8014242:	695b      	ldr	r3, [r3, #20]
 8014244:	429a      	cmp	r2, r3
 8014246:	d101      	bne.n	801424c <udp_input_local_match+0xa8>
        return 1;
 8014248:	2301      	movs	r3, #1
 801424a:	e000      	b.n	801424e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801424c:	2300      	movs	r3, #0
}
 801424e:	4618      	mov	r0, r3
 8014250:	3710      	adds	r7, #16
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}
 8014256:	bf00      	nop
 8014258:	0801d38c 	.word	0x0801d38c
 801425c:	0801d3bc 	.word	0x0801d3bc
 8014260:	0801d3e0 	.word	0x0801d3e0
 8014264:	0801d408 	.word	0x0801d408
 8014268:	200097f4 	.word	0x200097f4

0801426c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801426c:	b590      	push	{r4, r7, lr}
 801426e:	b08d      	sub	sp, #52	; 0x34
 8014270:	af02      	add	r7, sp, #8
 8014272:	6078      	str	r0, [r7, #4]
 8014274:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014276:	2300      	movs	r3, #0
 8014278:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d105      	bne.n	801428c <udp_input+0x20>
 8014280:	4b7c      	ldr	r3, [pc, #496]	; (8014474 <udp_input+0x208>)
 8014282:	22cf      	movs	r2, #207	; 0xcf
 8014284:	497c      	ldr	r1, [pc, #496]	; (8014478 <udp_input+0x20c>)
 8014286:	487d      	ldr	r0, [pc, #500]	; (801447c <udp_input+0x210>)
 8014288:	f005 f9f6 	bl	8019678 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801428c:	683b      	ldr	r3, [r7, #0]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d105      	bne.n	801429e <udp_input+0x32>
 8014292:	4b78      	ldr	r3, [pc, #480]	; (8014474 <udp_input+0x208>)
 8014294:	22d0      	movs	r2, #208	; 0xd0
 8014296:	497a      	ldr	r1, [pc, #488]	; (8014480 <udp_input+0x214>)
 8014298:	4878      	ldr	r0, [pc, #480]	; (801447c <udp_input+0x210>)
 801429a:	f005 f9ed 	bl	8019678 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	895b      	ldrh	r3, [r3, #10]
 80142a2:	2b07      	cmp	r3, #7
 80142a4:	d803      	bhi.n	80142ae <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	f7f9 fa88 	bl	800d7bc <pbuf_free>
    goto end;
 80142ac:	e0de      	b.n	801446c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	685b      	ldr	r3, [r3, #4]
 80142b2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80142b4:	4b73      	ldr	r3, [pc, #460]	; (8014484 <udp_input+0x218>)
 80142b6:	695b      	ldr	r3, [r3, #20]
 80142b8:	4a72      	ldr	r2, [pc, #456]	; (8014484 <udp_input+0x218>)
 80142ba:	6812      	ldr	r2, [r2, #0]
 80142bc:	4611      	mov	r1, r2
 80142be:	4618      	mov	r0, r3
 80142c0:	f003 fe12 	bl	8017ee8 <ip4_addr_isbroadcast_u32>
 80142c4:	4603      	mov	r3, r0
 80142c6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80142c8:	697b      	ldr	r3, [r7, #20]
 80142ca:	881b      	ldrh	r3, [r3, #0]
 80142cc:	b29b      	uxth	r3, r3
 80142ce:	4618      	mov	r0, r3
 80142d0:	f7f7 fe44 	bl	800bf5c <lwip_htons>
 80142d4:	4603      	mov	r3, r0
 80142d6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80142d8:	697b      	ldr	r3, [r7, #20]
 80142da:	885b      	ldrh	r3, [r3, #2]
 80142dc:	b29b      	uxth	r3, r3
 80142de:	4618      	mov	r0, r3
 80142e0:	f7f7 fe3c 	bl	800bf5c <lwip_htons>
 80142e4:	4603      	mov	r3, r0
 80142e6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80142e8:	2300      	movs	r3, #0
 80142ea:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80142ec:	2300      	movs	r3, #0
 80142ee:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80142f0:	2300      	movs	r3, #0
 80142f2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80142f4:	4b64      	ldr	r3, [pc, #400]	; (8014488 <udp_input+0x21c>)
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	627b      	str	r3, [r7, #36]	; 0x24
 80142fa:	e054      	b.n	80143a6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80142fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142fe:	8a5b      	ldrh	r3, [r3, #18]
 8014300:	89fa      	ldrh	r2, [r7, #14]
 8014302:	429a      	cmp	r2, r3
 8014304:	d14a      	bne.n	801439c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014306:	7cfb      	ldrb	r3, [r7, #19]
 8014308:	461a      	mov	r2, r3
 801430a:	6839      	ldr	r1, [r7, #0]
 801430c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801430e:	f7ff ff49 	bl	80141a4 <udp_input_local_match>
 8014312:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014314:	2b00      	cmp	r3, #0
 8014316:	d041      	beq.n	801439c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431a:	7c1b      	ldrb	r3, [r3, #16]
 801431c:	f003 0304 	and.w	r3, r3, #4
 8014320:	2b00      	cmp	r3, #0
 8014322:	d11d      	bne.n	8014360 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014324:	69fb      	ldr	r3, [r7, #28]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d102      	bne.n	8014330 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801432c:	61fb      	str	r3, [r7, #28]
 801432e:	e017      	b.n	8014360 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014330:	7cfb      	ldrb	r3, [r7, #19]
 8014332:	2b00      	cmp	r3, #0
 8014334:	d014      	beq.n	8014360 <udp_input+0xf4>
 8014336:	4b53      	ldr	r3, [pc, #332]	; (8014484 <udp_input+0x218>)
 8014338:	695b      	ldr	r3, [r3, #20]
 801433a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801433e:	d10f      	bne.n	8014360 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014340:	69fb      	ldr	r3, [r7, #28]
 8014342:	681a      	ldr	r2, [r3, #0]
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	3304      	adds	r3, #4
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	429a      	cmp	r2, r3
 801434c:	d008      	beq.n	8014360 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014350:	681a      	ldr	r2, [r3, #0]
 8014352:	683b      	ldr	r3, [r7, #0]
 8014354:	3304      	adds	r3, #4
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	429a      	cmp	r2, r3
 801435a:	d101      	bne.n	8014360 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014362:	8a9b      	ldrh	r3, [r3, #20]
 8014364:	8a3a      	ldrh	r2, [r7, #16]
 8014366:	429a      	cmp	r2, r3
 8014368:	d118      	bne.n	801439c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801436c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801436e:	2b00      	cmp	r3, #0
 8014370:	d005      	beq.n	801437e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014374:	685a      	ldr	r2, [r3, #4]
 8014376:	4b43      	ldr	r3, [pc, #268]	; (8014484 <udp_input+0x218>)
 8014378:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801437a:	429a      	cmp	r2, r3
 801437c:	d10e      	bne.n	801439c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801437e:	6a3b      	ldr	r3, [r7, #32]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d014      	beq.n	80143ae <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014386:	68da      	ldr	r2, [r3, #12]
 8014388:	6a3b      	ldr	r3, [r7, #32]
 801438a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801438c:	4b3e      	ldr	r3, [pc, #248]	; (8014488 <udp_input+0x21c>)
 801438e:	681a      	ldr	r2, [r3, #0]
 8014390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014392:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014394:	4a3c      	ldr	r2, [pc, #240]	; (8014488 <udp_input+0x21c>)
 8014396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014398:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801439a:	e008      	b.n	80143ae <udp_input+0x142>
      }
    }

    prev = pcb;
 801439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801439e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80143a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	627b      	str	r3, [r7, #36]	; 0x24
 80143a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d1a7      	bne.n	80142fc <udp_input+0x90>
 80143ac:	e000      	b.n	80143b0 <udp_input+0x144>
        break;
 80143ae:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80143b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d101      	bne.n	80143ba <udp_input+0x14e>
    pcb = uncon_pcb;
 80143b6:	69fb      	ldr	r3, [r7, #28]
 80143b8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80143ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d002      	beq.n	80143c6 <udp_input+0x15a>
    for_us = 1;
 80143c0:	2301      	movs	r3, #1
 80143c2:	76fb      	strb	r3, [r7, #27]
 80143c4:	e00a      	b.n	80143dc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80143c6:	683b      	ldr	r3, [r7, #0]
 80143c8:	3304      	adds	r3, #4
 80143ca:	681a      	ldr	r2, [r3, #0]
 80143cc:	4b2d      	ldr	r3, [pc, #180]	; (8014484 <udp_input+0x218>)
 80143ce:	695b      	ldr	r3, [r3, #20]
 80143d0:	429a      	cmp	r2, r3
 80143d2:	bf0c      	ite	eq
 80143d4:	2301      	moveq	r3, #1
 80143d6:	2300      	movne	r3, #0
 80143d8:	b2db      	uxtb	r3, r3
 80143da:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80143dc:	7efb      	ldrb	r3, [r7, #27]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d041      	beq.n	8014466 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80143e2:	2108      	movs	r1, #8
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f7f9 f931 	bl	800d64c <pbuf_remove_header>
 80143ea:	4603      	mov	r3, r0
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d00a      	beq.n	8014406 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80143f0:	4b20      	ldr	r3, [pc, #128]	; (8014474 <udp_input+0x208>)
 80143f2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80143f6:	4925      	ldr	r1, [pc, #148]	; (801448c <udp_input+0x220>)
 80143f8:	4820      	ldr	r0, [pc, #128]	; (801447c <udp_input+0x210>)
 80143fa:	f005 f93d 	bl	8019678 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80143fe:	6878      	ldr	r0, [r7, #4]
 8014400:	f7f9 f9dc 	bl	800d7bc <pbuf_free>
      goto end;
 8014404:	e032      	b.n	801446c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014408:	2b00      	cmp	r3, #0
 801440a:	d012      	beq.n	8014432 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801440e:	699b      	ldr	r3, [r3, #24]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d00a      	beq.n	801442a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014416:	699c      	ldr	r4, [r3, #24]
 8014418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801441a:	69d8      	ldr	r0, [r3, #28]
 801441c:	8a3b      	ldrh	r3, [r7, #16]
 801441e:	9300      	str	r3, [sp, #0]
 8014420:	4b1b      	ldr	r3, [pc, #108]	; (8014490 <udp_input+0x224>)
 8014422:	687a      	ldr	r2, [r7, #4]
 8014424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014426:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014428:	e021      	b.n	801446e <udp_input+0x202>
        pbuf_free(p);
 801442a:	6878      	ldr	r0, [r7, #4]
 801442c:	f7f9 f9c6 	bl	800d7bc <pbuf_free>
        goto end;
 8014430:	e01c      	b.n	801446c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014432:	7cfb      	ldrb	r3, [r7, #19]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d112      	bne.n	801445e <udp_input+0x1f2>
 8014438:	4b12      	ldr	r3, [pc, #72]	; (8014484 <udp_input+0x218>)
 801443a:	695b      	ldr	r3, [r3, #20]
 801443c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014440:	2be0      	cmp	r3, #224	; 0xe0
 8014442:	d00c      	beq.n	801445e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014444:	4b0f      	ldr	r3, [pc, #60]	; (8014484 <udp_input+0x218>)
 8014446:	899b      	ldrh	r3, [r3, #12]
 8014448:	3308      	adds	r3, #8
 801444a:	b29b      	uxth	r3, r3
 801444c:	b21b      	sxth	r3, r3
 801444e:	4619      	mov	r1, r3
 8014450:	6878      	ldr	r0, [r7, #4]
 8014452:	f7f9 f96e 	bl	800d732 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014456:	2103      	movs	r1, #3
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f003 fa07 	bl	801786c <icmp_dest_unreach>
      pbuf_free(p);
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f7f9 f9ac 	bl	800d7bc <pbuf_free>
  return;
 8014464:	e003      	b.n	801446e <udp_input+0x202>
    pbuf_free(p);
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f7f9 f9a8 	bl	800d7bc <pbuf_free>
  return;
 801446c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801446e:	372c      	adds	r7, #44	; 0x2c
 8014470:	46bd      	mov	sp, r7
 8014472:	bd90      	pop	{r4, r7, pc}
 8014474:	0801d38c 	.word	0x0801d38c
 8014478:	0801d430 	.word	0x0801d430
 801447c:	0801d3e0 	.word	0x0801d3e0
 8014480:	0801d448 	.word	0x0801d448
 8014484:	200097f4 	.word	0x200097f4
 8014488:	2000cfc4 	.word	0x2000cfc4
 801448c:	0801d464 	.word	0x0801d464
 8014490:	20009804 	.word	0x20009804

08014494 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b088      	sub	sp, #32
 8014498:	af02      	add	r7, sp, #8
 801449a:	60f8      	str	r0, [r7, #12]
 801449c:	60b9      	str	r1, [r7, #8]
 801449e:	607a      	str	r2, [r7, #4]
 80144a0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d109      	bne.n	80144bc <udp_sendto_if+0x28>
 80144a8:	4b2e      	ldr	r3, [pc, #184]	; (8014564 <udp_sendto_if+0xd0>)
 80144aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80144ae:	492e      	ldr	r1, [pc, #184]	; (8014568 <udp_sendto_if+0xd4>)
 80144b0:	482e      	ldr	r0, [pc, #184]	; (801456c <udp_sendto_if+0xd8>)
 80144b2:	f005 f8e1 	bl	8019678 <iprintf>
 80144b6:	f06f 030f 	mvn.w	r3, #15
 80144ba:	e04f      	b.n	801455c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80144bc:	68bb      	ldr	r3, [r7, #8]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d109      	bne.n	80144d6 <udp_sendto_if+0x42>
 80144c2:	4b28      	ldr	r3, [pc, #160]	; (8014564 <udp_sendto_if+0xd0>)
 80144c4:	f240 2281 	movw	r2, #641	; 0x281
 80144c8:	4929      	ldr	r1, [pc, #164]	; (8014570 <udp_sendto_if+0xdc>)
 80144ca:	4828      	ldr	r0, [pc, #160]	; (801456c <udp_sendto_if+0xd8>)
 80144cc:	f005 f8d4 	bl	8019678 <iprintf>
 80144d0:	f06f 030f 	mvn.w	r3, #15
 80144d4:	e042      	b.n	801455c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d109      	bne.n	80144f0 <udp_sendto_if+0x5c>
 80144dc:	4b21      	ldr	r3, [pc, #132]	; (8014564 <udp_sendto_if+0xd0>)
 80144de:	f240 2282 	movw	r2, #642	; 0x282
 80144e2:	4924      	ldr	r1, [pc, #144]	; (8014574 <udp_sendto_if+0xe0>)
 80144e4:	4821      	ldr	r0, [pc, #132]	; (801456c <udp_sendto_if+0xd8>)
 80144e6:	f005 f8c7 	bl	8019678 <iprintf>
 80144ea:	f06f 030f 	mvn.w	r3, #15
 80144ee:	e035      	b.n	801455c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80144f0:	6a3b      	ldr	r3, [r7, #32]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d109      	bne.n	801450a <udp_sendto_if+0x76>
 80144f6:	4b1b      	ldr	r3, [pc, #108]	; (8014564 <udp_sendto_if+0xd0>)
 80144f8:	f240 2283 	movw	r2, #643	; 0x283
 80144fc:	491e      	ldr	r1, [pc, #120]	; (8014578 <udp_sendto_if+0xe4>)
 80144fe:	481b      	ldr	r0, [pc, #108]	; (801456c <udp_sendto_if+0xd8>)
 8014500:	f005 f8ba 	bl	8019678 <iprintf>
 8014504:	f06f 030f 	mvn.w	r3, #15
 8014508:	e028      	b.n	801455c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d009      	beq.n	8014524 <udp_sendto_if+0x90>
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d005      	beq.n	8014524 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014520:	2be0      	cmp	r3, #224	; 0xe0
 8014522:	d103      	bne.n	801452c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014524:	6a3b      	ldr	r3, [r7, #32]
 8014526:	3304      	adds	r3, #4
 8014528:	617b      	str	r3, [r7, #20]
 801452a:	e00b      	b.n	8014544 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	681a      	ldr	r2, [r3, #0]
 8014530:	6a3b      	ldr	r3, [r7, #32]
 8014532:	3304      	adds	r3, #4
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	429a      	cmp	r2, r3
 8014538:	d002      	beq.n	8014540 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801453a:	f06f 0303 	mvn.w	r3, #3
 801453e:	e00d      	b.n	801455c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014544:	887a      	ldrh	r2, [r7, #2]
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	9301      	str	r3, [sp, #4]
 801454a:	6a3b      	ldr	r3, [r7, #32]
 801454c:	9300      	str	r3, [sp, #0]
 801454e:	4613      	mov	r3, r2
 8014550:	687a      	ldr	r2, [r7, #4]
 8014552:	68b9      	ldr	r1, [r7, #8]
 8014554:	68f8      	ldr	r0, [r7, #12]
 8014556:	f000 f811 	bl	801457c <udp_sendto_if_src>
 801455a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801455c:	4618      	mov	r0, r3
 801455e:	3718      	adds	r7, #24
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}
 8014564:	0801d38c 	.word	0x0801d38c
 8014568:	0801d500 	.word	0x0801d500
 801456c:	0801d3e0 	.word	0x0801d3e0
 8014570:	0801d51c 	.word	0x0801d51c
 8014574:	0801d538 	.word	0x0801d538
 8014578:	0801d558 	.word	0x0801d558

0801457c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b08c      	sub	sp, #48	; 0x30
 8014580:	af04      	add	r7, sp, #16
 8014582:	60f8      	str	r0, [r7, #12]
 8014584:	60b9      	str	r1, [r7, #8]
 8014586:	607a      	str	r2, [r7, #4]
 8014588:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d109      	bne.n	80145a4 <udp_sendto_if_src+0x28>
 8014590:	4b65      	ldr	r3, [pc, #404]	; (8014728 <udp_sendto_if_src+0x1ac>)
 8014592:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014596:	4965      	ldr	r1, [pc, #404]	; (801472c <udp_sendto_if_src+0x1b0>)
 8014598:	4865      	ldr	r0, [pc, #404]	; (8014730 <udp_sendto_if_src+0x1b4>)
 801459a:	f005 f86d 	bl	8019678 <iprintf>
 801459e:	f06f 030f 	mvn.w	r3, #15
 80145a2:	e0bc      	b.n	801471e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d109      	bne.n	80145be <udp_sendto_if_src+0x42>
 80145aa:	4b5f      	ldr	r3, [pc, #380]	; (8014728 <udp_sendto_if_src+0x1ac>)
 80145ac:	f240 22d2 	movw	r2, #722	; 0x2d2
 80145b0:	4960      	ldr	r1, [pc, #384]	; (8014734 <udp_sendto_if_src+0x1b8>)
 80145b2:	485f      	ldr	r0, [pc, #380]	; (8014730 <udp_sendto_if_src+0x1b4>)
 80145b4:	f005 f860 	bl	8019678 <iprintf>
 80145b8:	f06f 030f 	mvn.w	r3, #15
 80145bc:	e0af      	b.n	801471e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d109      	bne.n	80145d8 <udp_sendto_if_src+0x5c>
 80145c4:	4b58      	ldr	r3, [pc, #352]	; (8014728 <udp_sendto_if_src+0x1ac>)
 80145c6:	f240 22d3 	movw	r2, #723	; 0x2d3
 80145ca:	495b      	ldr	r1, [pc, #364]	; (8014738 <udp_sendto_if_src+0x1bc>)
 80145cc:	4858      	ldr	r0, [pc, #352]	; (8014730 <udp_sendto_if_src+0x1b4>)
 80145ce:	f005 f853 	bl	8019678 <iprintf>
 80145d2:	f06f 030f 	mvn.w	r3, #15
 80145d6:	e0a2      	b.n	801471e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80145d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d109      	bne.n	80145f2 <udp_sendto_if_src+0x76>
 80145de:	4b52      	ldr	r3, [pc, #328]	; (8014728 <udp_sendto_if_src+0x1ac>)
 80145e0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80145e4:	4955      	ldr	r1, [pc, #340]	; (801473c <udp_sendto_if_src+0x1c0>)
 80145e6:	4852      	ldr	r0, [pc, #328]	; (8014730 <udp_sendto_if_src+0x1b4>)
 80145e8:	f005 f846 	bl	8019678 <iprintf>
 80145ec:	f06f 030f 	mvn.w	r3, #15
 80145f0:	e095      	b.n	801471e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80145f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d109      	bne.n	801460c <udp_sendto_if_src+0x90>
 80145f8:	4b4b      	ldr	r3, [pc, #300]	; (8014728 <udp_sendto_if_src+0x1ac>)
 80145fa:	f240 22d5 	movw	r2, #725	; 0x2d5
 80145fe:	4950      	ldr	r1, [pc, #320]	; (8014740 <udp_sendto_if_src+0x1c4>)
 8014600:	484b      	ldr	r0, [pc, #300]	; (8014730 <udp_sendto_if_src+0x1b4>)
 8014602:	f005 f839 	bl	8019678 <iprintf>
 8014606:	f06f 030f 	mvn.w	r3, #15
 801460a:	e088      	b.n	801471e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	8a5b      	ldrh	r3, [r3, #18]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d10f      	bne.n	8014634 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014614:	68f9      	ldr	r1, [r7, #12]
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	8a5b      	ldrh	r3, [r3, #18]
 801461a:	461a      	mov	r2, r3
 801461c:	68f8      	ldr	r0, [r7, #12]
 801461e:	f000 f893 	bl	8014748 <udp_bind>
 8014622:	4603      	mov	r3, r0
 8014624:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014626:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d002      	beq.n	8014634 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801462e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014632:	e074      	b.n	801471e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014634:	68bb      	ldr	r3, [r7, #8]
 8014636:	891b      	ldrh	r3, [r3, #8]
 8014638:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801463c:	4293      	cmp	r3, r2
 801463e:	d902      	bls.n	8014646 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014644:	e06b      	b.n	801471e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014646:	2108      	movs	r1, #8
 8014648:	68b8      	ldr	r0, [r7, #8]
 801464a:	f7f8 ffef 	bl	800d62c <pbuf_add_header>
 801464e:	4603      	mov	r3, r0
 8014650:	2b00      	cmp	r3, #0
 8014652:	d015      	beq.n	8014680 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014654:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014658:	2108      	movs	r1, #8
 801465a:	2022      	movs	r0, #34	; 0x22
 801465c:	f7f8 fd98 	bl	800d190 <pbuf_alloc>
 8014660:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8014662:	69fb      	ldr	r3, [r7, #28]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d102      	bne.n	801466e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801466c:	e057      	b.n	801471e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801466e:	68bb      	ldr	r3, [r7, #8]
 8014670:	891b      	ldrh	r3, [r3, #8]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d006      	beq.n	8014684 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014676:	68b9      	ldr	r1, [r7, #8]
 8014678:	69f8      	ldr	r0, [r7, #28]
 801467a:	f7f9 f9c3 	bl	800da04 <pbuf_chain>
 801467e:	e001      	b.n	8014684 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014684:	69fb      	ldr	r3, [r7, #28]
 8014686:	895b      	ldrh	r3, [r3, #10]
 8014688:	2b07      	cmp	r3, #7
 801468a:	d806      	bhi.n	801469a <udp_sendto_if_src+0x11e>
 801468c:	4b26      	ldr	r3, [pc, #152]	; (8014728 <udp_sendto_if_src+0x1ac>)
 801468e:	f240 320d 	movw	r2, #781	; 0x30d
 8014692:	492c      	ldr	r1, [pc, #176]	; (8014744 <udp_sendto_if_src+0x1c8>)
 8014694:	4826      	ldr	r0, [pc, #152]	; (8014730 <udp_sendto_if_src+0x1b4>)
 8014696:	f004 ffef 	bl	8019678 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801469a:	69fb      	ldr	r3, [r7, #28]
 801469c:	685b      	ldr	r3, [r3, #4]
 801469e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	8a5b      	ldrh	r3, [r3, #18]
 80146a4:	4618      	mov	r0, r3
 80146a6:	f7f7 fc59 	bl	800bf5c <lwip_htons>
 80146aa:	4603      	mov	r3, r0
 80146ac:	461a      	mov	r2, r3
 80146ae:	697b      	ldr	r3, [r7, #20]
 80146b0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80146b2:	887b      	ldrh	r3, [r7, #2]
 80146b4:	4618      	mov	r0, r3
 80146b6:	f7f7 fc51 	bl	800bf5c <lwip_htons>
 80146ba:	4603      	mov	r3, r0
 80146bc:	461a      	mov	r2, r3
 80146be:	697b      	ldr	r3, [r7, #20]
 80146c0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80146c2:	697b      	ldr	r3, [r7, #20]
 80146c4:	2200      	movs	r2, #0
 80146c6:	719a      	strb	r2, [r3, #6]
 80146c8:	2200      	movs	r2, #0
 80146ca:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80146cc:	69fb      	ldr	r3, [r7, #28]
 80146ce:	891b      	ldrh	r3, [r3, #8]
 80146d0:	4618      	mov	r0, r3
 80146d2:	f7f7 fc43 	bl	800bf5c <lwip_htons>
 80146d6:	4603      	mov	r3, r0
 80146d8:	461a      	mov	r2, r3
 80146da:	697b      	ldr	r3, [r7, #20]
 80146dc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80146de:	2311      	movs	r3, #17
 80146e0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	7adb      	ldrb	r3, [r3, #11]
 80146e6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	7a9b      	ldrb	r3, [r3, #10]
 80146ec:	7cb9      	ldrb	r1, [r7, #18]
 80146ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146f0:	9202      	str	r2, [sp, #8]
 80146f2:	7cfa      	ldrb	r2, [r7, #19]
 80146f4:	9201      	str	r2, [sp, #4]
 80146f6:	9300      	str	r3, [sp, #0]
 80146f8:	460b      	mov	r3, r1
 80146fa:	687a      	ldr	r2, [r7, #4]
 80146fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80146fe:	69f8      	ldr	r0, [r7, #28]
 8014700:	f003 fb44 	bl	8017d8c <ip4_output_if_src>
 8014704:	4603      	mov	r3, r0
 8014706:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014708:	69fa      	ldr	r2, [r7, #28]
 801470a:	68bb      	ldr	r3, [r7, #8]
 801470c:	429a      	cmp	r2, r3
 801470e:	d004      	beq.n	801471a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014710:	69f8      	ldr	r0, [r7, #28]
 8014712:	f7f9 f853 	bl	800d7bc <pbuf_free>
    q = NULL;
 8014716:	2300      	movs	r3, #0
 8014718:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801471a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801471e:	4618      	mov	r0, r3
 8014720:	3720      	adds	r7, #32
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}
 8014726:	bf00      	nop
 8014728:	0801d38c 	.word	0x0801d38c
 801472c:	0801d578 	.word	0x0801d578
 8014730:	0801d3e0 	.word	0x0801d3e0
 8014734:	0801d598 	.word	0x0801d598
 8014738:	0801d5b8 	.word	0x0801d5b8
 801473c:	0801d5dc 	.word	0x0801d5dc
 8014740:	0801d600 	.word	0x0801d600
 8014744:	0801d624 	.word	0x0801d624

08014748 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b086      	sub	sp, #24
 801474c:	af00      	add	r7, sp, #0
 801474e:	60f8      	str	r0, [r7, #12]
 8014750:	60b9      	str	r1, [r7, #8]
 8014752:	4613      	mov	r3, r2
 8014754:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d101      	bne.n	8014760 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801475c:	4b39      	ldr	r3, [pc, #228]	; (8014844 <udp_bind+0xfc>)
 801475e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d109      	bne.n	801477a <udp_bind+0x32>
 8014766:	4b38      	ldr	r3, [pc, #224]	; (8014848 <udp_bind+0x100>)
 8014768:	f240 32b7 	movw	r2, #951	; 0x3b7
 801476c:	4937      	ldr	r1, [pc, #220]	; (801484c <udp_bind+0x104>)
 801476e:	4838      	ldr	r0, [pc, #224]	; (8014850 <udp_bind+0x108>)
 8014770:	f004 ff82 	bl	8019678 <iprintf>
 8014774:	f06f 030f 	mvn.w	r3, #15
 8014778:	e060      	b.n	801483c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801477a:	2300      	movs	r3, #0
 801477c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801477e:	4b35      	ldr	r3, [pc, #212]	; (8014854 <udp_bind+0x10c>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	617b      	str	r3, [r7, #20]
 8014784:	e009      	b.n	801479a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014786:	68fa      	ldr	r2, [r7, #12]
 8014788:	697b      	ldr	r3, [r7, #20]
 801478a:	429a      	cmp	r2, r3
 801478c:	d102      	bne.n	8014794 <udp_bind+0x4c>
      rebind = 1;
 801478e:	2301      	movs	r3, #1
 8014790:	74fb      	strb	r3, [r7, #19]
      break;
 8014792:	e005      	b.n	80147a0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014794:	697b      	ldr	r3, [r7, #20]
 8014796:	68db      	ldr	r3, [r3, #12]
 8014798:	617b      	str	r3, [r7, #20]
 801479a:	697b      	ldr	r3, [r7, #20]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d1f2      	bne.n	8014786 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80147a0:	88fb      	ldrh	r3, [r7, #6]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d109      	bne.n	80147ba <udp_bind+0x72>
    port = udp_new_port();
 80147a6:	f7ff fcc5 	bl	8014134 <udp_new_port>
 80147aa:	4603      	mov	r3, r0
 80147ac:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80147ae:	88fb      	ldrh	r3, [r7, #6]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d12c      	bne.n	801480e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80147b4:	f06f 0307 	mvn.w	r3, #7
 80147b8:	e040      	b.n	801483c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80147ba:	4b26      	ldr	r3, [pc, #152]	; (8014854 <udp_bind+0x10c>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	617b      	str	r3, [r7, #20]
 80147c0:	e022      	b.n	8014808 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80147c2:	68fa      	ldr	r2, [r7, #12]
 80147c4:	697b      	ldr	r3, [r7, #20]
 80147c6:	429a      	cmp	r2, r3
 80147c8:	d01b      	beq.n	8014802 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80147ca:	697b      	ldr	r3, [r7, #20]
 80147cc:	8a5b      	ldrh	r3, [r3, #18]
 80147ce:	88fa      	ldrh	r2, [r7, #6]
 80147d0:	429a      	cmp	r2, r3
 80147d2:	d116      	bne.n	8014802 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80147d4:	697b      	ldr	r3, [r7, #20]
 80147d6:	681a      	ldr	r2, [r3, #0]
 80147d8:	68bb      	ldr	r3, [r7, #8]
 80147da:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80147dc:	429a      	cmp	r2, r3
 80147de:	d00d      	beq.n	80147fc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d00a      	beq.n	80147fc <udp_bind+0xb4>
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d006      	beq.n	80147fc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80147ee:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d003      	beq.n	80147fc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80147f4:	697b      	ldr	r3, [r7, #20]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d102      	bne.n	8014802 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80147fc:	f06f 0307 	mvn.w	r3, #7
 8014800:	e01c      	b.n	801483c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014802:	697b      	ldr	r3, [r7, #20]
 8014804:	68db      	ldr	r3, [r3, #12]
 8014806:	617b      	str	r3, [r7, #20]
 8014808:	697b      	ldr	r3, [r7, #20]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d1d9      	bne.n	80147c2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801480e:	68bb      	ldr	r3, [r7, #8]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d002      	beq.n	801481a <udp_bind+0xd2>
 8014814:	68bb      	ldr	r3, [r7, #8]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	e000      	b.n	801481c <udp_bind+0xd4>
 801481a:	2300      	movs	r3, #0
 801481c:	68fa      	ldr	r2, [r7, #12]
 801481e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	88fa      	ldrh	r2, [r7, #6]
 8014824:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014826:	7cfb      	ldrb	r3, [r7, #19]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d106      	bne.n	801483a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801482c:	4b09      	ldr	r3, [pc, #36]	; (8014854 <udp_bind+0x10c>)
 801482e:	681a      	ldr	r2, [r3, #0]
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014834:	4a07      	ldr	r2, [pc, #28]	; (8014854 <udp_bind+0x10c>)
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801483a:	2300      	movs	r3, #0
}
 801483c:	4618      	mov	r0, r3
 801483e:	3718      	adds	r7, #24
 8014840:	46bd      	mov	sp, r7
 8014842:	bd80      	pop	{r7, pc}
 8014844:	0801e304 	.word	0x0801e304
 8014848:	0801d38c 	.word	0x0801d38c
 801484c:	0801d654 	.word	0x0801d654
 8014850:	0801d3e0 	.word	0x0801d3e0
 8014854:	2000cfc4 	.word	0x2000cfc4

08014858 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b086      	sub	sp, #24
 801485c:	af00      	add	r7, sp, #0
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	60b9      	str	r1, [r7, #8]
 8014862:	4613      	mov	r3, r2
 8014864:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d109      	bne.n	8014880 <udp_connect+0x28>
 801486c:	4b2c      	ldr	r3, [pc, #176]	; (8014920 <udp_connect+0xc8>)
 801486e:	f240 4235 	movw	r2, #1077	; 0x435
 8014872:	492c      	ldr	r1, [pc, #176]	; (8014924 <udp_connect+0xcc>)
 8014874:	482c      	ldr	r0, [pc, #176]	; (8014928 <udp_connect+0xd0>)
 8014876:	f004 feff 	bl	8019678 <iprintf>
 801487a:	f06f 030f 	mvn.w	r3, #15
 801487e:	e04b      	b.n	8014918 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d109      	bne.n	801489a <udp_connect+0x42>
 8014886:	4b26      	ldr	r3, [pc, #152]	; (8014920 <udp_connect+0xc8>)
 8014888:	f240 4236 	movw	r2, #1078	; 0x436
 801488c:	4927      	ldr	r1, [pc, #156]	; (801492c <udp_connect+0xd4>)
 801488e:	4826      	ldr	r0, [pc, #152]	; (8014928 <udp_connect+0xd0>)
 8014890:	f004 fef2 	bl	8019678 <iprintf>
 8014894:	f06f 030f 	mvn.w	r3, #15
 8014898:	e03e      	b.n	8014918 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	8a5b      	ldrh	r3, [r3, #18]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d10f      	bne.n	80148c2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80148a2:	68f9      	ldr	r1, [r7, #12]
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	8a5b      	ldrh	r3, [r3, #18]
 80148a8:	461a      	mov	r2, r3
 80148aa:	68f8      	ldr	r0, [r7, #12]
 80148ac:	f7ff ff4c 	bl	8014748 <udp_bind>
 80148b0:	4603      	mov	r3, r0
 80148b2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80148b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d002      	beq.n	80148c2 <udp_connect+0x6a>
      return err;
 80148bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80148c0:	e02a      	b.n	8014918 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80148c2:	68bb      	ldr	r3, [r7, #8]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d002      	beq.n	80148ce <udp_connect+0x76>
 80148c8:	68bb      	ldr	r3, [r7, #8]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	e000      	b.n	80148d0 <udp_connect+0x78>
 80148ce:	2300      	movs	r3, #0
 80148d0:	68fa      	ldr	r2, [r7, #12]
 80148d2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	88fa      	ldrh	r2, [r7, #6]
 80148d8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	7c1b      	ldrb	r3, [r3, #16]
 80148de:	f043 0304 	orr.w	r3, r3, #4
 80148e2:	b2da      	uxtb	r2, r3
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80148e8:	4b11      	ldr	r3, [pc, #68]	; (8014930 <udp_connect+0xd8>)
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	617b      	str	r3, [r7, #20]
 80148ee:	e008      	b.n	8014902 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80148f0:	68fa      	ldr	r2, [r7, #12]
 80148f2:	697b      	ldr	r3, [r7, #20]
 80148f4:	429a      	cmp	r2, r3
 80148f6:	d101      	bne.n	80148fc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80148f8:	2300      	movs	r3, #0
 80148fa:	e00d      	b.n	8014918 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80148fc:	697b      	ldr	r3, [r7, #20]
 80148fe:	68db      	ldr	r3, [r3, #12]
 8014900:	617b      	str	r3, [r7, #20]
 8014902:	697b      	ldr	r3, [r7, #20]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d1f3      	bne.n	80148f0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014908:	4b09      	ldr	r3, [pc, #36]	; (8014930 <udp_connect+0xd8>)
 801490a:	681a      	ldr	r2, [r3, #0]
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014910:	4a07      	ldr	r2, [pc, #28]	; (8014930 <udp_connect+0xd8>)
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014916:	2300      	movs	r3, #0
}
 8014918:	4618      	mov	r0, r3
 801491a:	3718      	adds	r7, #24
 801491c:	46bd      	mov	sp, r7
 801491e:	bd80      	pop	{r7, pc}
 8014920:	0801d38c 	.word	0x0801d38c
 8014924:	0801d66c 	.word	0x0801d66c
 8014928:	0801d3e0 	.word	0x0801d3e0
 801492c:	0801d688 	.word	0x0801d688
 8014930:	2000cfc4 	.word	0x2000cfc4

08014934 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b084      	sub	sp, #16
 8014938:	af00      	add	r7, sp, #0
 801493a:	60f8      	str	r0, [r7, #12]
 801493c:	60b9      	str	r1, [r7, #8]
 801493e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d107      	bne.n	8014956 <udp_recv+0x22>
 8014946:	4b08      	ldr	r3, [pc, #32]	; (8014968 <udp_recv+0x34>)
 8014948:	f240 428a 	movw	r2, #1162	; 0x48a
 801494c:	4907      	ldr	r1, [pc, #28]	; (801496c <udp_recv+0x38>)
 801494e:	4808      	ldr	r0, [pc, #32]	; (8014970 <udp_recv+0x3c>)
 8014950:	f004 fe92 	bl	8019678 <iprintf>
 8014954:	e005      	b.n	8014962 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	68ba      	ldr	r2, [r7, #8]
 801495a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	687a      	ldr	r2, [r7, #4]
 8014960:	61da      	str	r2, [r3, #28]
}
 8014962:	3710      	adds	r7, #16
 8014964:	46bd      	mov	sp, r7
 8014966:	bd80      	pop	{r7, pc}
 8014968:	0801d38c 	.word	0x0801d38c
 801496c:	0801d6c0 	.word	0x0801d6c0
 8014970:	0801d3e0 	.word	0x0801d3e0

08014974 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b084      	sub	sp, #16
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d107      	bne.n	8014992 <udp_remove+0x1e>
 8014982:	4b19      	ldr	r3, [pc, #100]	; (80149e8 <udp_remove+0x74>)
 8014984:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014988:	4918      	ldr	r1, [pc, #96]	; (80149ec <udp_remove+0x78>)
 801498a:	4819      	ldr	r0, [pc, #100]	; (80149f0 <udp_remove+0x7c>)
 801498c:	f004 fe74 	bl	8019678 <iprintf>
 8014990:	e026      	b.n	80149e0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014992:	4b18      	ldr	r3, [pc, #96]	; (80149f4 <udp_remove+0x80>)
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	687a      	ldr	r2, [r7, #4]
 8014998:	429a      	cmp	r2, r3
 801499a:	d105      	bne.n	80149a8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801499c:	4b15      	ldr	r3, [pc, #84]	; (80149f4 <udp_remove+0x80>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	68db      	ldr	r3, [r3, #12]
 80149a2:	4a14      	ldr	r2, [pc, #80]	; (80149f4 <udp_remove+0x80>)
 80149a4:	6013      	str	r3, [r2, #0]
 80149a6:	e017      	b.n	80149d8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80149a8:	4b12      	ldr	r3, [pc, #72]	; (80149f4 <udp_remove+0x80>)
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	60fb      	str	r3, [r7, #12]
 80149ae:	e010      	b.n	80149d2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	68db      	ldr	r3, [r3, #12]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d009      	beq.n	80149cc <udp_remove+0x58>
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	68db      	ldr	r3, [r3, #12]
 80149bc:	687a      	ldr	r2, [r7, #4]
 80149be:	429a      	cmp	r2, r3
 80149c0:	d104      	bne.n	80149cc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	68da      	ldr	r2, [r3, #12]
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	60da      	str	r2, [r3, #12]
        break;
 80149ca:	e005      	b.n	80149d8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	68db      	ldr	r3, [r3, #12]
 80149d0:	60fb      	str	r3, [r7, #12]
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d1eb      	bne.n	80149b0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80149d8:	6879      	ldr	r1, [r7, #4]
 80149da:	2000      	movs	r0, #0
 80149dc:	f7f8 f80c 	bl	800c9f8 <memp_free>
}
 80149e0:	3710      	adds	r7, #16
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}
 80149e6:	bf00      	nop
 80149e8:	0801d38c 	.word	0x0801d38c
 80149ec:	0801d6d8 	.word	0x0801d6d8
 80149f0:	0801d3e0 	.word	0x0801d3e0
 80149f4:	2000cfc4 	.word	0x2000cfc4

080149f8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b082      	sub	sp, #8
 80149fc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80149fe:	2000      	movs	r0, #0
 8014a00:	f7f7 ff84 	bl	800c90c <memp_malloc>
 8014a04:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d007      	beq.n	8014a1c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014a0c:	2220      	movs	r2, #32
 8014a0e:	2100      	movs	r1, #0
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	f004 fd49 	bl	80194a8 <memset>
    pcb->ttl = UDP_TTL;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	22ff      	movs	r2, #255	; 0xff
 8014a1a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014a1c:	687b      	ldr	r3, [r7, #4]
}
 8014a1e:	4618      	mov	r0, r3
 8014a20:	3708      	adds	r7, #8
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}

08014a26 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014a26:	b580      	push	{r7, lr}
 8014a28:	b084      	sub	sp, #16
 8014a2a:	af00      	add	r7, sp, #0
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014a30:	f7ff ffe2 	bl	80149f8 <udp_new>
 8014a34:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014a36:	68fb      	ldr	r3, [r7, #12]
}
 8014a38:	4618      	mov	r0, r3
 8014a3a:	3710      	adds	r7, #16
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	bd80      	pop	{r7, pc}

08014a40 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014a40:	b480      	push	{r7}
 8014a42:	b085      	sub	sp, #20
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
 8014a48:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d01e      	beq.n	8014a8e <udp_netif_ip_addr_changed+0x4e>
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d01a      	beq.n	8014a8e <udp_netif_ip_addr_changed+0x4e>
 8014a58:	683b      	ldr	r3, [r7, #0]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d017      	beq.n	8014a8e <udp_netif_ip_addr_changed+0x4e>
 8014a5e:	683b      	ldr	r3, [r7, #0]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d013      	beq.n	8014a8e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014a66:	4b0d      	ldr	r3, [pc, #52]	; (8014a9c <udp_netif_ip_addr_changed+0x5c>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	60fb      	str	r3, [r7, #12]
 8014a6c:	e00c      	b.n	8014a88 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	681a      	ldr	r2, [r3, #0]
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	429a      	cmp	r2, r3
 8014a78:	d103      	bne.n	8014a82 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	681a      	ldr	r2, [r3, #0]
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	68db      	ldr	r3, [r3, #12]
 8014a86:	60fb      	str	r3, [r7, #12]
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d1ef      	bne.n	8014a6e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014a8e:	bf00      	nop
 8014a90:	3714      	adds	r7, #20
 8014a92:	46bd      	mov	sp, r7
 8014a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a98:	4770      	bx	lr
 8014a9a:	bf00      	nop
 8014a9c:	2000cfc4 	.word	0x2000cfc4

08014aa0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8014aa4:	4b20      	ldr	r3, [pc, #128]	; (8014b28 <dhcp_inc_pcb_refcount+0x88>)
 8014aa6:	781b      	ldrb	r3, [r3, #0]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d133      	bne.n	8014b14 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8014aac:	4b1f      	ldr	r3, [pc, #124]	; (8014b2c <dhcp_inc_pcb_refcount+0x8c>)
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d005      	beq.n	8014ac0 <dhcp_inc_pcb_refcount+0x20>
 8014ab4:	4b1e      	ldr	r3, [pc, #120]	; (8014b30 <dhcp_inc_pcb_refcount+0x90>)
 8014ab6:	22e5      	movs	r2, #229	; 0xe5
 8014ab8:	491e      	ldr	r1, [pc, #120]	; (8014b34 <dhcp_inc_pcb_refcount+0x94>)
 8014aba:	481f      	ldr	r0, [pc, #124]	; (8014b38 <dhcp_inc_pcb_refcount+0x98>)
 8014abc:	f004 fddc 	bl	8019678 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8014ac0:	f7ff ff9a 	bl	80149f8 <udp_new>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	4a19      	ldr	r2, [pc, #100]	; (8014b2c <dhcp_inc_pcb_refcount+0x8c>)
 8014ac8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8014aca:	4b18      	ldr	r3, [pc, #96]	; (8014b2c <dhcp_inc_pcb_refcount+0x8c>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d102      	bne.n	8014ad8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8014ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ad6:	e024      	b.n	8014b22 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014ad8:	4b14      	ldr	r3, [pc, #80]	; (8014b2c <dhcp_inc_pcb_refcount+0x8c>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	7a5a      	ldrb	r2, [r3, #9]
 8014ade:	4b13      	ldr	r3, [pc, #76]	; (8014b2c <dhcp_inc_pcb_refcount+0x8c>)
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	f042 0220 	orr.w	r2, r2, #32
 8014ae6:	b2d2      	uxtb	r2, r2
 8014ae8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014aea:	4b10      	ldr	r3, [pc, #64]	; (8014b2c <dhcp_inc_pcb_refcount+0x8c>)
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	2244      	movs	r2, #68	; 0x44
 8014af0:	4912      	ldr	r1, [pc, #72]	; (8014b3c <dhcp_inc_pcb_refcount+0x9c>)
 8014af2:	4618      	mov	r0, r3
 8014af4:	f7ff fe28 	bl	8014748 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014af8:	4b0c      	ldr	r3, [pc, #48]	; (8014b2c <dhcp_inc_pcb_refcount+0x8c>)
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	2243      	movs	r2, #67	; 0x43
 8014afe:	490f      	ldr	r1, [pc, #60]	; (8014b3c <dhcp_inc_pcb_refcount+0x9c>)
 8014b00:	4618      	mov	r0, r3
 8014b02:	f7ff fea9 	bl	8014858 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014b06:	4b09      	ldr	r3, [pc, #36]	; (8014b2c <dhcp_inc_pcb_refcount+0x8c>)
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	490c      	ldr	r1, [pc, #48]	; (8014b40 <dhcp_inc_pcb_refcount+0xa0>)
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7ff ff10 	bl	8014934 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014b14:	4b04      	ldr	r3, [pc, #16]	; (8014b28 <dhcp_inc_pcb_refcount+0x88>)
 8014b16:	781b      	ldrb	r3, [r3, #0]
 8014b18:	3301      	adds	r3, #1
 8014b1a:	b2da      	uxtb	r2, r3
 8014b1c:	4b02      	ldr	r3, [pc, #8]	; (8014b28 <dhcp_inc_pcb_refcount+0x88>)
 8014b1e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014b20:	2300      	movs	r3, #0
}
 8014b22:	4618      	mov	r0, r3
 8014b24:	bd80      	pop	{r7, pc}
 8014b26:	bf00      	nop
 8014b28:	2000cff4 	.word	0x2000cff4
 8014b2c:	2000cff0 	.word	0x2000cff0
 8014b30:	0801d6f0 	.word	0x0801d6f0
 8014b34:	0801d728 	.word	0x0801d728
 8014b38:	0801d750 	.word	0x0801d750
 8014b3c:	0801e304 	.word	0x0801e304
 8014b40:	080163d5 	.word	0x080163d5

08014b44 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014b48:	4b0e      	ldr	r3, [pc, #56]	; (8014b84 <dhcp_dec_pcb_refcount+0x40>)
 8014b4a:	781b      	ldrb	r3, [r3, #0]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d105      	bne.n	8014b5c <dhcp_dec_pcb_refcount+0x18>
 8014b50:	4b0d      	ldr	r3, [pc, #52]	; (8014b88 <dhcp_dec_pcb_refcount+0x44>)
 8014b52:	22ff      	movs	r2, #255	; 0xff
 8014b54:	490d      	ldr	r1, [pc, #52]	; (8014b8c <dhcp_dec_pcb_refcount+0x48>)
 8014b56:	480e      	ldr	r0, [pc, #56]	; (8014b90 <dhcp_dec_pcb_refcount+0x4c>)
 8014b58:	f004 fd8e 	bl	8019678 <iprintf>
  dhcp_pcb_refcount--;
 8014b5c:	4b09      	ldr	r3, [pc, #36]	; (8014b84 <dhcp_dec_pcb_refcount+0x40>)
 8014b5e:	781b      	ldrb	r3, [r3, #0]
 8014b60:	3b01      	subs	r3, #1
 8014b62:	b2da      	uxtb	r2, r3
 8014b64:	4b07      	ldr	r3, [pc, #28]	; (8014b84 <dhcp_dec_pcb_refcount+0x40>)
 8014b66:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014b68:	4b06      	ldr	r3, [pc, #24]	; (8014b84 <dhcp_dec_pcb_refcount+0x40>)
 8014b6a:	781b      	ldrb	r3, [r3, #0]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d107      	bne.n	8014b80 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014b70:	4b08      	ldr	r3, [pc, #32]	; (8014b94 <dhcp_dec_pcb_refcount+0x50>)
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	4618      	mov	r0, r3
 8014b76:	f7ff fefd 	bl	8014974 <udp_remove>
    dhcp_pcb = NULL;
 8014b7a:	4b06      	ldr	r3, [pc, #24]	; (8014b94 <dhcp_dec_pcb_refcount+0x50>)
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	601a      	str	r2, [r3, #0]
  }
}
 8014b80:	bf00      	nop
 8014b82:	bd80      	pop	{r7, pc}
 8014b84:	2000cff4 	.word	0x2000cff4
 8014b88:	0801d6f0 	.word	0x0801d6f0
 8014b8c:	0801d778 	.word	0x0801d778
 8014b90:	0801d750 	.word	0x0801d750
 8014b94:	2000cff0 	.word	0x2000cff0

08014b98 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b084      	sub	sp, #16
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ba4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014ba6:	210c      	movs	r1, #12
 8014ba8:	68f8      	ldr	r0, [r7, #12]
 8014baa:	f001 f855 	bl	8015c58 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014bae:	4b06      	ldr	r3, [pc, #24]	; (8014bc8 <dhcp_handle_nak+0x30>)
 8014bb0:	4a05      	ldr	r2, [pc, #20]	; (8014bc8 <dhcp_handle_nak+0x30>)
 8014bb2:	4905      	ldr	r1, [pc, #20]	; (8014bc8 <dhcp_handle_nak+0x30>)
 8014bb4:	6878      	ldr	r0, [r7, #4]
 8014bb6:	f7f8 f8c1 	bl	800cd3c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8014bba:	6878      	ldr	r0, [r7, #4]
 8014bbc:	f000 fc48 	bl	8015450 <dhcp_discover>
}
 8014bc0:	bf00      	nop
 8014bc2:	3710      	adds	r7, #16
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	bd80      	pop	{r7, pc}
 8014bc8:	0801e304 	.word	0x0801e304

08014bcc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	b084      	sub	sp, #16
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bd8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014bda:	2108      	movs	r1, #8
 8014bdc:	68f8      	ldr	r0, [r7, #12]
 8014bde:	f001 f83b 	bl	8015c58 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	331c      	adds	r3, #28
 8014be6:	2200      	movs	r2, #0
 8014be8:	4619      	mov	r1, r3
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	f002 fb3c 	bl	8017268 <etharp_query>
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	799b      	ldrb	r3, [r3, #6]
 8014bf8:	2bff      	cmp	r3, #255	; 0xff
 8014bfa:	d005      	beq.n	8014c08 <dhcp_check+0x3c>
    dhcp->tries++;
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	799b      	ldrb	r3, [r3, #6]
 8014c00:	3301      	adds	r3, #1
 8014c02:	b2da      	uxtb	r2, r3
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014c08:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014c0c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014c0e:	893b      	ldrh	r3, [r7, #8]
 8014c10:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014c14:	4a06      	ldr	r2, [pc, #24]	; (8014c30 <dhcp_check+0x64>)
 8014c16:	fb82 1203 	smull	r1, r2, r2, r3
 8014c1a:	1152      	asrs	r2, r2, #5
 8014c1c:	17db      	asrs	r3, r3, #31
 8014c1e:	1ad3      	subs	r3, r2, r3
 8014c20:	b29a      	uxth	r2, r3
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8014c26:	bf00      	nop
 8014c28:	3710      	adds	r7, #16
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bd80      	pop	{r7, pc}
 8014c2e:	bf00      	nop
 8014c30:	10624dd3 	.word	0x10624dd3

08014c34 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b084      	sub	sp, #16
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
 8014c3c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c42:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8014c44:	4b0c      	ldr	r3, [pc, #48]	; (8014c78 <dhcp_handle_offer+0x44>)
 8014c46:	789b      	ldrb	r3, [r3, #2]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d011      	beq.n	8014c70 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	2200      	movs	r2, #0
 8014c50:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8014c52:	4b0a      	ldr	r3, [pc, #40]	; (8014c7c <dhcp_handle_offer+0x48>)
 8014c54:	689b      	ldr	r3, [r3, #8]
 8014c56:	4618      	mov	r0, r3
 8014c58:	f7f7 f995 	bl	800bf86 <lwip_htonl>
 8014c5c:	4602      	mov	r2, r0
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014c62:	683b      	ldr	r3, [r7, #0]
 8014c64:	691a      	ldr	r2, [r3, #16]
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f000 f808 	bl	8014c80 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014c70:	bf00      	nop
 8014c72:	3710      	adds	r7, #16
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}
 8014c78:	2000cfe8 	.word	0x2000cfe8
 8014c7c:	2000cfc8 	.word	0x2000cfc8

08014c80 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8014c80:	b5b0      	push	{r4, r5, r7, lr}
 8014c82:	b08a      	sub	sp, #40	; 0x28
 8014c84:	af02      	add	r7, sp, #8
 8014c86:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d109      	bne.n	8014ca2 <dhcp_select+0x22>
 8014c8e:	4b71      	ldr	r3, [pc, #452]	; (8014e54 <dhcp_select+0x1d4>)
 8014c90:	f240 1277 	movw	r2, #375	; 0x177
 8014c94:	4970      	ldr	r1, [pc, #448]	; (8014e58 <dhcp_select+0x1d8>)
 8014c96:	4871      	ldr	r0, [pc, #452]	; (8014e5c <dhcp_select+0x1dc>)
 8014c98:	f004 fcee 	bl	8019678 <iprintf>
 8014c9c:	f06f 030f 	mvn.w	r3, #15
 8014ca0:	e0d3      	b.n	8014e4a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ca6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014ca8:	69bb      	ldr	r3, [r7, #24]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d109      	bne.n	8014cc2 <dhcp_select+0x42>
 8014cae:	4b69      	ldr	r3, [pc, #420]	; (8014e54 <dhcp_select+0x1d4>)
 8014cb0:	f240 1279 	movw	r2, #377	; 0x179
 8014cb4:	496a      	ldr	r1, [pc, #424]	; (8014e60 <dhcp_select+0x1e0>)
 8014cb6:	4869      	ldr	r0, [pc, #420]	; (8014e5c <dhcp_select+0x1dc>)
 8014cb8:	f004 fcde 	bl	8019678 <iprintf>
 8014cbc:	f06f 0305 	mvn.w	r3, #5
 8014cc0:	e0c3      	b.n	8014e4a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8014cc2:	2101      	movs	r1, #1
 8014cc4:	69b8      	ldr	r0, [r7, #24]
 8014cc6:	f000 ffc7 	bl	8015c58 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014cca:	f107 030c 	add.w	r3, r7, #12
 8014cce:	2203      	movs	r2, #3
 8014cd0:	69b9      	ldr	r1, [r7, #24]
 8014cd2:	6878      	ldr	r0, [r7, #4]
 8014cd4:	f001 fc4c 	bl	8016570 <dhcp_create_msg>
 8014cd8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014cda:	697b      	ldr	r3, [r7, #20]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	f000 8085 	beq.w	8014dec <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014ce2:	697b      	ldr	r3, [r7, #20]
 8014ce4:	685b      	ldr	r3, [r3, #4]
 8014ce6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014ce8:	89b8      	ldrh	r0, [r7, #12]
 8014cea:	693b      	ldr	r3, [r7, #16]
 8014cec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cf0:	2302      	movs	r3, #2
 8014cf2:	2239      	movs	r2, #57	; 0x39
 8014cf4:	f000 ffca 	bl	8015c8c <dhcp_option>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014cfc:	89b8      	ldrh	r0, [r7, #12]
 8014cfe:	693b      	ldr	r3, [r7, #16]
 8014d00:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d08:	461a      	mov	r2, r3
 8014d0a:	f001 f819 	bl	8015d40 <dhcp_option_short>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014d12:	89b8      	ldrh	r0, [r7, #12]
 8014d14:	693b      	ldr	r3, [r7, #16]
 8014d16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d1a:	2304      	movs	r3, #4
 8014d1c:	2232      	movs	r2, #50	; 0x32
 8014d1e:	f000 ffb5 	bl	8015c8c <dhcp_option>
 8014d22:	4603      	mov	r3, r0
 8014d24:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014d26:	89bc      	ldrh	r4, [r7, #12]
 8014d28:	693b      	ldr	r3, [r7, #16]
 8014d2a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014d2e:	69bb      	ldr	r3, [r7, #24]
 8014d30:	69db      	ldr	r3, [r3, #28]
 8014d32:	4618      	mov	r0, r3
 8014d34:	f7f7 f927 	bl	800bf86 <lwip_htonl>
 8014d38:	4603      	mov	r3, r0
 8014d3a:	461a      	mov	r2, r3
 8014d3c:	4629      	mov	r1, r5
 8014d3e:	4620      	mov	r0, r4
 8014d40:	f001 f830 	bl	8015da4 <dhcp_option_long>
 8014d44:	4603      	mov	r3, r0
 8014d46:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014d48:	89b8      	ldrh	r0, [r7, #12]
 8014d4a:	693b      	ldr	r3, [r7, #16]
 8014d4c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d50:	2304      	movs	r3, #4
 8014d52:	2236      	movs	r2, #54	; 0x36
 8014d54:	f000 ff9a 	bl	8015c8c <dhcp_option>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014d5c:	89bc      	ldrh	r4, [r7, #12]
 8014d5e:	693b      	ldr	r3, [r7, #16]
 8014d60:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014d64:	69bb      	ldr	r3, [r7, #24]
 8014d66:	699b      	ldr	r3, [r3, #24]
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7f7 f90c 	bl	800bf86 <lwip_htonl>
 8014d6e:	4603      	mov	r3, r0
 8014d70:	461a      	mov	r2, r3
 8014d72:	4629      	mov	r1, r5
 8014d74:	4620      	mov	r0, r4
 8014d76:	f001 f815 	bl	8015da4 <dhcp_option_long>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014d7e:	89b8      	ldrh	r0, [r7, #12]
 8014d80:	693b      	ldr	r3, [r7, #16]
 8014d82:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d86:	2303      	movs	r3, #3
 8014d88:	2237      	movs	r2, #55	; 0x37
 8014d8a:	f000 ff7f 	bl	8015c8c <dhcp_option>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014d92:	2300      	movs	r3, #0
 8014d94:	77bb      	strb	r3, [r7, #30]
 8014d96:	e00e      	b.n	8014db6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014d98:	89b8      	ldrh	r0, [r7, #12]
 8014d9a:	693b      	ldr	r3, [r7, #16]
 8014d9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014da0:	7fbb      	ldrb	r3, [r7, #30]
 8014da2:	4a30      	ldr	r2, [pc, #192]	; (8014e64 <dhcp_select+0x1e4>)
 8014da4:	5cd3      	ldrb	r3, [r2, r3]
 8014da6:	461a      	mov	r2, r3
 8014da8:	f000 ffa4 	bl	8015cf4 <dhcp_option_byte>
 8014dac:	4603      	mov	r3, r0
 8014dae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014db0:	7fbb      	ldrb	r3, [r7, #30]
 8014db2:	3301      	adds	r3, #1
 8014db4:	77bb      	strb	r3, [r7, #30]
 8014db6:	7fbb      	ldrb	r3, [r7, #30]
 8014db8:	2b02      	cmp	r3, #2
 8014dba:	d9ed      	bls.n	8014d98 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014dbc:	89b8      	ldrh	r0, [r7, #12]
 8014dbe:	693b      	ldr	r3, [r7, #16]
 8014dc0:	33f0      	adds	r3, #240	; 0xf0
 8014dc2:	697a      	ldr	r2, [r7, #20]
 8014dc4:	4619      	mov	r1, r3
 8014dc6:	f001 fca9 	bl	801671c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014dca:	4b27      	ldr	r3, [pc, #156]	; (8014e68 <dhcp_select+0x1e8>)
 8014dcc:	6818      	ldr	r0, [r3, #0]
 8014dce:	4b27      	ldr	r3, [pc, #156]	; (8014e6c <dhcp_select+0x1ec>)
 8014dd0:	9301      	str	r3, [sp, #4]
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	9300      	str	r3, [sp, #0]
 8014dd6:	2343      	movs	r3, #67	; 0x43
 8014dd8:	4a25      	ldr	r2, [pc, #148]	; (8014e70 <dhcp_select+0x1f0>)
 8014dda:	6979      	ldr	r1, [r7, #20]
 8014ddc:	f7ff fbce 	bl	801457c <udp_sendto_if_src>
 8014de0:	4603      	mov	r3, r0
 8014de2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014de4:	6978      	ldr	r0, [r7, #20]
 8014de6:	f7f8 fce9 	bl	800d7bc <pbuf_free>
 8014dea:	e001      	b.n	8014df0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014dec:	23ff      	movs	r3, #255	; 0xff
 8014dee:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014df0:	69bb      	ldr	r3, [r7, #24]
 8014df2:	799b      	ldrb	r3, [r3, #6]
 8014df4:	2bff      	cmp	r3, #255	; 0xff
 8014df6:	d005      	beq.n	8014e04 <dhcp_select+0x184>
    dhcp->tries++;
 8014df8:	69bb      	ldr	r3, [r7, #24]
 8014dfa:	799b      	ldrb	r3, [r3, #6]
 8014dfc:	3301      	adds	r3, #1
 8014dfe:	b2da      	uxtb	r2, r3
 8014e00:	69bb      	ldr	r3, [r7, #24]
 8014e02:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014e04:	69bb      	ldr	r3, [r7, #24]
 8014e06:	799b      	ldrb	r3, [r3, #6]
 8014e08:	2b05      	cmp	r3, #5
 8014e0a:	d80d      	bhi.n	8014e28 <dhcp_select+0x1a8>
 8014e0c:	69bb      	ldr	r3, [r7, #24]
 8014e0e:	799b      	ldrb	r3, [r3, #6]
 8014e10:	461a      	mov	r2, r3
 8014e12:	2301      	movs	r3, #1
 8014e14:	4093      	lsls	r3, r2
 8014e16:	b29b      	uxth	r3, r3
 8014e18:	461a      	mov	r2, r3
 8014e1a:	0152      	lsls	r2, r2, #5
 8014e1c:	1ad2      	subs	r2, r2, r3
 8014e1e:	0092      	lsls	r2, r2, #2
 8014e20:	4413      	add	r3, r2
 8014e22:	00db      	lsls	r3, r3, #3
 8014e24:	b29b      	uxth	r3, r3
 8014e26:	e001      	b.n	8014e2c <dhcp_select+0x1ac>
 8014e28:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014e2c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014e2e:	89fb      	ldrh	r3, [r7, #14]
 8014e30:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014e34:	4a0f      	ldr	r2, [pc, #60]	; (8014e74 <dhcp_select+0x1f4>)
 8014e36:	fb82 1203 	smull	r1, r2, r2, r3
 8014e3a:	1152      	asrs	r2, r2, #5
 8014e3c:	17db      	asrs	r3, r3, #31
 8014e3e:	1ad3      	subs	r3, r2, r3
 8014e40:	b29a      	uxth	r2, r3
 8014e42:	69bb      	ldr	r3, [r7, #24]
 8014e44:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014e46:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	3720      	adds	r7, #32
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	bdb0      	pop	{r4, r5, r7, pc}
 8014e52:	bf00      	nop
 8014e54:	0801d6f0 	.word	0x0801d6f0
 8014e58:	0801d79c 	.word	0x0801d79c
 8014e5c:	0801d750 	.word	0x0801d750
 8014e60:	0801d7b8 	.word	0x0801d7b8
 8014e64:	20000030 	.word	0x20000030
 8014e68:	2000cff0 	.word	0x2000cff0
 8014e6c:	0801e304 	.word	0x0801e304
 8014e70:	0801e308 	.word	0x0801e308
 8014e74:	10624dd3 	.word	0x10624dd3

08014e78 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014e7e:	4b27      	ldr	r3, [pc, #156]	; (8014f1c <dhcp_coarse_tmr+0xa4>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	607b      	str	r3, [r7, #4]
 8014e84:	e042      	b.n	8014f0c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e8a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d039      	beq.n	8014f06 <dhcp_coarse_tmr+0x8e>
 8014e92:	683b      	ldr	r3, [r7, #0]
 8014e94:	795b      	ldrb	r3, [r3, #5]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d035      	beq.n	8014f06 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	8a9b      	ldrh	r3, [r3, #20]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d012      	beq.n	8014ec8 <dhcp_coarse_tmr+0x50>
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	8a5b      	ldrh	r3, [r3, #18]
 8014ea6:	3301      	adds	r3, #1
 8014ea8:	b29a      	uxth	r2, r3
 8014eaa:	683b      	ldr	r3, [r7, #0]
 8014eac:	825a      	strh	r2, [r3, #18]
 8014eae:	683b      	ldr	r3, [r7, #0]
 8014eb0:	8a5a      	ldrh	r2, [r3, #18]
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	8a9b      	ldrh	r3, [r3, #20]
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	d106      	bne.n	8014ec8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f000 fe32 	bl	8015b24 <dhcp_release_and_stop>
        dhcp_start(netif);
 8014ec0:	6878      	ldr	r0, [r7, #4]
 8014ec2:	f000 f969 	bl	8015198 <dhcp_start>
 8014ec6:	e01e      	b.n	8014f06 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014ec8:	683b      	ldr	r3, [r7, #0]
 8014eca:	8a1b      	ldrh	r3, [r3, #16]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d00b      	beq.n	8014ee8 <dhcp_coarse_tmr+0x70>
 8014ed0:	683b      	ldr	r3, [r7, #0]
 8014ed2:	8a1b      	ldrh	r3, [r3, #16]
 8014ed4:	1e5a      	subs	r2, r3, #1
 8014ed6:	b291      	uxth	r1, r2
 8014ed8:	683a      	ldr	r2, [r7, #0]
 8014eda:	8211      	strh	r1, [r2, #16]
 8014edc:	2b01      	cmp	r3, #1
 8014ede:	d103      	bne.n	8014ee8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014ee0:	6878      	ldr	r0, [r7, #4]
 8014ee2:	f000 f8c6 	bl	8015072 <dhcp_t2_timeout>
 8014ee6:	e00e      	b.n	8014f06 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014ee8:	683b      	ldr	r3, [r7, #0]
 8014eea:	89db      	ldrh	r3, [r3, #14]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d00a      	beq.n	8014f06 <dhcp_coarse_tmr+0x8e>
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	89db      	ldrh	r3, [r3, #14]
 8014ef4:	1e5a      	subs	r2, r3, #1
 8014ef6:	b291      	uxth	r1, r2
 8014ef8:	683a      	ldr	r2, [r7, #0]
 8014efa:	81d1      	strh	r1, [r2, #14]
 8014efc:	2b01      	cmp	r3, #1
 8014efe:	d102      	bne.n	8014f06 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014f00:	6878      	ldr	r0, [r7, #4]
 8014f02:	f000 f888 	bl	8015016 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	607b      	str	r3, [r7, #4]
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d1b9      	bne.n	8014e86 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8014f12:	bf00      	nop
 8014f14:	bf00      	nop
 8014f16:	3708      	adds	r7, #8
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	bd80      	pop	{r7, pc}
 8014f1c:	2000cf5c 	.word	0x2000cf5c

08014f20 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b082      	sub	sp, #8
 8014f24:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014f26:	4b16      	ldr	r3, [pc, #88]	; (8014f80 <dhcp_fine_tmr+0x60>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	607b      	str	r3, [r7, #4]
 8014f2c:	e020      	b.n	8014f70 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f32:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014f34:	683b      	ldr	r3, [r7, #0]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d017      	beq.n	8014f6a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014f3a:	683b      	ldr	r3, [r7, #0]
 8014f3c:	891b      	ldrh	r3, [r3, #8]
 8014f3e:	2b01      	cmp	r3, #1
 8014f40:	d906      	bls.n	8014f50 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8014f42:	683b      	ldr	r3, [r7, #0]
 8014f44:	891b      	ldrh	r3, [r3, #8]
 8014f46:	3b01      	subs	r3, #1
 8014f48:	b29a      	uxth	r2, r3
 8014f4a:	683b      	ldr	r3, [r7, #0]
 8014f4c:	811a      	strh	r2, [r3, #8]
 8014f4e:	e00c      	b.n	8014f6a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	891b      	ldrh	r3, [r3, #8]
 8014f54:	2b01      	cmp	r3, #1
 8014f56:	d108      	bne.n	8014f6a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	891b      	ldrh	r3, [r3, #8]
 8014f5c:	3b01      	subs	r3, #1
 8014f5e:	b29a      	uxth	r2, r3
 8014f60:	683b      	ldr	r3, [r7, #0]
 8014f62:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f000 f80d 	bl	8014f84 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	607b      	str	r3, [r7, #4]
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d1db      	bne.n	8014f2e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8014f76:	bf00      	nop
 8014f78:	bf00      	nop
 8014f7a:	3708      	adds	r7, #8
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}
 8014f80:	2000cf5c 	.word	0x2000cf5c

08014f84 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b084      	sub	sp, #16
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f90:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	795b      	ldrb	r3, [r3, #5]
 8014f96:	2b0c      	cmp	r3, #12
 8014f98:	d003      	beq.n	8014fa2 <dhcp_timeout+0x1e>
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	795b      	ldrb	r3, [r3, #5]
 8014f9e:	2b06      	cmp	r3, #6
 8014fa0:	d103      	bne.n	8014faa <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014fa2:	6878      	ldr	r0, [r7, #4]
 8014fa4:	f000 fa54 	bl	8015450 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014fa8:	e031      	b.n	801500e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	795b      	ldrb	r3, [r3, #5]
 8014fae:	2b01      	cmp	r3, #1
 8014fb0:	d10e      	bne.n	8014fd0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	799b      	ldrb	r3, [r3, #6]
 8014fb6:	2b05      	cmp	r3, #5
 8014fb8:	d803      	bhi.n	8014fc2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f7ff fe60 	bl	8014c80 <dhcp_select>
}
 8014fc0:	e025      	b.n	801500e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8014fc2:	6878      	ldr	r0, [r7, #4]
 8014fc4:	f000 fdae 	bl	8015b24 <dhcp_release_and_stop>
      dhcp_start(netif);
 8014fc8:	6878      	ldr	r0, [r7, #4]
 8014fca:	f000 f8e5 	bl	8015198 <dhcp_start>
}
 8014fce:	e01e      	b.n	801500e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	795b      	ldrb	r3, [r3, #5]
 8014fd4:	2b08      	cmp	r3, #8
 8014fd6:	d10b      	bne.n	8014ff0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	799b      	ldrb	r3, [r3, #6]
 8014fdc:	2b01      	cmp	r3, #1
 8014fde:	d803      	bhi.n	8014fe8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014fe0:	6878      	ldr	r0, [r7, #4]
 8014fe2:	f7ff fdf3 	bl	8014bcc <dhcp_check>
}
 8014fe6:	e012      	b.n	801500e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014fe8:	6878      	ldr	r0, [r7, #4]
 8014fea:	f000 fad3 	bl	8015594 <dhcp_bind>
}
 8014fee:	e00e      	b.n	801500e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	795b      	ldrb	r3, [r3, #5]
 8014ff4:	2b03      	cmp	r3, #3
 8014ff6:	d10a      	bne.n	801500e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	799b      	ldrb	r3, [r3, #6]
 8014ffc:	2b01      	cmp	r3, #1
 8014ffe:	d803      	bhi.n	8015008 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8015000:	6878      	ldr	r0, [r7, #4]
 8015002:	f000 fcd9 	bl	80159b8 <dhcp_reboot>
}
 8015006:	e002      	b.n	801500e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8015008:	6878      	ldr	r0, [r7, #4]
 801500a:	f000 fa21 	bl	8015450 <dhcp_discover>
}
 801500e:	bf00      	nop
 8015010:	3710      	adds	r7, #16
 8015012:	46bd      	mov	sp, r7
 8015014:	bd80      	pop	{r7, pc}

08015016 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8015016:	b580      	push	{r7, lr}
 8015018:	b084      	sub	sp, #16
 801501a:	af00      	add	r7, sp, #0
 801501c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015022:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	795b      	ldrb	r3, [r3, #5]
 8015028:	2b01      	cmp	r3, #1
 801502a:	d007      	beq.n	801503c <dhcp_t1_timeout+0x26>
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	795b      	ldrb	r3, [r3, #5]
 8015030:	2b0a      	cmp	r3, #10
 8015032:	d003      	beq.n	801503c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015038:	2b05      	cmp	r3, #5
 801503a:	d116      	bne.n	801506a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	f000 fb83 	bl	8015748 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	899b      	ldrh	r3, [r3, #12]
 8015046:	461a      	mov	r2, r3
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	8a5b      	ldrh	r3, [r3, #18]
 801504c:	1ad3      	subs	r3, r2, r3
 801504e:	2b01      	cmp	r3, #1
 8015050:	dd0b      	ble.n	801506a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	899b      	ldrh	r3, [r3, #12]
 8015056:	461a      	mov	r2, r3
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	8a5b      	ldrh	r3, [r3, #18]
 801505c:	1ad3      	subs	r3, r2, r3
 801505e:	0fda      	lsrs	r2, r3, #31
 8015060:	4413      	add	r3, r2
 8015062:	105b      	asrs	r3, r3, #1
 8015064:	b29a      	uxth	r2, r3
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801506a:	bf00      	nop
 801506c:	3710      	adds	r7, #16
 801506e:	46bd      	mov	sp, r7
 8015070:	bd80      	pop	{r7, pc}

08015072 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8015072:	b580      	push	{r7, lr}
 8015074:	b084      	sub	sp, #16
 8015076:	af00      	add	r7, sp, #0
 8015078:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801507e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	795b      	ldrb	r3, [r3, #5]
 8015084:	2b01      	cmp	r3, #1
 8015086:	d00b      	beq.n	80150a0 <dhcp_t2_timeout+0x2e>
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	795b      	ldrb	r3, [r3, #5]
 801508c:	2b0a      	cmp	r3, #10
 801508e:	d007      	beq.n	80150a0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015094:	2b05      	cmp	r3, #5
 8015096:	d003      	beq.n	80150a0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	795b      	ldrb	r3, [r3, #5]
 801509c:	2b04      	cmp	r3, #4
 801509e:	d116      	bne.n	80150ce <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80150a0:	6878      	ldr	r0, [r7, #4]
 80150a2:	f000 fbed 	bl	8015880 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	8a9b      	ldrh	r3, [r3, #20]
 80150aa:	461a      	mov	r2, r3
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	8a5b      	ldrh	r3, [r3, #18]
 80150b0:	1ad3      	subs	r3, r2, r3
 80150b2:	2b01      	cmp	r3, #1
 80150b4:	dd0b      	ble.n	80150ce <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	8a9b      	ldrh	r3, [r3, #20]
 80150ba:	461a      	mov	r2, r3
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	8a5b      	ldrh	r3, [r3, #18]
 80150c0:	1ad3      	subs	r3, r2, r3
 80150c2:	0fda      	lsrs	r2, r3, #31
 80150c4:	4413      	add	r3, r2
 80150c6:	105b      	asrs	r3, r3, #1
 80150c8:	b29a      	uxth	r2, r3
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80150ce:	bf00      	nop
 80150d0:	3710      	adds	r7, #16
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}
	...

080150d8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b084      	sub	sp, #16
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
 80150e0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150e6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	2200      	movs	r2, #0
 80150ec:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	2200      	movs	r2, #0
 80150f2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80150f4:	4b26      	ldr	r3, [pc, #152]	; (8015190 <dhcp_handle_ack+0xb8>)
 80150f6:	78db      	ldrb	r3, [r3, #3]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d003      	beq.n	8015104 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80150fc:	4b25      	ldr	r3, [pc, #148]	; (8015194 <dhcp_handle_ack+0xbc>)
 80150fe:	68da      	ldr	r2, [r3, #12]
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8015104:	4b22      	ldr	r3, [pc, #136]	; (8015190 <dhcp_handle_ack+0xb8>)
 8015106:	791b      	ldrb	r3, [r3, #4]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d004      	beq.n	8015116 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801510c:	4b21      	ldr	r3, [pc, #132]	; (8015194 <dhcp_handle_ack+0xbc>)
 801510e:	691a      	ldr	r2, [r3, #16]
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	62da      	str	r2, [r3, #44]	; 0x2c
 8015114:	e004      	b.n	8015120 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801511a:	085a      	lsrs	r2, r3, #1
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8015120:	4b1b      	ldr	r3, [pc, #108]	; (8015190 <dhcp_handle_ack+0xb8>)
 8015122:	795b      	ldrb	r3, [r3, #5]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d004      	beq.n	8015132 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8015128:	4b1a      	ldr	r3, [pc, #104]	; (8015194 <dhcp_handle_ack+0xbc>)
 801512a:	695a      	ldr	r2, [r3, #20]
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	631a      	str	r2, [r3, #48]	; 0x30
 8015130:	e007      	b.n	8015142 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015136:	4613      	mov	r3, r2
 8015138:	00db      	lsls	r3, r3, #3
 801513a:	1a9b      	subs	r3, r3, r2
 801513c:	08da      	lsrs	r2, r3, #3
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015142:	683b      	ldr	r3, [r7, #0]
 8015144:	691a      	ldr	r2, [r3, #16]
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801514a:	4b11      	ldr	r3, [pc, #68]	; (8015190 <dhcp_handle_ack+0xb8>)
 801514c:	799b      	ldrb	r3, [r3, #6]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d00b      	beq.n	801516a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8015152:	4b10      	ldr	r3, [pc, #64]	; (8015194 <dhcp_handle_ack+0xbc>)
 8015154:	699b      	ldr	r3, [r3, #24]
 8015156:	4618      	mov	r0, r3
 8015158:	f7f6 ff15 	bl	800bf86 <lwip_htonl>
 801515c:	4602      	mov	r2, r0
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	2201      	movs	r2, #1
 8015166:	71da      	strb	r2, [r3, #7]
 8015168:	e002      	b.n	8015170 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	2200      	movs	r2, #0
 801516e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8015170:	4b07      	ldr	r3, [pc, #28]	; (8015190 <dhcp_handle_ack+0xb8>)
 8015172:	79db      	ldrb	r3, [r3, #7]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d007      	beq.n	8015188 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8015178:	4b06      	ldr	r3, [pc, #24]	; (8015194 <dhcp_handle_ack+0xbc>)
 801517a:	69db      	ldr	r3, [r3, #28]
 801517c:	4618      	mov	r0, r3
 801517e:	f7f6 ff02 	bl	800bf86 <lwip_htonl>
 8015182:	4602      	mov	r2, r0
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8015188:	bf00      	nop
 801518a:	3710      	adds	r7, #16
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}
 8015190:	2000cfe8 	.word	0x2000cfe8
 8015194:	2000cfc8 	.word	0x2000cfc8

08015198 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b084      	sub	sp, #16
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d109      	bne.n	80151ba <dhcp_start+0x22>
 80151a6:	4b37      	ldr	r3, [pc, #220]	; (8015284 <dhcp_start+0xec>)
 80151a8:	f240 22e7 	movw	r2, #743	; 0x2e7
 80151ac:	4936      	ldr	r1, [pc, #216]	; (8015288 <dhcp_start+0xf0>)
 80151ae:	4837      	ldr	r0, [pc, #220]	; (801528c <dhcp_start+0xf4>)
 80151b0:	f004 fa62 	bl	8019678 <iprintf>
 80151b4:	f06f 030f 	mvn.w	r3, #15
 80151b8:	e060      	b.n	801527c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80151c0:	f003 0301 	and.w	r3, r3, #1
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d109      	bne.n	80151dc <dhcp_start+0x44>
 80151c8:	4b2e      	ldr	r3, [pc, #184]	; (8015284 <dhcp_start+0xec>)
 80151ca:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80151ce:	4930      	ldr	r1, [pc, #192]	; (8015290 <dhcp_start+0xf8>)
 80151d0:	482e      	ldr	r0, [pc, #184]	; (801528c <dhcp_start+0xf4>)
 80151d2:	f004 fa51 	bl	8019678 <iprintf>
 80151d6:	f06f 030f 	mvn.w	r3, #15
 80151da:	e04f      	b.n	801527c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151e0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80151e6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80151ea:	d202      	bcs.n	80151f2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80151ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151f0:	e044      	b.n	801527c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d10d      	bne.n	8015214 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80151f8:	2034      	movs	r0, #52	; 0x34
 80151fa:	f7f7 f9e3 	bl	800c5c4 <mem_malloc>
 80151fe:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d102      	bne.n	801520c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8015206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801520a:	e037      	b.n	801527c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	68fa      	ldr	r2, [r7, #12]
 8015210:	625a      	str	r2, [r3, #36]	; 0x24
 8015212:	e005      	b.n	8015220 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	791b      	ldrb	r3, [r3, #4]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d001      	beq.n	8015220 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801521c:	f7ff fc92 	bl	8014b44 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8015220:	2234      	movs	r2, #52	; 0x34
 8015222:	2100      	movs	r1, #0
 8015224:	68f8      	ldr	r0, [r7, #12]
 8015226:	f004 f93f 	bl	80194a8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801522a:	f7ff fc39 	bl	8014aa0 <dhcp_inc_pcb_refcount>
 801522e:	4603      	mov	r3, r0
 8015230:	2b00      	cmp	r3, #0
 8015232:	d002      	beq.n	801523a <dhcp_start+0xa2>
    return ERR_MEM;
 8015234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015238:	e020      	b.n	801527c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	2201      	movs	r2, #1
 801523e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015246:	f003 0304 	and.w	r3, r3, #4
 801524a:	2b00      	cmp	r3, #0
 801524c:	d105      	bne.n	801525a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801524e:	2102      	movs	r1, #2
 8015250:	68f8      	ldr	r0, [r7, #12]
 8015252:	f000 fd01 	bl	8015c58 <dhcp_set_state>
    return ERR_OK;
 8015256:	2300      	movs	r3, #0
 8015258:	e010      	b.n	801527c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f000 f8f8 	bl	8015450 <dhcp_discover>
 8015260:	4603      	mov	r3, r0
 8015262:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8015264:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d005      	beq.n	8015278 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801526c:	6878      	ldr	r0, [r7, #4]
 801526e:	f000 fc59 	bl	8015b24 <dhcp_release_and_stop>
    return ERR_MEM;
 8015272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015276:	e001      	b.n	801527c <dhcp_start+0xe4>
  }
  return result;
 8015278:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801527c:	4618      	mov	r0, r3
 801527e:	3710      	adds	r7, #16
 8015280:	46bd      	mov	sp, r7
 8015282:	bd80      	pop	{r7, pc}
 8015284:	0801d6f0 	.word	0x0801d6f0
 8015288:	0801d7d4 	.word	0x0801d7d4
 801528c:	0801d750 	.word	0x0801d750
 8015290:	0801d818 	.word	0x0801d818

08015294 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8015294:	b580      	push	{r7, lr}
 8015296:	b084      	sub	sp, #16
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152a0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d025      	beq.n	80152f4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	795b      	ldrb	r3, [r3, #5]
 80152ac:	2b0a      	cmp	r3, #10
 80152ae:	d008      	beq.n	80152c2 <dhcp_network_changed+0x2e>
 80152b0:	2b0a      	cmp	r3, #10
 80152b2:	dc0d      	bgt.n	80152d0 <dhcp_network_changed+0x3c>
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d01f      	beq.n	80152f8 <dhcp_network_changed+0x64>
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	db09      	blt.n	80152d0 <dhcp_network_changed+0x3c>
 80152bc:	3b03      	subs	r3, #3
 80152be:	2b02      	cmp	r3, #2
 80152c0:	d806      	bhi.n	80152d0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	2200      	movs	r2, #0
 80152c6:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80152c8:	6878      	ldr	r0, [r7, #4]
 80152ca:	f000 fb75 	bl	80159b8 <dhcp_reboot>
      break;
 80152ce:	e014      	b.n	80152fa <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	795b      	ldrb	r3, [r3, #5]
 80152d4:	2b0c      	cmp	r3, #12
 80152d6:	d906      	bls.n	80152e6 <dhcp_network_changed+0x52>
 80152d8:	4b09      	ldr	r3, [pc, #36]	; (8015300 <dhcp_network_changed+0x6c>)
 80152da:	f240 326d 	movw	r2, #877	; 0x36d
 80152de:	4909      	ldr	r1, [pc, #36]	; (8015304 <dhcp_network_changed+0x70>)
 80152e0:	4809      	ldr	r0, [pc, #36]	; (8015308 <dhcp_network_changed+0x74>)
 80152e2:	f004 f9c9 	bl	8019678 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	2200      	movs	r2, #0
 80152ea:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80152ec:	6878      	ldr	r0, [r7, #4]
 80152ee:	f000 f8af 	bl	8015450 <dhcp_discover>
      break;
 80152f2:	e002      	b.n	80152fa <dhcp_network_changed+0x66>
    return;
 80152f4:	bf00      	nop
 80152f6:	e000      	b.n	80152fa <dhcp_network_changed+0x66>
      break;
 80152f8:	bf00      	nop
  }
}
 80152fa:	3710      	adds	r7, #16
 80152fc:	46bd      	mov	sp, r7
 80152fe:	bd80      	pop	{r7, pc}
 8015300:	0801d6f0 	.word	0x0801d6f0
 8015304:	0801d83c 	.word	0x0801d83c
 8015308:	0801d750 	.word	0x0801d750

0801530c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b084      	sub	sp, #16
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
 8015314:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d107      	bne.n	801532c <dhcp_arp_reply+0x20>
 801531c:	4b0e      	ldr	r3, [pc, #56]	; (8015358 <dhcp_arp_reply+0x4c>)
 801531e:	f240 328b 	movw	r2, #907	; 0x38b
 8015322:	490e      	ldr	r1, [pc, #56]	; (801535c <dhcp_arp_reply+0x50>)
 8015324:	480e      	ldr	r0, [pc, #56]	; (8015360 <dhcp_arp_reply+0x54>)
 8015326:	f004 f9a7 	bl	8019678 <iprintf>
 801532a:	e012      	b.n	8015352 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015330:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d00c      	beq.n	8015352 <dhcp_arp_reply+0x46>
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	795b      	ldrb	r3, [r3, #5]
 801533c:	2b08      	cmp	r3, #8
 801533e:	d108      	bne.n	8015352 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8015340:	683b      	ldr	r3, [r7, #0]
 8015342:	681a      	ldr	r2, [r3, #0]
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	69db      	ldr	r3, [r3, #28]
 8015348:	429a      	cmp	r2, r3
 801534a:	d102      	bne.n	8015352 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801534c:	6878      	ldr	r0, [r7, #4]
 801534e:	f000 f809 	bl	8015364 <dhcp_decline>
    }
  }
}
 8015352:	3710      	adds	r7, #16
 8015354:	46bd      	mov	sp, r7
 8015356:	bd80      	pop	{r7, pc}
 8015358:	0801d6f0 	.word	0x0801d6f0
 801535c:	0801d7d4 	.word	0x0801d7d4
 8015360:	0801d750 	.word	0x0801d750

08015364 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8015364:	b5b0      	push	{r4, r5, r7, lr}
 8015366:	b08a      	sub	sp, #40	; 0x28
 8015368:	af02      	add	r7, sp, #8
 801536a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015370:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015372:	210c      	movs	r1, #12
 8015374:	69b8      	ldr	r0, [r7, #24]
 8015376:	f000 fc6f 	bl	8015c58 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801537a:	f107 030c 	add.w	r3, r7, #12
 801537e:	2204      	movs	r2, #4
 8015380:	69b9      	ldr	r1, [r7, #24]
 8015382:	6878      	ldr	r0, [r7, #4]
 8015384:	f001 f8f4 	bl	8016570 <dhcp_create_msg>
 8015388:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801538a:	697b      	ldr	r3, [r7, #20]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d035      	beq.n	80153fc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015390:	697b      	ldr	r3, [r7, #20]
 8015392:	685b      	ldr	r3, [r3, #4]
 8015394:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015396:	89b8      	ldrh	r0, [r7, #12]
 8015398:	693b      	ldr	r3, [r7, #16]
 801539a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801539e:	2304      	movs	r3, #4
 80153a0:	2232      	movs	r2, #50	; 0x32
 80153a2:	f000 fc73 	bl	8015c8c <dhcp_option>
 80153a6:	4603      	mov	r3, r0
 80153a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80153aa:	89bc      	ldrh	r4, [r7, #12]
 80153ac:	693b      	ldr	r3, [r7, #16]
 80153ae:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80153b2:	69bb      	ldr	r3, [r7, #24]
 80153b4:	69db      	ldr	r3, [r3, #28]
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7f6 fde5 	bl	800bf86 <lwip_htonl>
 80153bc:	4603      	mov	r3, r0
 80153be:	461a      	mov	r2, r3
 80153c0:	4629      	mov	r1, r5
 80153c2:	4620      	mov	r0, r4
 80153c4:	f000 fcee 	bl	8015da4 <dhcp_option_long>
 80153c8:	4603      	mov	r3, r0
 80153ca:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80153cc:	89b8      	ldrh	r0, [r7, #12]
 80153ce:	693b      	ldr	r3, [r7, #16]
 80153d0:	33f0      	adds	r3, #240	; 0xf0
 80153d2:	697a      	ldr	r2, [r7, #20]
 80153d4:	4619      	mov	r1, r3
 80153d6:	f001 f9a1 	bl	801671c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80153da:	4b19      	ldr	r3, [pc, #100]	; (8015440 <dhcp_decline+0xdc>)
 80153dc:	6818      	ldr	r0, [r3, #0]
 80153de:	4b19      	ldr	r3, [pc, #100]	; (8015444 <dhcp_decline+0xe0>)
 80153e0:	9301      	str	r3, [sp, #4]
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	9300      	str	r3, [sp, #0]
 80153e6:	2343      	movs	r3, #67	; 0x43
 80153e8:	4a17      	ldr	r2, [pc, #92]	; (8015448 <dhcp_decline+0xe4>)
 80153ea:	6979      	ldr	r1, [r7, #20]
 80153ec:	f7ff f8c6 	bl	801457c <udp_sendto_if_src>
 80153f0:	4603      	mov	r3, r0
 80153f2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80153f4:	6978      	ldr	r0, [r7, #20]
 80153f6:	f7f8 f9e1 	bl	800d7bc <pbuf_free>
 80153fa:	e001      	b.n	8015400 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80153fc:	23ff      	movs	r3, #255	; 0xff
 80153fe:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015400:	69bb      	ldr	r3, [r7, #24]
 8015402:	799b      	ldrb	r3, [r3, #6]
 8015404:	2bff      	cmp	r3, #255	; 0xff
 8015406:	d005      	beq.n	8015414 <dhcp_decline+0xb0>
    dhcp->tries++;
 8015408:	69bb      	ldr	r3, [r7, #24]
 801540a:	799b      	ldrb	r3, [r3, #6]
 801540c:	3301      	adds	r3, #1
 801540e:	b2da      	uxtb	r2, r3
 8015410:	69bb      	ldr	r3, [r7, #24]
 8015412:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8015414:	f242 7310 	movw	r3, #10000	; 0x2710
 8015418:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801541a:	89fb      	ldrh	r3, [r7, #14]
 801541c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015420:	4a0a      	ldr	r2, [pc, #40]	; (801544c <dhcp_decline+0xe8>)
 8015422:	fb82 1203 	smull	r1, r2, r2, r3
 8015426:	1152      	asrs	r2, r2, #5
 8015428:	17db      	asrs	r3, r3, #31
 801542a:	1ad3      	subs	r3, r2, r3
 801542c:	b29a      	uxth	r2, r3
 801542e:	69bb      	ldr	r3, [r7, #24]
 8015430:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015432:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015436:	4618      	mov	r0, r3
 8015438:	3720      	adds	r7, #32
 801543a:	46bd      	mov	sp, r7
 801543c:	bdb0      	pop	{r4, r5, r7, pc}
 801543e:	bf00      	nop
 8015440:	2000cff0 	.word	0x2000cff0
 8015444:	0801e304 	.word	0x0801e304
 8015448:	0801e308 	.word	0x0801e308
 801544c:	10624dd3 	.word	0x10624dd3

08015450 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b08a      	sub	sp, #40	; 0x28
 8015454:	af02      	add	r7, sp, #8
 8015456:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801545c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801545e:	2300      	movs	r3, #0
 8015460:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8015462:	69bb      	ldr	r3, [r7, #24]
 8015464:	2200      	movs	r2, #0
 8015466:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8015468:	2106      	movs	r1, #6
 801546a:	69b8      	ldr	r0, [r7, #24]
 801546c:	f000 fbf4 	bl	8015c58 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8015470:	f107 0308 	add.w	r3, r7, #8
 8015474:	2201      	movs	r2, #1
 8015476:	69b9      	ldr	r1, [r7, #24]
 8015478:	6878      	ldr	r0, [r7, #4]
 801547a:	f001 f879 	bl	8016570 <dhcp_create_msg>
 801547e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8015480:	693b      	ldr	r3, [r7, #16]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d04b      	beq.n	801551e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015486:	693b      	ldr	r3, [r7, #16]
 8015488:	685b      	ldr	r3, [r3, #4]
 801548a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801548c:	8938      	ldrh	r0, [r7, #8]
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015494:	2302      	movs	r3, #2
 8015496:	2239      	movs	r2, #57	; 0x39
 8015498:	f000 fbf8 	bl	8015c8c <dhcp_option>
 801549c:	4603      	mov	r3, r0
 801549e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80154a0:	8938      	ldrh	r0, [r7, #8]
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80154ac:	461a      	mov	r2, r3
 80154ae:	f000 fc47 	bl	8015d40 <dhcp_option_short>
 80154b2:	4603      	mov	r3, r0
 80154b4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80154b6:	8938      	ldrh	r0, [r7, #8]
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154be:	2303      	movs	r3, #3
 80154c0:	2237      	movs	r2, #55	; 0x37
 80154c2:	f000 fbe3 	bl	8015c8c <dhcp_option>
 80154c6:	4603      	mov	r3, r0
 80154c8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80154ca:	2300      	movs	r3, #0
 80154cc:	77fb      	strb	r3, [r7, #31]
 80154ce:	e00e      	b.n	80154ee <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80154d0:	8938      	ldrh	r0, [r7, #8]
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154d8:	7ffb      	ldrb	r3, [r7, #31]
 80154da:	4a29      	ldr	r2, [pc, #164]	; (8015580 <dhcp_discover+0x130>)
 80154dc:	5cd3      	ldrb	r3, [r2, r3]
 80154de:	461a      	mov	r2, r3
 80154e0:	f000 fc08 	bl	8015cf4 <dhcp_option_byte>
 80154e4:	4603      	mov	r3, r0
 80154e6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80154e8:	7ffb      	ldrb	r3, [r7, #31]
 80154ea:	3301      	adds	r3, #1
 80154ec:	77fb      	strb	r3, [r7, #31]
 80154ee:	7ffb      	ldrb	r3, [r7, #31]
 80154f0:	2b02      	cmp	r3, #2
 80154f2:	d9ed      	bls.n	80154d0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80154f4:	8938      	ldrh	r0, [r7, #8]
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	33f0      	adds	r3, #240	; 0xf0
 80154fa:	693a      	ldr	r2, [r7, #16]
 80154fc:	4619      	mov	r1, r3
 80154fe:	f001 f90d 	bl	801671c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015502:	4b20      	ldr	r3, [pc, #128]	; (8015584 <dhcp_discover+0x134>)
 8015504:	6818      	ldr	r0, [r3, #0]
 8015506:	4b20      	ldr	r3, [pc, #128]	; (8015588 <dhcp_discover+0x138>)
 8015508:	9301      	str	r3, [sp, #4]
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	9300      	str	r3, [sp, #0]
 801550e:	2343      	movs	r3, #67	; 0x43
 8015510:	4a1e      	ldr	r2, [pc, #120]	; (801558c <dhcp_discover+0x13c>)
 8015512:	6939      	ldr	r1, [r7, #16]
 8015514:	f7ff f832 	bl	801457c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8015518:	6938      	ldr	r0, [r7, #16]
 801551a:	f7f8 f94f 	bl	800d7bc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801551e:	69bb      	ldr	r3, [r7, #24]
 8015520:	799b      	ldrb	r3, [r3, #6]
 8015522:	2bff      	cmp	r3, #255	; 0xff
 8015524:	d005      	beq.n	8015532 <dhcp_discover+0xe2>
    dhcp->tries++;
 8015526:	69bb      	ldr	r3, [r7, #24]
 8015528:	799b      	ldrb	r3, [r3, #6]
 801552a:	3301      	adds	r3, #1
 801552c:	b2da      	uxtb	r2, r3
 801552e:	69bb      	ldr	r3, [r7, #24]
 8015530:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015532:	69bb      	ldr	r3, [r7, #24]
 8015534:	799b      	ldrb	r3, [r3, #6]
 8015536:	2b05      	cmp	r3, #5
 8015538:	d80d      	bhi.n	8015556 <dhcp_discover+0x106>
 801553a:	69bb      	ldr	r3, [r7, #24]
 801553c:	799b      	ldrb	r3, [r3, #6]
 801553e:	461a      	mov	r2, r3
 8015540:	2301      	movs	r3, #1
 8015542:	4093      	lsls	r3, r2
 8015544:	b29b      	uxth	r3, r3
 8015546:	461a      	mov	r2, r3
 8015548:	0152      	lsls	r2, r2, #5
 801554a:	1ad2      	subs	r2, r2, r3
 801554c:	0092      	lsls	r2, r2, #2
 801554e:	4413      	add	r3, r2
 8015550:	00db      	lsls	r3, r3, #3
 8015552:	b29b      	uxth	r3, r3
 8015554:	e001      	b.n	801555a <dhcp_discover+0x10a>
 8015556:	f64e 2360 	movw	r3, #60000	; 0xea60
 801555a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801555c:	897b      	ldrh	r3, [r7, #10]
 801555e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015562:	4a0b      	ldr	r2, [pc, #44]	; (8015590 <dhcp_discover+0x140>)
 8015564:	fb82 1203 	smull	r1, r2, r2, r3
 8015568:	1152      	asrs	r2, r2, #5
 801556a:	17db      	asrs	r3, r3, #31
 801556c:	1ad3      	subs	r3, r2, r3
 801556e:	b29a      	uxth	r2, r3
 8015570:	69bb      	ldr	r3, [r7, #24]
 8015572:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015574:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015578:	4618      	mov	r0, r3
 801557a:	3720      	adds	r7, #32
 801557c:	46bd      	mov	sp, r7
 801557e:	bd80      	pop	{r7, pc}
 8015580:	20000030 	.word	0x20000030
 8015584:	2000cff0 	.word	0x2000cff0
 8015588:	0801e304 	.word	0x0801e304
 801558c:	0801e308 	.word	0x0801e308
 8015590:	10624dd3 	.word	0x10624dd3

08015594 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b088      	sub	sp, #32
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d107      	bne.n	80155b2 <dhcp_bind+0x1e>
 80155a2:	4b64      	ldr	r3, [pc, #400]	; (8015734 <dhcp_bind+0x1a0>)
 80155a4:	f240 4215 	movw	r2, #1045	; 0x415
 80155a8:	4963      	ldr	r1, [pc, #396]	; (8015738 <dhcp_bind+0x1a4>)
 80155aa:	4864      	ldr	r0, [pc, #400]	; (801573c <dhcp_bind+0x1a8>)
 80155ac:	f004 f864 	bl	8019678 <iprintf>
 80155b0:	e0bc      	b.n	801572c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155b6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80155b8:	69bb      	ldr	r3, [r7, #24]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d107      	bne.n	80155ce <dhcp_bind+0x3a>
 80155be:	4b5d      	ldr	r3, [pc, #372]	; (8015734 <dhcp_bind+0x1a0>)
 80155c0:	f240 4217 	movw	r2, #1047	; 0x417
 80155c4:	495e      	ldr	r1, [pc, #376]	; (8015740 <dhcp_bind+0x1ac>)
 80155c6:	485d      	ldr	r0, [pc, #372]	; (801573c <dhcp_bind+0x1a8>)
 80155c8:	f004 f856 	bl	8019678 <iprintf>
 80155cc:	e0ae      	b.n	801572c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80155ce:	69bb      	ldr	r3, [r7, #24]
 80155d0:	2200      	movs	r2, #0
 80155d2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80155d4:	69bb      	ldr	r3, [r7, #24]
 80155d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80155dc:	d019      	beq.n	8015612 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80155de:	69bb      	ldr	r3, [r7, #24]
 80155e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155e2:	331e      	adds	r3, #30
 80155e4:	4a57      	ldr	r2, [pc, #348]	; (8015744 <dhcp_bind+0x1b0>)
 80155e6:	fba2 2303 	umull	r2, r3, r2, r3
 80155ea:	095b      	lsrs	r3, r3, #5
 80155ec:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80155ee:	69fb      	ldr	r3, [r7, #28]
 80155f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80155f4:	d302      	bcc.n	80155fc <dhcp_bind+0x68>
      timeout = 0xffff;
 80155f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155fa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80155fc:	69fb      	ldr	r3, [r7, #28]
 80155fe:	b29a      	uxth	r2, r3
 8015600:	69bb      	ldr	r3, [r7, #24]
 8015602:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8015604:	69bb      	ldr	r3, [r7, #24]
 8015606:	8a9b      	ldrh	r3, [r3, #20]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d102      	bne.n	8015612 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801560c:	69bb      	ldr	r3, [r7, #24]
 801560e:	2201      	movs	r2, #1
 8015610:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8015612:	69bb      	ldr	r3, [r7, #24]
 8015614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801561a:	d01d      	beq.n	8015658 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801561c:	69bb      	ldr	r3, [r7, #24]
 801561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015620:	331e      	adds	r3, #30
 8015622:	4a48      	ldr	r2, [pc, #288]	; (8015744 <dhcp_bind+0x1b0>)
 8015624:	fba2 2303 	umull	r2, r3, r2, r3
 8015628:	095b      	lsrs	r3, r3, #5
 801562a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801562c:	69fb      	ldr	r3, [r7, #28]
 801562e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015632:	d302      	bcc.n	801563a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8015634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015638:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801563a:	69fb      	ldr	r3, [r7, #28]
 801563c:	b29a      	uxth	r2, r3
 801563e:	69bb      	ldr	r3, [r7, #24]
 8015640:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8015642:	69bb      	ldr	r3, [r7, #24]
 8015644:	895b      	ldrh	r3, [r3, #10]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d102      	bne.n	8015650 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801564a:	69bb      	ldr	r3, [r7, #24]
 801564c:	2201      	movs	r2, #1
 801564e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8015650:	69bb      	ldr	r3, [r7, #24]
 8015652:	895a      	ldrh	r2, [r3, #10]
 8015654:	69bb      	ldr	r3, [r7, #24]
 8015656:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8015658:	69bb      	ldr	r3, [r7, #24]
 801565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801565c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015660:	d01d      	beq.n	801569e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015662:	69bb      	ldr	r3, [r7, #24]
 8015664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015666:	331e      	adds	r3, #30
 8015668:	4a36      	ldr	r2, [pc, #216]	; (8015744 <dhcp_bind+0x1b0>)
 801566a:	fba2 2303 	umull	r2, r3, r2, r3
 801566e:	095b      	lsrs	r3, r3, #5
 8015670:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015672:	69fb      	ldr	r3, [r7, #28]
 8015674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015678:	d302      	bcc.n	8015680 <dhcp_bind+0xec>
      timeout = 0xffff;
 801567a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801567e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8015680:	69fb      	ldr	r3, [r7, #28]
 8015682:	b29a      	uxth	r2, r3
 8015684:	69bb      	ldr	r3, [r7, #24]
 8015686:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8015688:	69bb      	ldr	r3, [r7, #24]
 801568a:	899b      	ldrh	r3, [r3, #12]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d102      	bne.n	8015696 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8015690:	69bb      	ldr	r3, [r7, #24]
 8015692:	2201      	movs	r2, #1
 8015694:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8015696:	69bb      	ldr	r3, [r7, #24]
 8015698:	899a      	ldrh	r2, [r3, #12]
 801569a:	69bb      	ldr	r3, [r7, #24]
 801569c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801569e:	69bb      	ldr	r3, [r7, #24]
 80156a0:	895a      	ldrh	r2, [r3, #10]
 80156a2:	69bb      	ldr	r3, [r7, #24]
 80156a4:	899b      	ldrh	r3, [r3, #12]
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d306      	bcc.n	80156b8 <dhcp_bind+0x124>
 80156aa:	69bb      	ldr	r3, [r7, #24]
 80156ac:	899b      	ldrh	r3, [r3, #12]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d002      	beq.n	80156b8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80156b2:	69bb      	ldr	r3, [r7, #24]
 80156b4:	2200      	movs	r2, #0
 80156b6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80156b8:	69bb      	ldr	r3, [r7, #24]
 80156ba:	79db      	ldrb	r3, [r3, #7]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d003      	beq.n	80156c8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80156c0:	69bb      	ldr	r3, [r7, #24]
 80156c2:	6a1b      	ldr	r3, [r3, #32]
 80156c4:	613b      	str	r3, [r7, #16]
 80156c6:	e014      	b.n	80156f2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80156c8:	69bb      	ldr	r3, [r7, #24]
 80156ca:	331c      	adds	r3, #28
 80156cc:	781b      	ldrb	r3, [r3, #0]
 80156ce:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80156d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	db02      	blt.n	80156de <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80156d8:	23ff      	movs	r3, #255	; 0xff
 80156da:	613b      	str	r3, [r7, #16]
 80156dc:	e009      	b.n	80156f2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80156de:	7dfb      	ldrb	r3, [r7, #23]
 80156e0:	2bbf      	cmp	r3, #191	; 0xbf
 80156e2:	d903      	bls.n	80156ec <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80156e4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80156e8:	613b      	str	r3, [r7, #16]
 80156ea:	e002      	b.n	80156f2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80156ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80156f0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80156f2:	69bb      	ldr	r3, [r7, #24]
 80156f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156f6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d108      	bne.n	8015710 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80156fe:	69bb      	ldr	r3, [r7, #24]
 8015700:	69da      	ldr	r2, [r3, #28]
 8015702:	693b      	ldr	r3, [r7, #16]
 8015704:	4013      	ands	r3, r2
 8015706:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801570e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015710:	210a      	movs	r1, #10
 8015712:	69b8      	ldr	r0, [r7, #24]
 8015714:	f000 faa0 	bl	8015c58 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015718:	69bb      	ldr	r3, [r7, #24]
 801571a:	f103 011c 	add.w	r1, r3, #28
 801571e:	f107 030c 	add.w	r3, r7, #12
 8015722:	f107 0210 	add.w	r2, r7, #16
 8015726:	6878      	ldr	r0, [r7, #4]
 8015728:	f7f7 fb08 	bl	800cd3c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801572c:	3720      	adds	r7, #32
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop
 8015734:	0801d6f0 	.word	0x0801d6f0
 8015738:	0801d850 	.word	0x0801d850
 801573c:	0801d750 	.word	0x0801d750
 8015740:	0801d86c 	.word	0x0801d86c
 8015744:	88888889 	.word	0x88888889

08015748 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015748:	b580      	push	{r7, lr}
 801574a:	b08a      	sub	sp, #40	; 0x28
 801574c:	af02      	add	r7, sp, #8
 801574e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015754:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8015756:	2105      	movs	r1, #5
 8015758:	69b8      	ldr	r0, [r7, #24]
 801575a:	f000 fa7d 	bl	8015c58 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801575e:	f107 030c 	add.w	r3, r7, #12
 8015762:	2203      	movs	r2, #3
 8015764:	69b9      	ldr	r1, [r7, #24]
 8015766:	6878      	ldr	r0, [r7, #4]
 8015768:	f000 ff02 	bl	8016570 <dhcp_create_msg>
 801576c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801576e:	697b      	ldr	r3, [r7, #20]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d04e      	beq.n	8015812 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015774:	697b      	ldr	r3, [r7, #20]
 8015776:	685b      	ldr	r3, [r3, #4]
 8015778:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801577a:	89b8      	ldrh	r0, [r7, #12]
 801577c:	693b      	ldr	r3, [r7, #16]
 801577e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015782:	2302      	movs	r3, #2
 8015784:	2239      	movs	r2, #57	; 0x39
 8015786:	f000 fa81 	bl	8015c8c <dhcp_option>
 801578a:	4603      	mov	r3, r0
 801578c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801578e:	89b8      	ldrh	r0, [r7, #12]
 8015790:	693b      	ldr	r3, [r7, #16]
 8015792:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801579a:	461a      	mov	r2, r3
 801579c:	f000 fad0 	bl	8015d40 <dhcp_option_short>
 80157a0:	4603      	mov	r3, r0
 80157a2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80157a4:	89b8      	ldrh	r0, [r7, #12]
 80157a6:	693b      	ldr	r3, [r7, #16]
 80157a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80157ac:	2303      	movs	r3, #3
 80157ae:	2237      	movs	r2, #55	; 0x37
 80157b0:	f000 fa6c 	bl	8015c8c <dhcp_option>
 80157b4:	4603      	mov	r3, r0
 80157b6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80157b8:	2300      	movs	r3, #0
 80157ba:	77bb      	strb	r3, [r7, #30]
 80157bc:	e00e      	b.n	80157dc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80157be:	89b8      	ldrh	r0, [r7, #12]
 80157c0:	693b      	ldr	r3, [r7, #16]
 80157c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80157c6:	7fbb      	ldrb	r3, [r7, #30]
 80157c8:	4a2a      	ldr	r2, [pc, #168]	; (8015874 <dhcp_renew+0x12c>)
 80157ca:	5cd3      	ldrb	r3, [r2, r3]
 80157cc:	461a      	mov	r2, r3
 80157ce:	f000 fa91 	bl	8015cf4 <dhcp_option_byte>
 80157d2:	4603      	mov	r3, r0
 80157d4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80157d6:	7fbb      	ldrb	r3, [r7, #30]
 80157d8:	3301      	adds	r3, #1
 80157da:	77bb      	strb	r3, [r7, #30]
 80157dc:	7fbb      	ldrb	r3, [r7, #30]
 80157de:	2b02      	cmp	r3, #2
 80157e0:	d9ed      	bls.n	80157be <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80157e2:	89b8      	ldrh	r0, [r7, #12]
 80157e4:	693b      	ldr	r3, [r7, #16]
 80157e6:	33f0      	adds	r3, #240	; 0xf0
 80157e8:	697a      	ldr	r2, [r7, #20]
 80157ea:	4619      	mov	r1, r3
 80157ec:	f000 ff96 	bl	801671c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80157f0:	4b21      	ldr	r3, [pc, #132]	; (8015878 <dhcp_renew+0x130>)
 80157f2:	6818      	ldr	r0, [r3, #0]
 80157f4:	69bb      	ldr	r3, [r7, #24]
 80157f6:	f103 0218 	add.w	r2, r3, #24
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	9300      	str	r3, [sp, #0]
 80157fe:	2343      	movs	r3, #67	; 0x43
 8015800:	6979      	ldr	r1, [r7, #20]
 8015802:	f7fe fe47 	bl	8014494 <udp_sendto_if>
 8015806:	4603      	mov	r3, r0
 8015808:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801580a:	6978      	ldr	r0, [r7, #20]
 801580c:	f7f7 ffd6 	bl	800d7bc <pbuf_free>
 8015810:	e001      	b.n	8015816 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015812:	23ff      	movs	r3, #255	; 0xff
 8015814:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015816:	69bb      	ldr	r3, [r7, #24]
 8015818:	799b      	ldrb	r3, [r3, #6]
 801581a:	2bff      	cmp	r3, #255	; 0xff
 801581c:	d005      	beq.n	801582a <dhcp_renew+0xe2>
    dhcp->tries++;
 801581e:	69bb      	ldr	r3, [r7, #24]
 8015820:	799b      	ldrb	r3, [r3, #6]
 8015822:	3301      	adds	r3, #1
 8015824:	b2da      	uxtb	r2, r3
 8015826:	69bb      	ldr	r3, [r7, #24]
 8015828:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801582a:	69bb      	ldr	r3, [r7, #24]
 801582c:	799b      	ldrb	r3, [r3, #6]
 801582e:	2b09      	cmp	r3, #9
 8015830:	d80a      	bhi.n	8015848 <dhcp_renew+0x100>
 8015832:	69bb      	ldr	r3, [r7, #24]
 8015834:	799b      	ldrb	r3, [r3, #6]
 8015836:	b29b      	uxth	r3, r3
 8015838:	461a      	mov	r2, r3
 801583a:	0152      	lsls	r2, r2, #5
 801583c:	1ad2      	subs	r2, r2, r3
 801583e:	0092      	lsls	r2, r2, #2
 8015840:	4413      	add	r3, r2
 8015842:	011b      	lsls	r3, r3, #4
 8015844:	b29b      	uxth	r3, r3
 8015846:	e001      	b.n	801584c <dhcp_renew+0x104>
 8015848:	f644 6320 	movw	r3, #20000	; 0x4e20
 801584c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801584e:	89fb      	ldrh	r3, [r7, #14]
 8015850:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015854:	4a09      	ldr	r2, [pc, #36]	; (801587c <dhcp_renew+0x134>)
 8015856:	fb82 1203 	smull	r1, r2, r2, r3
 801585a:	1152      	asrs	r2, r2, #5
 801585c:	17db      	asrs	r3, r3, #31
 801585e:	1ad3      	subs	r3, r2, r3
 8015860:	b29a      	uxth	r2, r3
 8015862:	69bb      	ldr	r3, [r7, #24]
 8015864:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015866:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801586a:	4618      	mov	r0, r3
 801586c:	3720      	adds	r7, #32
 801586e:	46bd      	mov	sp, r7
 8015870:	bd80      	pop	{r7, pc}
 8015872:	bf00      	nop
 8015874:	20000030 	.word	0x20000030
 8015878:	2000cff0 	.word	0x2000cff0
 801587c:	10624dd3 	.word	0x10624dd3

08015880 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b08a      	sub	sp, #40	; 0x28
 8015884:	af02      	add	r7, sp, #8
 8015886:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801588c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801588e:	2104      	movs	r1, #4
 8015890:	69b8      	ldr	r0, [r7, #24]
 8015892:	f000 f9e1 	bl	8015c58 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015896:	f107 030c 	add.w	r3, r7, #12
 801589a:	2203      	movs	r2, #3
 801589c:	69b9      	ldr	r1, [r7, #24]
 801589e:	6878      	ldr	r0, [r7, #4]
 80158a0:	f000 fe66 	bl	8016570 <dhcp_create_msg>
 80158a4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80158a6:	697b      	ldr	r3, [r7, #20]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d04c      	beq.n	8015946 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80158ac:	697b      	ldr	r3, [r7, #20]
 80158ae:	685b      	ldr	r3, [r3, #4]
 80158b0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80158b2:	89b8      	ldrh	r0, [r7, #12]
 80158b4:	693b      	ldr	r3, [r7, #16]
 80158b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80158ba:	2302      	movs	r3, #2
 80158bc:	2239      	movs	r2, #57	; 0x39
 80158be:	f000 f9e5 	bl	8015c8c <dhcp_option>
 80158c2:	4603      	mov	r3, r0
 80158c4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80158c6:	89b8      	ldrh	r0, [r7, #12]
 80158c8:	693b      	ldr	r3, [r7, #16]
 80158ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80158d2:	461a      	mov	r2, r3
 80158d4:	f000 fa34 	bl	8015d40 <dhcp_option_short>
 80158d8:	4603      	mov	r3, r0
 80158da:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80158dc:	89b8      	ldrh	r0, [r7, #12]
 80158de:	693b      	ldr	r3, [r7, #16]
 80158e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80158e4:	2303      	movs	r3, #3
 80158e6:	2237      	movs	r2, #55	; 0x37
 80158e8:	f000 f9d0 	bl	8015c8c <dhcp_option>
 80158ec:	4603      	mov	r3, r0
 80158ee:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80158f0:	2300      	movs	r3, #0
 80158f2:	77bb      	strb	r3, [r7, #30]
 80158f4:	e00e      	b.n	8015914 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80158f6:	89b8      	ldrh	r0, [r7, #12]
 80158f8:	693b      	ldr	r3, [r7, #16]
 80158fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80158fe:	7fbb      	ldrb	r3, [r7, #30]
 8015900:	4a29      	ldr	r2, [pc, #164]	; (80159a8 <dhcp_rebind+0x128>)
 8015902:	5cd3      	ldrb	r3, [r2, r3]
 8015904:	461a      	mov	r2, r3
 8015906:	f000 f9f5 	bl	8015cf4 <dhcp_option_byte>
 801590a:	4603      	mov	r3, r0
 801590c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801590e:	7fbb      	ldrb	r3, [r7, #30]
 8015910:	3301      	adds	r3, #1
 8015912:	77bb      	strb	r3, [r7, #30]
 8015914:	7fbb      	ldrb	r3, [r7, #30]
 8015916:	2b02      	cmp	r3, #2
 8015918:	d9ed      	bls.n	80158f6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801591a:	89b8      	ldrh	r0, [r7, #12]
 801591c:	693b      	ldr	r3, [r7, #16]
 801591e:	33f0      	adds	r3, #240	; 0xf0
 8015920:	697a      	ldr	r2, [r7, #20]
 8015922:	4619      	mov	r1, r3
 8015924:	f000 fefa 	bl	801671c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015928:	4b20      	ldr	r3, [pc, #128]	; (80159ac <dhcp_rebind+0x12c>)
 801592a:	6818      	ldr	r0, [r3, #0]
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	9300      	str	r3, [sp, #0]
 8015930:	2343      	movs	r3, #67	; 0x43
 8015932:	4a1f      	ldr	r2, [pc, #124]	; (80159b0 <dhcp_rebind+0x130>)
 8015934:	6979      	ldr	r1, [r7, #20]
 8015936:	f7fe fdad 	bl	8014494 <udp_sendto_if>
 801593a:	4603      	mov	r3, r0
 801593c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801593e:	6978      	ldr	r0, [r7, #20]
 8015940:	f7f7 ff3c 	bl	800d7bc <pbuf_free>
 8015944:	e001      	b.n	801594a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015946:	23ff      	movs	r3, #255	; 0xff
 8015948:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801594a:	69bb      	ldr	r3, [r7, #24]
 801594c:	799b      	ldrb	r3, [r3, #6]
 801594e:	2bff      	cmp	r3, #255	; 0xff
 8015950:	d005      	beq.n	801595e <dhcp_rebind+0xde>
    dhcp->tries++;
 8015952:	69bb      	ldr	r3, [r7, #24]
 8015954:	799b      	ldrb	r3, [r3, #6]
 8015956:	3301      	adds	r3, #1
 8015958:	b2da      	uxtb	r2, r3
 801595a:	69bb      	ldr	r3, [r7, #24]
 801595c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801595e:	69bb      	ldr	r3, [r7, #24]
 8015960:	799b      	ldrb	r3, [r3, #6]
 8015962:	2b09      	cmp	r3, #9
 8015964:	d80a      	bhi.n	801597c <dhcp_rebind+0xfc>
 8015966:	69bb      	ldr	r3, [r7, #24]
 8015968:	799b      	ldrb	r3, [r3, #6]
 801596a:	b29b      	uxth	r3, r3
 801596c:	461a      	mov	r2, r3
 801596e:	0152      	lsls	r2, r2, #5
 8015970:	1ad2      	subs	r2, r2, r3
 8015972:	0092      	lsls	r2, r2, #2
 8015974:	4413      	add	r3, r2
 8015976:	00db      	lsls	r3, r3, #3
 8015978:	b29b      	uxth	r3, r3
 801597a:	e001      	b.n	8015980 <dhcp_rebind+0x100>
 801597c:	f242 7310 	movw	r3, #10000	; 0x2710
 8015980:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015982:	89fb      	ldrh	r3, [r7, #14]
 8015984:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015988:	4a0a      	ldr	r2, [pc, #40]	; (80159b4 <dhcp_rebind+0x134>)
 801598a:	fb82 1203 	smull	r1, r2, r2, r3
 801598e:	1152      	asrs	r2, r2, #5
 8015990:	17db      	asrs	r3, r3, #31
 8015992:	1ad3      	subs	r3, r2, r3
 8015994:	b29a      	uxth	r2, r3
 8015996:	69bb      	ldr	r3, [r7, #24]
 8015998:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801599a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801599e:	4618      	mov	r0, r3
 80159a0:	3720      	adds	r7, #32
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}
 80159a6:	bf00      	nop
 80159a8:	20000030 	.word	0x20000030
 80159ac:	2000cff0 	.word	0x2000cff0
 80159b0:	0801e308 	.word	0x0801e308
 80159b4:	10624dd3 	.word	0x10624dd3

080159b8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80159b8:	b5b0      	push	{r4, r5, r7, lr}
 80159ba:	b08a      	sub	sp, #40	; 0x28
 80159bc:	af02      	add	r7, sp, #8
 80159be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159c4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80159c6:	2103      	movs	r1, #3
 80159c8:	69b8      	ldr	r0, [r7, #24]
 80159ca:	f000 f945 	bl	8015c58 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80159ce:	f107 030c 	add.w	r3, r7, #12
 80159d2:	2203      	movs	r2, #3
 80159d4:	69b9      	ldr	r1, [r7, #24]
 80159d6:	6878      	ldr	r0, [r7, #4]
 80159d8:	f000 fdca 	bl	8016570 <dhcp_create_msg>
 80159dc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80159de:	697b      	ldr	r3, [r7, #20]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d066      	beq.n	8015ab2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80159e4:	697b      	ldr	r3, [r7, #20]
 80159e6:	685b      	ldr	r3, [r3, #4]
 80159e8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80159ea:	89b8      	ldrh	r0, [r7, #12]
 80159ec:	693b      	ldr	r3, [r7, #16]
 80159ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80159f2:	2302      	movs	r3, #2
 80159f4:	2239      	movs	r2, #57	; 0x39
 80159f6:	f000 f949 	bl	8015c8c <dhcp_option>
 80159fa:	4603      	mov	r3, r0
 80159fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80159fe:	89b8      	ldrh	r0, [r7, #12]
 8015a00:	693b      	ldr	r3, [r7, #16]
 8015a02:	33f0      	adds	r3, #240	; 0xf0
 8015a04:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015a08:	4619      	mov	r1, r3
 8015a0a:	f000 f999 	bl	8015d40 <dhcp_option_short>
 8015a0e:	4603      	mov	r3, r0
 8015a10:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015a12:	89b8      	ldrh	r0, [r7, #12]
 8015a14:	693b      	ldr	r3, [r7, #16]
 8015a16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015a1a:	2304      	movs	r3, #4
 8015a1c:	2232      	movs	r2, #50	; 0x32
 8015a1e:	f000 f935 	bl	8015c8c <dhcp_option>
 8015a22:	4603      	mov	r3, r0
 8015a24:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015a26:	89bc      	ldrh	r4, [r7, #12]
 8015a28:	693b      	ldr	r3, [r7, #16]
 8015a2a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015a2e:	69bb      	ldr	r3, [r7, #24]
 8015a30:	69db      	ldr	r3, [r3, #28]
 8015a32:	4618      	mov	r0, r3
 8015a34:	f7f6 faa7 	bl	800bf86 <lwip_htonl>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	461a      	mov	r2, r3
 8015a3c:	4629      	mov	r1, r5
 8015a3e:	4620      	mov	r0, r4
 8015a40:	f000 f9b0 	bl	8015da4 <dhcp_option_long>
 8015a44:	4603      	mov	r3, r0
 8015a46:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015a48:	89b8      	ldrh	r0, [r7, #12]
 8015a4a:	693b      	ldr	r3, [r7, #16]
 8015a4c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015a50:	2303      	movs	r3, #3
 8015a52:	2237      	movs	r2, #55	; 0x37
 8015a54:	f000 f91a 	bl	8015c8c <dhcp_option>
 8015a58:	4603      	mov	r3, r0
 8015a5a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	77bb      	strb	r3, [r7, #30]
 8015a60:	e00e      	b.n	8015a80 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015a62:	89b8      	ldrh	r0, [r7, #12]
 8015a64:	693b      	ldr	r3, [r7, #16]
 8015a66:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015a6a:	7fbb      	ldrb	r3, [r7, #30]
 8015a6c:	4a29      	ldr	r2, [pc, #164]	; (8015b14 <dhcp_reboot+0x15c>)
 8015a6e:	5cd3      	ldrb	r3, [r2, r3]
 8015a70:	461a      	mov	r2, r3
 8015a72:	f000 f93f 	bl	8015cf4 <dhcp_option_byte>
 8015a76:	4603      	mov	r3, r0
 8015a78:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015a7a:	7fbb      	ldrb	r3, [r7, #30]
 8015a7c:	3301      	adds	r3, #1
 8015a7e:	77bb      	strb	r3, [r7, #30]
 8015a80:	7fbb      	ldrb	r3, [r7, #30]
 8015a82:	2b02      	cmp	r3, #2
 8015a84:	d9ed      	bls.n	8015a62 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015a86:	89b8      	ldrh	r0, [r7, #12]
 8015a88:	693b      	ldr	r3, [r7, #16]
 8015a8a:	33f0      	adds	r3, #240	; 0xf0
 8015a8c:	697a      	ldr	r2, [r7, #20]
 8015a8e:	4619      	mov	r1, r3
 8015a90:	f000 fe44 	bl	801671c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015a94:	4b20      	ldr	r3, [pc, #128]	; (8015b18 <dhcp_reboot+0x160>)
 8015a96:	6818      	ldr	r0, [r3, #0]
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	9300      	str	r3, [sp, #0]
 8015a9c:	2343      	movs	r3, #67	; 0x43
 8015a9e:	4a1f      	ldr	r2, [pc, #124]	; (8015b1c <dhcp_reboot+0x164>)
 8015aa0:	6979      	ldr	r1, [r7, #20]
 8015aa2:	f7fe fcf7 	bl	8014494 <udp_sendto_if>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015aaa:	6978      	ldr	r0, [r7, #20]
 8015aac:	f7f7 fe86 	bl	800d7bc <pbuf_free>
 8015ab0:	e001      	b.n	8015ab6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015ab2:	23ff      	movs	r3, #255	; 0xff
 8015ab4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015ab6:	69bb      	ldr	r3, [r7, #24]
 8015ab8:	799b      	ldrb	r3, [r3, #6]
 8015aba:	2bff      	cmp	r3, #255	; 0xff
 8015abc:	d005      	beq.n	8015aca <dhcp_reboot+0x112>
    dhcp->tries++;
 8015abe:	69bb      	ldr	r3, [r7, #24]
 8015ac0:	799b      	ldrb	r3, [r3, #6]
 8015ac2:	3301      	adds	r3, #1
 8015ac4:	b2da      	uxtb	r2, r3
 8015ac6:	69bb      	ldr	r3, [r7, #24]
 8015ac8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015aca:	69bb      	ldr	r3, [r7, #24]
 8015acc:	799b      	ldrb	r3, [r3, #6]
 8015ace:	2b09      	cmp	r3, #9
 8015ad0:	d80a      	bhi.n	8015ae8 <dhcp_reboot+0x130>
 8015ad2:	69bb      	ldr	r3, [r7, #24]
 8015ad4:	799b      	ldrb	r3, [r3, #6]
 8015ad6:	b29b      	uxth	r3, r3
 8015ad8:	461a      	mov	r2, r3
 8015ada:	0152      	lsls	r2, r2, #5
 8015adc:	1ad2      	subs	r2, r2, r3
 8015ade:	0092      	lsls	r2, r2, #2
 8015ae0:	4413      	add	r3, r2
 8015ae2:	00db      	lsls	r3, r3, #3
 8015ae4:	b29b      	uxth	r3, r3
 8015ae6:	e001      	b.n	8015aec <dhcp_reboot+0x134>
 8015ae8:	f242 7310 	movw	r3, #10000	; 0x2710
 8015aec:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015aee:	89fb      	ldrh	r3, [r7, #14]
 8015af0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015af4:	4a0a      	ldr	r2, [pc, #40]	; (8015b20 <dhcp_reboot+0x168>)
 8015af6:	fb82 1203 	smull	r1, r2, r2, r3
 8015afa:	1152      	asrs	r2, r2, #5
 8015afc:	17db      	asrs	r3, r3, #31
 8015afe:	1ad3      	subs	r3, r2, r3
 8015b00:	b29a      	uxth	r2, r3
 8015b02:	69bb      	ldr	r3, [r7, #24]
 8015b04:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015b06:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	3720      	adds	r7, #32
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bdb0      	pop	{r4, r5, r7, pc}
 8015b12:	bf00      	nop
 8015b14:	20000030 	.word	0x20000030
 8015b18:	2000cff0 	.word	0x2000cff0
 8015b1c:	0801e308 	.word	0x0801e308
 8015b20:	10624dd3 	.word	0x10624dd3

08015b24 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015b24:	b5b0      	push	{r4, r5, r7, lr}
 8015b26:	b08a      	sub	sp, #40	; 0x28
 8015b28:	af02      	add	r7, sp, #8
 8015b2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b30:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015b32:	69fb      	ldr	r3, [r7, #28]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	f000 8084 	beq.w	8015c42 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015b3a:	69fb      	ldr	r3, [r7, #28]
 8015b3c:	795b      	ldrb	r3, [r3, #5]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	f000 8081 	beq.w	8015c46 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015b44:	69fb      	ldr	r3, [r7, #28]
 8015b46:	699b      	ldr	r3, [r3, #24]
 8015b48:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8015b4a:	69fb      	ldr	r3, [r7, #28]
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015b50:	69fb      	ldr	r3, [r7, #28]
 8015b52:	2200      	movs	r2, #0
 8015b54:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015b56:	69fb      	ldr	r3, [r7, #28]
 8015b58:	2200      	movs	r2, #0
 8015b5a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015b5c:	69fb      	ldr	r3, [r7, #28]
 8015b5e:	2200      	movs	r2, #0
 8015b60:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015b62:	69fb      	ldr	r3, [r7, #28]
 8015b64:	2200      	movs	r2, #0
 8015b66:	631a      	str	r2, [r3, #48]	; 0x30
 8015b68:	69fb      	ldr	r3, [r7, #28]
 8015b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015b6c:	69fb      	ldr	r3, [r7, #28]
 8015b6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8015b70:	69fb      	ldr	r3, [r7, #28]
 8015b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b74:	69fb      	ldr	r3, [r7, #28]
 8015b76:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015b78:	69fb      	ldr	r3, [r7, #28]
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	829a      	strh	r2, [r3, #20]
 8015b7e:	69fb      	ldr	r3, [r7, #28]
 8015b80:	8a9a      	ldrh	r2, [r3, #20]
 8015b82:	69fb      	ldr	r3, [r7, #28]
 8015b84:	825a      	strh	r2, [r3, #18]
 8015b86:	69fb      	ldr	r3, [r7, #28]
 8015b88:	8a5a      	ldrh	r2, [r3, #18]
 8015b8a:	69fb      	ldr	r3, [r7, #28]
 8015b8c:	821a      	strh	r2, [r3, #16]
 8015b8e:	69fb      	ldr	r3, [r7, #28]
 8015b90:	8a1a      	ldrh	r2, [r3, #16]
 8015b92:	69fb      	ldr	r3, [r7, #28]
 8015b94:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8015b96:	6878      	ldr	r0, [r7, #4]
 8015b98:	f000 fdee 	bl	8016778 <dhcp_supplied_address>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d03b      	beq.n	8015c1a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8015ba2:	f107 030e 	add.w	r3, r7, #14
 8015ba6:	2207      	movs	r2, #7
 8015ba8:	69f9      	ldr	r1, [r7, #28]
 8015baa:	6878      	ldr	r0, [r7, #4]
 8015bac:	f000 fce0 	bl	8016570 <dhcp_create_msg>
 8015bb0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8015bb2:	69bb      	ldr	r3, [r7, #24]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d030      	beq.n	8015c1a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015bb8:	69bb      	ldr	r3, [r7, #24]
 8015bba:	685b      	ldr	r3, [r3, #4]
 8015bbc:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015bbe:	89f8      	ldrh	r0, [r7, #14]
 8015bc0:	697b      	ldr	r3, [r7, #20]
 8015bc2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015bc6:	2304      	movs	r3, #4
 8015bc8:	2236      	movs	r2, #54	; 0x36
 8015bca:	f000 f85f 	bl	8015c8c <dhcp_option>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015bd2:	89fc      	ldrh	r4, [r7, #14]
 8015bd4:	697b      	ldr	r3, [r7, #20]
 8015bd6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015bda:	693b      	ldr	r3, [r7, #16]
 8015bdc:	4618      	mov	r0, r3
 8015bde:	f7f6 f9d2 	bl	800bf86 <lwip_htonl>
 8015be2:	4603      	mov	r3, r0
 8015be4:	461a      	mov	r2, r3
 8015be6:	4629      	mov	r1, r5
 8015be8:	4620      	mov	r0, r4
 8015bea:	f000 f8db 	bl	8015da4 <dhcp_option_long>
 8015bee:	4603      	mov	r3, r0
 8015bf0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015bf2:	89f8      	ldrh	r0, [r7, #14]
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	33f0      	adds	r3, #240	; 0xf0
 8015bf8:	69ba      	ldr	r2, [r7, #24]
 8015bfa:	4619      	mov	r1, r3
 8015bfc:	f000 fd8e 	bl	801671c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015c00:	4b13      	ldr	r3, [pc, #76]	; (8015c50 <dhcp_release_and_stop+0x12c>)
 8015c02:	6818      	ldr	r0, [r3, #0]
 8015c04:	f107 0210 	add.w	r2, r7, #16
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	9300      	str	r3, [sp, #0]
 8015c0c:	2343      	movs	r3, #67	; 0x43
 8015c0e:	69b9      	ldr	r1, [r7, #24]
 8015c10:	f7fe fc40 	bl	8014494 <udp_sendto_if>
      pbuf_free(p_out);
 8015c14:	69b8      	ldr	r0, [r7, #24]
 8015c16:	f7f7 fdd1 	bl	800d7bc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015c1a:	4b0e      	ldr	r3, [pc, #56]	; (8015c54 <dhcp_release_and_stop+0x130>)
 8015c1c:	4a0d      	ldr	r2, [pc, #52]	; (8015c54 <dhcp_release_and_stop+0x130>)
 8015c1e:	490d      	ldr	r1, [pc, #52]	; (8015c54 <dhcp_release_and_stop+0x130>)
 8015c20:	6878      	ldr	r0, [r7, #4]
 8015c22:	f7f7 f88b 	bl	800cd3c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015c26:	2100      	movs	r1, #0
 8015c28:	69f8      	ldr	r0, [r7, #28]
 8015c2a:	f000 f815 	bl	8015c58 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8015c2e:	69fb      	ldr	r3, [r7, #28]
 8015c30:	791b      	ldrb	r3, [r3, #4]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d008      	beq.n	8015c48 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015c36:	f7fe ff85 	bl	8014b44 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8015c3a:	69fb      	ldr	r3, [r7, #28]
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	711a      	strb	r2, [r3, #4]
 8015c40:	e002      	b.n	8015c48 <dhcp_release_and_stop+0x124>
    return;
 8015c42:	bf00      	nop
 8015c44:	e000      	b.n	8015c48 <dhcp_release_and_stop+0x124>
    return;
 8015c46:	bf00      	nop
  }
}
 8015c48:	3720      	adds	r7, #32
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8015c4e:	bf00      	nop
 8015c50:	2000cff0 	.word	0x2000cff0
 8015c54:	0801e304 	.word	0x0801e304

08015c58 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015c58:	b480      	push	{r7}
 8015c5a:	b083      	sub	sp, #12
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
 8015c60:	460b      	mov	r3, r1
 8015c62:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	795b      	ldrb	r3, [r3, #5]
 8015c68:	78fa      	ldrb	r2, [r7, #3]
 8015c6a:	429a      	cmp	r2, r3
 8015c6c:	d008      	beq.n	8015c80 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	78fa      	ldrb	r2, [r7, #3]
 8015c72:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	2200      	movs	r2, #0
 8015c78:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	811a      	strh	r2, [r3, #8]
  }
}
 8015c80:	bf00      	nop
 8015c82:	370c      	adds	r7, #12
 8015c84:	46bd      	mov	sp, r7
 8015c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8a:	4770      	bx	lr

08015c8c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b082      	sub	sp, #8
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6039      	str	r1, [r7, #0]
 8015c94:	4611      	mov	r1, r2
 8015c96:	461a      	mov	r2, r3
 8015c98:	4603      	mov	r3, r0
 8015c9a:	80fb      	strh	r3, [r7, #6]
 8015c9c:	460b      	mov	r3, r1
 8015c9e:	717b      	strb	r3, [r7, #5]
 8015ca0:	4613      	mov	r3, r2
 8015ca2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8015ca4:	88fa      	ldrh	r2, [r7, #6]
 8015ca6:	793b      	ldrb	r3, [r7, #4]
 8015ca8:	4413      	add	r3, r2
 8015caa:	3302      	adds	r3, #2
 8015cac:	2b44      	cmp	r3, #68	; 0x44
 8015cae:	d906      	bls.n	8015cbe <dhcp_option+0x32>
 8015cb0:	4b0d      	ldr	r3, [pc, #52]	; (8015ce8 <dhcp_option+0x5c>)
 8015cb2:	f240 529a 	movw	r2, #1434	; 0x59a
 8015cb6:	490d      	ldr	r1, [pc, #52]	; (8015cec <dhcp_option+0x60>)
 8015cb8:	480d      	ldr	r0, [pc, #52]	; (8015cf0 <dhcp_option+0x64>)
 8015cba:	f003 fcdd 	bl	8019678 <iprintf>
  options[options_out_len++] = option_type;
 8015cbe:	88fb      	ldrh	r3, [r7, #6]
 8015cc0:	1c5a      	adds	r2, r3, #1
 8015cc2:	80fa      	strh	r2, [r7, #6]
 8015cc4:	461a      	mov	r2, r3
 8015cc6:	683b      	ldr	r3, [r7, #0]
 8015cc8:	4413      	add	r3, r2
 8015cca:	797a      	ldrb	r2, [r7, #5]
 8015ccc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8015cce:	88fb      	ldrh	r3, [r7, #6]
 8015cd0:	1c5a      	adds	r2, r3, #1
 8015cd2:	80fa      	strh	r2, [r7, #6]
 8015cd4:	461a      	mov	r2, r3
 8015cd6:	683b      	ldr	r3, [r7, #0]
 8015cd8:	4413      	add	r3, r2
 8015cda:	793a      	ldrb	r2, [r7, #4]
 8015cdc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015cde:	88fb      	ldrh	r3, [r7, #6]
}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	3708      	adds	r7, #8
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bd80      	pop	{r7, pc}
 8015ce8:	0801d6f0 	.word	0x0801d6f0
 8015cec:	0801d884 	.word	0x0801d884
 8015cf0:	0801d750 	.word	0x0801d750

08015cf4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b082      	sub	sp, #8
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	6039      	str	r1, [r7, #0]
 8015cfe:	80fb      	strh	r3, [r7, #6]
 8015d00:	4613      	mov	r3, r2
 8015d02:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015d04:	88fb      	ldrh	r3, [r7, #6]
 8015d06:	2b43      	cmp	r3, #67	; 0x43
 8015d08:	d906      	bls.n	8015d18 <dhcp_option_byte+0x24>
 8015d0a:	4b0a      	ldr	r3, [pc, #40]	; (8015d34 <dhcp_option_byte+0x40>)
 8015d0c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015d10:	4909      	ldr	r1, [pc, #36]	; (8015d38 <dhcp_option_byte+0x44>)
 8015d12:	480a      	ldr	r0, [pc, #40]	; (8015d3c <dhcp_option_byte+0x48>)
 8015d14:	f003 fcb0 	bl	8019678 <iprintf>
  options[options_out_len++] = value;
 8015d18:	88fb      	ldrh	r3, [r7, #6]
 8015d1a:	1c5a      	adds	r2, r3, #1
 8015d1c:	80fa      	strh	r2, [r7, #6]
 8015d1e:	461a      	mov	r2, r3
 8015d20:	683b      	ldr	r3, [r7, #0]
 8015d22:	4413      	add	r3, r2
 8015d24:	797a      	ldrb	r2, [r7, #5]
 8015d26:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015d28:	88fb      	ldrh	r3, [r7, #6]
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	3708      	adds	r7, #8
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}
 8015d32:	bf00      	nop
 8015d34:	0801d6f0 	.word	0x0801d6f0
 8015d38:	0801d8c8 	.word	0x0801d8c8
 8015d3c:	0801d750 	.word	0x0801d750

08015d40 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b082      	sub	sp, #8
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	4603      	mov	r3, r0
 8015d48:	6039      	str	r1, [r7, #0]
 8015d4a:	80fb      	strh	r3, [r7, #6]
 8015d4c:	4613      	mov	r3, r2
 8015d4e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015d50:	88fb      	ldrh	r3, [r7, #6]
 8015d52:	3302      	adds	r3, #2
 8015d54:	2b44      	cmp	r3, #68	; 0x44
 8015d56:	d906      	bls.n	8015d66 <dhcp_option_short+0x26>
 8015d58:	4b0f      	ldr	r3, [pc, #60]	; (8015d98 <dhcp_option_short+0x58>)
 8015d5a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8015d5e:	490f      	ldr	r1, [pc, #60]	; (8015d9c <dhcp_option_short+0x5c>)
 8015d60:	480f      	ldr	r0, [pc, #60]	; (8015da0 <dhcp_option_short+0x60>)
 8015d62:	f003 fc89 	bl	8019678 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8015d66:	88bb      	ldrh	r3, [r7, #4]
 8015d68:	0a1b      	lsrs	r3, r3, #8
 8015d6a:	b29a      	uxth	r2, r3
 8015d6c:	88fb      	ldrh	r3, [r7, #6]
 8015d6e:	1c59      	adds	r1, r3, #1
 8015d70:	80f9      	strh	r1, [r7, #6]
 8015d72:	4619      	mov	r1, r3
 8015d74:	683b      	ldr	r3, [r7, #0]
 8015d76:	440b      	add	r3, r1
 8015d78:	b2d2      	uxtb	r2, r2
 8015d7a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8015d7c:	88fb      	ldrh	r3, [r7, #6]
 8015d7e:	1c5a      	adds	r2, r3, #1
 8015d80:	80fa      	strh	r2, [r7, #6]
 8015d82:	461a      	mov	r2, r3
 8015d84:	683b      	ldr	r3, [r7, #0]
 8015d86:	4413      	add	r3, r2
 8015d88:	88ba      	ldrh	r2, [r7, #4]
 8015d8a:	b2d2      	uxtb	r2, r2
 8015d8c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015d8e:	88fb      	ldrh	r3, [r7, #6]
}
 8015d90:	4618      	mov	r0, r3
 8015d92:	3708      	adds	r7, #8
 8015d94:	46bd      	mov	sp, r7
 8015d96:	bd80      	pop	{r7, pc}
 8015d98:	0801d6f0 	.word	0x0801d6f0
 8015d9c:	0801d900 	.word	0x0801d900
 8015da0:	0801d750 	.word	0x0801d750

08015da4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b084      	sub	sp, #16
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	4603      	mov	r3, r0
 8015dac:	60b9      	str	r1, [r7, #8]
 8015dae:	607a      	str	r2, [r7, #4]
 8015db0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8015db2:	89fb      	ldrh	r3, [r7, #14]
 8015db4:	3304      	adds	r3, #4
 8015db6:	2b44      	cmp	r3, #68	; 0x44
 8015db8:	d906      	bls.n	8015dc8 <dhcp_option_long+0x24>
 8015dba:	4b19      	ldr	r3, [pc, #100]	; (8015e20 <dhcp_option_long+0x7c>)
 8015dbc:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8015dc0:	4918      	ldr	r1, [pc, #96]	; (8015e24 <dhcp_option_long+0x80>)
 8015dc2:	4819      	ldr	r0, [pc, #100]	; (8015e28 <dhcp_option_long+0x84>)
 8015dc4:	f003 fc58 	bl	8019678 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	0e1a      	lsrs	r2, r3, #24
 8015dcc:	89fb      	ldrh	r3, [r7, #14]
 8015dce:	1c59      	adds	r1, r3, #1
 8015dd0:	81f9      	strh	r1, [r7, #14]
 8015dd2:	4619      	mov	r1, r3
 8015dd4:	68bb      	ldr	r3, [r7, #8]
 8015dd6:	440b      	add	r3, r1
 8015dd8:	b2d2      	uxtb	r2, r2
 8015dda:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	0c1a      	lsrs	r2, r3, #16
 8015de0:	89fb      	ldrh	r3, [r7, #14]
 8015de2:	1c59      	adds	r1, r3, #1
 8015de4:	81f9      	strh	r1, [r7, #14]
 8015de6:	4619      	mov	r1, r3
 8015de8:	68bb      	ldr	r3, [r7, #8]
 8015dea:	440b      	add	r3, r1
 8015dec:	b2d2      	uxtb	r2, r2
 8015dee:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	0a1a      	lsrs	r2, r3, #8
 8015df4:	89fb      	ldrh	r3, [r7, #14]
 8015df6:	1c59      	adds	r1, r3, #1
 8015df8:	81f9      	strh	r1, [r7, #14]
 8015dfa:	4619      	mov	r1, r3
 8015dfc:	68bb      	ldr	r3, [r7, #8]
 8015dfe:	440b      	add	r3, r1
 8015e00:	b2d2      	uxtb	r2, r2
 8015e02:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015e04:	89fb      	ldrh	r3, [r7, #14]
 8015e06:	1c5a      	adds	r2, r3, #1
 8015e08:	81fa      	strh	r2, [r7, #14]
 8015e0a:	461a      	mov	r2, r3
 8015e0c:	68bb      	ldr	r3, [r7, #8]
 8015e0e:	4413      	add	r3, r2
 8015e10:	687a      	ldr	r2, [r7, #4]
 8015e12:	b2d2      	uxtb	r2, r2
 8015e14:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015e16:	89fb      	ldrh	r3, [r7, #14]
}
 8015e18:	4618      	mov	r0, r3
 8015e1a:	3710      	adds	r7, #16
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}
 8015e20:	0801d6f0 	.word	0x0801d6f0
 8015e24:	0801d93c 	.word	0x0801d93c
 8015e28:	0801d750 	.word	0x0801d750

08015e2c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015e2c:	b580      	push	{r7, lr}
 8015e2e:	b090      	sub	sp, #64	; 0x40
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	6078      	str	r0, [r7, #4]
 8015e34:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015e36:	2300      	movs	r3, #0
 8015e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8015e3e:	2208      	movs	r2, #8
 8015e40:	2100      	movs	r1, #0
 8015e42:	48b5      	ldr	r0, [pc, #724]	; (8016118 <dhcp_parse_reply+0x2ec>)
 8015e44:	f003 fb30 	bl	80194a8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	895b      	ldrh	r3, [r3, #10]
 8015e4c:	2b2b      	cmp	r3, #43	; 0x2b
 8015e4e:	d802      	bhi.n	8015e56 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015e50:	f06f 0301 	mvn.w	r3, #1
 8015e54:	e2a7      	b.n	80163a6 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	685b      	ldr	r3, [r3, #4]
 8015e5a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015e5c:	23f0      	movs	r3, #240	; 0xf0
 8015e5e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	891b      	ldrh	r3, [r3, #8]
 8015e64:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015e6a:	e00c      	b.n	8015e86 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e6e:	895b      	ldrh	r3, [r3, #10]
 8015e70:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015e72:	1ad3      	subs	r3, r2, r3
 8015e74:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e78:	895b      	ldrh	r3, [r3, #10]
 8015e7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015e7c:	1ad3      	subs	r3, r2, r3
 8015e7e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8015e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d004      	beq.n	8015e96 <dhcp_parse_reply+0x6a>
 8015e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e8e:	895b      	ldrh	r3, [r3, #10]
 8015e90:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015e92:	429a      	cmp	r2, r3
 8015e94:	d2ea      	bcs.n	8015e6c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8015e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d102      	bne.n	8015ea2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015e9c:	f06f 0301 	mvn.w	r3, #1
 8015ea0:	e281      	b.n	80163a6 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8015ea2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015ea4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8015ea6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015ea8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8015eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eac:	685b      	ldr	r3, [r3, #4]
 8015eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015eb0:	e239      	b.n	8016326 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8015eb2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015eb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015eb6:	4413      	add	r3, r2
 8015eb8:	781b      	ldrb	r3, [r3, #0]
 8015eba:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8015ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ec6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015ec8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015eca:	3302      	adds	r3, #2
 8015ecc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8015ece:	8bfa      	ldrh	r2, [r7, #30]
 8015ed0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ed2:	429a      	cmp	r2, r3
 8015ed4:	d202      	bcs.n	8015edc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8015ed6:	f06f 0301 	mvn.w	r3, #1
 8015eda:	e264      	b.n	80163a6 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015edc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ede:	3301      	adds	r3, #1
 8015ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ee2:	8952      	ldrh	r2, [r2, #10]
 8015ee4:	4293      	cmp	r3, r2
 8015ee6:	da07      	bge.n	8015ef8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015ee8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015eea:	3301      	adds	r3, #1
 8015eec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015eee:	4413      	add	r3, r2
 8015ef0:	781b      	ldrb	r3, [r3, #0]
 8015ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015ef6:	e00b      	b.n	8015f10 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d004      	beq.n	8015f0a <dhcp_parse_reply+0xde>
 8015f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	685b      	ldr	r3, [r3, #4]
 8015f06:	781b      	ldrb	r3, [r3, #0]
 8015f08:	e000      	b.n	8015f0c <dhcp_parse_reply+0xe0>
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015f18:	7dfb      	ldrb	r3, [r7, #23]
 8015f1a:	2b3b      	cmp	r3, #59	; 0x3b
 8015f1c:	f200 812c 	bhi.w	8016178 <dhcp_parse_reply+0x34c>
 8015f20:	a201      	add	r2, pc, #4	; (adr r2, 8015f28 <dhcp_parse_reply+0xfc>)
 8015f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f26:	bf00      	nop
 8015f28:	08016019 	.word	0x08016019
 8015f2c:	08016029 	.word	0x08016029
 8015f30:	08016179 	.word	0x08016179
 8015f34:	0801604b 	.word	0x0801604b
 8015f38:	08016179 	.word	0x08016179
 8015f3c:	08016179 	.word	0x08016179
 8015f40:	08016179 	.word	0x08016179
 8015f44:	08016179 	.word	0x08016179
 8015f48:	08016179 	.word	0x08016179
 8015f4c:	08016179 	.word	0x08016179
 8015f50:	08016179 	.word	0x08016179
 8015f54:	08016179 	.word	0x08016179
 8015f58:	08016179 	.word	0x08016179
 8015f5c:	08016179 	.word	0x08016179
 8015f60:	08016179 	.word	0x08016179
 8015f64:	08016179 	.word	0x08016179
 8015f68:	08016179 	.word	0x08016179
 8015f6c:	08016179 	.word	0x08016179
 8015f70:	08016179 	.word	0x08016179
 8015f74:	08016179 	.word	0x08016179
 8015f78:	08016179 	.word	0x08016179
 8015f7c:	08016179 	.word	0x08016179
 8015f80:	08016179 	.word	0x08016179
 8015f84:	08016179 	.word	0x08016179
 8015f88:	08016179 	.word	0x08016179
 8015f8c:	08016179 	.word	0x08016179
 8015f90:	08016179 	.word	0x08016179
 8015f94:	08016179 	.word	0x08016179
 8015f98:	08016179 	.word	0x08016179
 8015f9c:	08016179 	.word	0x08016179
 8015fa0:	08016179 	.word	0x08016179
 8015fa4:	08016179 	.word	0x08016179
 8015fa8:	08016179 	.word	0x08016179
 8015fac:	08016179 	.word	0x08016179
 8015fb0:	08016179 	.word	0x08016179
 8015fb4:	08016179 	.word	0x08016179
 8015fb8:	08016179 	.word	0x08016179
 8015fbc:	08016179 	.word	0x08016179
 8015fc0:	08016179 	.word	0x08016179
 8015fc4:	08016179 	.word	0x08016179
 8015fc8:	08016179 	.word	0x08016179
 8015fcc:	08016179 	.word	0x08016179
 8015fd0:	08016179 	.word	0x08016179
 8015fd4:	08016179 	.word	0x08016179
 8015fd8:	08016179 	.word	0x08016179
 8015fdc:	08016179 	.word	0x08016179
 8015fe0:	08016179 	.word	0x08016179
 8015fe4:	08016179 	.word	0x08016179
 8015fe8:	08016179 	.word	0x08016179
 8015fec:	08016179 	.word	0x08016179
 8015ff0:	08016179 	.word	0x08016179
 8015ff4:	08016077 	.word	0x08016077
 8015ff8:	08016099 	.word	0x08016099
 8015ffc:	080160d5 	.word	0x080160d5
 8016000:	080160f7 	.word	0x080160f7
 8016004:	08016179 	.word	0x08016179
 8016008:	08016179 	.word	0x08016179
 801600c:	08016179 	.word	0x08016179
 8016010:	08016135 	.word	0x08016135
 8016014:	08016157 	.word	0x08016157
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8016018:	2300      	movs	r3, #0
 801601a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801601e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016022:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8016026:	e0ab      	b.n	8016180 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801602c:	2b04      	cmp	r3, #4
 801602e:	d009      	beq.n	8016044 <dhcp_parse_reply+0x218>
 8016030:	4b3a      	ldr	r3, [pc, #232]	; (801611c <dhcp_parse_reply+0x2f0>)
 8016032:	f240 622e 	movw	r2, #1582	; 0x62e
 8016036:	493a      	ldr	r1, [pc, #232]	; (8016120 <dhcp_parse_reply+0x2f4>)
 8016038:	483a      	ldr	r0, [pc, #232]	; (8016124 <dhcp_parse_reply+0x2f8>)
 801603a:	f003 fb1d 	bl	8019678 <iprintf>
 801603e:	f06f 0305 	mvn.w	r3, #5
 8016042:	e1b0      	b.n	80163a6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8016044:	2306      	movs	r3, #6
 8016046:	623b      	str	r3, [r7, #32]
        break;
 8016048:	e09a      	b.n	8016180 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801604a:	2304      	movs	r3, #4
 801604c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8016050:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016054:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016058:	429a      	cmp	r2, r3
 801605a:	d209      	bcs.n	8016070 <dhcp_parse_reply+0x244>
 801605c:	4b2f      	ldr	r3, [pc, #188]	; (801611c <dhcp_parse_reply+0x2f0>)
 801605e:	f240 6233 	movw	r2, #1587	; 0x633
 8016062:	4931      	ldr	r1, [pc, #196]	; (8016128 <dhcp_parse_reply+0x2fc>)
 8016064:	482f      	ldr	r0, [pc, #188]	; (8016124 <dhcp_parse_reply+0x2f8>)
 8016066:	f003 fb07 	bl	8019678 <iprintf>
 801606a:	f06f 0305 	mvn.w	r3, #5
 801606e:	e19a      	b.n	80163a6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8016070:	2307      	movs	r3, #7
 8016072:	623b      	str	r3, [r7, #32]
        break;
 8016074:	e084      	b.n	8016180 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801607a:	2b04      	cmp	r3, #4
 801607c:	d009      	beq.n	8016092 <dhcp_parse_reply+0x266>
 801607e:	4b27      	ldr	r3, [pc, #156]	; (801611c <dhcp_parse_reply+0x2f0>)
 8016080:	f240 6241 	movw	r2, #1601	; 0x641
 8016084:	4926      	ldr	r1, [pc, #152]	; (8016120 <dhcp_parse_reply+0x2f4>)
 8016086:	4827      	ldr	r0, [pc, #156]	; (8016124 <dhcp_parse_reply+0x2f8>)
 8016088:	f003 faf6 	bl	8019678 <iprintf>
 801608c:	f06f 0305 	mvn.w	r3, #5
 8016090:	e189      	b.n	80163a6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8016092:	2303      	movs	r3, #3
 8016094:	623b      	str	r3, [r7, #32]
        break;
 8016096:	e073      	b.n	8016180 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801609c:	2b01      	cmp	r3, #1
 801609e:	d009      	beq.n	80160b4 <dhcp_parse_reply+0x288>
 80160a0:	4b1e      	ldr	r3, [pc, #120]	; (801611c <dhcp_parse_reply+0x2f0>)
 80160a2:	f240 624f 	movw	r2, #1615	; 0x64f
 80160a6:	4921      	ldr	r1, [pc, #132]	; (801612c <dhcp_parse_reply+0x300>)
 80160a8:	481e      	ldr	r0, [pc, #120]	; (8016124 <dhcp_parse_reply+0x2f8>)
 80160aa:	f003 fae5 	bl	8019678 <iprintf>
 80160ae:	f06f 0305 	mvn.w	r3, #5
 80160b2:	e178      	b.n	80163a6 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80160b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80160b6:	2bf0      	cmp	r3, #240	; 0xf0
 80160b8:	d009      	beq.n	80160ce <dhcp_parse_reply+0x2a2>
 80160ba:	4b18      	ldr	r3, [pc, #96]	; (801611c <dhcp_parse_reply+0x2f0>)
 80160bc:	f240 6251 	movw	r2, #1617	; 0x651
 80160c0:	491b      	ldr	r1, [pc, #108]	; (8016130 <dhcp_parse_reply+0x304>)
 80160c2:	4818      	ldr	r0, [pc, #96]	; (8016124 <dhcp_parse_reply+0x2f8>)
 80160c4:	f003 fad8 	bl	8019678 <iprintf>
 80160c8:	f06f 0305 	mvn.w	r3, #5
 80160cc:	e16b      	b.n	80163a6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80160ce:	2300      	movs	r3, #0
 80160d0:	623b      	str	r3, [r7, #32]
        break;
 80160d2:	e055      	b.n	8016180 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80160d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160d8:	2b01      	cmp	r3, #1
 80160da:	d009      	beq.n	80160f0 <dhcp_parse_reply+0x2c4>
 80160dc:	4b0f      	ldr	r3, [pc, #60]	; (801611c <dhcp_parse_reply+0x2f0>)
 80160de:	f240 6255 	movw	r2, #1621	; 0x655
 80160e2:	4912      	ldr	r1, [pc, #72]	; (801612c <dhcp_parse_reply+0x300>)
 80160e4:	480f      	ldr	r0, [pc, #60]	; (8016124 <dhcp_parse_reply+0x2f8>)
 80160e6:	f003 fac7 	bl	8019678 <iprintf>
 80160ea:	f06f 0305 	mvn.w	r3, #5
 80160ee:	e15a      	b.n	80163a6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80160f0:	2301      	movs	r3, #1
 80160f2:	623b      	str	r3, [r7, #32]
        break;
 80160f4:	e044      	b.n	8016180 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80160f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160fa:	2b04      	cmp	r3, #4
 80160fc:	d009      	beq.n	8016112 <dhcp_parse_reply+0x2e6>
 80160fe:	4b07      	ldr	r3, [pc, #28]	; (801611c <dhcp_parse_reply+0x2f0>)
 8016100:	f240 6259 	movw	r2, #1625	; 0x659
 8016104:	4906      	ldr	r1, [pc, #24]	; (8016120 <dhcp_parse_reply+0x2f4>)
 8016106:	4807      	ldr	r0, [pc, #28]	; (8016124 <dhcp_parse_reply+0x2f8>)
 8016108:	f003 fab6 	bl	8019678 <iprintf>
 801610c:	f06f 0305 	mvn.w	r3, #5
 8016110:	e149      	b.n	80163a6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8016112:	2302      	movs	r3, #2
 8016114:	623b      	str	r3, [r7, #32]
        break;
 8016116:	e033      	b.n	8016180 <dhcp_parse_reply+0x354>
 8016118:	2000cfe8 	.word	0x2000cfe8
 801611c:	0801d6f0 	.word	0x0801d6f0
 8016120:	0801d978 	.word	0x0801d978
 8016124:	0801d750 	.word	0x0801d750
 8016128:	0801d984 	.word	0x0801d984
 801612c:	0801d998 	.word	0x0801d998
 8016130:	0801d9a4 	.word	0x0801d9a4
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016138:	2b04      	cmp	r3, #4
 801613a:	d009      	beq.n	8016150 <dhcp_parse_reply+0x324>
 801613c:	4b9c      	ldr	r3, [pc, #624]	; (80163b0 <dhcp_parse_reply+0x584>)
 801613e:	f240 625d 	movw	r2, #1629	; 0x65d
 8016142:	499c      	ldr	r1, [pc, #624]	; (80163b4 <dhcp_parse_reply+0x588>)
 8016144:	489c      	ldr	r0, [pc, #624]	; (80163b8 <dhcp_parse_reply+0x58c>)
 8016146:	f003 fa97 	bl	8019678 <iprintf>
 801614a:	f06f 0305 	mvn.w	r3, #5
 801614e:	e12a      	b.n	80163a6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8016150:	2304      	movs	r3, #4
 8016152:	623b      	str	r3, [r7, #32]
        break;
 8016154:	e014      	b.n	8016180 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801615a:	2b04      	cmp	r3, #4
 801615c:	d009      	beq.n	8016172 <dhcp_parse_reply+0x346>
 801615e:	4b94      	ldr	r3, [pc, #592]	; (80163b0 <dhcp_parse_reply+0x584>)
 8016160:	f240 6261 	movw	r2, #1633	; 0x661
 8016164:	4993      	ldr	r1, [pc, #588]	; (80163b4 <dhcp_parse_reply+0x588>)
 8016166:	4894      	ldr	r0, [pc, #592]	; (80163b8 <dhcp_parse_reply+0x58c>)
 8016168:	f003 fa86 	bl	8019678 <iprintf>
 801616c:	f06f 0305 	mvn.w	r3, #5
 8016170:	e119      	b.n	80163a6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8016172:	2305      	movs	r3, #5
 8016174:	623b      	str	r3, [r7, #32]
        break;
 8016176:	e003      	b.n	8016180 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8016178:	2300      	movs	r3, #0
 801617a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801617e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8016180:	7dfb      	ldrb	r3, [r7, #23]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d103      	bne.n	801618e <dhcp_parse_reply+0x362>
      offset++;
 8016186:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016188:	3301      	adds	r3, #1
 801618a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801618c:	e0a1      	b.n	80162d2 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801618e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016194:	4413      	add	r3, r2
 8016196:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801619a:	4293      	cmp	r3, r2
 801619c:	dd02      	ble.n	80161a4 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801619e:	f06f 0301 	mvn.w	r3, #1
 80161a2:	e100      	b.n	80163a6 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 80161a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161a8:	b29a      	uxth	r2, r3
 80161aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80161ac:	4413      	add	r3, r2
 80161ae:	b29b      	uxth	r3, r3
 80161b0:	3302      	adds	r3, #2
 80161b2:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80161b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	f000 808a 	beq.w	80162d2 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 80161be:	2300      	movs	r3, #0
 80161c0:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80161c2:	6a3b      	ldr	r3, [r7, #32]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	db02      	blt.n	80161ce <dhcp_parse_reply+0x3a2>
 80161c8:	6a3b      	ldr	r3, [r7, #32]
 80161ca:	2b07      	cmp	r3, #7
 80161cc:	dd06      	ble.n	80161dc <dhcp_parse_reply+0x3b0>
 80161ce:	4b78      	ldr	r3, [pc, #480]	; (80163b0 <dhcp_parse_reply+0x584>)
 80161d0:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80161d4:	4979      	ldr	r1, [pc, #484]	; (80163bc <dhcp_parse_reply+0x590>)
 80161d6:	4878      	ldr	r0, [pc, #480]	; (80163b8 <dhcp_parse_reply+0x58c>)
 80161d8:	f003 fa4e 	bl	8019678 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80161dc:	4a78      	ldr	r2, [pc, #480]	; (80163c0 <dhcp_parse_reply+0x594>)
 80161de:	6a3b      	ldr	r3, [r7, #32]
 80161e0:	4413      	add	r3, r2
 80161e2:	781b      	ldrb	r3, [r3, #0]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d174      	bne.n	80162d2 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80161e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161ec:	2b04      	cmp	r3, #4
 80161ee:	bf28      	it	cs
 80161f0:	2304      	movcs	r3, #4
 80161f2:	b2db      	uxtb	r3, r3
 80161f4:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80161f6:	8bfb      	ldrh	r3, [r7, #30]
 80161f8:	8aba      	ldrh	r2, [r7, #20]
 80161fa:	f107 0108 	add.w	r1, r7, #8
 80161fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016200:	f7f7 fce2 	bl	800dbc8 <pbuf_copy_partial>
 8016204:	4603      	mov	r3, r0
 8016206:	461a      	mov	r2, r3
 8016208:	8abb      	ldrh	r3, [r7, #20]
 801620a:	4293      	cmp	r3, r2
 801620c:	d002      	beq.n	8016214 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801620e:	f06f 0301 	mvn.w	r3, #1
 8016212:	e0c8      	b.n	80163a6 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8016214:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016218:	2b04      	cmp	r3, #4
 801621a:	d933      	bls.n	8016284 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801621c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016220:	f003 0303 	and.w	r3, r3, #3
 8016224:	b2db      	uxtb	r3, r3
 8016226:	2b00      	cmp	r3, #0
 8016228:	d009      	beq.n	801623e <dhcp_parse_reply+0x412>
 801622a:	4b61      	ldr	r3, [pc, #388]	; (80163b0 <dhcp_parse_reply+0x584>)
 801622c:	f240 6281 	movw	r2, #1665	; 0x681
 8016230:	4964      	ldr	r1, [pc, #400]	; (80163c4 <dhcp_parse_reply+0x598>)
 8016232:	4861      	ldr	r0, [pc, #388]	; (80163b8 <dhcp_parse_reply+0x58c>)
 8016234:	f003 fa20 	bl	8019678 <iprintf>
 8016238:	f06f 0305 	mvn.w	r3, #5
 801623c:	e0b3      	b.n	80163a6 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801623e:	4a60      	ldr	r2, [pc, #384]	; (80163c0 <dhcp_parse_reply+0x594>)
 8016240:	6a3b      	ldr	r3, [r7, #32]
 8016242:	4413      	add	r3, r2
 8016244:	2201      	movs	r2, #1
 8016246:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8016248:	68bb      	ldr	r3, [r7, #8]
 801624a:	4618      	mov	r0, r3
 801624c:	f7f5 fe9b 	bl	800bf86 <lwip_htonl>
 8016250:	4602      	mov	r2, r0
 8016252:	495d      	ldr	r1, [pc, #372]	; (80163c8 <dhcp_parse_reply+0x59c>)
 8016254:	6a3b      	ldr	r3, [r7, #32]
 8016256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801625a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801625e:	3b04      	subs	r3, #4
 8016260:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8016264:	8bfb      	ldrh	r3, [r7, #30]
 8016266:	3304      	adds	r3, #4
 8016268:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801626a:	8a7a      	ldrh	r2, [r7, #18]
 801626c:	8bfb      	ldrh	r3, [r7, #30]
 801626e:	429a      	cmp	r2, r3
 8016270:	d202      	bcs.n	8016278 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8016272:	f06f 0301 	mvn.w	r3, #1
 8016276:	e096      	b.n	80163a6 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8016278:	8a7b      	ldrh	r3, [r7, #18]
 801627a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801627c:	6a3b      	ldr	r3, [r7, #32]
 801627e:	3301      	adds	r3, #1
 8016280:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8016282:	e79e      	b.n	80161c2 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8016284:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016288:	2b04      	cmp	r3, #4
 801628a:	d106      	bne.n	801629a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801628c:	68bb      	ldr	r3, [r7, #8]
 801628e:	4618      	mov	r0, r3
 8016290:	f7f5 fe79 	bl	800bf86 <lwip_htonl>
 8016294:	4603      	mov	r3, r0
 8016296:	60bb      	str	r3, [r7, #8]
 8016298:	e011      	b.n	80162be <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801629a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801629e:	2b01      	cmp	r3, #1
 80162a0:	d009      	beq.n	80162b6 <dhcp_parse_reply+0x48a>
 80162a2:	4b43      	ldr	r3, [pc, #268]	; (80163b0 <dhcp_parse_reply+0x584>)
 80162a4:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80162a8:	4948      	ldr	r1, [pc, #288]	; (80163cc <dhcp_parse_reply+0x5a0>)
 80162aa:	4843      	ldr	r0, [pc, #268]	; (80163b8 <dhcp_parse_reply+0x58c>)
 80162ac:	f003 f9e4 	bl	8019678 <iprintf>
 80162b0:	f06f 0305 	mvn.w	r3, #5
 80162b4:	e077      	b.n	80163a6 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80162b6:	f107 0308 	add.w	r3, r7, #8
 80162ba:	781b      	ldrb	r3, [r3, #0]
 80162bc:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80162be:	4a40      	ldr	r2, [pc, #256]	; (80163c0 <dhcp_parse_reply+0x594>)
 80162c0:	6a3b      	ldr	r3, [r7, #32]
 80162c2:	4413      	add	r3, r2
 80162c4:	2201      	movs	r2, #1
 80162c6:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80162c8:	68ba      	ldr	r2, [r7, #8]
 80162ca:	493f      	ldr	r1, [pc, #252]	; (80163c8 <dhcp_parse_reply+0x59c>)
 80162cc:	6a3b      	ldr	r3, [r7, #32]
 80162ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80162d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d4:	895b      	ldrh	r3, [r3, #10]
 80162d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80162d8:	429a      	cmp	r2, r3
 80162da:	d324      	bcc.n	8016326 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80162dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162de:	895b      	ldrh	r3, [r3, #10]
 80162e0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80162e2:	1ad3      	subs	r3, r2, r3
 80162e4:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80162e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162e8:	895b      	ldrh	r3, [r3, #10]
 80162ea:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80162ec:	1ad3      	subs	r3, r2, r3
 80162ee:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80162f0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80162f2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80162f4:	429a      	cmp	r2, r3
 80162f6:	d213      	bcs.n	8016320 <dhcp_parse_reply+0x4f4>
        q = q->next;
 80162f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80162fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016300:	2b00      	cmp	r3, #0
 8016302:	d109      	bne.n	8016318 <dhcp_parse_reply+0x4ec>
 8016304:	4b2a      	ldr	r3, [pc, #168]	; (80163b0 <dhcp_parse_reply+0x584>)
 8016306:	f240 629d 	movw	r2, #1693	; 0x69d
 801630a:	4931      	ldr	r1, [pc, #196]	; (80163d0 <dhcp_parse_reply+0x5a4>)
 801630c:	482a      	ldr	r0, [pc, #168]	; (80163b8 <dhcp_parse_reply+0x58c>)
 801630e:	f003 f9b3 	bl	8019678 <iprintf>
 8016312:	f06f 0305 	mvn.w	r3, #5
 8016316:	e046      	b.n	80163a6 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8016318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801631a:	685b      	ldr	r3, [r3, #4]
 801631c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801631e:	e002      	b.n	8016326 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8016320:	f06f 0301 	mvn.w	r3, #1
 8016324:	e03f      	b.n	80163a6 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016328:	2b00      	cmp	r3, #0
 801632a:	d00a      	beq.n	8016342 <dhcp_parse_reply+0x516>
 801632c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801632e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016330:	429a      	cmp	r2, r3
 8016332:	d206      	bcs.n	8016342 <dhcp_parse_reply+0x516>
 8016334:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016336:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016338:	4413      	add	r3, r2
 801633a:	781b      	ldrb	r3, [r3, #0]
 801633c:	2bff      	cmp	r3, #255	; 0xff
 801633e:	f47f adb8 	bne.w	8015eb2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8016342:	4b1f      	ldr	r3, [pc, #124]	; (80163c0 <dhcp_parse_reply+0x594>)
 8016344:	781b      	ldrb	r3, [r3, #0]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d018      	beq.n	801637c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801634a:	4b1f      	ldr	r3, [pc, #124]	; (80163c8 <dhcp_parse_reply+0x59c>)
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016350:	4b1b      	ldr	r3, [pc, #108]	; (80163c0 <dhcp_parse_reply+0x594>)
 8016352:	2200      	movs	r2, #0
 8016354:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	2b01      	cmp	r3, #1
 801635a:	d102      	bne.n	8016362 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801635c:	2301      	movs	r3, #1
 801635e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016360:	e00c      	b.n	801637c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	2b02      	cmp	r3, #2
 8016366:	d102      	bne.n	801636e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8016368:	2301      	movs	r3, #1
 801636a:	62bb      	str	r3, [r7, #40]	; 0x28
 801636c:	e006      	b.n	801637c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	2b03      	cmp	r3, #3
 8016372:	d103      	bne.n	801637c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8016374:	2301      	movs	r3, #1
 8016376:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8016378:	2301      	movs	r3, #1
 801637a:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801637c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801637e:	2b00      	cmp	r3, #0
 8016380:	d006      	beq.n	8016390 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8016382:	2300      	movs	r3, #0
 8016384:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8016386:	236c      	movs	r3, #108	; 0x6c
 8016388:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801638a:	23ec      	movs	r3, #236	; 0xec
 801638c:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801638e:	e56a      	b.n	8015e66 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8016390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016392:	2b00      	cmp	r3, #0
 8016394:	d006      	beq.n	80163a4 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8016396:	2300      	movs	r3, #0
 8016398:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801639a:	232c      	movs	r3, #44	; 0x2c
 801639c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801639e:	236c      	movs	r3, #108	; 0x6c
 80163a0:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80163a2:	e560      	b.n	8015e66 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80163a4:	2300      	movs	r3, #0
}
 80163a6:	4618      	mov	r0, r3
 80163a8:	3740      	adds	r7, #64	; 0x40
 80163aa:	46bd      	mov	sp, r7
 80163ac:	bd80      	pop	{r7, pc}
 80163ae:	bf00      	nop
 80163b0:	0801d6f0 	.word	0x0801d6f0
 80163b4:	0801d978 	.word	0x0801d978
 80163b8:	0801d750 	.word	0x0801d750
 80163bc:	0801d9bc 	.word	0x0801d9bc
 80163c0:	2000cfe8 	.word	0x2000cfe8
 80163c4:	0801d9d0 	.word	0x0801d9d0
 80163c8:	2000cfc8 	.word	0x2000cfc8
 80163cc:	0801d9e8 	.word	0x0801d9e8
 80163d0:	0801d9fc 	.word	0x0801d9fc

080163d4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b08a      	sub	sp, #40	; 0x28
 80163d8:	af00      	add	r7, sp, #0
 80163da:	60f8      	str	r0, [r7, #12]
 80163dc:	60b9      	str	r1, [r7, #8]
 80163de:	607a      	str	r2, [r7, #4]
 80163e0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80163e2:	4b60      	ldr	r3, [pc, #384]	; (8016564 <dhcp_recv+0x190>)
 80163e4:	685b      	ldr	r3, [r3, #4]
 80163e6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80163e8:	6a3b      	ldr	r3, [r7, #32]
 80163ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163ec:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	685b      	ldr	r3, [r3, #4]
 80163f2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80163f4:	69fb      	ldr	r3, [r7, #28]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	f000 809d 	beq.w	8016536 <dhcp_recv+0x162>
 80163fc:	69fb      	ldr	r3, [r7, #28]
 80163fe:	791b      	ldrb	r3, [r3, #4]
 8016400:	2b00      	cmp	r3, #0
 8016402:	f000 8098 	beq.w	8016536 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	895b      	ldrh	r3, [r3, #10]
 801640a:	2b2b      	cmp	r3, #43	; 0x2b
 801640c:	f240 8095 	bls.w	801653a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8016410:	69bb      	ldr	r3, [r7, #24]
 8016412:	781b      	ldrb	r3, [r3, #0]
 8016414:	2b02      	cmp	r3, #2
 8016416:	f040 8092 	bne.w	801653e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801641a:	2300      	movs	r3, #0
 801641c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016420:	e012      	b.n	8016448 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8016422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016426:	6a3a      	ldr	r2, [r7, #32]
 8016428:	4413      	add	r3, r2
 801642a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801642e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016432:	69b9      	ldr	r1, [r7, #24]
 8016434:	440b      	add	r3, r1
 8016436:	7f1b      	ldrb	r3, [r3, #28]
 8016438:	429a      	cmp	r2, r3
 801643a:	f040 8082 	bne.w	8016542 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801643e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016442:	3301      	adds	r3, #1
 8016444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016448:	6a3b      	ldr	r3, [r7, #32]
 801644a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801644e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016452:	429a      	cmp	r2, r3
 8016454:	d203      	bcs.n	801645e <dhcp_recv+0x8a>
 8016456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801645a:	2b05      	cmp	r3, #5
 801645c:	d9e1      	bls.n	8016422 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801645e:	69bb      	ldr	r3, [r7, #24]
 8016460:	685b      	ldr	r3, [r3, #4]
 8016462:	4618      	mov	r0, r3
 8016464:	f7f5 fd8f 	bl	800bf86 <lwip_htonl>
 8016468:	4602      	mov	r2, r0
 801646a:	69fb      	ldr	r3, [r7, #28]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	429a      	cmp	r2, r3
 8016470:	d169      	bne.n	8016546 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8016472:	69f9      	ldr	r1, [r7, #28]
 8016474:	6878      	ldr	r0, [r7, #4]
 8016476:	f7ff fcd9 	bl	8015e2c <dhcp_parse_reply>
 801647a:	4603      	mov	r3, r0
 801647c:	2b00      	cmp	r3, #0
 801647e:	d164      	bne.n	801654a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8016480:	4b39      	ldr	r3, [pc, #228]	; (8016568 <dhcp_recv+0x194>)
 8016482:	785b      	ldrb	r3, [r3, #1]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d062      	beq.n	801654e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	685b      	ldr	r3, [r3, #4]
 801648c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801648e:	4b37      	ldr	r3, [pc, #220]	; (801656c <dhcp_recv+0x198>)
 8016490:	685b      	ldr	r3, [r3, #4]
 8016492:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8016494:	7cfb      	ldrb	r3, [r7, #19]
 8016496:	2b05      	cmp	r3, #5
 8016498:	d12a      	bne.n	80164f0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801649a:	69fb      	ldr	r3, [r7, #28]
 801649c:	795b      	ldrb	r3, [r3, #5]
 801649e:	2b01      	cmp	r3, #1
 80164a0:	d112      	bne.n	80164c8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80164a2:	6979      	ldr	r1, [r7, #20]
 80164a4:	6a38      	ldr	r0, [r7, #32]
 80164a6:	f7fe fe17 	bl	80150d8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80164aa:	6a3b      	ldr	r3, [r7, #32]
 80164ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80164b0:	f003 0308 	and.w	r3, r3, #8
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d003      	beq.n	80164c0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80164b8:	6a38      	ldr	r0, [r7, #32]
 80164ba:	f7fe fb87 	bl	8014bcc <dhcp_check>
 80164be:	e049      	b.n	8016554 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80164c0:	6a38      	ldr	r0, [r7, #32]
 80164c2:	f7ff f867 	bl	8015594 <dhcp_bind>
 80164c6:	e045      	b.n	8016554 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80164c8:	69fb      	ldr	r3, [r7, #28]
 80164ca:	795b      	ldrb	r3, [r3, #5]
 80164cc:	2b03      	cmp	r3, #3
 80164ce:	d007      	beq.n	80164e0 <dhcp_recv+0x10c>
 80164d0:	69fb      	ldr	r3, [r7, #28]
 80164d2:	795b      	ldrb	r3, [r3, #5]
 80164d4:	2b04      	cmp	r3, #4
 80164d6:	d003      	beq.n	80164e0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80164d8:	69fb      	ldr	r3, [r7, #28]
 80164da:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80164dc:	2b05      	cmp	r3, #5
 80164de:	d139      	bne.n	8016554 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80164e0:	6979      	ldr	r1, [r7, #20]
 80164e2:	6a38      	ldr	r0, [r7, #32]
 80164e4:	f7fe fdf8 	bl	80150d8 <dhcp_handle_ack>
      dhcp_bind(netif);
 80164e8:	6a38      	ldr	r0, [r7, #32]
 80164ea:	f7ff f853 	bl	8015594 <dhcp_bind>
 80164ee:	e031      	b.n	8016554 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80164f0:	7cfb      	ldrb	r3, [r7, #19]
 80164f2:	2b06      	cmp	r3, #6
 80164f4:	d113      	bne.n	801651e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80164f6:	69fb      	ldr	r3, [r7, #28]
 80164f8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80164fa:	2b03      	cmp	r3, #3
 80164fc:	d00b      	beq.n	8016516 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80164fe:	69fb      	ldr	r3, [r7, #28]
 8016500:	795b      	ldrb	r3, [r3, #5]
 8016502:	2b01      	cmp	r3, #1
 8016504:	d007      	beq.n	8016516 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016506:	69fb      	ldr	r3, [r7, #28]
 8016508:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801650a:	2b04      	cmp	r3, #4
 801650c:	d003      	beq.n	8016516 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801650e:	69fb      	ldr	r3, [r7, #28]
 8016510:	795b      	ldrb	r3, [r3, #5]
 8016512:	2b05      	cmp	r3, #5
 8016514:	d103      	bne.n	801651e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8016516:	6a38      	ldr	r0, [r7, #32]
 8016518:	f7fe fb3e 	bl	8014b98 <dhcp_handle_nak>
 801651c:	e01a      	b.n	8016554 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801651e:	7cfb      	ldrb	r3, [r7, #19]
 8016520:	2b02      	cmp	r3, #2
 8016522:	d116      	bne.n	8016552 <dhcp_recv+0x17e>
 8016524:	69fb      	ldr	r3, [r7, #28]
 8016526:	795b      	ldrb	r3, [r3, #5]
 8016528:	2b06      	cmp	r3, #6
 801652a:	d112      	bne.n	8016552 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801652c:	6979      	ldr	r1, [r7, #20]
 801652e:	6a38      	ldr	r0, [r7, #32]
 8016530:	f7fe fb80 	bl	8014c34 <dhcp_handle_offer>
 8016534:	e00e      	b.n	8016554 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016536:	bf00      	nop
 8016538:	e00c      	b.n	8016554 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801653a:	bf00      	nop
 801653c:	e00a      	b.n	8016554 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801653e:	bf00      	nop
 8016540:	e008      	b.n	8016554 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8016542:	bf00      	nop
 8016544:	e006      	b.n	8016554 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016546:	bf00      	nop
 8016548:	e004      	b.n	8016554 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801654a:	bf00      	nop
 801654c:	e002      	b.n	8016554 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801654e:	bf00      	nop
 8016550:	e000      	b.n	8016554 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8016552:	bf00      	nop
  pbuf_free(p);
 8016554:	6878      	ldr	r0, [r7, #4]
 8016556:	f7f7 f931 	bl	800d7bc <pbuf_free>
}
 801655a:	bf00      	nop
 801655c:	3728      	adds	r7, #40	; 0x28
 801655e:	46bd      	mov	sp, r7
 8016560:	bd80      	pop	{r7, pc}
 8016562:	bf00      	nop
 8016564:	200097f4 	.word	0x200097f4
 8016568:	2000cfe8 	.word	0x2000cfe8
 801656c:	2000cfc8 	.word	0x2000cfc8

08016570 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b088      	sub	sp, #32
 8016574:	af00      	add	r7, sp, #0
 8016576:	60f8      	str	r0, [r7, #12]
 8016578:	60b9      	str	r1, [r7, #8]
 801657a:	603b      	str	r3, [r7, #0]
 801657c:	4613      	mov	r3, r2
 801657e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d108      	bne.n	8016598 <dhcp_create_msg+0x28>
 8016586:	4b5f      	ldr	r3, [pc, #380]	; (8016704 <dhcp_create_msg+0x194>)
 8016588:	f240 7269 	movw	r2, #1897	; 0x769
 801658c:	495e      	ldr	r1, [pc, #376]	; (8016708 <dhcp_create_msg+0x198>)
 801658e:	485f      	ldr	r0, [pc, #380]	; (801670c <dhcp_create_msg+0x19c>)
 8016590:	f003 f872 	bl	8019678 <iprintf>
 8016594:	2300      	movs	r3, #0
 8016596:	e0b1      	b.n	80166fc <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8016598:	68bb      	ldr	r3, [r7, #8]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d108      	bne.n	80165b0 <dhcp_create_msg+0x40>
 801659e:	4b59      	ldr	r3, [pc, #356]	; (8016704 <dhcp_create_msg+0x194>)
 80165a0:	f240 726a 	movw	r2, #1898	; 0x76a
 80165a4:	495a      	ldr	r1, [pc, #360]	; (8016710 <dhcp_create_msg+0x1a0>)
 80165a6:	4859      	ldr	r0, [pc, #356]	; (801670c <dhcp_create_msg+0x19c>)
 80165a8:	f003 f866 	bl	8019678 <iprintf>
 80165ac:	2300      	movs	r3, #0
 80165ae:	e0a5      	b.n	80166fc <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80165b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80165b4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80165b8:	2036      	movs	r0, #54	; 0x36
 80165ba:	f7f6 fde9 	bl	800d190 <pbuf_alloc>
 80165be:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80165c0:	69bb      	ldr	r3, [r7, #24]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d101      	bne.n	80165ca <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80165c6:	2300      	movs	r3, #0
 80165c8:	e098      	b.n	80166fc <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80165ca:	69bb      	ldr	r3, [r7, #24]
 80165cc:	895b      	ldrh	r3, [r3, #10]
 80165ce:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80165d2:	d206      	bcs.n	80165e2 <dhcp_create_msg+0x72>
 80165d4:	4b4b      	ldr	r3, [pc, #300]	; (8016704 <dhcp_create_msg+0x194>)
 80165d6:	f240 7271 	movw	r2, #1905	; 0x771
 80165da:	494e      	ldr	r1, [pc, #312]	; (8016714 <dhcp_create_msg+0x1a4>)
 80165dc:	484b      	ldr	r0, [pc, #300]	; (801670c <dhcp_create_msg+0x19c>)
 80165de:	f003 f84b 	bl	8019678 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80165e2:	79fb      	ldrb	r3, [r7, #7]
 80165e4:	2b03      	cmp	r3, #3
 80165e6:	d103      	bne.n	80165f0 <dhcp_create_msg+0x80>
 80165e8:	68bb      	ldr	r3, [r7, #8]
 80165ea:	795b      	ldrb	r3, [r3, #5]
 80165ec:	2b03      	cmp	r3, #3
 80165ee:	d10d      	bne.n	801660c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80165f0:	68bb      	ldr	r3, [r7, #8]
 80165f2:	799b      	ldrb	r3, [r3, #6]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d105      	bne.n	8016604 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80165f8:	f003 f8cc 	bl	8019794 <rand>
 80165fc:	4603      	mov	r3, r0
 80165fe:	461a      	mov	r2, r3
 8016600:	4b45      	ldr	r3, [pc, #276]	; (8016718 <dhcp_create_msg+0x1a8>)
 8016602:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8016604:	4b44      	ldr	r3, [pc, #272]	; (8016718 <dhcp_create_msg+0x1a8>)
 8016606:	681a      	ldr	r2, [r3, #0]
 8016608:	68bb      	ldr	r3, [r7, #8]
 801660a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801660c:	69bb      	ldr	r3, [r7, #24]
 801660e:	685b      	ldr	r3, [r3, #4]
 8016610:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8016612:	f44f 729a 	mov.w	r2, #308	; 0x134
 8016616:	2100      	movs	r1, #0
 8016618:	6978      	ldr	r0, [r7, #20]
 801661a:	f002 ff45 	bl	80194a8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801661e:	697b      	ldr	r3, [r7, #20]
 8016620:	2201      	movs	r2, #1
 8016622:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	2201      	movs	r2, #1
 8016628:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016630:	697b      	ldr	r3, [r7, #20]
 8016632:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8016634:	68bb      	ldr	r3, [r7, #8]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	4618      	mov	r0, r3
 801663a:	f7f5 fca4 	bl	800bf86 <lwip_htonl>
 801663e:	4602      	mov	r2, r0
 8016640:	697b      	ldr	r3, [r7, #20]
 8016642:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8016644:	79fb      	ldrb	r3, [r7, #7]
 8016646:	2b08      	cmp	r3, #8
 8016648:	d010      	beq.n	801666c <dhcp_create_msg+0xfc>
 801664a:	79fb      	ldrb	r3, [r7, #7]
 801664c:	2b04      	cmp	r3, #4
 801664e:	d00d      	beq.n	801666c <dhcp_create_msg+0xfc>
 8016650:	79fb      	ldrb	r3, [r7, #7]
 8016652:	2b07      	cmp	r3, #7
 8016654:	d00a      	beq.n	801666c <dhcp_create_msg+0xfc>
 8016656:	79fb      	ldrb	r3, [r7, #7]
 8016658:	2b03      	cmp	r3, #3
 801665a:	d10c      	bne.n	8016676 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801665c:	68bb      	ldr	r3, [r7, #8]
 801665e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8016660:	2b05      	cmp	r3, #5
 8016662:	d003      	beq.n	801666c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016664:	68bb      	ldr	r3, [r7, #8]
 8016666:	795b      	ldrb	r3, [r3, #5]
 8016668:	2b04      	cmp	r3, #4
 801666a:	d104      	bne.n	8016676 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	3304      	adds	r3, #4
 8016670:	681a      	ldr	r2, [r3, #0]
 8016672:	697b      	ldr	r3, [r7, #20]
 8016674:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016676:	2300      	movs	r3, #0
 8016678:	83fb      	strh	r3, [r7, #30]
 801667a:	e00c      	b.n	8016696 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801667c:	8bfa      	ldrh	r2, [r7, #30]
 801667e:	8bfb      	ldrh	r3, [r7, #30]
 8016680:	68f9      	ldr	r1, [r7, #12]
 8016682:	440a      	add	r2, r1
 8016684:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8016688:	697a      	ldr	r2, [r7, #20]
 801668a:	4413      	add	r3, r2
 801668c:	460a      	mov	r2, r1
 801668e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016690:	8bfb      	ldrh	r3, [r7, #30]
 8016692:	3301      	adds	r3, #1
 8016694:	83fb      	strh	r3, [r7, #30]
 8016696:	8bfb      	ldrh	r3, [r7, #30]
 8016698:	2b05      	cmp	r3, #5
 801669a:	d9ef      	bls.n	801667c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801669c:	697b      	ldr	r3, [r7, #20]
 801669e:	2200      	movs	r2, #0
 80166a0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80166a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80166a8:	2200      	movs	r2, #0
 80166aa:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80166ae:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80166b2:	2200      	movs	r2, #0
 80166b4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80166b8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80166bc:	2200      	movs	r2, #0
 80166be:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80166c2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80166c6:	697b      	ldr	r3, [r7, #20]
 80166c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80166cc:	2301      	movs	r3, #1
 80166ce:	2235      	movs	r2, #53	; 0x35
 80166d0:	2000      	movs	r0, #0
 80166d2:	f7ff fadb 	bl	8015c8c <dhcp_option>
 80166d6:	4603      	mov	r3, r0
 80166d8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80166da:	697b      	ldr	r3, [r7, #20]
 80166dc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80166e0:	79fa      	ldrb	r2, [r7, #7]
 80166e2:	8a7b      	ldrh	r3, [r7, #18]
 80166e4:	4618      	mov	r0, r3
 80166e6:	f7ff fb05 	bl	8015cf4 <dhcp_option_byte>
 80166ea:	4603      	mov	r3, r0
 80166ec:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80166ee:	683b      	ldr	r3, [r7, #0]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d002      	beq.n	80166fa <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80166f4:	683b      	ldr	r3, [r7, #0]
 80166f6:	8a7a      	ldrh	r2, [r7, #18]
 80166f8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80166fa:	69bb      	ldr	r3, [r7, #24]
}
 80166fc:	4618      	mov	r0, r3
 80166fe:	3720      	adds	r7, #32
 8016700:	46bd      	mov	sp, r7
 8016702:	bd80      	pop	{r7, pc}
 8016704:	0801d6f0 	.word	0x0801d6f0
 8016708:	0801da10 	.word	0x0801da10
 801670c:	0801d750 	.word	0x0801d750
 8016710:	0801da30 	.word	0x0801da30
 8016714:	0801da50 	.word	0x0801da50
 8016718:	2000cff8 	.word	0x2000cff8

0801671c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b084      	sub	sp, #16
 8016720:	af00      	add	r7, sp, #0
 8016722:	4603      	mov	r3, r0
 8016724:	60b9      	str	r1, [r7, #8]
 8016726:	607a      	str	r2, [r7, #4]
 8016728:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801672a:	89fb      	ldrh	r3, [r7, #14]
 801672c:	1c5a      	adds	r2, r3, #1
 801672e:	81fa      	strh	r2, [r7, #14]
 8016730:	461a      	mov	r2, r3
 8016732:	68bb      	ldr	r3, [r7, #8]
 8016734:	4413      	add	r3, r2
 8016736:	22ff      	movs	r2, #255	; 0xff
 8016738:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801673a:	e007      	b.n	801674c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801673c:	89fb      	ldrh	r3, [r7, #14]
 801673e:	1c5a      	adds	r2, r3, #1
 8016740:	81fa      	strh	r2, [r7, #14]
 8016742:	461a      	mov	r2, r3
 8016744:	68bb      	ldr	r3, [r7, #8]
 8016746:	4413      	add	r3, r2
 8016748:	2200      	movs	r2, #0
 801674a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801674c:	89fb      	ldrh	r3, [r7, #14]
 801674e:	2b43      	cmp	r3, #67	; 0x43
 8016750:	d904      	bls.n	801675c <dhcp_option_trailer+0x40>
 8016752:	89fb      	ldrh	r3, [r7, #14]
 8016754:	f003 0303 	and.w	r3, r3, #3
 8016758:	2b00      	cmp	r3, #0
 801675a:	d002      	beq.n	8016762 <dhcp_option_trailer+0x46>
 801675c:	89fb      	ldrh	r3, [r7, #14]
 801675e:	2b43      	cmp	r3, #67	; 0x43
 8016760:	d9ec      	bls.n	801673c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8016762:	89fb      	ldrh	r3, [r7, #14]
 8016764:	33f0      	adds	r3, #240	; 0xf0
 8016766:	b29b      	uxth	r3, r3
 8016768:	4619      	mov	r1, r3
 801676a:	6878      	ldr	r0, [r7, #4]
 801676c:	f7f6 fe6e 	bl	800d44c <pbuf_realloc>
}
 8016770:	bf00      	nop
 8016772:	3710      	adds	r7, #16
 8016774:	46bd      	mov	sp, r7
 8016776:	bd80      	pop	{r7, pc}

08016778 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016778:	b480      	push	{r7}
 801677a:	b085      	sub	sp, #20
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d017      	beq.n	80167b6 <dhcp_supplied_address+0x3e>
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801678a:	2b00      	cmp	r3, #0
 801678c:	d013      	beq.n	80167b6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016792:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	795b      	ldrb	r3, [r3, #5]
 8016798:	2b0a      	cmp	r3, #10
 801679a:	d007      	beq.n	80167ac <dhcp_supplied_address+0x34>
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	795b      	ldrb	r3, [r3, #5]
 80167a0:	2b05      	cmp	r3, #5
 80167a2:	d003      	beq.n	80167ac <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80167a8:	2b04      	cmp	r3, #4
 80167aa:	d101      	bne.n	80167b0 <dhcp_supplied_address+0x38>
 80167ac:	2301      	movs	r3, #1
 80167ae:	e000      	b.n	80167b2 <dhcp_supplied_address+0x3a>
 80167b0:	2300      	movs	r3, #0
 80167b2:	b2db      	uxtb	r3, r3
 80167b4:	e000      	b.n	80167b8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80167b6:	2300      	movs	r3, #0
}
 80167b8:	4618      	mov	r0, r3
 80167ba:	3714      	adds	r7, #20
 80167bc:	46bd      	mov	sp, r7
 80167be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c2:	4770      	bx	lr

080167c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b082      	sub	sp, #8
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80167cc:	4915      	ldr	r1, [pc, #84]	; (8016824 <etharp_free_entry+0x60>)
 80167ce:	687a      	ldr	r2, [r7, #4]
 80167d0:	4613      	mov	r3, r2
 80167d2:	005b      	lsls	r3, r3, #1
 80167d4:	4413      	add	r3, r2
 80167d6:	00db      	lsls	r3, r3, #3
 80167d8:	440b      	add	r3, r1
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d013      	beq.n	8016808 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80167e0:	4910      	ldr	r1, [pc, #64]	; (8016824 <etharp_free_entry+0x60>)
 80167e2:	687a      	ldr	r2, [r7, #4]
 80167e4:	4613      	mov	r3, r2
 80167e6:	005b      	lsls	r3, r3, #1
 80167e8:	4413      	add	r3, r2
 80167ea:	00db      	lsls	r3, r3, #3
 80167ec:	440b      	add	r3, r1
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	4618      	mov	r0, r3
 80167f2:	f7f6 ffe3 	bl	800d7bc <pbuf_free>
    arp_table[i].q = NULL;
 80167f6:	490b      	ldr	r1, [pc, #44]	; (8016824 <etharp_free_entry+0x60>)
 80167f8:	687a      	ldr	r2, [r7, #4]
 80167fa:	4613      	mov	r3, r2
 80167fc:	005b      	lsls	r3, r3, #1
 80167fe:	4413      	add	r3, r2
 8016800:	00db      	lsls	r3, r3, #3
 8016802:	440b      	add	r3, r1
 8016804:	2200      	movs	r2, #0
 8016806:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016808:	4906      	ldr	r1, [pc, #24]	; (8016824 <etharp_free_entry+0x60>)
 801680a:	687a      	ldr	r2, [r7, #4]
 801680c:	4613      	mov	r3, r2
 801680e:	005b      	lsls	r3, r3, #1
 8016810:	4413      	add	r3, r2
 8016812:	00db      	lsls	r3, r3, #3
 8016814:	440b      	add	r3, r1
 8016816:	3314      	adds	r3, #20
 8016818:	2200      	movs	r2, #0
 801681a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801681c:	bf00      	nop
 801681e:	3708      	adds	r7, #8
 8016820:	46bd      	mov	sp, r7
 8016822:	bd80      	pop	{r7, pc}
 8016824:	2000cffc 	.word	0x2000cffc

08016828 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016828:	b580      	push	{r7, lr}
 801682a:	b082      	sub	sp, #8
 801682c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801682e:	2300      	movs	r3, #0
 8016830:	607b      	str	r3, [r7, #4]
 8016832:	e096      	b.n	8016962 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016834:	494f      	ldr	r1, [pc, #316]	; (8016974 <etharp_tmr+0x14c>)
 8016836:	687a      	ldr	r2, [r7, #4]
 8016838:	4613      	mov	r3, r2
 801683a:	005b      	lsls	r3, r3, #1
 801683c:	4413      	add	r3, r2
 801683e:	00db      	lsls	r3, r3, #3
 8016840:	440b      	add	r3, r1
 8016842:	3314      	adds	r3, #20
 8016844:	781b      	ldrb	r3, [r3, #0]
 8016846:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016848:	78fb      	ldrb	r3, [r7, #3]
 801684a:	2b00      	cmp	r3, #0
 801684c:	f000 8086 	beq.w	801695c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016850:	4948      	ldr	r1, [pc, #288]	; (8016974 <etharp_tmr+0x14c>)
 8016852:	687a      	ldr	r2, [r7, #4]
 8016854:	4613      	mov	r3, r2
 8016856:	005b      	lsls	r3, r3, #1
 8016858:	4413      	add	r3, r2
 801685a:	00db      	lsls	r3, r3, #3
 801685c:	440b      	add	r3, r1
 801685e:	3312      	adds	r3, #18
 8016860:	881b      	ldrh	r3, [r3, #0]
 8016862:	3301      	adds	r3, #1
 8016864:	b298      	uxth	r0, r3
 8016866:	4943      	ldr	r1, [pc, #268]	; (8016974 <etharp_tmr+0x14c>)
 8016868:	687a      	ldr	r2, [r7, #4]
 801686a:	4613      	mov	r3, r2
 801686c:	005b      	lsls	r3, r3, #1
 801686e:	4413      	add	r3, r2
 8016870:	00db      	lsls	r3, r3, #3
 8016872:	440b      	add	r3, r1
 8016874:	3312      	adds	r3, #18
 8016876:	4602      	mov	r2, r0
 8016878:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801687a:	493e      	ldr	r1, [pc, #248]	; (8016974 <etharp_tmr+0x14c>)
 801687c:	687a      	ldr	r2, [r7, #4]
 801687e:	4613      	mov	r3, r2
 8016880:	005b      	lsls	r3, r3, #1
 8016882:	4413      	add	r3, r2
 8016884:	00db      	lsls	r3, r3, #3
 8016886:	440b      	add	r3, r1
 8016888:	3312      	adds	r3, #18
 801688a:	881b      	ldrh	r3, [r3, #0]
 801688c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016890:	d215      	bcs.n	80168be <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016892:	4938      	ldr	r1, [pc, #224]	; (8016974 <etharp_tmr+0x14c>)
 8016894:	687a      	ldr	r2, [r7, #4]
 8016896:	4613      	mov	r3, r2
 8016898:	005b      	lsls	r3, r3, #1
 801689a:	4413      	add	r3, r2
 801689c:	00db      	lsls	r3, r3, #3
 801689e:	440b      	add	r3, r1
 80168a0:	3314      	adds	r3, #20
 80168a2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80168a4:	2b01      	cmp	r3, #1
 80168a6:	d10e      	bne.n	80168c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80168a8:	4932      	ldr	r1, [pc, #200]	; (8016974 <etharp_tmr+0x14c>)
 80168aa:	687a      	ldr	r2, [r7, #4]
 80168ac:	4613      	mov	r3, r2
 80168ae:	005b      	lsls	r3, r3, #1
 80168b0:	4413      	add	r3, r2
 80168b2:	00db      	lsls	r3, r3, #3
 80168b4:	440b      	add	r3, r1
 80168b6:	3312      	adds	r3, #18
 80168b8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80168ba:	2b04      	cmp	r3, #4
 80168bc:	d903      	bls.n	80168c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80168be:	6878      	ldr	r0, [r7, #4]
 80168c0:	f7ff ff80 	bl	80167c4 <etharp_free_entry>
 80168c4:	e04a      	b.n	801695c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80168c6:	492b      	ldr	r1, [pc, #172]	; (8016974 <etharp_tmr+0x14c>)
 80168c8:	687a      	ldr	r2, [r7, #4]
 80168ca:	4613      	mov	r3, r2
 80168cc:	005b      	lsls	r3, r3, #1
 80168ce:	4413      	add	r3, r2
 80168d0:	00db      	lsls	r3, r3, #3
 80168d2:	440b      	add	r3, r1
 80168d4:	3314      	adds	r3, #20
 80168d6:	781b      	ldrb	r3, [r3, #0]
 80168d8:	2b03      	cmp	r3, #3
 80168da:	d10a      	bne.n	80168f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80168dc:	4925      	ldr	r1, [pc, #148]	; (8016974 <etharp_tmr+0x14c>)
 80168de:	687a      	ldr	r2, [r7, #4]
 80168e0:	4613      	mov	r3, r2
 80168e2:	005b      	lsls	r3, r3, #1
 80168e4:	4413      	add	r3, r2
 80168e6:	00db      	lsls	r3, r3, #3
 80168e8:	440b      	add	r3, r1
 80168ea:	3314      	adds	r3, #20
 80168ec:	2204      	movs	r2, #4
 80168ee:	701a      	strb	r2, [r3, #0]
 80168f0:	e034      	b.n	801695c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80168f2:	4920      	ldr	r1, [pc, #128]	; (8016974 <etharp_tmr+0x14c>)
 80168f4:	687a      	ldr	r2, [r7, #4]
 80168f6:	4613      	mov	r3, r2
 80168f8:	005b      	lsls	r3, r3, #1
 80168fa:	4413      	add	r3, r2
 80168fc:	00db      	lsls	r3, r3, #3
 80168fe:	440b      	add	r3, r1
 8016900:	3314      	adds	r3, #20
 8016902:	781b      	ldrb	r3, [r3, #0]
 8016904:	2b04      	cmp	r3, #4
 8016906:	d10a      	bne.n	801691e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016908:	491a      	ldr	r1, [pc, #104]	; (8016974 <etharp_tmr+0x14c>)
 801690a:	687a      	ldr	r2, [r7, #4]
 801690c:	4613      	mov	r3, r2
 801690e:	005b      	lsls	r3, r3, #1
 8016910:	4413      	add	r3, r2
 8016912:	00db      	lsls	r3, r3, #3
 8016914:	440b      	add	r3, r1
 8016916:	3314      	adds	r3, #20
 8016918:	2202      	movs	r2, #2
 801691a:	701a      	strb	r2, [r3, #0]
 801691c:	e01e      	b.n	801695c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801691e:	4915      	ldr	r1, [pc, #84]	; (8016974 <etharp_tmr+0x14c>)
 8016920:	687a      	ldr	r2, [r7, #4]
 8016922:	4613      	mov	r3, r2
 8016924:	005b      	lsls	r3, r3, #1
 8016926:	4413      	add	r3, r2
 8016928:	00db      	lsls	r3, r3, #3
 801692a:	440b      	add	r3, r1
 801692c:	3314      	adds	r3, #20
 801692e:	781b      	ldrb	r3, [r3, #0]
 8016930:	2b01      	cmp	r3, #1
 8016932:	d113      	bne.n	801695c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016934:	490f      	ldr	r1, [pc, #60]	; (8016974 <etharp_tmr+0x14c>)
 8016936:	687a      	ldr	r2, [r7, #4]
 8016938:	4613      	mov	r3, r2
 801693a:	005b      	lsls	r3, r3, #1
 801693c:	4413      	add	r3, r2
 801693e:	00db      	lsls	r3, r3, #3
 8016940:	440b      	add	r3, r1
 8016942:	3308      	adds	r3, #8
 8016944:	6818      	ldr	r0, [r3, #0]
 8016946:	687a      	ldr	r2, [r7, #4]
 8016948:	4613      	mov	r3, r2
 801694a:	005b      	lsls	r3, r3, #1
 801694c:	4413      	add	r3, r2
 801694e:	00db      	lsls	r3, r3, #3
 8016950:	4a08      	ldr	r2, [pc, #32]	; (8016974 <etharp_tmr+0x14c>)
 8016952:	4413      	add	r3, r2
 8016954:	3304      	adds	r3, #4
 8016956:	4619      	mov	r1, r3
 8016958:	f000 fe72 	bl	8017640 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	3301      	adds	r3, #1
 8016960:	607b      	str	r3, [r7, #4]
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	2b09      	cmp	r3, #9
 8016966:	f77f af65 	ble.w	8016834 <etharp_tmr+0xc>
      }
    }
  }
}
 801696a:	bf00      	nop
 801696c:	bf00      	nop
 801696e:	3708      	adds	r7, #8
 8016970:	46bd      	mov	sp, r7
 8016972:	bd80      	pop	{r7, pc}
 8016974:	2000cffc 	.word	0x2000cffc

08016978 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016978:	b580      	push	{r7, lr}
 801697a:	b08a      	sub	sp, #40	; 0x28
 801697c:	af00      	add	r7, sp, #0
 801697e:	60f8      	str	r0, [r7, #12]
 8016980:	460b      	mov	r3, r1
 8016982:	607a      	str	r2, [r7, #4]
 8016984:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016986:	230a      	movs	r3, #10
 8016988:	84fb      	strh	r3, [r7, #38]	; 0x26
 801698a:	230a      	movs	r3, #10
 801698c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801698e:	230a      	movs	r3, #10
 8016990:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016992:	2300      	movs	r3, #0
 8016994:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016996:	230a      	movs	r3, #10
 8016998:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801699a:	2300      	movs	r3, #0
 801699c:	83bb      	strh	r3, [r7, #28]
 801699e:	2300      	movs	r3, #0
 80169a0:	837b      	strh	r3, [r7, #26]
 80169a2:	2300      	movs	r3, #0
 80169a4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80169a6:	2300      	movs	r3, #0
 80169a8:	843b      	strh	r3, [r7, #32]
 80169aa:	e0ae      	b.n	8016b0a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80169ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169b0:	49a6      	ldr	r1, [pc, #664]	; (8016c4c <etharp_find_entry+0x2d4>)
 80169b2:	4613      	mov	r3, r2
 80169b4:	005b      	lsls	r3, r3, #1
 80169b6:	4413      	add	r3, r2
 80169b8:	00db      	lsls	r3, r3, #3
 80169ba:	440b      	add	r3, r1
 80169bc:	3314      	adds	r3, #20
 80169be:	781b      	ldrb	r3, [r3, #0]
 80169c0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80169c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80169c6:	2b0a      	cmp	r3, #10
 80169c8:	d105      	bne.n	80169d6 <etharp_find_entry+0x5e>
 80169ca:	7dfb      	ldrb	r3, [r7, #23]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d102      	bne.n	80169d6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80169d0:	8c3b      	ldrh	r3, [r7, #32]
 80169d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80169d4:	e095      	b.n	8016b02 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80169d6:	7dfb      	ldrb	r3, [r7, #23]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	f000 8092 	beq.w	8016b02 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80169de:	7dfb      	ldrb	r3, [r7, #23]
 80169e0:	2b01      	cmp	r3, #1
 80169e2:	d009      	beq.n	80169f8 <etharp_find_entry+0x80>
 80169e4:	7dfb      	ldrb	r3, [r7, #23]
 80169e6:	2b01      	cmp	r3, #1
 80169e8:	d806      	bhi.n	80169f8 <etharp_find_entry+0x80>
 80169ea:	4b99      	ldr	r3, [pc, #612]	; (8016c50 <etharp_find_entry+0x2d8>)
 80169ec:	f240 1223 	movw	r2, #291	; 0x123
 80169f0:	4998      	ldr	r1, [pc, #608]	; (8016c54 <etharp_find_entry+0x2dc>)
 80169f2:	4899      	ldr	r0, [pc, #612]	; (8016c58 <etharp_find_entry+0x2e0>)
 80169f4:	f002 fe40 	bl	8019678 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d020      	beq.n	8016a40 <etharp_find_entry+0xc8>
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	6819      	ldr	r1, [r3, #0]
 8016a02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a06:	4891      	ldr	r0, [pc, #580]	; (8016c4c <etharp_find_entry+0x2d4>)
 8016a08:	4613      	mov	r3, r2
 8016a0a:	005b      	lsls	r3, r3, #1
 8016a0c:	4413      	add	r3, r2
 8016a0e:	00db      	lsls	r3, r3, #3
 8016a10:	4403      	add	r3, r0
 8016a12:	3304      	adds	r3, #4
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	4299      	cmp	r1, r3
 8016a18:	d112      	bne.n	8016a40 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d00c      	beq.n	8016a3a <etharp_find_entry+0xc2>
 8016a20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a24:	4989      	ldr	r1, [pc, #548]	; (8016c4c <etharp_find_entry+0x2d4>)
 8016a26:	4613      	mov	r3, r2
 8016a28:	005b      	lsls	r3, r3, #1
 8016a2a:	4413      	add	r3, r2
 8016a2c:	00db      	lsls	r3, r3, #3
 8016a2e:	440b      	add	r3, r1
 8016a30:	3308      	adds	r3, #8
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	687a      	ldr	r2, [r7, #4]
 8016a36:	429a      	cmp	r2, r3
 8016a38:	d102      	bne.n	8016a40 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016a3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016a3e:	e100      	b.n	8016c42 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016a40:	7dfb      	ldrb	r3, [r7, #23]
 8016a42:	2b01      	cmp	r3, #1
 8016a44:	d140      	bne.n	8016ac8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016a46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a4a:	4980      	ldr	r1, [pc, #512]	; (8016c4c <etharp_find_entry+0x2d4>)
 8016a4c:	4613      	mov	r3, r2
 8016a4e:	005b      	lsls	r3, r3, #1
 8016a50:	4413      	add	r3, r2
 8016a52:	00db      	lsls	r3, r3, #3
 8016a54:	440b      	add	r3, r1
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d01a      	beq.n	8016a92 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016a5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a60:	497a      	ldr	r1, [pc, #488]	; (8016c4c <etharp_find_entry+0x2d4>)
 8016a62:	4613      	mov	r3, r2
 8016a64:	005b      	lsls	r3, r3, #1
 8016a66:	4413      	add	r3, r2
 8016a68:	00db      	lsls	r3, r3, #3
 8016a6a:	440b      	add	r3, r1
 8016a6c:	3312      	adds	r3, #18
 8016a6e:	881b      	ldrh	r3, [r3, #0]
 8016a70:	8bba      	ldrh	r2, [r7, #28]
 8016a72:	429a      	cmp	r2, r3
 8016a74:	d845      	bhi.n	8016b02 <etharp_find_entry+0x18a>
            old_queue = i;
 8016a76:	8c3b      	ldrh	r3, [r7, #32]
 8016a78:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016a7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a7e:	4973      	ldr	r1, [pc, #460]	; (8016c4c <etharp_find_entry+0x2d4>)
 8016a80:	4613      	mov	r3, r2
 8016a82:	005b      	lsls	r3, r3, #1
 8016a84:	4413      	add	r3, r2
 8016a86:	00db      	lsls	r3, r3, #3
 8016a88:	440b      	add	r3, r1
 8016a8a:	3312      	adds	r3, #18
 8016a8c:	881b      	ldrh	r3, [r3, #0]
 8016a8e:	83bb      	strh	r3, [r7, #28]
 8016a90:	e037      	b.n	8016b02 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016a92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a96:	496d      	ldr	r1, [pc, #436]	; (8016c4c <etharp_find_entry+0x2d4>)
 8016a98:	4613      	mov	r3, r2
 8016a9a:	005b      	lsls	r3, r3, #1
 8016a9c:	4413      	add	r3, r2
 8016a9e:	00db      	lsls	r3, r3, #3
 8016aa0:	440b      	add	r3, r1
 8016aa2:	3312      	adds	r3, #18
 8016aa4:	881b      	ldrh	r3, [r3, #0]
 8016aa6:	8b7a      	ldrh	r2, [r7, #26]
 8016aa8:	429a      	cmp	r2, r3
 8016aaa:	d82a      	bhi.n	8016b02 <etharp_find_entry+0x18a>
            old_pending = i;
 8016aac:	8c3b      	ldrh	r3, [r7, #32]
 8016aae:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016ab0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ab4:	4965      	ldr	r1, [pc, #404]	; (8016c4c <etharp_find_entry+0x2d4>)
 8016ab6:	4613      	mov	r3, r2
 8016ab8:	005b      	lsls	r3, r3, #1
 8016aba:	4413      	add	r3, r2
 8016abc:	00db      	lsls	r3, r3, #3
 8016abe:	440b      	add	r3, r1
 8016ac0:	3312      	adds	r3, #18
 8016ac2:	881b      	ldrh	r3, [r3, #0]
 8016ac4:	837b      	strh	r3, [r7, #26]
 8016ac6:	e01c      	b.n	8016b02 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016ac8:	7dfb      	ldrb	r3, [r7, #23]
 8016aca:	2b01      	cmp	r3, #1
 8016acc:	d919      	bls.n	8016b02 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016ace:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ad2:	495e      	ldr	r1, [pc, #376]	; (8016c4c <etharp_find_entry+0x2d4>)
 8016ad4:	4613      	mov	r3, r2
 8016ad6:	005b      	lsls	r3, r3, #1
 8016ad8:	4413      	add	r3, r2
 8016ada:	00db      	lsls	r3, r3, #3
 8016adc:	440b      	add	r3, r1
 8016ade:	3312      	adds	r3, #18
 8016ae0:	881b      	ldrh	r3, [r3, #0]
 8016ae2:	8b3a      	ldrh	r2, [r7, #24]
 8016ae4:	429a      	cmp	r2, r3
 8016ae6:	d80c      	bhi.n	8016b02 <etharp_find_entry+0x18a>
            old_stable = i;
 8016ae8:	8c3b      	ldrh	r3, [r7, #32]
 8016aea:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016aec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016af0:	4956      	ldr	r1, [pc, #344]	; (8016c4c <etharp_find_entry+0x2d4>)
 8016af2:	4613      	mov	r3, r2
 8016af4:	005b      	lsls	r3, r3, #1
 8016af6:	4413      	add	r3, r2
 8016af8:	00db      	lsls	r3, r3, #3
 8016afa:	440b      	add	r3, r1
 8016afc:	3312      	adds	r3, #18
 8016afe:	881b      	ldrh	r3, [r3, #0]
 8016b00:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b02:	8c3b      	ldrh	r3, [r7, #32]
 8016b04:	3301      	adds	r3, #1
 8016b06:	b29b      	uxth	r3, r3
 8016b08:	843b      	strh	r3, [r7, #32]
 8016b0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b0e:	2b09      	cmp	r3, #9
 8016b10:	f77f af4c 	ble.w	80169ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016b14:	7afb      	ldrb	r3, [r7, #11]
 8016b16:	f003 0302 	and.w	r3, r3, #2
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d108      	bne.n	8016b30 <etharp_find_entry+0x1b8>
 8016b1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016b22:	2b0a      	cmp	r3, #10
 8016b24:	d107      	bne.n	8016b36 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016b26:	7afb      	ldrb	r3, [r7, #11]
 8016b28:	f003 0301 	and.w	r3, r3, #1
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d102      	bne.n	8016b36 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b34:	e085      	b.n	8016c42 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016b36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016b3a:	2b09      	cmp	r3, #9
 8016b3c:	dc02      	bgt.n	8016b44 <etharp_find_entry+0x1cc>
    i = empty;
 8016b3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016b40:	843b      	strh	r3, [r7, #32]
 8016b42:	e039      	b.n	8016bb8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016b44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016b48:	2b09      	cmp	r3, #9
 8016b4a:	dc14      	bgt.n	8016b76 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016b4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b4e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016b50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b54:	493d      	ldr	r1, [pc, #244]	; (8016c4c <etharp_find_entry+0x2d4>)
 8016b56:	4613      	mov	r3, r2
 8016b58:	005b      	lsls	r3, r3, #1
 8016b5a:	4413      	add	r3, r2
 8016b5c:	00db      	lsls	r3, r3, #3
 8016b5e:	440b      	add	r3, r1
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d018      	beq.n	8016b98 <etharp_find_entry+0x220>
 8016b66:	4b3a      	ldr	r3, [pc, #232]	; (8016c50 <etharp_find_entry+0x2d8>)
 8016b68:	f240 126d 	movw	r2, #365	; 0x16d
 8016b6c:	493b      	ldr	r1, [pc, #236]	; (8016c5c <etharp_find_entry+0x2e4>)
 8016b6e:	483a      	ldr	r0, [pc, #232]	; (8016c58 <etharp_find_entry+0x2e0>)
 8016b70:	f002 fd82 	bl	8019678 <iprintf>
 8016b74:	e010      	b.n	8016b98 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016b76:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016b7a:	2b09      	cmp	r3, #9
 8016b7c:	dc02      	bgt.n	8016b84 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016b7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016b80:	843b      	strh	r3, [r7, #32]
 8016b82:	e009      	b.n	8016b98 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016b84:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016b88:	2b09      	cmp	r3, #9
 8016b8a:	dc02      	bgt.n	8016b92 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016b8c:	8bfb      	ldrh	r3, [r7, #30]
 8016b8e:	843b      	strh	r3, [r7, #32]
 8016b90:	e002      	b.n	8016b98 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b96:	e054      	b.n	8016c42 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016b98:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b9c:	2b09      	cmp	r3, #9
 8016b9e:	dd06      	ble.n	8016bae <etharp_find_entry+0x236>
 8016ba0:	4b2b      	ldr	r3, [pc, #172]	; (8016c50 <etharp_find_entry+0x2d8>)
 8016ba2:	f240 127f 	movw	r2, #383	; 0x17f
 8016ba6:	492e      	ldr	r1, [pc, #184]	; (8016c60 <etharp_find_entry+0x2e8>)
 8016ba8:	482b      	ldr	r0, [pc, #172]	; (8016c58 <etharp_find_entry+0x2e0>)
 8016baa:	f002 fd65 	bl	8019678 <iprintf>
    etharp_free_entry(i);
 8016bae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	f7ff fe06 	bl	80167c4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016bb8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016bbc:	2b09      	cmp	r3, #9
 8016bbe:	dd06      	ble.n	8016bce <etharp_find_entry+0x256>
 8016bc0:	4b23      	ldr	r3, [pc, #140]	; (8016c50 <etharp_find_entry+0x2d8>)
 8016bc2:	f240 1283 	movw	r2, #387	; 0x183
 8016bc6:	4926      	ldr	r1, [pc, #152]	; (8016c60 <etharp_find_entry+0x2e8>)
 8016bc8:	4823      	ldr	r0, [pc, #140]	; (8016c58 <etharp_find_entry+0x2e0>)
 8016bca:	f002 fd55 	bl	8019678 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016bce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016bd2:	491e      	ldr	r1, [pc, #120]	; (8016c4c <etharp_find_entry+0x2d4>)
 8016bd4:	4613      	mov	r3, r2
 8016bd6:	005b      	lsls	r3, r3, #1
 8016bd8:	4413      	add	r3, r2
 8016bda:	00db      	lsls	r3, r3, #3
 8016bdc:	440b      	add	r3, r1
 8016bde:	3314      	adds	r3, #20
 8016be0:	781b      	ldrb	r3, [r3, #0]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d006      	beq.n	8016bf4 <etharp_find_entry+0x27c>
 8016be6:	4b1a      	ldr	r3, [pc, #104]	; (8016c50 <etharp_find_entry+0x2d8>)
 8016be8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016bec:	491d      	ldr	r1, [pc, #116]	; (8016c64 <etharp_find_entry+0x2ec>)
 8016bee:	481a      	ldr	r0, [pc, #104]	; (8016c58 <etharp_find_entry+0x2e0>)
 8016bf0:	f002 fd42 	bl	8019678 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d00b      	beq.n	8016c12 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016bfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	6819      	ldr	r1, [r3, #0]
 8016c02:	4812      	ldr	r0, [pc, #72]	; (8016c4c <etharp_find_entry+0x2d4>)
 8016c04:	4613      	mov	r3, r2
 8016c06:	005b      	lsls	r3, r3, #1
 8016c08:	4413      	add	r3, r2
 8016c0a:	00db      	lsls	r3, r3, #3
 8016c0c:	4403      	add	r3, r0
 8016c0e:	3304      	adds	r3, #4
 8016c10:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016c12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c16:	490d      	ldr	r1, [pc, #52]	; (8016c4c <etharp_find_entry+0x2d4>)
 8016c18:	4613      	mov	r3, r2
 8016c1a:	005b      	lsls	r3, r3, #1
 8016c1c:	4413      	add	r3, r2
 8016c1e:	00db      	lsls	r3, r3, #3
 8016c20:	440b      	add	r3, r1
 8016c22:	3312      	adds	r3, #18
 8016c24:	2200      	movs	r2, #0
 8016c26:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016c28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c2c:	4907      	ldr	r1, [pc, #28]	; (8016c4c <etharp_find_entry+0x2d4>)
 8016c2e:	4613      	mov	r3, r2
 8016c30:	005b      	lsls	r3, r3, #1
 8016c32:	4413      	add	r3, r2
 8016c34:	00db      	lsls	r3, r3, #3
 8016c36:	440b      	add	r3, r1
 8016c38:	3308      	adds	r3, #8
 8016c3a:	687a      	ldr	r2, [r7, #4]
 8016c3c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016c3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016c42:	4618      	mov	r0, r3
 8016c44:	3728      	adds	r7, #40	; 0x28
 8016c46:	46bd      	mov	sp, r7
 8016c48:	bd80      	pop	{r7, pc}
 8016c4a:	bf00      	nop
 8016c4c:	2000cffc 	.word	0x2000cffc
 8016c50:	0801da90 	.word	0x0801da90
 8016c54:	0801dac8 	.word	0x0801dac8
 8016c58:	0801db08 	.word	0x0801db08
 8016c5c:	0801db30 	.word	0x0801db30
 8016c60:	0801db48 	.word	0x0801db48
 8016c64:	0801db5c 	.word	0x0801db5c

08016c68 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b088      	sub	sp, #32
 8016c6c:	af02      	add	r7, sp, #8
 8016c6e:	60f8      	str	r0, [r7, #12]
 8016c70:	60b9      	str	r1, [r7, #8]
 8016c72:	607a      	str	r2, [r7, #4]
 8016c74:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016c7c:	2b06      	cmp	r3, #6
 8016c7e:	d006      	beq.n	8016c8e <etharp_update_arp_entry+0x26>
 8016c80:	4b48      	ldr	r3, [pc, #288]	; (8016da4 <etharp_update_arp_entry+0x13c>)
 8016c82:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016c86:	4948      	ldr	r1, [pc, #288]	; (8016da8 <etharp_update_arp_entry+0x140>)
 8016c88:	4848      	ldr	r0, [pc, #288]	; (8016dac <etharp_update_arp_entry+0x144>)
 8016c8a:	f002 fcf5 	bl	8019678 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016c8e:	68bb      	ldr	r3, [r7, #8]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d012      	beq.n	8016cba <etharp_update_arp_entry+0x52>
 8016c94:	68bb      	ldr	r3, [r7, #8]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d00e      	beq.n	8016cba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016c9c:	68bb      	ldr	r3, [r7, #8]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	68f9      	ldr	r1, [r7, #12]
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f001 f920 	bl	8017ee8 <ip4_addr_isbroadcast_u32>
 8016ca8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d105      	bne.n	8016cba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016cae:	68bb      	ldr	r3, [r7, #8]
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016cb6:	2be0      	cmp	r3, #224	; 0xe0
 8016cb8:	d102      	bne.n	8016cc0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016cba:	f06f 030f 	mvn.w	r3, #15
 8016cbe:	e06c      	b.n	8016d9a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016cc0:	78fb      	ldrb	r3, [r7, #3]
 8016cc2:	68fa      	ldr	r2, [r7, #12]
 8016cc4:	4619      	mov	r1, r3
 8016cc6:	68b8      	ldr	r0, [r7, #8]
 8016cc8:	f7ff fe56 	bl	8016978 <etharp_find_entry>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016cd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	da02      	bge.n	8016cde <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016cd8:	8afb      	ldrh	r3, [r7, #22]
 8016cda:	b25b      	sxtb	r3, r3
 8016cdc:	e05d      	b.n	8016d9a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016cde:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ce2:	4933      	ldr	r1, [pc, #204]	; (8016db0 <etharp_update_arp_entry+0x148>)
 8016ce4:	4613      	mov	r3, r2
 8016ce6:	005b      	lsls	r3, r3, #1
 8016ce8:	4413      	add	r3, r2
 8016cea:	00db      	lsls	r3, r3, #3
 8016cec:	440b      	add	r3, r1
 8016cee:	3314      	adds	r3, #20
 8016cf0:	2202      	movs	r2, #2
 8016cf2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016cf4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016cf8:	492d      	ldr	r1, [pc, #180]	; (8016db0 <etharp_update_arp_entry+0x148>)
 8016cfa:	4613      	mov	r3, r2
 8016cfc:	005b      	lsls	r3, r3, #1
 8016cfe:	4413      	add	r3, r2
 8016d00:	00db      	lsls	r3, r3, #3
 8016d02:	440b      	add	r3, r1
 8016d04:	3308      	adds	r3, #8
 8016d06:	68fa      	ldr	r2, [r7, #12]
 8016d08:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016d0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d0e:	4613      	mov	r3, r2
 8016d10:	005b      	lsls	r3, r3, #1
 8016d12:	4413      	add	r3, r2
 8016d14:	00db      	lsls	r3, r3, #3
 8016d16:	3308      	adds	r3, #8
 8016d18:	4a25      	ldr	r2, [pc, #148]	; (8016db0 <etharp_update_arp_entry+0x148>)
 8016d1a:	4413      	add	r3, r2
 8016d1c:	3304      	adds	r3, #4
 8016d1e:	2206      	movs	r2, #6
 8016d20:	6879      	ldr	r1, [r7, #4]
 8016d22:	4618      	mov	r0, r3
 8016d24:	f002 fbb2 	bl	801948c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016d28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d2c:	4920      	ldr	r1, [pc, #128]	; (8016db0 <etharp_update_arp_entry+0x148>)
 8016d2e:	4613      	mov	r3, r2
 8016d30:	005b      	lsls	r3, r3, #1
 8016d32:	4413      	add	r3, r2
 8016d34:	00db      	lsls	r3, r3, #3
 8016d36:	440b      	add	r3, r1
 8016d38:	3312      	adds	r3, #18
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016d3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d42:	491b      	ldr	r1, [pc, #108]	; (8016db0 <etharp_update_arp_entry+0x148>)
 8016d44:	4613      	mov	r3, r2
 8016d46:	005b      	lsls	r3, r3, #1
 8016d48:	4413      	add	r3, r2
 8016d4a:	00db      	lsls	r3, r3, #3
 8016d4c:	440b      	add	r3, r1
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d021      	beq.n	8016d98 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016d54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d58:	4915      	ldr	r1, [pc, #84]	; (8016db0 <etharp_update_arp_entry+0x148>)
 8016d5a:	4613      	mov	r3, r2
 8016d5c:	005b      	lsls	r3, r3, #1
 8016d5e:	4413      	add	r3, r2
 8016d60:	00db      	lsls	r3, r3, #3
 8016d62:	440b      	add	r3, r1
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016d68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d6c:	4910      	ldr	r1, [pc, #64]	; (8016db0 <etharp_update_arp_entry+0x148>)
 8016d6e:	4613      	mov	r3, r2
 8016d70:	005b      	lsls	r3, r3, #1
 8016d72:	4413      	add	r3, r2
 8016d74:	00db      	lsls	r3, r3, #3
 8016d76:	440b      	add	r3, r1
 8016d78:	2200      	movs	r2, #0
 8016d7a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016d82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016d86:	9300      	str	r3, [sp, #0]
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	6939      	ldr	r1, [r7, #16]
 8016d8c:	68f8      	ldr	r0, [r7, #12]
 8016d8e:	f002 f849 	bl	8018e24 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016d92:	6938      	ldr	r0, [r7, #16]
 8016d94:	f7f6 fd12 	bl	800d7bc <pbuf_free>
  }
  return ERR_OK;
 8016d98:	2300      	movs	r3, #0
}
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	3718      	adds	r7, #24
 8016d9e:	46bd      	mov	sp, r7
 8016da0:	bd80      	pop	{r7, pc}
 8016da2:	bf00      	nop
 8016da4:	0801da90 	.word	0x0801da90
 8016da8:	0801db88 	.word	0x0801db88
 8016dac:	0801db08 	.word	0x0801db08
 8016db0:	2000cffc 	.word	0x2000cffc

08016db4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016db4:	b580      	push	{r7, lr}
 8016db6:	b084      	sub	sp, #16
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	60fb      	str	r3, [r7, #12]
 8016dc0:	e01e      	b.n	8016e00 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016dc2:	4913      	ldr	r1, [pc, #76]	; (8016e10 <etharp_cleanup_netif+0x5c>)
 8016dc4:	68fa      	ldr	r2, [r7, #12]
 8016dc6:	4613      	mov	r3, r2
 8016dc8:	005b      	lsls	r3, r3, #1
 8016dca:	4413      	add	r3, r2
 8016dcc:	00db      	lsls	r3, r3, #3
 8016dce:	440b      	add	r3, r1
 8016dd0:	3314      	adds	r3, #20
 8016dd2:	781b      	ldrb	r3, [r3, #0]
 8016dd4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016dd6:	7afb      	ldrb	r3, [r7, #11]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d00e      	beq.n	8016dfa <etharp_cleanup_netif+0x46>
 8016ddc:	490c      	ldr	r1, [pc, #48]	; (8016e10 <etharp_cleanup_netif+0x5c>)
 8016dde:	68fa      	ldr	r2, [r7, #12]
 8016de0:	4613      	mov	r3, r2
 8016de2:	005b      	lsls	r3, r3, #1
 8016de4:	4413      	add	r3, r2
 8016de6:	00db      	lsls	r3, r3, #3
 8016de8:	440b      	add	r3, r1
 8016dea:	3308      	adds	r3, #8
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	687a      	ldr	r2, [r7, #4]
 8016df0:	429a      	cmp	r2, r3
 8016df2:	d102      	bne.n	8016dfa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016df4:	68f8      	ldr	r0, [r7, #12]
 8016df6:	f7ff fce5 	bl	80167c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	3301      	adds	r3, #1
 8016dfe:	60fb      	str	r3, [r7, #12]
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	2b09      	cmp	r3, #9
 8016e04:	dddd      	ble.n	8016dc2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016e06:	bf00      	nop
 8016e08:	bf00      	nop
 8016e0a:	3710      	adds	r7, #16
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	bd80      	pop	{r7, pc}
 8016e10:	2000cffc 	.word	0x2000cffc

08016e14 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016e14:	b5b0      	push	{r4, r5, r7, lr}
 8016e16:	b08a      	sub	sp, #40	; 0x28
 8016e18:	af04      	add	r7, sp, #16
 8016e1a:	6078      	str	r0, [r7, #4]
 8016e1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016e1e:	683b      	ldr	r3, [r7, #0]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d107      	bne.n	8016e34 <etharp_input+0x20>
 8016e24:	4b3f      	ldr	r3, [pc, #252]	; (8016f24 <etharp_input+0x110>)
 8016e26:	f240 228a 	movw	r2, #650	; 0x28a
 8016e2a:	493f      	ldr	r1, [pc, #252]	; (8016f28 <etharp_input+0x114>)
 8016e2c:	483f      	ldr	r0, [pc, #252]	; (8016f2c <etharp_input+0x118>)
 8016e2e:	f002 fc23 	bl	8019678 <iprintf>
 8016e32:	e074      	b.n	8016f1e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	685b      	ldr	r3, [r3, #4]
 8016e38:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016e3a:	693b      	ldr	r3, [r7, #16]
 8016e3c:	881b      	ldrh	r3, [r3, #0]
 8016e3e:	b29b      	uxth	r3, r3
 8016e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016e44:	d10c      	bne.n	8016e60 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016e46:	693b      	ldr	r3, [r7, #16]
 8016e48:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016e4a:	2b06      	cmp	r3, #6
 8016e4c:	d108      	bne.n	8016e60 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016e4e:	693b      	ldr	r3, [r7, #16]
 8016e50:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016e52:	2b04      	cmp	r3, #4
 8016e54:	d104      	bne.n	8016e60 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016e56:	693b      	ldr	r3, [r7, #16]
 8016e58:	885b      	ldrh	r3, [r3, #2]
 8016e5a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016e5c:	2b08      	cmp	r3, #8
 8016e5e:	d003      	beq.n	8016e68 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016e60:	6878      	ldr	r0, [r7, #4]
 8016e62:	f7f6 fcab 	bl	800d7bc <pbuf_free>
    return;
 8016e66:	e05a      	b.n	8016f1e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016e68:	693b      	ldr	r3, [r7, #16]
 8016e6a:	330e      	adds	r3, #14
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016e70:	693b      	ldr	r3, [r7, #16]
 8016e72:	3318      	adds	r3, #24
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016e78:	683b      	ldr	r3, [r7, #0]
 8016e7a:	3304      	adds	r3, #4
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d102      	bne.n	8016e88 <etharp_input+0x74>
    for_us = 0;
 8016e82:	2300      	movs	r3, #0
 8016e84:	75fb      	strb	r3, [r7, #23]
 8016e86:	e009      	b.n	8016e9c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016e88:	68ba      	ldr	r2, [r7, #8]
 8016e8a:	683b      	ldr	r3, [r7, #0]
 8016e8c:	3304      	adds	r3, #4
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	429a      	cmp	r2, r3
 8016e92:	bf0c      	ite	eq
 8016e94:	2301      	moveq	r3, #1
 8016e96:	2300      	movne	r3, #0
 8016e98:	b2db      	uxtb	r3, r3
 8016e9a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016e9c:	693b      	ldr	r3, [r7, #16]
 8016e9e:	f103 0208 	add.w	r2, r3, #8
 8016ea2:	7dfb      	ldrb	r3, [r7, #23]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d001      	beq.n	8016eac <etharp_input+0x98>
 8016ea8:	2301      	movs	r3, #1
 8016eaa:	e000      	b.n	8016eae <etharp_input+0x9a>
 8016eac:	2302      	movs	r3, #2
 8016eae:	f107 010c 	add.w	r1, r7, #12
 8016eb2:	6838      	ldr	r0, [r7, #0]
 8016eb4:	f7ff fed8 	bl	8016c68 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016eb8:	693b      	ldr	r3, [r7, #16]
 8016eba:	88db      	ldrh	r3, [r3, #6]
 8016ebc:	b29b      	uxth	r3, r3
 8016ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ec2:	d003      	beq.n	8016ecc <etharp_input+0xb8>
 8016ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016ec8:	d01e      	beq.n	8016f08 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016eca:	e025      	b.n	8016f18 <etharp_input+0x104>
      if (for_us) {
 8016ecc:	7dfb      	ldrb	r3, [r7, #23]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d021      	beq.n	8016f16 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016ed2:	683b      	ldr	r3, [r7, #0]
 8016ed4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016ed8:	693b      	ldr	r3, [r7, #16]
 8016eda:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016ede:	683b      	ldr	r3, [r7, #0]
 8016ee0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8016ee4:	683b      	ldr	r3, [r7, #0]
 8016ee6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016ee8:	693a      	ldr	r2, [r7, #16]
 8016eea:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016eec:	2102      	movs	r1, #2
 8016eee:	9103      	str	r1, [sp, #12]
 8016ef0:	f107 010c 	add.w	r1, r7, #12
 8016ef4:	9102      	str	r1, [sp, #8]
 8016ef6:	9201      	str	r2, [sp, #4]
 8016ef8:	9300      	str	r3, [sp, #0]
 8016efa:	462b      	mov	r3, r5
 8016efc:	4622      	mov	r2, r4
 8016efe:	4601      	mov	r1, r0
 8016f00:	6838      	ldr	r0, [r7, #0]
 8016f02:	f000 faef 	bl	80174e4 <etharp_raw>
      break;
 8016f06:	e006      	b.n	8016f16 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016f08:	f107 030c 	add.w	r3, r7, #12
 8016f0c:	4619      	mov	r1, r3
 8016f0e:	6838      	ldr	r0, [r7, #0]
 8016f10:	f7fe f9fc 	bl	801530c <dhcp_arp_reply>
      break;
 8016f14:	e000      	b.n	8016f18 <etharp_input+0x104>
      break;
 8016f16:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016f18:	6878      	ldr	r0, [r7, #4]
 8016f1a:	f7f6 fc4f 	bl	800d7bc <pbuf_free>
}
 8016f1e:	3718      	adds	r7, #24
 8016f20:	46bd      	mov	sp, r7
 8016f22:	bdb0      	pop	{r4, r5, r7, pc}
 8016f24:	0801da90 	.word	0x0801da90
 8016f28:	0801dbe0 	.word	0x0801dbe0
 8016f2c:	0801db08 	.word	0x0801db08

08016f30 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016f30:	b580      	push	{r7, lr}
 8016f32:	b086      	sub	sp, #24
 8016f34:	af02      	add	r7, sp, #8
 8016f36:	60f8      	str	r0, [r7, #12]
 8016f38:	60b9      	str	r1, [r7, #8]
 8016f3a:	4613      	mov	r3, r2
 8016f3c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016f3e:	79fa      	ldrb	r2, [r7, #7]
 8016f40:	4944      	ldr	r1, [pc, #272]	; (8017054 <etharp_output_to_arp_index+0x124>)
 8016f42:	4613      	mov	r3, r2
 8016f44:	005b      	lsls	r3, r3, #1
 8016f46:	4413      	add	r3, r2
 8016f48:	00db      	lsls	r3, r3, #3
 8016f4a:	440b      	add	r3, r1
 8016f4c:	3314      	adds	r3, #20
 8016f4e:	781b      	ldrb	r3, [r3, #0]
 8016f50:	2b01      	cmp	r3, #1
 8016f52:	d806      	bhi.n	8016f62 <etharp_output_to_arp_index+0x32>
 8016f54:	4b40      	ldr	r3, [pc, #256]	; (8017058 <etharp_output_to_arp_index+0x128>)
 8016f56:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016f5a:	4940      	ldr	r1, [pc, #256]	; (801705c <etharp_output_to_arp_index+0x12c>)
 8016f5c:	4840      	ldr	r0, [pc, #256]	; (8017060 <etharp_output_to_arp_index+0x130>)
 8016f5e:	f002 fb8b 	bl	8019678 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016f62:	79fa      	ldrb	r2, [r7, #7]
 8016f64:	493b      	ldr	r1, [pc, #236]	; (8017054 <etharp_output_to_arp_index+0x124>)
 8016f66:	4613      	mov	r3, r2
 8016f68:	005b      	lsls	r3, r3, #1
 8016f6a:	4413      	add	r3, r2
 8016f6c:	00db      	lsls	r3, r3, #3
 8016f6e:	440b      	add	r3, r1
 8016f70:	3314      	adds	r3, #20
 8016f72:	781b      	ldrb	r3, [r3, #0]
 8016f74:	2b02      	cmp	r3, #2
 8016f76:	d153      	bne.n	8017020 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016f78:	79fa      	ldrb	r2, [r7, #7]
 8016f7a:	4936      	ldr	r1, [pc, #216]	; (8017054 <etharp_output_to_arp_index+0x124>)
 8016f7c:	4613      	mov	r3, r2
 8016f7e:	005b      	lsls	r3, r3, #1
 8016f80:	4413      	add	r3, r2
 8016f82:	00db      	lsls	r3, r3, #3
 8016f84:	440b      	add	r3, r1
 8016f86:	3312      	adds	r3, #18
 8016f88:	881b      	ldrh	r3, [r3, #0]
 8016f8a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016f8e:	d919      	bls.n	8016fc4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016f90:	79fa      	ldrb	r2, [r7, #7]
 8016f92:	4613      	mov	r3, r2
 8016f94:	005b      	lsls	r3, r3, #1
 8016f96:	4413      	add	r3, r2
 8016f98:	00db      	lsls	r3, r3, #3
 8016f9a:	4a2e      	ldr	r2, [pc, #184]	; (8017054 <etharp_output_to_arp_index+0x124>)
 8016f9c:	4413      	add	r3, r2
 8016f9e:	3304      	adds	r3, #4
 8016fa0:	4619      	mov	r1, r3
 8016fa2:	68f8      	ldr	r0, [r7, #12]
 8016fa4:	f000 fb4c 	bl	8017640 <etharp_request>
 8016fa8:	4603      	mov	r3, r0
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d138      	bne.n	8017020 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016fae:	79fa      	ldrb	r2, [r7, #7]
 8016fb0:	4928      	ldr	r1, [pc, #160]	; (8017054 <etharp_output_to_arp_index+0x124>)
 8016fb2:	4613      	mov	r3, r2
 8016fb4:	005b      	lsls	r3, r3, #1
 8016fb6:	4413      	add	r3, r2
 8016fb8:	00db      	lsls	r3, r3, #3
 8016fba:	440b      	add	r3, r1
 8016fbc:	3314      	adds	r3, #20
 8016fbe:	2203      	movs	r2, #3
 8016fc0:	701a      	strb	r2, [r3, #0]
 8016fc2:	e02d      	b.n	8017020 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016fc4:	79fa      	ldrb	r2, [r7, #7]
 8016fc6:	4923      	ldr	r1, [pc, #140]	; (8017054 <etharp_output_to_arp_index+0x124>)
 8016fc8:	4613      	mov	r3, r2
 8016fca:	005b      	lsls	r3, r3, #1
 8016fcc:	4413      	add	r3, r2
 8016fce:	00db      	lsls	r3, r3, #3
 8016fd0:	440b      	add	r3, r1
 8016fd2:	3312      	adds	r3, #18
 8016fd4:	881b      	ldrh	r3, [r3, #0]
 8016fd6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016fda:	d321      	bcc.n	8017020 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016fdc:	79fa      	ldrb	r2, [r7, #7]
 8016fde:	4613      	mov	r3, r2
 8016fe0:	005b      	lsls	r3, r3, #1
 8016fe2:	4413      	add	r3, r2
 8016fe4:	00db      	lsls	r3, r3, #3
 8016fe6:	4a1b      	ldr	r2, [pc, #108]	; (8017054 <etharp_output_to_arp_index+0x124>)
 8016fe8:	4413      	add	r3, r2
 8016fea:	1d19      	adds	r1, r3, #4
 8016fec:	79fa      	ldrb	r2, [r7, #7]
 8016fee:	4613      	mov	r3, r2
 8016ff0:	005b      	lsls	r3, r3, #1
 8016ff2:	4413      	add	r3, r2
 8016ff4:	00db      	lsls	r3, r3, #3
 8016ff6:	3308      	adds	r3, #8
 8016ff8:	4a16      	ldr	r2, [pc, #88]	; (8017054 <etharp_output_to_arp_index+0x124>)
 8016ffa:	4413      	add	r3, r2
 8016ffc:	3304      	adds	r3, #4
 8016ffe:	461a      	mov	r2, r3
 8017000:	68f8      	ldr	r0, [r7, #12]
 8017002:	f000 fafb 	bl	80175fc <etharp_request_dst>
 8017006:	4603      	mov	r3, r0
 8017008:	2b00      	cmp	r3, #0
 801700a:	d109      	bne.n	8017020 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801700c:	79fa      	ldrb	r2, [r7, #7]
 801700e:	4911      	ldr	r1, [pc, #68]	; (8017054 <etharp_output_to_arp_index+0x124>)
 8017010:	4613      	mov	r3, r2
 8017012:	005b      	lsls	r3, r3, #1
 8017014:	4413      	add	r3, r2
 8017016:	00db      	lsls	r3, r3, #3
 8017018:	440b      	add	r3, r1
 801701a:	3314      	adds	r3, #20
 801701c:	2203      	movs	r2, #3
 801701e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8017026:	79fa      	ldrb	r2, [r7, #7]
 8017028:	4613      	mov	r3, r2
 801702a:	005b      	lsls	r3, r3, #1
 801702c:	4413      	add	r3, r2
 801702e:	00db      	lsls	r3, r3, #3
 8017030:	3308      	adds	r3, #8
 8017032:	4a08      	ldr	r2, [pc, #32]	; (8017054 <etharp_output_to_arp_index+0x124>)
 8017034:	4413      	add	r3, r2
 8017036:	3304      	adds	r3, #4
 8017038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801703c:	9200      	str	r2, [sp, #0]
 801703e:	460a      	mov	r2, r1
 8017040:	68b9      	ldr	r1, [r7, #8]
 8017042:	68f8      	ldr	r0, [r7, #12]
 8017044:	f001 feee 	bl	8018e24 <ethernet_output>
 8017048:	4603      	mov	r3, r0
}
 801704a:	4618      	mov	r0, r3
 801704c:	3710      	adds	r7, #16
 801704e:	46bd      	mov	sp, r7
 8017050:	bd80      	pop	{r7, pc}
 8017052:	bf00      	nop
 8017054:	2000cffc 	.word	0x2000cffc
 8017058:	0801da90 	.word	0x0801da90
 801705c:	0801dc00 	.word	0x0801dc00
 8017060:	0801db08 	.word	0x0801db08

08017064 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b08a      	sub	sp, #40	; 0x28
 8017068:	af02      	add	r7, sp, #8
 801706a:	60f8      	str	r0, [r7, #12]
 801706c:	60b9      	str	r1, [r7, #8]
 801706e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d106      	bne.n	8017088 <etharp_output+0x24>
 801707a:	4b73      	ldr	r3, [pc, #460]	; (8017248 <etharp_output+0x1e4>)
 801707c:	f240 321e 	movw	r2, #798	; 0x31e
 8017080:	4972      	ldr	r1, [pc, #456]	; (801724c <etharp_output+0x1e8>)
 8017082:	4873      	ldr	r0, [pc, #460]	; (8017250 <etharp_output+0x1ec>)
 8017084:	f002 faf8 	bl	8019678 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017088:	68bb      	ldr	r3, [r7, #8]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d106      	bne.n	801709c <etharp_output+0x38>
 801708e:	4b6e      	ldr	r3, [pc, #440]	; (8017248 <etharp_output+0x1e4>)
 8017090:	f240 321f 	movw	r2, #799	; 0x31f
 8017094:	496f      	ldr	r1, [pc, #444]	; (8017254 <etharp_output+0x1f0>)
 8017096:	486e      	ldr	r0, [pc, #440]	; (8017250 <etharp_output+0x1ec>)
 8017098:	f002 faee 	bl	8019678 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d106      	bne.n	80170b0 <etharp_output+0x4c>
 80170a2:	4b69      	ldr	r3, [pc, #420]	; (8017248 <etharp_output+0x1e4>)
 80170a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80170a8:	496b      	ldr	r1, [pc, #428]	; (8017258 <etharp_output+0x1f4>)
 80170aa:	4869      	ldr	r0, [pc, #420]	; (8017250 <etharp_output+0x1ec>)
 80170ac:	f002 fae4 	bl	8019678 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	68f9      	ldr	r1, [r7, #12]
 80170b6:	4618      	mov	r0, r3
 80170b8:	f000 ff16 	bl	8017ee8 <ip4_addr_isbroadcast_u32>
 80170bc:	4603      	mov	r3, r0
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d002      	beq.n	80170c8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80170c2:	4b66      	ldr	r3, [pc, #408]	; (801725c <etharp_output+0x1f8>)
 80170c4:	61fb      	str	r3, [r7, #28]
 80170c6:	e0af      	b.n	8017228 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80170d0:	2be0      	cmp	r3, #224	; 0xe0
 80170d2:	d118      	bne.n	8017106 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80170d4:	2301      	movs	r3, #1
 80170d6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80170d8:	2300      	movs	r3, #0
 80170da:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80170dc:	235e      	movs	r3, #94	; 0x5e
 80170de:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	3301      	adds	r3, #1
 80170e4:	781b      	ldrb	r3, [r3, #0]
 80170e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80170ea:	b2db      	uxtb	r3, r3
 80170ec:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	3302      	adds	r3, #2
 80170f2:	781b      	ldrb	r3, [r3, #0]
 80170f4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	3303      	adds	r3, #3
 80170fa:	781b      	ldrb	r3, [r3, #0]
 80170fc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80170fe:	f107 0310 	add.w	r3, r7, #16
 8017102:	61fb      	str	r3, [r7, #28]
 8017104:	e090      	b.n	8017228 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	681a      	ldr	r2, [r3, #0]
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	3304      	adds	r3, #4
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	405a      	eors	r2, r3
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	3308      	adds	r3, #8
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	4013      	ands	r3, r2
 801711a:	2b00      	cmp	r3, #0
 801711c:	d012      	beq.n	8017144 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017124:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017128:	4293      	cmp	r3, r2
 801712a:	d00b      	beq.n	8017144 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	330c      	adds	r3, #12
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d003      	beq.n	801713e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	330c      	adds	r3, #12
 801713a:	61bb      	str	r3, [r7, #24]
 801713c:	e002      	b.n	8017144 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801713e:	f06f 0303 	mvn.w	r3, #3
 8017142:	e07d      	b.n	8017240 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017144:	4b46      	ldr	r3, [pc, #280]	; (8017260 <etharp_output+0x1fc>)
 8017146:	781b      	ldrb	r3, [r3, #0]
 8017148:	4619      	mov	r1, r3
 801714a:	4a46      	ldr	r2, [pc, #280]	; (8017264 <etharp_output+0x200>)
 801714c:	460b      	mov	r3, r1
 801714e:	005b      	lsls	r3, r3, #1
 8017150:	440b      	add	r3, r1
 8017152:	00db      	lsls	r3, r3, #3
 8017154:	4413      	add	r3, r2
 8017156:	3314      	adds	r3, #20
 8017158:	781b      	ldrb	r3, [r3, #0]
 801715a:	2b01      	cmp	r3, #1
 801715c:	d925      	bls.n	80171aa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801715e:	4b40      	ldr	r3, [pc, #256]	; (8017260 <etharp_output+0x1fc>)
 8017160:	781b      	ldrb	r3, [r3, #0]
 8017162:	4619      	mov	r1, r3
 8017164:	4a3f      	ldr	r2, [pc, #252]	; (8017264 <etharp_output+0x200>)
 8017166:	460b      	mov	r3, r1
 8017168:	005b      	lsls	r3, r3, #1
 801716a:	440b      	add	r3, r1
 801716c:	00db      	lsls	r3, r3, #3
 801716e:	4413      	add	r3, r2
 8017170:	3308      	adds	r3, #8
 8017172:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017174:	68fa      	ldr	r2, [r7, #12]
 8017176:	429a      	cmp	r2, r3
 8017178:	d117      	bne.n	80171aa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801717a:	69bb      	ldr	r3, [r7, #24]
 801717c:	681a      	ldr	r2, [r3, #0]
 801717e:	4b38      	ldr	r3, [pc, #224]	; (8017260 <etharp_output+0x1fc>)
 8017180:	781b      	ldrb	r3, [r3, #0]
 8017182:	4618      	mov	r0, r3
 8017184:	4937      	ldr	r1, [pc, #220]	; (8017264 <etharp_output+0x200>)
 8017186:	4603      	mov	r3, r0
 8017188:	005b      	lsls	r3, r3, #1
 801718a:	4403      	add	r3, r0
 801718c:	00db      	lsls	r3, r3, #3
 801718e:	440b      	add	r3, r1
 8017190:	3304      	adds	r3, #4
 8017192:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017194:	429a      	cmp	r2, r3
 8017196:	d108      	bne.n	80171aa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017198:	4b31      	ldr	r3, [pc, #196]	; (8017260 <etharp_output+0x1fc>)
 801719a:	781b      	ldrb	r3, [r3, #0]
 801719c:	461a      	mov	r2, r3
 801719e:	68b9      	ldr	r1, [r7, #8]
 80171a0:	68f8      	ldr	r0, [r7, #12]
 80171a2:	f7ff fec5 	bl	8016f30 <etharp_output_to_arp_index>
 80171a6:	4603      	mov	r3, r0
 80171a8:	e04a      	b.n	8017240 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80171aa:	2300      	movs	r3, #0
 80171ac:	75fb      	strb	r3, [r7, #23]
 80171ae:	e031      	b.n	8017214 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80171b0:	7dfa      	ldrb	r2, [r7, #23]
 80171b2:	492c      	ldr	r1, [pc, #176]	; (8017264 <etharp_output+0x200>)
 80171b4:	4613      	mov	r3, r2
 80171b6:	005b      	lsls	r3, r3, #1
 80171b8:	4413      	add	r3, r2
 80171ba:	00db      	lsls	r3, r3, #3
 80171bc:	440b      	add	r3, r1
 80171be:	3314      	adds	r3, #20
 80171c0:	781b      	ldrb	r3, [r3, #0]
 80171c2:	2b01      	cmp	r3, #1
 80171c4:	d923      	bls.n	801720e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80171c6:	7dfa      	ldrb	r2, [r7, #23]
 80171c8:	4926      	ldr	r1, [pc, #152]	; (8017264 <etharp_output+0x200>)
 80171ca:	4613      	mov	r3, r2
 80171cc:	005b      	lsls	r3, r3, #1
 80171ce:	4413      	add	r3, r2
 80171d0:	00db      	lsls	r3, r3, #3
 80171d2:	440b      	add	r3, r1
 80171d4:	3308      	adds	r3, #8
 80171d6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80171d8:	68fa      	ldr	r2, [r7, #12]
 80171da:	429a      	cmp	r2, r3
 80171dc:	d117      	bne.n	801720e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80171de:	69bb      	ldr	r3, [r7, #24]
 80171e0:	6819      	ldr	r1, [r3, #0]
 80171e2:	7dfa      	ldrb	r2, [r7, #23]
 80171e4:	481f      	ldr	r0, [pc, #124]	; (8017264 <etharp_output+0x200>)
 80171e6:	4613      	mov	r3, r2
 80171e8:	005b      	lsls	r3, r3, #1
 80171ea:	4413      	add	r3, r2
 80171ec:	00db      	lsls	r3, r3, #3
 80171ee:	4403      	add	r3, r0
 80171f0:	3304      	adds	r3, #4
 80171f2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80171f4:	4299      	cmp	r1, r3
 80171f6:	d10a      	bne.n	801720e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80171f8:	4a19      	ldr	r2, [pc, #100]	; (8017260 <etharp_output+0x1fc>)
 80171fa:	7dfb      	ldrb	r3, [r7, #23]
 80171fc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80171fe:	7dfb      	ldrb	r3, [r7, #23]
 8017200:	461a      	mov	r2, r3
 8017202:	68b9      	ldr	r1, [r7, #8]
 8017204:	68f8      	ldr	r0, [r7, #12]
 8017206:	f7ff fe93 	bl	8016f30 <etharp_output_to_arp_index>
 801720a:	4603      	mov	r3, r0
 801720c:	e018      	b.n	8017240 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801720e:	7dfb      	ldrb	r3, [r7, #23]
 8017210:	3301      	adds	r3, #1
 8017212:	75fb      	strb	r3, [r7, #23]
 8017214:	7dfb      	ldrb	r3, [r7, #23]
 8017216:	2b09      	cmp	r3, #9
 8017218:	d9ca      	bls.n	80171b0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801721a:	68ba      	ldr	r2, [r7, #8]
 801721c:	69b9      	ldr	r1, [r7, #24]
 801721e:	68f8      	ldr	r0, [r7, #12]
 8017220:	f000 f822 	bl	8017268 <etharp_query>
 8017224:	4603      	mov	r3, r0
 8017226:	e00b      	b.n	8017240 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801722e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017232:	9300      	str	r3, [sp, #0]
 8017234:	69fb      	ldr	r3, [r7, #28]
 8017236:	68b9      	ldr	r1, [r7, #8]
 8017238:	68f8      	ldr	r0, [r7, #12]
 801723a:	f001 fdf3 	bl	8018e24 <ethernet_output>
 801723e:	4603      	mov	r3, r0
}
 8017240:	4618      	mov	r0, r3
 8017242:	3720      	adds	r7, #32
 8017244:	46bd      	mov	sp, r7
 8017246:	bd80      	pop	{r7, pc}
 8017248:	0801da90 	.word	0x0801da90
 801724c:	0801dbe0 	.word	0x0801dbe0
 8017250:	0801db08 	.word	0x0801db08
 8017254:	0801dc30 	.word	0x0801dc30
 8017258:	0801dbd0 	.word	0x0801dbd0
 801725c:	0801e30c 	.word	0x0801e30c
 8017260:	2000d0ec 	.word	0x2000d0ec
 8017264:	2000cffc 	.word	0x2000cffc

08017268 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017268:	b580      	push	{r7, lr}
 801726a:	b08c      	sub	sp, #48	; 0x30
 801726c:	af02      	add	r7, sp, #8
 801726e:	60f8      	str	r0, [r7, #12]
 8017270:	60b9      	str	r1, [r7, #8]
 8017272:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	332a      	adds	r3, #42	; 0x2a
 8017278:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801727a:	23ff      	movs	r3, #255	; 0xff
 801727c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017280:	2300      	movs	r3, #0
 8017282:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017284:	68bb      	ldr	r3, [r7, #8]
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	68f9      	ldr	r1, [r7, #12]
 801728a:	4618      	mov	r0, r3
 801728c:	f000 fe2c 	bl	8017ee8 <ip4_addr_isbroadcast_u32>
 8017290:	4603      	mov	r3, r0
 8017292:	2b00      	cmp	r3, #0
 8017294:	d10c      	bne.n	80172b0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017296:	68bb      	ldr	r3, [r7, #8]
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801729e:	2be0      	cmp	r3, #224	; 0xe0
 80172a0:	d006      	beq.n	80172b0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80172a2:	68bb      	ldr	r3, [r7, #8]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d003      	beq.n	80172b0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80172a8:	68bb      	ldr	r3, [r7, #8]
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d102      	bne.n	80172b6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80172b0:	f06f 030f 	mvn.w	r3, #15
 80172b4:	e101      	b.n	80174ba <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80172b6:	68fa      	ldr	r2, [r7, #12]
 80172b8:	2101      	movs	r1, #1
 80172ba:	68b8      	ldr	r0, [r7, #8]
 80172bc:	f7ff fb5c 	bl	8016978 <etharp_find_entry>
 80172c0:	4603      	mov	r3, r0
 80172c2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80172c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	da02      	bge.n	80172d2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80172cc:	8a7b      	ldrh	r3, [r7, #18]
 80172ce:	b25b      	sxtb	r3, r3
 80172d0:	e0f3      	b.n	80174ba <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80172d2:	8a7b      	ldrh	r3, [r7, #18]
 80172d4:	2b7e      	cmp	r3, #126	; 0x7e
 80172d6:	d906      	bls.n	80172e6 <etharp_query+0x7e>
 80172d8:	4b7a      	ldr	r3, [pc, #488]	; (80174c4 <etharp_query+0x25c>)
 80172da:	f240 32c1 	movw	r2, #961	; 0x3c1
 80172de:	497a      	ldr	r1, [pc, #488]	; (80174c8 <etharp_query+0x260>)
 80172e0:	487a      	ldr	r0, [pc, #488]	; (80174cc <etharp_query+0x264>)
 80172e2:	f002 f9c9 	bl	8019678 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80172e6:	8a7b      	ldrh	r3, [r7, #18]
 80172e8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80172ea:	7c7a      	ldrb	r2, [r7, #17]
 80172ec:	4978      	ldr	r1, [pc, #480]	; (80174d0 <etharp_query+0x268>)
 80172ee:	4613      	mov	r3, r2
 80172f0:	005b      	lsls	r3, r3, #1
 80172f2:	4413      	add	r3, r2
 80172f4:	00db      	lsls	r3, r3, #3
 80172f6:	440b      	add	r3, r1
 80172f8:	3314      	adds	r3, #20
 80172fa:	781b      	ldrb	r3, [r3, #0]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d115      	bne.n	801732c <etharp_query+0xc4>
    is_new_entry = 1;
 8017300:	2301      	movs	r3, #1
 8017302:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017304:	7c7a      	ldrb	r2, [r7, #17]
 8017306:	4972      	ldr	r1, [pc, #456]	; (80174d0 <etharp_query+0x268>)
 8017308:	4613      	mov	r3, r2
 801730a:	005b      	lsls	r3, r3, #1
 801730c:	4413      	add	r3, r2
 801730e:	00db      	lsls	r3, r3, #3
 8017310:	440b      	add	r3, r1
 8017312:	3314      	adds	r3, #20
 8017314:	2201      	movs	r2, #1
 8017316:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017318:	7c7a      	ldrb	r2, [r7, #17]
 801731a:	496d      	ldr	r1, [pc, #436]	; (80174d0 <etharp_query+0x268>)
 801731c:	4613      	mov	r3, r2
 801731e:	005b      	lsls	r3, r3, #1
 8017320:	4413      	add	r3, r2
 8017322:	00db      	lsls	r3, r3, #3
 8017324:	440b      	add	r3, r1
 8017326:	3308      	adds	r3, #8
 8017328:	68fa      	ldr	r2, [r7, #12]
 801732a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801732c:	7c7a      	ldrb	r2, [r7, #17]
 801732e:	4968      	ldr	r1, [pc, #416]	; (80174d0 <etharp_query+0x268>)
 8017330:	4613      	mov	r3, r2
 8017332:	005b      	lsls	r3, r3, #1
 8017334:	4413      	add	r3, r2
 8017336:	00db      	lsls	r3, r3, #3
 8017338:	440b      	add	r3, r1
 801733a:	3314      	adds	r3, #20
 801733c:	781b      	ldrb	r3, [r3, #0]
 801733e:	2b01      	cmp	r3, #1
 8017340:	d011      	beq.n	8017366 <etharp_query+0xfe>
 8017342:	7c7a      	ldrb	r2, [r7, #17]
 8017344:	4962      	ldr	r1, [pc, #392]	; (80174d0 <etharp_query+0x268>)
 8017346:	4613      	mov	r3, r2
 8017348:	005b      	lsls	r3, r3, #1
 801734a:	4413      	add	r3, r2
 801734c:	00db      	lsls	r3, r3, #3
 801734e:	440b      	add	r3, r1
 8017350:	3314      	adds	r3, #20
 8017352:	781b      	ldrb	r3, [r3, #0]
 8017354:	2b01      	cmp	r3, #1
 8017356:	d806      	bhi.n	8017366 <etharp_query+0xfe>
 8017358:	4b5a      	ldr	r3, [pc, #360]	; (80174c4 <etharp_query+0x25c>)
 801735a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801735e:	495d      	ldr	r1, [pc, #372]	; (80174d4 <etharp_query+0x26c>)
 8017360:	485a      	ldr	r0, [pc, #360]	; (80174cc <etharp_query+0x264>)
 8017362:	f002 f989 	bl	8019678 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017366:	6a3b      	ldr	r3, [r7, #32]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d102      	bne.n	8017372 <etharp_query+0x10a>
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d10c      	bne.n	801738c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017372:	68b9      	ldr	r1, [r7, #8]
 8017374:	68f8      	ldr	r0, [r7, #12]
 8017376:	f000 f963 	bl	8017640 <etharp_request>
 801737a:	4603      	mov	r3, r0
 801737c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	2b00      	cmp	r3, #0
 8017384:	d102      	bne.n	801738c <etharp_query+0x124>
      return result;
 8017386:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801738a:	e096      	b.n	80174ba <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d106      	bne.n	80173a0 <etharp_query+0x138>
 8017392:	4b4c      	ldr	r3, [pc, #304]	; (80174c4 <etharp_query+0x25c>)
 8017394:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017398:	494f      	ldr	r1, [pc, #316]	; (80174d8 <etharp_query+0x270>)
 801739a:	484c      	ldr	r0, [pc, #304]	; (80174cc <etharp_query+0x264>)
 801739c:	f002 f96c 	bl	8019678 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80173a0:	7c7a      	ldrb	r2, [r7, #17]
 80173a2:	494b      	ldr	r1, [pc, #300]	; (80174d0 <etharp_query+0x268>)
 80173a4:	4613      	mov	r3, r2
 80173a6:	005b      	lsls	r3, r3, #1
 80173a8:	4413      	add	r3, r2
 80173aa:	00db      	lsls	r3, r3, #3
 80173ac:	440b      	add	r3, r1
 80173ae:	3314      	adds	r3, #20
 80173b0:	781b      	ldrb	r3, [r3, #0]
 80173b2:	2b01      	cmp	r3, #1
 80173b4:	d917      	bls.n	80173e6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80173b6:	4a49      	ldr	r2, [pc, #292]	; (80174dc <etharp_query+0x274>)
 80173b8:	7c7b      	ldrb	r3, [r7, #17]
 80173ba:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80173bc:	7c7a      	ldrb	r2, [r7, #17]
 80173be:	4613      	mov	r3, r2
 80173c0:	005b      	lsls	r3, r3, #1
 80173c2:	4413      	add	r3, r2
 80173c4:	00db      	lsls	r3, r3, #3
 80173c6:	3308      	adds	r3, #8
 80173c8:	4a41      	ldr	r2, [pc, #260]	; (80174d0 <etharp_query+0x268>)
 80173ca:	4413      	add	r3, r2
 80173cc:	3304      	adds	r3, #4
 80173ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80173d2:	9200      	str	r2, [sp, #0]
 80173d4:	697a      	ldr	r2, [r7, #20]
 80173d6:	6879      	ldr	r1, [r7, #4]
 80173d8:	68f8      	ldr	r0, [r7, #12]
 80173da:	f001 fd23 	bl	8018e24 <ethernet_output>
 80173de:	4603      	mov	r3, r0
 80173e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80173e4:	e067      	b.n	80174b6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80173e6:	7c7a      	ldrb	r2, [r7, #17]
 80173e8:	4939      	ldr	r1, [pc, #228]	; (80174d0 <etharp_query+0x268>)
 80173ea:	4613      	mov	r3, r2
 80173ec:	005b      	lsls	r3, r3, #1
 80173ee:	4413      	add	r3, r2
 80173f0:	00db      	lsls	r3, r3, #3
 80173f2:	440b      	add	r3, r1
 80173f4:	3314      	adds	r3, #20
 80173f6:	781b      	ldrb	r3, [r3, #0]
 80173f8:	2b01      	cmp	r3, #1
 80173fa:	d15c      	bne.n	80174b6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80173fc:	2300      	movs	r3, #0
 80173fe:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017404:	e01c      	b.n	8017440 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017406:	69fb      	ldr	r3, [r7, #28]
 8017408:	895a      	ldrh	r2, [r3, #10]
 801740a:	69fb      	ldr	r3, [r7, #28]
 801740c:	891b      	ldrh	r3, [r3, #8]
 801740e:	429a      	cmp	r2, r3
 8017410:	d10a      	bne.n	8017428 <etharp_query+0x1c0>
 8017412:	69fb      	ldr	r3, [r7, #28]
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d006      	beq.n	8017428 <etharp_query+0x1c0>
 801741a:	4b2a      	ldr	r3, [pc, #168]	; (80174c4 <etharp_query+0x25c>)
 801741c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017420:	492f      	ldr	r1, [pc, #188]	; (80174e0 <etharp_query+0x278>)
 8017422:	482a      	ldr	r0, [pc, #168]	; (80174cc <etharp_query+0x264>)
 8017424:	f002 f928 	bl	8019678 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017428:	69fb      	ldr	r3, [r7, #28]
 801742a:	7b1b      	ldrb	r3, [r3, #12]
 801742c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017430:	2b00      	cmp	r3, #0
 8017432:	d002      	beq.n	801743a <etharp_query+0x1d2>
        copy_needed = 1;
 8017434:	2301      	movs	r3, #1
 8017436:	61bb      	str	r3, [r7, #24]
        break;
 8017438:	e005      	b.n	8017446 <etharp_query+0x1de>
      }
      p = p->next;
 801743a:	69fb      	ldr	r3, [r7, #28]
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017440:	69fb      	ldr	r3, [r7, #28]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d1df      	bne.n	8017406 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017446:	69bb      	ldr	r3, [r7, #24]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d007      	beq.n	801745c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801744c:	687a      	ldr	r2, [r7, #4]
 801744e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017452:	200e      	movs	r0, #14
 8017454:	f7f6 fc2a 	bl	800dcac <pbuf_clone>
 8017458:	61f8      	str	r0, [r7, #28]
 801745a:	e004      	b.n	8017466 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017460:	69f8      	ldr	r0, [r7, #28]
 8017462:	f7f6 fa51 	bl	800d908 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017466:	69fb      	ldr	r3, [r7, #28]
 8017468:	2b00      	cmp	r3, #0
 801746a:	d021      	beq.n	80174b0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801746c:	7c7a      	ldrb	r2, [r7, #17]
 801746e:	4918      	ldr	r1, [pc, #96]	; (80174d0 <etharp_query+0x268>)
 8017470:	4613      	mov	r3, r2
 8017472:	005b      	lsls	r3, r3, #1
 8017474:	4413      	add	r3, r2
 8017476:	00db      	lsls	r3, r3, #3
 8017478:	440b      	add	r3, r1
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d00a      	beq.n	8017496 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017480:	7c7a      	ldrb	r2, [r7, #17]
 8017482:	4913      	ldr	r1, [pc, #76]	; (80174d0 <etharp_query+0x268>)
 8017484:	4613      	mov	r3, r2
 8017486:	005b      	lsls	r3, r3, #1
 8017488:	4413      	add	r3, r2
 801748a:	00db      	lsls	r3, r3, #3
 801748c:	440b      	add	r3, r1
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	4618      	mov	r0, r3
 8017492:	f7f6 f993 	bl	800d7bc <pbuf_free>
      }
      arp_table[i].q = p;
 8017496:	7c7a      	ldrb	r2, [r7, #17]
 8017498:	490d      	ldr	r1, [pc, #52]	; (80174d0 <etharp_query+0x268>)
 801749a:	4613      	mov	r3, r2
 801749c:	005b      	lsls	r3, r3, #1
 801749e:	4413      	add	r3, r2
 80174a0:	00db      	lsls	r3, r3, #3
 80174a2:	440b      	add	r3, r1
 80174a4:	69fa      	ldr	r2, [r7, #28]
 80174a6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80174a8:	2300      	movs	r3, #0
 80174aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80174ae:	e002      	b.n	80174b6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80174b0:	23ff      	movs	r3, #255	; 0xff
 80174b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80174b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80174ba:	4618      	mov	r0, r3
 80174bc:	3728      	adds	r7, #40	; 0x28
 80174be:	46bd      	mov	sp, r7
 80174c0:	bd80      	pop	{r7, pc}
 80174c2:	bf00      	nop
 80174c4:	0801da90 	.word	0x0801da90
 80174c8:	0801dc3c 	.word	0x0801dc3c
 80174cc:	0801db08 	.word	0x0801db08
 80174d0:	2000cffc 	.word	0x2000cffc
 80174d4:	0801dc4c 	.word	0x0801dc4c
 80174d8:	0801dc30 	.word	0x0801dc30
 80174dc:	2000d0ec 	.word	0x2000d0ec
 80174e0:	0801dc74 	.word	0x0801dc74

080174e4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b08a      	sub	sp, #40	; 0x28
 80174e8:	af02      	add	r7, sp, #8
 80174ea:	60f8      	str	r0, [r7, #12]
 80174ec:	60b9      	str	r1, [r7, #8]
 80174ee:	607a      	str	r2, [r7, #4]
 80174f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80174f2:	2300      	movs	r3, #0
 80174f4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d106      	bne.n	801750a <etharp_raw+0x26>
 80174fc:	4b3a      	ldr	r3, [pc, #232]	; (80175e8 <etharp_raw+0x104>)
 80174fe:	f240 4257 	movw	r2, #1111	; 0x457
 8017502:	493a      	ldr	r1, [pc, #232]	; (80175ec <etharp_raw+0x108>)
 8017504:	483a      	ldr	r0, [pc, #232]	; (80175f0 <etharp_raw+0x10c>)
 8017506:	f002 f8b7 	bl	8019678 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801750a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801750e:	211c      	movs	r1, #28
 8017510:	200e      	movs	r0, #14
 8017512:	f7f5 fe3d 	bl	800d190 <pbuf_alloc>
 8017516:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017518:	69bb      	ldr	r3, [r7, #24]
 801751a:	2b00      	cmp	r3, #0
 801751c:	d102      	bne.n	8017524 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801751e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017522:	e05d      	b.n	80175e0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017524:	69bb      	ldr	r3, [r7, #24]
 8017526:	895b      	ldrh	r3, [r3, #10]
 8017528:	2b1b      	cmp	r3, #27
 801752a:	d806      	bhi.n	801753a <etharp_raw+0x56>
 801752c:	4b2e      	ldr	r3, [pc, #184]	; (80175e8 <etharp_raw+0x104>)
 801752e:	f240 4262 	movw	r2, #1122	; 0x462
 8017532:	4930      	ldr	r1, [pc, #192]	; (80175f4 <etharp_raw+0x110>)
 8017534:	482e      	ldr	r0, [pc, #184]	; (80175f0 <etharp_raw+0x10c>)
 8017536:	f002 f89f 	bl	8019678 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801753a:	69bb      	ldr	r3, [r7, #24]
 801753c:	685b      	ldr	r3, [r3, #4]
 801753e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017540:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017542:	4618      	mov	r0, r3
 8017544:	f7f4 fd0a 	bl	800bf5c <lwip_htons>
 8017548:	4603      	mov	r3, r0
 801754a:	461a      	mov	r2, r3
 801754c:	697b      	ldr	r3, [r7, #20]
 801754e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017556:	2b06      	cmp	r3, #6
 8017558:	d006      	beq.n	8017568 <etharp_raw+0x84>
 801755a:	4b23      	ldr	r3, [pc, #140]	; (80175e8 <etharp_raw+0x104>)
 801755c:	f240 4269 	movw	r2, #1129	; 0x469
 8017560:	4925      	ldr	r1, [pc, #148]	; (80175f8 <etharp_raw+0x114>)
 8017562:	4823      	ldr	r0, [pc, #140]	; (80175f0 <etharp_raw+0x10c>)
 8017564:	f002 f888 	bl	8019678 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017568:	697b      	ldr	r3, [r7, #20]
 801756a:	3308      	adds	r3, #8
 801756c:	2206      	movs	r2, #6
 801756e:	6839      	ldr	r1, [r7, #0]
 8017570:	4618      	mov	r0, r3
 8017572:	f001 ff8b 	bl	801948c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017576:	697b      	ldr	r3, [r7, #20]
 8017578:	3312      	adds	r3, #18
 801757a:	2206      	movs	r2, #6
 801757c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801757e:	4618      	mov	r0, r3
 8017580:	f001 ff84 	bl	801948c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017584:	697b      	ldr	r3, [r7, #20]
 8017586:	330e      	adds	r3, #14
 8017588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801758a:	6812      	ldr	r2, [r2, #0]
 801758c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801758e:	697b      	ldr	r3, [r7, #20]
 8017590:	3318      	adds	r3, #24
 8017592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017594:	6812      	ldr	r2, [r2, #0]
 8017596:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017598:	697b      	ldr	r3, [r7, #20]
 801759a:	2200      	movs	r2, #0
 801759c:	701a      	strb	r2, [r3, #0]
 801759e:	2200      	movs	r2, #0
 80175a0:	f042 0201 	orr.w	r2, r2, #1
 80175a4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80175a6:	697b      	ldr	r3, [r7, #20]
 80175a8:	2200      	movs	r2, #0
 80175aa:	f042 0208 	orr.w	r2, r2, #8
 80175ae:	709a      	strb	r2, [r3, #2]
 80175b0:	2200      	movs	r2, #0
 80175b2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80175b4:	697b      	ldr	r3, [r7, #20]
 80175b6:	2206      	movs	r2, #6
 80175b8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80175ba:	697b      	ldr	r3, [r7, #20]
 80175bc:	2204      	movs	r2, #4
 80175be:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80175c0:	f640 0306 	movw	r3, #2054	; 0x806
 80175c4:	9300      	str	r3, [sp, #0]
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	68ba      	ldr	r2, [r7, #8]
 80175ca:	69b9      	ldr	r1, [r7, #24]
 80175cc:	68f8      	ldr	r0, [r7, #12]
 80175ce:	f001 fc29 	bl	8018e24 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80175d2:	69b8      	ldr	r0, [r7, #24]
 80175d4:	f7f6 f8f2 	bl	800d7bc <pbuf_free>
  p = NULL;
 80175d8:	2300      	movs	r3, #0
 80175da:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80175dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80175e0:	4618      	mov	r0, r3
 80175e2:	3720      	adds	r7, #32
 80175e4:	46bd      	mov	sp, r7
 80175e6:	bd80      	pop	{r7, pc}
 80175e8:	0801da90 	.word	0x0801da90
 80175ec:	0801dbe0 	.word	0x0801dbe0
 80175f0:	0801db08 	.word	0x0801db08
 80175f4:	0801dc90 	.word	0x0801dc90
 80175f8:	0801dcc4 	.word	0x0801dcc4

080175fc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b088      	sub	sp, #32
 8017600:	af04      	add	r7, sp, #16
 8017602:	60f8      	str	r0, [r7, #12]
 8017604:	60b9      	str	r1, [r7, #8]
 8017606:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017618:	2201      	movs	r2, #1
 801761a:	9203      	str	r2, [sp, #12]
 801761c:	68ba      	ldr	r2, [r7, #8]
 801761e:	9202      	str	r2, [sp, #8]
 8017620:	4a06      	ldr	r2, [pc, #24]	; (801763c <etharp_request_dst+0x40>)
 8017622:	9201      	str	r2, [sp, #4]
 8017624:	9300      	str	r3, [sp, #0]
 8017626:	4603      	mov	r3, r0
 8017628:	687a      	ldr	r2, [r7, #4]
 801762a:	68f8      	ldr	r0, [r7, #12]
 801762c:	f7ff ff5a 	bl	80174e4 <etharp_raw>
 8017630:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017632:	4618      	mov	r0, r3
 8017634:	3710      	adds	r7, #16
 8017636:	46bd      	mov	sp, r7
 8017638:	bd80      	pop	{r7, pc}
 801763a:	bf00      	nop
 801763c:	0801e314 	.word	0x0801e314

08017640 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017640:	b580      	push	{r7, lr}
 8017642:	b082      	sub	sp, #8
 8017644:	af00      	add	r7, sp, #0
 8017646:	6078      	str	r0, [r7, #4]
 8017648:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801764a:	4a05      	ldr	r2, [pc, #20]	; (8017660 <etharp_request+0x20>)
 801764c:	6839      	ldr	r1, [r7, #0]
 801764e:	6878      	ldr	r0, [r7, #4]
 8017650:	f7ff ffd4 	bl	80175fc <etharp_request_dst>
 8017654:	4603      	mov	r3, r0
}
 8017656:	4618      	mov	r0, r3
 8017658:	3708      	adds	r7, #8
 801765a:	46bd      	mov	sp, r7
 801765c:	bd80      	pop	{r7, pc}
 801765e:	bf00      	nop
 8017660:	0801e30c 	.word	0x0801e30c

08017664 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b08e      	sub	sp, #56	; 0x38
 8017668:	af04      	add	r7, sp, #16
 801766a:	6078      	str	r0, [r7, #4]
 801766c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801766e:	4b79      	ldr	r3, [pc, #484]	; (8017854 <icmp_input+0x1f0>)
 8017670:	689b      	ldr	r3, [r3, #8]
 8017672:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017676:	781b      	ldrb	r3, [r3, #0]
 8017678:	f003 030f 	and.w	r3, r3, #15
 801767c:	b2db      	uxtb	r3, r3
 801767e:	009b      	lsls	r3, r3, #2
 8017680:	b2db      	uxtb	r3, r3
 8017682:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017684:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017686:	2b13      	cmp	r3, #19
 8017688:	f240 80cd 	bls.w	8017826 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	895b      	ldrh	r3, [r3, #10]
 8017690:	2b03      	cmp	r3, #3
 8017692:	f240 80ca 	bls.w	801782a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	685b      	ldr	r3, [r3, #4]
 801769a:	781b      	ldrb	r3, [r3, #0]
 801769c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80176a0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	f000 80b7 	beq.w	8017818 <icmp_input+0x1b4>
 80176aa:	2b08      	cmp	r3, #8
 80176ac:	f040 80b7 	bne.w	801781e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80176b0:	4b69      	ldr	r3, [pc, #420]	; (8017858 <icmp_input+0x1f4>)
 80176b2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80176b4:	4b67      	ldr	r3, [pc, #412]	; (8017854 <icmp_input+0x1f0>)
 80176b6:	695b      	ldr	r3, [r3, #20]
 80176b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80176bc:	2be0      	cmp	r3, #224	; 0xe0
 80176be:	f000 80bb 	beq.w	8017838 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80176c2:	4b64      	ldr	r3, [pc, #400]	; (8017854 <icmp_input+0x1f0>)
 80176c4:	695b      	ldr	r3, [r3, #20]
 80176c6:	4a63      	ldr	r2, [pc, #396]	; (8017854 <icmp_input+0x1f0>)
 80176c8:	6812      	ldr	r2, [r2, #0]
 80176ca:	4611      	mov	r1, r2
 80176cc:	4618      	mov	r0, r3
 80176ce:	f000 fc0b 	bl	8017ee8 <ip4_addr_isbroadcast_u32>
 80176d2:	4603      	mov	r3, r0
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	f040 80b1 	bne.w	801783c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	891b      	ldrh	r3, [r3, #8]
 80176de:	2b07      	cmp	r3, #7
 80176e0:	f240 80a5 	bls.w	801782e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80176e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80176e6:	330e      	adds	r3, #14
 80176e8:	4619      	mov	r1, r3
 80176ea:	6878      	ldr	r0, [r7, #4]
 80176ec:	f7f5 ff9e 	bl	800d62c <pbuf_add_header>
 80176f0:	4603      	mov	r3, r0
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d04b      	beq.n	801778e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	891a      	ldrh	r2, [r3, #8]
 80176fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80176fc:	4413      	add	r3, r2
 80176fe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	891b      	ldrh	r3, [r3, #8]
 8017704:	8b7a      	ldrh	r2, [r7, #26]
 8017706:	429a      	cmp	r2, r3
 8017708:	f0c0 809a 	bcc.w	8017840 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801770c:	8b7b      	ldrh	r3, [r7, #26]
 801770e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017712:	4619      	mov	r1, r3
 8017714:	200e      	movs	r0, #14
 8017716:	f7f5 fd3b 	bl	800d190 <pbuf_alloc>
 801771a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801771c:	697b      	ldr	r3, [r7, #20]
 801771e:	2b00      	cmp	r3, #0
 8017720:	f000 8090 	beq.w	8017844 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017724:	697b      	ldr	r3, [r7, #20]
 8017726:	895b      	ldrh	r3, [r3, #10]
 8017728:	461a      	mov	r2, r3
 801772a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801772c:	3308      	adds	r3, #8
 801772e:	429a      	cmp	r2, r3
 8017730:	d203      	bcs.n	801773a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017732:	6978      	ldr	r0, [r7, #20]
 8017734:	f7f6 f842 	bl	800d7bc <pbuf_free>
          goto icmperr;
 8017738:	e085      	b.n	8017846 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801773a:	697b      	ldr	r3, [r7, #20]
 801773c:	685b      	ldr	r3, [r3, #4]
 801773e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017742:	4618      	mov	r0, r3
 8017744:	f001 fea2 	bl	801948c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017748:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801774a:	4619      	mov	r1, r3
 801774c:	6978      	ldr	r0, [r7, #20]
 801774e:	f7f5 ff7d 	bl	800d64c <pbuf_remove_header>
 8017752:	4603      	mov	r3, r0
 8017754:	2b00      	cmp	r3, #0
 8017756:	d009      	beq.n	801776c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017758:	4b40      	ldr	r3, [pc, #256]	; (801785c <icmp_input+0x1f8>)
 801775a:	22b6      	movs	r2, #182	; 0xb6
 801775c:	4940      	ldr	r1, [pc, #256]	; (8017860 <icmp_input+0x1fc>)
 801775e:	4841      	ldr	r0, [pc, #260]	; (8017864 <icmp_input+0x200>)
 8017760:	f001 ff8a 	bl	8019678 <iprintf>
          pbuf_free(r);
 8017764:	6978      	ldr	r0, [r7, #20]
 8017766:	f7f6 f829 	bl	800d7bc <pbuf_free>
          goto icmperr;
 801776a:	e06c      	b.n	8017846 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801776c:	6879      	ldr	r1, [r7, #4]
 801776e:	6978      	ldr	r0, [r7, #20]
 8017770:	f7f6 f958 	bl	800da24 <pbuf_copy>
 8017774:	4603      	mov	r3, r0
 8017776:	2b00      	cmp	r3, #0
 8017778:	d003      	beq.n	8017782 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801777a:	6978      	ldr	r0, [r7, #20]
 801777c:	f7f6 f81e 	bl	800d7bc <pbuf_free>
          goto icmperr;
 8017780:	e061      	b.n	8017846 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017782:	6878      	ldr	r0, [r7, #4]
 8017784:	f7f6 f81a 	bl	800d7bc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017788:	697b      	ldr	r3, [r7, #20]
 801778a:	607b      	str	r3, [r7, #4]
 801778c:	e00f      	b.n	80177ae <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801778e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017790:	330e      	adds	r3, #14
 8017792:	4619      	mov	r1, r3
 8017794:	6878      	ldr	r0, [r7, #4]
 8017796:	f7f5 ff59 	bl	800d64c <pbuf_remove_header>
 801779a:	4603      	mov	r3, r0
 801779c:	2b00      	cmp	r3, #0
 801779e:	d006      	beq.n	80177ae <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80177a0:	4b2e      	ldr	r3, [pc, #184]	; (801785c <icmp_input+0x1f8>)
 80177a2:	22c7      	movs	r2, #199	; 0xc7
 80177a4:	4930      	ldr	r1, [pc, #192]	; (8017868 <icmp_input+0x204>)
 80177a6:	482f      	ldr	r0, [pc, #188]	; (8017864 <icmp_input+0x200>)
 80177a8:	f001 ff66 	bl	8019678 <iprintf>
          goto icmperr;
 80177ac:	e04b      	b.n	8017846 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	685b      	ldr	r3, [r3, #4]
 80177b2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80177b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80177b6:	4619      	mov	r1, r3
 80177b8:	6878      	ldr	r0, [r7, #4]
 80177ba:	f7f5 ff37 	bl	800d62c <pbuf_add_header>
 80177be:	4603      	mov	r3, r0
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d12b      	bne.n	801781c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	685b      	ldr	r3, [r3, #4]
 80177c8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80177ca:	69fb      	ldr	r3, [r7, #28]
 80177cc:	681a      	ldr	r2, [r3, #0]
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80177d2:	4b20      	ldr	r3, [pc, #128]	; (8017854 <icmp_input+0x1f0>)
 80177d4:	691a      	ldr	r2, [r3, #16]
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80177da:	693b      	ldr	r3, [r7, #16]
 80177dc:	2200      	movs	r2, #0
 80177de:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80177e0:	693b      	ldr	r3, [r7, #16]
 80177e2:	2200      	movs	r2, #0
 80177e4:	709a      	strb	r2, [r3, #2]
 80177e6:	2200      	movs	r2, #0
 80177e8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	22ff      	movs	r2, #255	; 0xff
 80177ee:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	2200      	movs	r2, #0
 80177f4:	729a      	strb	r2, [r3, #10]
 80177f6:	2200      	movs	r2, #0
 80177f8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80177fa:	683b      	ldr	r3, [r7, #0]
 80177fc:	9302      	str	r3, [sp, #8]
 80177fe:	2301      	movs	r3, #1
 8017800:	9301      	str	r3, [sp, #4]
 8017802:	2300      	movs	r3, #0
 8017804:	9300      	str	r3, [sp, #0]
 8017806:	23ff      	movs	r3, #255	; 0xff
 8017808:	2200      	movs	r2, #0
 801780a:	69f9      	ldr	r1, [r7, #28]
 801780c:	6878      	ldr	r0, [r7, #4]
 801780e:	f000 fa93 	bl	8017d38 <ip4_output_if>
 8017812:	4603      	mov	r3, r0
 8017814:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017816:	e001      	b.n	801781c <icmp_input+0x1b8>
      break;
 8017818:	bf00      	nop
 801781a:	e000      	b.n	801781e <icmp_input+0x1ba>
      break;
 801781c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801781e:	6878      	ldr	r0, [r7, #4]
 8017820:	f7f5 ffcc 	bl	800d7bc <pbuf_free>
  return;
 8017824:	e013      	b.n	801784e <icmp_input+0x1ea>
    goto lenerr;
 8017826:	bf00      	nop
 8017828:	e002      	b.n	8017830 <icmp_input+0x1cc>
    goto lenerr;
 801782a:	bf00      	nop
 801782c:	e000      	b.n	8017830 <icmp_input+0x1cc>
        goto lenerr;
 801782e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017830:	6878      	ldr	r0, [r7, #4]
 8017832:	f7f5 ffc3 	bl	800d7bc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017836:	e00a      	b.n	801784e <icmp_input+0x1ea>
        goto icmperr;
 8017838:	bf00      	nop
 801783a:	e004      	b.n	8017846 <icmp_input+0x1e2>
        goto icmperr;
 801783c:	bf00      	nop
 801783e:	e002      	b.n	8017846 <icmp_input+0x1e2>
          goto icmperr;
 8017840:	bf00      	nop
 8017842:	e000      	b.n	8017846 <icmp_input+0x1e2>
          goto icmperr;
 8017844:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017846:	6878      	ldr	r0, [r7, #4]
 8017848:	f7f5 ffb8 	bl	800d7bc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801784c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801784e:	3728      	adds	r7, #40	; 0x28
 8017850:	46bd      	mov	sp, r7
 8017852:	bd80      	pop	{r7, pc}
 8017854:	200097f4 	.word	0x200097f4
 8017858:	20009808 	.word	0x20009808
 801785c:	0801dd08 	.word	0x0801dd08
 8017860:	0801dd40 	.word	0x0801dd40
 8017864:	0801dd78 	.word	0x0801dd78
 8017868:	0801dda0 	.word	0x0801dda0

0801786c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b082      	sub	sp, #8
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
 8017874:	460b      	mov	r3, r1
 8017876:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017878:	78fb      	ldrb	r3, [r7, #3]
 801787a:	461a      	mov	r2, r3
 801787c:	2103      	movs	r1, #3
 801787e:	6878      	ldr	r0, [r7, #4]
 8017880:	f000 f814 	bl	80178ac <icmp_send_response>
}
 8017884:	bf00      	nop
 8017886:	3708      	adds	r7, #8
 8017888:	46bd      	mov	sp, r7
 801788a:	bd80      	pop	{r7, pc}

0801788c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801788c:	b580      	push	{r7, lr}
 801788e:	b082      	sub	sp, #8
 8017890:	af00      	add	r7, sp, #0
 8017892:	6078      	str	r0, [r7, #4]
 8017894:	460b      	mov	r3, r1
 8017896:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017898:	78fb      	ldrb	r3, [r7, #3]
 801789a:	461a      	mov	r2, r3
 801789c:	210b      	movs	r1, #11
 801789e:	6878      	ldr	r0, [r7, #4]
 80178a0:	f000 f804 	bl	80178ac <icmp_send_response>
}
 80178a4:	bf00      	nop
 80178a6:	3708      	adds	r7, #8
 80178a8:	46bd      	mov	sp, r7
 80178aa:	bd80      	pop	{r7, pc}

080178ac <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b08c      	sub	sp, #48	; 0x30
 80178b0:	af04      	add	r7, sp, #16
 80178b2:	6078      	str	r0, [r7, #4]
 80178b4:	460b      	mov	r3, r1
 80178b6:	70fb      	strb	r3, [r7, #3]
 80178b8:	4613      	mov	r3, r2
 80178ba:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80178bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80178c0:	2124      	movs	r1, #36	; 0x24
 80178c2:	2022      	movs	r0, #34	; 0x22
 80178c4:	f7f5 fc64 	bl	800d190 <pbuf_alloc>
 80178c8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80178ca:	69fb      	ldr	r3, [r7, #28]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d04c      	beq.n	801796a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80178d0:	69fb      	ldr	r3, [r7, #28]
 80178d2:	895b      	ldrh	r3, [r3, #10]
 80178d4:	2b23      	cmp	r3, #35	; 0x23
 80178d6:	d806      	bhi.n	80178e6 <icmp_send_response+0x3a>
 80178d8:	4b26      	ldr	r3, [pc, #152]	; (8017974 <icmp_send_response+0xc8>)
 80178da:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80178de:	4926      	ldr	r1, [pc, #152]	; (8017978 <icmp_send_response+0xcc>)
 80178e0:	4826      	ldr	r0, [pc, #152]	; (801797c <icmp_send_response+0xd0>)
 80178e2:	f001 fec9 	bl	8019678 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	685b      	ldr	r3, [r3, #4]
 80178ea:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80178ec:	69fb      	ldr	r3, [r7, #28]
 80178ee:	685b      	ldr	r3, [r3, #4]
 80178f0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80178f2:	697b      	ldr	r3, [r7, #20]
 80178f4:	78fa      	ldrb	r2, [r7, #3]
 80178f6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80178f8:	697b      	ldr	r3, [r7, #20]
 80178fa:	78ba      	ldrb	r2, [r7, #2]
 80178fc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80178fe:	697b      	ldr	r3, [r7, #20]
 8017900:	2200      	movs	r2, #0
 8017902:	711a      	strb	r2, [r3, #4]
 8017904:	2200      	movs	r2, #0
 8017906:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017908:	697b      	ldr	r3, [r7, #20]
 801790a:	2200      	movs	r2, #0
 801790c:	719a      	strb	r2, [r3, #6]
 801790e:	2200      	movs	r2, #0
 8017910:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017912:	69fb      	ldr	r3, [r7, #28]
 8017914:	685b      	ldr	r3, [r3, #4]
 8017916:	f103 0008 	add.w	r0, r3, #8
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	685b      	ldr	r3, [r3, #4]
 801791e:	221c      	movs	r2, #28
 8017920:	4619      	mov	r1, r3
 8017922:	f001 fdb3 	bl	801948c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017926:	69bb      	ldr	r3, [r7, #24]
 8017928:	68db      	ldr	r3, [r3, #12]
 801792a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801792c:	f107 030c 	add.w	r3, r7, #12
 8017930:	4618      	mov	r0, r3
 8017932:	f000 f825 	bl	8017980 <ip4_route>
 8017936:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017938:	693b      	ldr	r3, [r7, #16]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d011      	beq.n	8017962 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801793e:	697b      	ldr	r3, [r7, #20]
 8017940:	2200      	movs	r2, #0
 8017942:	709a      	strb	r2, [r3, #2]
 8017944:	2200      	movs	r2, #0
 8017946:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017948:	f107 020c 	add.w	r2, r7, #12
 801794c:	693b      	ldr	r3, [r7, #16]
 801794e:	9302      	str	r3, [sp, #8]
 8017950:	2301      	movs	r3, #1
 8017952:	9301      	str	r3, [sp, #4]
 8017954:	2300      	movs	r3, #0
 8017956:	9300      	str	r3, [sp, #0]
 8017958:	23ff      	movs	r3, #255	; 0xff
 801795a:	2100      	movs	r1, #0
 801795c:	69f8      	ldr	r0, [r7, #28]
 801795e:	f000 f9eb 	bl	8017d38 <ip4_output_if>
  }
  pbuf_free(q);
 8017962:	69f8      	ldr	r0, [r7, #28]
 8017964:	f7f5 ff2a 	bl	800d7bc <pbuf_free>
 8017968:	e000      	b.n	801796c <icmp_send_response+0xc0>
    return;
 801796a:	bf00      	nop
}
 801796c:	3720      	adds	r7, #32
 801796e:	46bd      	mov	sp, r7
 8017970:	bd80      	pop	{r7, pc}
 8017972:	bf00      	nop
 8017974:	0801dd08 	.word	0x0801dd08
 8017978:	0801ddd4 	.word	0x0801ddd4
 801797c:	0801dd78 	.word	0x0801dd78

08017980 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017980:	b480      	push	{r7}
 8017982:	b085      	sub	sp, #20
 8017984:	af00      	add	r7, sp, #0
 8017986:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017988:	4b33      	ldr	r3, [pc, #204]	; (8017a58 <ip4_route+0xd8>)
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	60fb      	str	r3, [r7, #12]
 801798e:	e036      	b.n	80179fe <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017996:	f003 0301 	and.w	r3, r3, #1
 801799a:	b2db      	uxtb	r3, r3
 801799c:	2b00      	cmp	r3, #0
 801799e:	d02b      	beq.n	80179f8 <ip4_route+0x78>
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80179a6:	089b      	lsrs	r3, r3, #2
 80179a8:	f003 0301 	and.w	r3, r3, #1
 80179ac:	b2db      	uxtb	r3, r3
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d022      	beq.n	80179f8 <ip4_route+0x78>
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	3304      	adds	r3, #4
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d01d      	beq.n	80179f8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	681a      	ldr	r2, [r3, #0]
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	3304      	adds	r3, #4
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	405a      	eors	r2, r3
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	3308      	adds	r3, #8
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	4013      	ands	r3, r2
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d101      	bne.n	80179d8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	e038      	b.n	8017a4a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80179de:	f003 0302 	and.w	r3, r3, #2
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d108      	bne.n	80179f8 <ip4_route+0x78>
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	681a      	ldr	r2, [r3, #0]
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	330c      	adds	r3, #12
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	429a      	cmp	r2, r3
 80179f2:	d101      	bne.n	80179f8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	e028      	b.n	8017a4a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	60fb      	str	r3, [r7, #12]
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d1c5      	bne.n	8017990 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017a04:	4b15      	ldr	r3, [pc, #84]	; (8017a5c <ip4_route+0xdc>)
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d01a      	beq.n	8017a42 <ip4_route+0xc2>
 8017a0c:	4b13      	ldr	r3, [pc, #76]	; (8017a5c <ip4_route+0xdc>)
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017a14:	f003 0301 	and.w	r3, r3, #1
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d012      	beq.n	8017a42 <ip4_route+0xc2>
 8017a1c:	4b0f      	ldr	r3, [pc, #60]	; (8017a5c <ip4_route+0xdc>)
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017a24:	f003 0304 	and.w	r3, r3, #4
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d00a      	beq.n	8017a42 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017a2c:	4b0b      	ldr	r3, [pc, #44]	; (8017a5c <ip4_route+0xdc>)
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	3304      	adds	r3, #4
 8017a32:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d004      	beq.n	8017a42 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	b2db      	uxtb	r3, r3
 8017a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8017a40:	d101      	bne.n	8017a46 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017a42:	2300      	movs	r3, #0
 8017a44:	e001      	b.n	8017a4a <ip4_route+0xca>
  }

  return netif_default;
 8017a46:	4b05      	ldr	r3, [pc, #20]	; (8017a5c <ip4_route+0xdc>)
 8017a48:	681b      	ldr	r3, [r3, #0]
}
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	3714      	adds	r7, #20
 8017a4e:	46bd      	mov	sp, r7
 8017a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a54:	4770      	bx	lr
 8017a56:	bf00      	nop
 8017a58:	2000cf5c 	.word	0x2000cf5c
 8017a5c:	2000cf60 	.word	0x2000cf60

08017a60 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b082      	sub	sp, #8
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017a6e:	f003 0301 	and.w	r3, r3, #1
 8017a72:	b2db      	uxtb	r3, r3
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d016      	beq.n	8017aa6 <ip4_input_accept+0x46>
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	3304      	adds	r3, #4
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d011      	beq.n	8017aa6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017a82:	4b0b      	ldr	r3, [pc, #44]	; (8017ab0 <ip4_input_accept+0x50>)
 8017a84:	695a      	ldr	r2, [r3, #20]
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	3304      	adds	r3, #4
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	429a      	cmp	r2, r3
 8017a8e:	d008      	beq.n	8017aa2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017a90:	4b07      	ldr	r3, [pc, #28]	; (8017ab0 <ip4_input_accept+0x50>)
 8017a92:	695b      	ldr	r3, [r3, #20]
 8017a94:	6879      	ldr	r1, [r7, #4]
 8017a96:	4618      	mov	r0, r3
 8017a98:	f000 fa26 	bl	8017ee8 <ip4_addr_isbroadcast_u32>
 8017a9c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d001      	beq.n	8017aa6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017aa2:	2301      	movs	r3, #1
 8017aa4:	e000      	b.n	8017aa8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017aa6:	2300      	movs	r3, #0
}
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	3708      	adds	r7, #8
 8017aac:	46bd      	mov	sp, r7
 8017aae:	bd80      	pop	{r7, pc}
 8017ab0:	200097f4 	.word	0x200097f4

08017ab4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017ab4:	b580      	push	{r7, lr}
 8017ab6:	b088      	sub	sp, #32
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	6078      	str	r0, [r7, #4]
 8017abc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017abe:	2301      	movs	r3, #1
 8017ac0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	685b      	ldr	r3, [r3, #4]
 8017ac6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017ac8:	69fb      	ldr	r3, [r7, #28]
 8017aca:	781b      	ldrb	r3, [r3, #0]
 8017acc:	091b      	lsrs	r3, r3, #4
 8017ace:	b2db      	uxtb	r3, r3
 8017ad0:	2b04      	cmp	r3, #4
 8017ad2:	d004      	beq.n	8017ade <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017ad4:	6878      	ldr	r0, [r7, #4]
 8017ad6:	f7f5 fe71 	bl	800d7bc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017ada:	2300      	movs	r3, #0
 8017adc:	e123      	b.n	8017d26 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017ade:	69fb      	ldr	r3, [r7, #28]
 8017ae0:	781b      	ldrb	r3, [r3, #0]
 8017ae2:	f003 030f 	and.w	r3, r3, #15
 8017ae6:	b2db      	uxtb	r3, r3
 8017ae8:	009b      	lsls	r3, r3, #2
 8017aea:	b2db      	uxtb	r3, r3
 8017aec:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017aee:	69fb      	ldr	r3, [r7, #28]
 8017af0:	885b      	ldrh	r3, [r3, #2]
 8017af2:	b29b      	uxth	r3, r3
 8017af4:	4618      	mov	r0, r3
 8017af6:	f7f4 fa31 	bl	800bf5c <lwip_htons>
 8017afa:	4603      	mov	r3, r0
 8017afc:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	891b      	ldrh	r3, [r3, #8]
 8017b02:	8a3a      	ldrh	r2, [r7, #16]
 8017b04:	429a      	cmp	r2, r3
 8017b06:	d204      	bcs.n	8017b12 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017b08:	8a3b      	ldrh	r3, [r7, #16]
 8017b0a:	4619      	mov	r1, r3
 8017b0c:	6878      	ldr	r0, [r7, #4]
 8017b0e:	f7f5 fc9d 	bl	800d44c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	895b      	ldrh	r3, [r3, #10]
 8017b16:	8a7a      	ldrh	r2, [r7, #18]
 8017b18:	429a      	cmp	r2, r3
 8017b1a:	d807      	bhi.n	8017b2c <ip4_input+0x78>
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	891b      	ldrh	r3, [r3, #8]
 8017b20:	8a3a      	ldrh	r2, [r7, #16]
 8017b22:	429a      	cmp	r2, r3
 8017b24:	d802      	bhi.n	8017b2c <ip4_input+0x78>
 8017b26:	8a7b      	ldrh	r3, [r7, #18]
 8017b28:	2b13      	cmp	r3, #19
 8017b2a:	d804      	bhi.n	8017b36 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017b2c:	6878      	ldr	r0, [r7, #4]
 8017b2e:	f7f5 fe45 	bl	800d7bc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017b32:	2300      	movs	r3, #0
 8017b34:	e0f7      	b.n	8017d26 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017b36:	69fb      	ldr	r3, [r7, #28]
 8017b38:	691b      	ldr	r3, [r3, #16]
 8017b3a:	4a7d      	ldr	r2, [pc, #500]	; (8017d30 <ip4_input+0x27c>)
 8017b3c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017b3e:	69fb      	ldr	r3, [r7, #28]
 8017b40:	68db      	ldr	r3, [r3, #12]
 8017b42:	4a7b      	ldr	r2, [pc, #492]	; (8017d30 <ip4_input+0x27c>)
 8017b44:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017b46:	4b7a      	ldr	r3, [pc, #488]	; (8017d30 <ip4_input+0x27c>)
 8017b48:	695b      	ldr	r3, [r3, #20]
 8017b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017b4e:	2be0      	cmp	r3, #224	; 0xe0
 8017b50:	d112      	bne.n	8017b78 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017b52:	683b      	ldr	r3, [r7, #0]
 8017b54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017b58:	f003 0301 	and.w	r3, r3, #1
 8017b5c:	b2db      	uxtb	r3, r3
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d007      	beq.n	8017b72 <ip4_input+0xbe>
 8017b62:	683b      	ldr	r3, [r7, #0]
 8017b64:	3304      	adds	r3, #4
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d002      	beq.n	8017b72 <ip4_input+0xbe>
      netif = inp;
 8017b6c:	683b      	ldr	r3, [r7, #0]
 8017b6e:	61bb      	str	r3, [r7, #24]
 8017b70:	e02a      	b.n	8017bc8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017b72:	2300      	movs	r3, #0
 8017b74:	61bb      	str	r3, [r7, #24]
 8017b76:	e027      	b.n	8017bc8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017b78:	6838      	ldr	r0, [r7, #0]
 8017b7a:	f7ff ff71 	bl	8017a60 <ip4_input_accept>
 8017b7e:	4603      	mov	r3, r0
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d002      	beq.n	8017b8a <ip4_input+0xd6>
      netif = inp;
 8017b84:	683b      	ldr	r3, [r7, #0]
 8017b86:	61bb      	str	r3, [r7, #24]
 8017b88:	e01e      	b.n	8017bc8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017b8e:	4b68      	ldr	r3, [pc, #416]	; (8017d30 <ip4_input+0x27c>)
 8017b90:	695b      	ldr	r3, [r3, #20]
 8017b92:	b2db      	uxtb	r3, r3
 8017b94:	2b7f      	cmp	r3, #127	; 0x7f
 8017b96:	d017      	beq.n	8017bc8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017b98:	4b66      	ldr	r3, [pc, #408]	; (8017d34 <ip4_input+0x280>)
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	61bb      	str	r3, [r7, #24]
 8017b9e:	e00e      	b.n	8017bbe <ip4_input+0x10a>
          if (netif == inp) {
 8017ba0:	69ba      	ldr	r2, [r7, #24]
 8017ba2:	683b      	ldr	r3, [r7, #0]
 8017ba4:	429a      	cmp	r2, r3
 8017ba6:	d006      	beq.n	8017bb6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017ba8:	69b8      	ldr	r0, [r7, #24]
 8017baa:	f7ff ff59 	bl	8017a60 <ip4_input_accept>
 8017bae:	4603      	mov	r3, r0
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d108      	bne.n	8017bc6 <ip4_input+0x112>
 8017bb4:	e000      	b.n	8017bb8 <ip4_input+0x104>
            continue;
 8017bb6:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017bb8:	69bb      	ldr	r3, [r7, #24]
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	61bb      	str	r3, [r7, #24]
 8017bbe:	69bb      	ldr	r3, [r7, #24]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d1ed      	bne.n	8017ba0 <ip4_input+0xec>
 8017bc4:	e000      	b.n	8017bc8 <ip4_input+0x114>
            break;
 8017bc6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017bc8:	69bb      	ldr	r3, [r7, #24]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d111      	bne.n	8017bf2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017bce:	69fb      	ldr	r3, [r7, #28]
 8017bd0:	7a5b      	ldrb	r3, [r3, #9]
 8017bd2:	2b11      	cmp	r3, #17
 8017bd4:	d10d      	bne.n	8017bf2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017bd6:	8a7b      	ldrh	r3, [r7, #18]
 8017bd8:	69fa      	ldr	r2, [r7, #28]
 8017bda:	4413      	add	r3, r2
 8017bdc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	885b      	ldrh	r3, [r3, #2]
 8017be2:	b29b      	uxth	r3, r3
 8017be4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017be8:	d103      	bne.n	8017bf2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017bea:	683b      	ldr	r3, [r7, #0]
 8017bec:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017bee:	2300      	movs	r3, #0
 8017bf0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017bf2:	697b      	ldr	r3, [r7, #20]
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d017      	beq.n	8017c28 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017bf8:	4b4d      	ldr	r3, [pc, #308]	; (8017d30 <ip4_input+0x27c>)
 8017bfa:	691b      	ldr	r3, [r3, #16]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d013      	beq.n	8017c28 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017c00:	4b4b      	ldr	r3, [pc, #300]	; (8017d30 <ip4_input+0x27c>)
 8017c02:	691b      	ldr	r3, [r3, #16]
 8017c04:	6839      	ldr	r1, [r7, #0]
 8017c06:	4618      	mov	r0, r3
 8017c08:	f000 f96e 	bl	8017ee8 <ip4_addr_isbroadcast_u32>
 8017c0c:	4603      	mov	r3, r0
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d105      	bne.n	8017c1e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017c12:	4b47      	ldr	r3, [pc, #284]	; (8017d30 <ip4_input+0x27c>)
 8017c14:	691b      	ldr	r3, [r3, #16]
 8017c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017c1a:	2be0      	cmp	r3, #224	; 0xe0
 8017c1c:	d104      	bne.n	8017c28 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017c1e:	6878      	ldr	r0, [r7, #4]
 8017c20:	f7f5 fdcc 	bl	800d7bc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017c24:	2300      	movs	r3, #0
 8017c26:	e07e      	b.n	8017d26 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017c28:	69bb      	ldr	r3, [r7, #24]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d104      	bne.n	8017c38 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017c2e:	6878      	ldr	r0, [r7, #4]
 8017c30:	f7f5 fdc4 	bl	800d7bc <pbuf_free>
    return ERR_OK;
 8017c34:	2300      	movs	r3, #0
 8017c36:	e076      	b.n	8017d26 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017c38:	69fb      	ldr	r3, [r7, #28]
 8017c3a:	88db      	ldrh	r3, [r3, #6]
 8017c3c:	b29b      	uxth	r3, r3
 8017c3e:	461a      	mov	r2, r3
 8017c40:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017c44:	4013      	ands	r3, r2
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d00b      	beq.n	8017c62 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017c4a:	6878      	ldr	r0, [r7, #4]
 8017c4c:	f000 fd22 	bl	8018694 <ip4_reass>
 8017c50:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d101      	bne.n	8017c5c <ip4_input+0x1a8>
      return ERR_OK;
 8017c58:	2300      	movs	r3, #0
 8017c5a:	e064      	b.n	8017d26 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	685b      	ldr	r3, [r3, #4]
 8017c60:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017c62:	4a33      	ldr	r2, [pc, #204]	; (8017d30 <ip4_input+0x27c>)
 8017c64:	69bb      	ldr	r3, [r7, #24]
 8017c66:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017c68:	4a31      	ldr	r2, [pc, #196]	; (8017d30 <ip4_input+0x27c>)
 8017c6a:	683b      	ldr	r3, [r7, #0]
 8017c6c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017c6e:	4a30      	ldr	r2, [pc, #192]	; (8017d30 <ip4_input+0x27c>)
 8017c70:	69fb      	ldr	r3, [r7, #28]
 8017c72:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017c74:	69fb      	ldr	r3, [r7, #28]
 8017c76:	781b      	ldrb	r3, [r3, #0]
 8017c78:	f003 030f 	and.w	r3, r3, #15
 8017c7c:	b2db      	uxtb	r3, r3
 8017c7e:	009b      	lsls	r3, r3, #2
 8017c80:	b2db      	uxtb	r3, r3
 8017c82:	b29a      	uxth	r2, r3
 8017c84:	4b2a      	ldr	r3, [pc, #168]	; (8017d30 <ip4_input+0x27c>)
 8017c86:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017c88:	8a7b      	ldrh	r3, [r7, #18]
 8017c8a:	4619      	mov	r1, r3
 8017c8c:	6878      	ldr	r0, [r7, #4]
 8017c8e:	f7f5 fcdd 	bl	800d64c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017c92:	69fb      	ldr	r3, [r7, #28]
 8017c94:	7a5b      	ldrb	r3, [r3, #9]
 8017c96:	2b11      	cmp	r3, #17
 8017c98:	d006      	beq.n	8017ca8 <ip4_input+0x1f4>
 8017c9a:	2b11      	cmp	r3, #17
 8017c9c:	dc13      	bgt.n	8017cc6 <ip4_input+0x212>
 8017c9e:	2b01      	cmp	r3, #1
 8017ca0:	d00c      	beq.n	8017cbc <ip4_input+0x208>
 8017ca2:	2b06      	cmp	r3, #6
 8017ca4:	d005      	beq.n	8017cb2 <ip4_input+0x1fe>
 8017ca6:	e00e      	b.n	8017cc6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017ca8:	6839      	ldr	r1, [r7, #0]
 8017caa:	6878      	ldr	r0, [r7, #4]
 8017cac:	f7fc fade 	bl	801426c <udp_input>
        break;
 8017cb0:	e026      	b.n	8017d00 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017cb2:	6839      	ldr	r1, [r7, #0]
 8017cb4:	6878      	ldr	r0, [r7, #4]
 8017cb6:	f7f7 fe97 	bl	800f9e8 <tcp_input>
        break;
 8017cba:	e021      	b.n	8017d00 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017cbc:	6839      	ldr	r1, [r7, #0]
 8017cbe:	6878      	ldr	r0, [r7, #4]
 8017cc0:	f7ff fcd0 	bl	8017664 <icmp_input>
        break;
 8017cc4:	e01c      	b.n	8017d00 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017cc6:	4b1a      	ldr	r3, [pc, #104]	; (8017d30 <ip4_input+0x27c>)
 8017cc8:	695b      	ldr	r3, [r3, #20]
 8017cca:	69b9      	ldr	r1, [r7, #24]
 8017ccc:	4618      	mov	r0, r3
 8017cce:	f000 f90b 	bl	8017ee8 <ip4_addr_isbroadcast_u32>
 8017cd2:	4603      	mov	r3, r0
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d10f      	bne.n	8017cf8 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017cd8:	4b15      	ldr	r3, [pc, #84]	; (8017d30 <ip4_input+0x27c>)
 8017cda:	695b      	ldr	r3, [r3, #20]
 8017cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017ce0:	2be0      	cmp	r3, #224	; 0xe0
 8017ce2:	d009      	beq.n	8017cf8 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017ce4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017ce8:	4619      	mov	r1, r3
 8017cea:	6878      	ldr	r0, [r7, #4]
 8017cec:	f7f5 fd21 	bl	800d732 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017cf0:	2102      	movs	r1, #2
 8017cf2:	6878      	ldr	r0, [r7, #4]
 8017cf4:	f7ff fdba 	bl	801786c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017cf8:	6878      	ldr	r0, [r7, #4]
 8017cfa:	f7f5 fd5f 	bl	800d7bc <pbuf_free>
        break;
 8017cfe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017d00:	4b0b      	ldr	r3, [pc, #44]	; (8017d30 <ip4_input+0x27c>)
 8017d02:	2200      	movs	r2, #0
 8017d04:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017d06:	4b0a      	ldr	r3, [pc, #40]	; (8017d30 <ip4_input+0x27c>)
 8017d08:	2200      	movs	r2, #0
 8017d0a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017d0c:	4b08      	ldr	r3, [pc, #32]	; (8017d30 <ip4_input+0x27c>)
 8017d0e:	2200      	movs	r2, #0
 8017d10:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017d12:	4b07      	ldr	r3, [pc, #28]	; (8017d30 <ip4_input+0x27c>)
 8017d14:	2200      	movs	r2, #0
 8017d16:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017d18:	4b05      	ldr	r3, [pc, #20]	; (8017d30 <ip4_input+0x27c>)
 8017d1a:	2200      	movs	r2, #0
 8017d1c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017d1e:	4b04      	ldr	r3, [pc, #16]	; (8017d30 <ip4_input+0x27c>)
 8017d20:	2200      	movs	r2, #0
 8017d22:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017d24:	2300      	movs	r3, #0
}
 8017d26:	4618      	mov	r0, r3
 8017d28:	3720      	adds	r7, #32
 8017d2a:	46bd      	mov	sp, r7
 8017d2c:	bd80      	pop	{r7, pc}
 8017d2e:	bf00      	nop
 8017d30:	200097f4 	.word	0x200097f4
 8017d34:	2000cf5c 	.word	0x2000cf5c

08017d38 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b08a      	sub	sp, #40	; 0x28
 8017d3c:	af04      	add	r7, sp, #16
 8017d3e:	60f8      	str	r0, [r7, #12]
 8017d40:	60b9      	str	r1, [r7, #8]
 8017d42:	607a      	str	r2, [r7, #4]
 8017d44:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017d46:	68bb      	ldr	r3, [r7, #8]
 8017d48:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d009      	beq.n	8017d64 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017d50:	68bb      	ldr	r3, [r7, #8]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d003      	beq.n	8017d5e <ip4_output_if+0x26>
 8017d56:	68bb      	ldr	r3, [r7, #8]
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d102      	bne.n	8017d64 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d60:	3304      	adds	r3, #4
 8017d62:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017d64:	78fa      	ldrb	r2, [r7, #3]
 8017d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d68:	9302      	str	r3, [sp, #8]
 8017d6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017d6e:	9301      	str	r3, [sp, #4]
 8017d70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017d74:	9300      	str	r3, [sp, #0]
 8017d76:	4613      	mov	r3, r2
 8017d78:	687a      	ldr	r2, [r7, #4]
 8017d7a:	6979      	ldr	r1, [r7, #20]
 8017d7c:	68f8      	ldr	r0, [r7, #12]
 8017d7e:	f000 f805 	bl	8017d8c <ip4_output_if_src>
 8017d82:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017d84:	4618      	mov	r0, r3
 8017d86:	3718      	adds	r7, #24
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	bd80      	pop	{r7, pc}

08017d8c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b088      	sub	sp, #32
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	60f8      	str	r0, [r7, #12]
 8017d94:	60b9      	str	r1, [r7, #8]
 8017d96:	607a      	str	r2, [r7, #4]
 8017d98:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	7b9b      	ldrb	r3, [r3, #14]
 8017d9e:	2b01      	cmp	r3, #1
 8017da0:	d006      	beq.n	8017db0 <ip4_output_if_src+0x24>
 8017da2:	4b4b      	ldr	r3, [pc, #300]	; (8017ed0 <ip4_output_if_src+0x144>)
 8017da4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017da8:	494a      	ldr	r1, [pc, #296]	; (8017ed4 <ip4_output_if_src+0x148>)
 8017daa:	484b      	ldr	r0, [pc, #300]	; (8017ed8 <ip4_output_if_src+0x14c>)
 8017dac:	f001 fc64 	bl	8019678 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d060      	beq.n	8017e78 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017db6:	2314      	movs	r3, #20
 8017db8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017dba:	2114      	movs	r1, #20
 8017dbc:	68f8      	ldr	r0, [r7, #12]
 8017dbe:	f7f5 fc35 	bl	800d62c <pbuf_add_header>
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d002      	beq.n	8017dce <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017dc8:	f06f 0301 	mvn.w	r3, #1
 8017dcc:	e07c      	b.n	8017ec8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	685b      	ldr	r3, [r3, #4]
 8017dd2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	895b      	ldrh	r3, [r3, #10]
 8017dd8:	2b13      	cmp	r3, #19
 8017dda:	d806      	bhi.n	8017dea <ip4_output_if_src+0x5e>
 8017ddc:	4b3c      	ldr	r3, [pc, #240]	; (8017ed0 <ip4_output_if_src+0x144>)
 8017dde:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017de2:	493e      	ldr	r1, [pc, #248]	; (8017edc <ip4_output_if_src+0x150>)
 8017de4:	483c      	ldr	r0, [pc, #240]	; (8017ed8 <ip4_output_if_src+0x14c>)
 8017de6:	f001 fc47 	bl	8019678 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017dea:	69fb      	ldr	r3, [r7, #28]
 8017dec:	78fa      	ldrb	r2, [r7, #3]
 8017dee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017df0:	69fb      	ldr	r3, [r7, #28]
 8017df2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017df6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	681a      	ldr	r2, [r3, #0]
 8017dfc:	69fb      	ldr	r3, [r7, #28]
 8017dfe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017e00:	8b7b      	ldrh	r3, [r7, #26]
 8017e02:	089b      	lsrs	r3, r3, #2
 8017e04:	b29b      	uxth	r3, r3
 8017e06:	b2db      	uxtb	r3, r3
 8017e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e0c:	b2da      	uxtb	r2, r3
 8017e0e:	69fb      	ldr	r3, [r7, #28]
 8017e10:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017e12:	69fb      	ldr	r3, [r7, #28]
 8017e14:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017e18:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	891b      	ldrh	r3, [r3, #8]
 8017e1e:	4618      	mov	r0, r3
 8017e20:	f7f4 f89c 	bl	800bf5c <lwip_htons>
 8017e24:	4603      	mov	r3, r0
 8017e26:	461a      	mov	r2, r3
 8017e28:	69fb      	ldr	r3, [r7, #28]
 8017e2a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017e2c:	69fb      	ldr	r3, [r7, #28]
 8017e2e:	2200      	movs	r2, #0
 8017e30:	719a      	strb	r2, [r3, #6]
 8017e32:	2200      	movs	r2, #0
 8017e34:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017e36:	4b2a      	ldr	r3, [pc, #168]	; (8017ee0 <ip4_output_if_src+0x154>)
 8017e38:	881b      	ldrh	r3, [r3, #0]
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	f7f4 f88e 	bl	800bf5c <lwip_htons>
 8017e40:	4603      	mov	r3, r0
 8017e42:	461a      	mov	r2, r3
 8017e44:	69fb      	ldr	r3, [r7, #28]
 8017e46:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017e48:	4b25      	ldr	r3, [pc, #148]	; (8017ee0 <ip4_output_if_src+0x154>)
 8017e4a:	881b      	ldrh	r3, [r3, #0]
 8017e4c:	3301      	adds	r3, #1
 8017e4e:	b29a      	uxth	r2, r3
 8017e50:	4b23      	ldr	r3, [pc, #140]	; (8017ee0 <ip4_output_if_src+0x154>)
 8017e52:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017e54:	68bb      	ldr	r3, [r7, #8]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d104      	bne.n	8017e64 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017e5a:	4b22      	ldr	r3, [pc, #136]	; (8017ee4 <ip4_output_if_src+0x158>)
 8017e5c:	681a      	ldr	r2, [r3, #0]
 8017e5e:	69fb      	ldr	r3, [r7, #28]
 8017e60:	60da      	str	r2, [r3, #12]
 8017e62:	e003      	b.n	8017e6c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017e64:	68bb      	ldr	r3, [r7, #8]
 8017e66:	681a      	ldr	r2, [r3, #0]
 8017e68:	69fb      	ldr	r3, [r7, #28]
 8017e6a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017e6c:	69fb      	ldr	r3, [r7, #28]
 8017e6e:	2200      	movs	r2, #0
 8017e70:	729a      	strb	r2, [r3, #10]
 8017e72:	2200      	movs	r2, #0
 8017e74:	72da      	strb	r2, [r3, #11]
 8017e76:	e00f      	b.n	8017e98 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	895b      	ldrh	r3, [r3, #10]
 8017e7c:	2b13      	cmp	r3, #19
 8017e7e:	d802      	bhi.n	8017e86 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017e80:	f06f 0301 	mvn.w	r3, #1
 8017e84:	e020      	b.n	8017ec8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	685b      	ldr	r3, [r3, #4]
 8017e8a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017e8c:	69fb      	ldr	r3, [r7, #28]
 8017e8e:	691b      	ldr	r3, [r3, #16]
 8017e90:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017e92:	f107 0314 	add.w	r3, r7, #20
 8017e96:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d00c      	beq.n	8017eba <ip4_output_if_src+0x12e>
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	891a      	ldrh	r2, [r3, #8]
 8017ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017ea8:	429a      	cmp	r2, r3
 8017eaa:	d906      	bls.n	8017eba <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017eac:	687a      	ldr	r2, [r7, #4]
 8017eae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017eb0:	68f8      	ldr	r0, [r7, #12]
 8017eb2:	f000 fde3 	bl	8018a7c <ip4_frag>
 8017eb6:	4603      	mov	r3, r0
 8017eb8:	e006      	b.n	8017ec8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ebc:	695b      	ldr	r3, [r3, #20]
 8017ebe:	687a      	ldr	r2, [r7, #4]
 8017ec0:	68f9      	ldr	r1, [r7, #12]
 8017ec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ec4:	4798      	blx	r3
 8017ec6:	4603      	mov	r3, r0
}
 8017ec8:	4618      	mov	r0, r3
 8017eca:	3720      	adds	r7, #32
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	bd80      	pop	{r7, pc}
 8017ed0:	0801de00 	.word	0x0801de00
 8017ed4:	0801de34 	.word	0x0801de34
 8017ed8:	0801de40 	.word	0x0801de40
 8017edc:	0801de68 	.word	0x0801de68
 8017ee0:	2000d0ee 	.word	0x2000d0ee
 8017ee4:	0801e304 	.word	0x0801e304

08017ee8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017ee8:	b480      	push	{r7}
 8017eea:	b085      	sub	sp, #20
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
 8017ef0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017efc:	d002      	beq.n	8017f04 <ip4_addr_isbroadcast_u32+0x1c>
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d101      	bne.n	8017f08 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017f04:	2301      	movs	r3, #1
 8017f06:	e02a      	b.n	8017f5e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017f08:	683b      	ldr	r3, [r7, #0]
 8017f0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017f0e:	f003 0302 	and.w	r3, r3, #2
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d101      	bne.n	8017f1a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017f16:	2300      	movs	r3, #0
 8017f18:	e021      	b.n	8017f5e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017f1a:	683b      	ldr	r3, [r7, #0]
 8017f1c:	3304      	adds	r3, #4
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	687a      	ldr	r2, [r7, #4]
 8017f22:	429a      	cmp	r2, r3
 8017f24:	d101      	bne.n	8017f2a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017f26:	2300      	movs	r3, #0
 8017f28:	e019      	b.n	8017f5e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017f2a:	68fa      	ldr	r2, [r7, #12]
 8017f2c:	683b      	ldr	r3, [r7, #0]
 8017f2e:	3304      	adds	r3, #4
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	405a      	eors	r2, r3
 8017f34:	683b      	ldr	r3, [r7, #0]
 8017f36:	3308      	adds	r3, #8
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	4013      	ands	r3, r2
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d10d      	bne.n	8017f5c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017f40:	683b      	ldr	r3, [r7, #0]
 8017f42:	3308      	adds	r3, #8
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	43da      	mvns	r2, r3
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017f4c:	683b      	ldr	r3, [r7, #0]
 8017f4e:	3308      	adds	r3, #8
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017f54:	429a      	cmp	r2, r3
 8017f56:	d101      	bne.n	8017f5c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017f58:	2301      	movs	r3, #1
 8017f5a:	e000      	b.n	8017f5e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017f5c:	2300      	movs	r3, #0
  }
}
 8017f5e:	4618      	mov	r0, r3
 8017f60:	3714      	adds	r7, #20
 8017f62:	46bd      	mov	sp, r7
 8017f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f68:	4770      	bx	lr
	...

08017f6c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b082      	sub	sp, #8
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8017f74:	2210      	movs	r2, #16
 8017f76:	4904      	ldr	r1, [pc, #16]	; (8017f88 <ip4addr_ntoa+0x1c>)
 8017f78:	6878      	ldr	r0, [r7, #4]
 8017f7a:	f000 f807 	bl	8017f8c <ip4addr_ntoa_r>
 8017f7e:	4603      	mov	r3, r0
}
 8017f80:	4618      	mov	r0, r3
 8017f82:	3708      	adds	r7, #8
 8017f84:	46bd      	mov	sp, r7
 8017f86:	bd80      	pop	{r7, pc}
 8017f88:	2000d0f0 	.word	0x2000d0f0

08017f8c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8017f8c:	b480      	push	{r7}
 8017f8e:	b08d      	sub	sp, #52	; 0x34
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	60f8      	str	r0, [r7, #12]
 8017f94:	60b9      	str	r1, [r7, #8]
 8017f96:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8017f98:	2300      	movs	r3, #0
 8017f9a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8017fa2:	68bb      	ldr	r3, [r7, #8]
 8017fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8017fa6:	f107 0318 	add.w	r3, r7, #24
 8017faa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8017fac:	2300      	movs	r3, #0
 8017fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017fb2:	e058      	b.n	8018066 <ip4addr_ntoa_r+0xda>
    i = 0;
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8017fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fbc:	781a      	ldrb	r2, [r3, #0]
 8017fbe:	4b32      	ldr	r3, [pc, #200]	; (8018088 <ip4addr_ntoa_r+0xfc>)
 8017fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8017fc4:	08d9      	lsrs	r1, r3, #3
 8017fc6:	460b      	mov	r3, r1
 8017fc8:	009b      	lsls	r3, r3, #2
 8017fca:	440b      	add	r3, r1
 8017fcc:	005b      	lsls	r3, r3, #1
 8017fce:	1ad3      	subs	r3, r2, r3
 8017fd0:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8017fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fd4:	781b      	ldrb	r3, [r3, #0]
 8017fd6:	4a2c      	ldr	r2, [pc, #176]	; (8018088 <ip4addr_ntoa_r+0xfc>)
 8017fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8017fdc:	08db      	lsrs	r3, r3, #3
 8017fde:	b2da      	uxtb	r2, r3
 8017fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fe2:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8017fe4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017fe8:	1c5a      	adds	r2, r3, #1
 8017fea:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8017fee:	4619      	mov	r1, r3
 8017ff0:	7ffb      	ldrb	r3, [r7, #31]
 8017ff2:	3330      	adds	r3, #48	; 0x30
 8017ff4:	b2da      	uxtb	r2, r3
 8017ff6:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8017ffa:	443b      	add	r3, r7
 8017ffc:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8018000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018002:	781b      	ldrb	r3, [r3, #0]
 8018004:	2b00      	cmp	r3, #0
 8018006:	d1d8      	bne.n	8017fba <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8018008:	e011      	b.n	801802e <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801800a:	6a3b      	ldr	r3, [r7, #32]
 801800c:	1c5a      	adds	r2, r3, #1
 801800e:	623a      	str	r2, [r7, #32]
 8018010:	687a      	ldr	r2, [r7, #4]
 8018012:	429a      	cmp	r2, r3
 8018014:	dc01      	bgt.n	801801a <ip4addr_ntoa_r+0x8e>
        return NULL;
 8018016:	2300      	movs	r3, #0
 8018018:	e030      	b.n	801807c <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801801a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801801e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018020:	1c59      	adds	r1, r3, #1
 8018022:	62f9      	str	r1, [r7, #44]	; 0x2c
 8018024:	3230      	adds	r2, #48	; 0x30
 8018026:	443a      	add	r2, r7
 8018028:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801802c:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801802e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018032:	1e5a      	subs	r2, r3, #1
 8018034:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8018038:	2b00      	cmp	r3, #0
 801803a:	d1e6      	bne.n	801800a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801803c:	6a3b      	ldr	r3, [r7, #32]
 801803e:	1c5a      	adds	r2, r3, #1
 8018040:	623a      	str	r2, [r7, #32]
 8018042:	687a      	ldr	r2, [r7, #4]
 8018044:	429a      	cmp	r2, r3
 8018046:	dc01      	bgt.n	801804c <ip4addr_ntoa_r+0xc0>
      return NULL;
 8018048:	2300      	movs	r3, #0
 801804a:	e017      	b.n	801807c <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801804e:	1c5a      	adds	r2, r3, #1
 8018050:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018052:	222e      	movs	r2, #46	; 0x2e
 8018054:	701a      	strb	r2, [r3, #0]
    ap++;
 8018056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018058:	3301      	adds	r3, #1
 801805a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801805c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018060:	3301      	adds	r3, #1
 8018062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801806a:	2b03      	cmp	r3, #3
 801806c:	d9a2      	bls.n	8017fb4 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018070:	3b01      	subs	r3, #1
 8018072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018076:	2200      	movs	r2, #0
 8018078:	701a      	strb	r2, [r3, #0]
  return buf;
 801807a:	68bb      	ldr	r3, [r7, #8]
}
 801807c:	4618      	mov	r0, r3
 801807e:	3734      	adds	r7, #52	; 0x34
 8018080:	46bd      	mov	sp, r7
 8018082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018086:	4770      	bx	lr
 8018088:	cccccccd 	.word	0xcccccccd

0801808c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801808c:	b580      	push	{r7, lr}
 801808e:	b084      	sub	sp, #16
 8018090:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018092:	2300      	movs	r3, #0
 8018094:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018096:	4b12      	ldr	r3, [pc, #72]	; (80180e0 <ip_reass_tmr+0x54>)
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801809c:	e018      	b.n	80180d0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	7fdb      	ldrb	r3, [r3, #31]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d00b      	beq.n	80180be <ip_reass_tmr+0x32>
      r->timer--;
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	7fdb      	ldrb	r3, [r3, #31]
 80180aa:	3b01      	subs	r3, #1
 80180ac:	b2da      	uxtb	r2, r3
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	60fb      	str	r3, [r7, #12]
 80180bc:	e008      	b.n	80180d0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80180c2:	68fb      	ldr	r3, [r7, #12]
 80180c4:	681b      	ldr	r3, [r3, #0]
 80180c6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80180c8:	68b9      	ldr	r1, [r7, #8]
 80180ca:	6878      	ldr	r0, [r7, #4]
 80180cc:	f000 f80a 	bl	80180e4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d1e3      	bne.n	801809e <ip_reass_tmr+0x12>
    }
  }
}
 80180d6:	bf00      	nop
 80180d8:	bf00      	nop
 80180da:	3710      	adds	r7, #16
 80180dc:	46bd      	mov	sp, r7
 80180de:	bd80      	pop	{r7, pc}
 80180e0:	2000d100 	.word	0x2000d100

080180e4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b088      	sub	sp, #32
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	6078      	str	r0, [r7, #4]
 80180ec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80180ee:	2300      	movs	r3, #0
 80180f0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80180f2:	683a      	ldr	r2, [r7, #0]
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	429a      	cmp	r2, r3
 80180f8:	d105      	bne.n	8018106 <ip_reass_free_complete_datagram+0x22>
 80180fa:	4b45      	ldr	r3, [pc, #276]	; (8018210 <ip_reass_free_complete_datagram+0x12c>)
 80180fc:	22ab      	movs	r2, #171	; 0xab
 80180fe:	4945      	ldr	r1, [pc, #276]	; (8018214 <ip_reass_free_complete_datagram+0x130>)
 8018100:	4845      	ldr	r0, [pc, #276]	; (8018218 <ip_reass_free_complete_datagram+0x134>)
 8018102:	f001 fab9 	bl	8019678 <iprintf>
  if (prev != NULL) {
 8018106:	683b      	ldr	r3, [r7, #0]
 8018108:	2b00      	cmp	r3, #0
 801810a:	d00a      	beq.n	8018122 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801810c:	683b      	ldr	r3, [r7, #0]
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	687a      	ldr	r2, [r7, #4]
 8018112:	429a      	cmp	r2, r3
 8018114:	d005      	beq.n	8018122 <ip_reass_free_complete_datagram+0x3e>
 8018116:	4b3e      	ldr	r3, [pc, #248]	; (8018210 <ip_reass_free_complete_datagram+0x12c>)
 8018118:	22ad      	movs	r2, #173	; 0xad
 801811a:	4940      	ldr	r1, [pc, #256]	; (801821c <ip_reass_free_complete_datagram+0x138>)
 801811c:	483e      	ldr	r0, [pc, #248]	; (8018218 <ip_reass_free_complete_datagram+0x134>)
 801811e:	f001 faab 	bl	8019678 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	685b      	ldr	r3, [r3, #4]
 8018126:	685b      	ldr	r3, [r3, #4]
 8018128:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801812a:	697b      	ldr	r3, [r7, #20]
 801812c:	889b      	ldrh	r3, [r3, #4]
 801812e:	b29b      	uxth	r3, r3
 8018130:	2b00      	cmp	r3, #0
 8018132:	d12a      	bne.n	801818a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	685b      	ldr	r3, [r3, #4]
 8018138:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801813a:	697b      	ldr	r3, [r7, #20]
 801813c:	681a      	ldr	r2, [r3, #0]
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018142:	69bb      	ldr	r3, [r7, #24]
 8018144:	6858      	ldr	r0, [r3, #4]
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	3308      	adds	r3, #8
 801814a:	2214      	movs	r2, #20
 801814c:	4619      	mov	r1, r3
 801814e:	f001 f99d 	bl	801948c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018152:	2101      	movs	r1, #1
 8018154:	69b8      	ldr	r0, [r7, #24]
 8018156:	f7ff fb99 	bl	801788c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801815a:	69b8      	ldr	r0, [r7, #24]
 801815c:	f7f5 fbbc 	bl	800d8d8 <pbuf_clen>
 8018160:	4603      	mov	r3, r0
 8018162:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018164:	8bfa      	ldrh	r2, [r7, #30]
 8018166:	8a7b      	ldrh	r3, [r7, #18]
 8018168:	4413      	add	r3, r2
 801816a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801816e:	db05      	blt.n	801817c <ip_reass_free_complete_datagram+0x98>
 8018170:	4b27      	ldr	r3, [pc, #156]	; (8018210 <ip_reass_free_complete_datagram+0x12c>)
 8018172:	22bc      	movs	r2, #188	; 0xbc
 8018174:	492a      	ldr	r1, [pc, #168]	; (8018220 <ip_reass_free_complete_datagram+0x13c>)
 8018176:	4828      	ldr	r0, [pc, #160]	; (8018218 <ip_reass_free_complete_datagram+0x134>)
 8018178:	f001 fa7e 	bl	8019678 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801817c:	8bfa      	ldrh	r2, [r7, #30]
 801817e:	8a7b      	ldrh	r3, [r7, #18]
 8018180:	4413      	add	r3, r2
 8018182:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018184:	69b8      	ldr	r0, [r7, #24]
 8018186:	f7f5 fb19 	bl	800d7bc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	685b      	ldr	r3, [r3, #4]
 801818e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018190:	e01f      	b.n	80181d2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018192:	69bb      	ldr	r3, [r7, #24]
 8018194:	685b      	ldr	r3, [r3, #4]
 8018196:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018198:	69bb      	ldr	r3, [r7, #24]
 801819a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801819c:	697b      	ldr	r3, [r7, #20]
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80181a2:	68f8      	ldr	r0, [r7, #12]
 80181a4:	f7f5 fb98 	bl	800d8d8 <pbuf_clen>
 80181a8:	4603      	mov	r3, r0
 80181aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80181ac:	8bfa      	ldrh	r2, [r7, #30]
 80181ae:	8a7b      	ldrh	r3, [r7, #18]
 80181b0:	4413      	add	r3, r2
 80181b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80181b6:	db05      	blt.n	80181c4 <ip_reass_free_complete_datagram+0xe0>
 80181b8:	4b15      	ldr	r3, [pc, #84]	; (8018210 <ip_reass_free_complete_datagram+0x12c>)
 80181ba:	22cc      	movs	r2, #204	; 0xcc
 80181bc:	4918      	ldr	r1, [pc, #96]	; (8018220 <ip_reass_free_complete_datagram+0x13c>)
 80181be:	4816      	ldr	r0, [pc, #88]	; (8018218 <ip_reass_free_complete_datagram+0x134>)
 80181c0:	f001 fa5a 	bl	8019678 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80181c4:	8bfa      	ldrh	r2, [r7, #30]
 80181c6:	8a7b      	ldrh	r3, [r7, #18]
 80181c8:	4413      	add	r3, r2
 80181ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80181cc:	68f8      	ldr	r0, [r7, #12]
 80181ce:	f7f5 faf5 	bl	800d7bc <pbuf_free>
  while (p != NULL) {
 80181d2:	69bb      	ldr	r3, [r7, #24]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d1dc      	bne.n	8018192 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80181d8:	6839      	ldr	r1, [r7, #0]
 80181da:	6878      	ldr	r0, [r7, #4]
 80181dc:	f000 f8c2 	bl	8018364 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80181e0:	4b10      	ldr	r3, [pc, #64]	; (8018224 <ip_reass_free_complete_datagram+0x140>)
 80181e2:	881b      	ldrh	r3, [r3, #0]
 80181e4:	8bfa      	ldrh	r2, [r7, #30]
 80181e6:	429a      	cmp	r2, r3
 80181e8:	d905      	bls.n	80181f6 <ip_reass_free_complete_datagram+0x112>
 80181ea:	4b09      	ldr	r3, [pc, #36]	; (8018210 <ip_reass_free_complete_datagram+0x12c>)
 80181ec:	22d2      	movs	r2, #210	; 0xd2
 80181ee:	490e      	ldr	r1, [pc, #56]	; (8018228 <ip_reass_free_complete_datagram+0x144>)
 80181f0:	4809      	ldr	r0, [pc, #36]	; (8018218 <ip_reass_free_complete_datagram+0x134>)
 80181f2:	f001 fa41 	bl	8019678 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80181f6:	4b0b      	ldr	r3, [pc, #44]	; (8018224 <ip_reass_free_complete_datagram+0x140>)
 80181f8:	881a      	ldrh	r2, [r3, #0]
 80181fa:	8bfb      	ldrh	r3, [r7, #30]
 80181fc:	1ad3      	subs	r3, r2, r3
 80181fe:	b29a      	uxth	r2, r3
 8018200:	4b08      	ldr	r3, [pc, #32]	; (8018224 <ip_reass_free_complete_datagram+0x140>)
 8018202:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018204:	8bfb      	ldrh	r3, [r7, #30]
}
 8018206:	4618      	mov	r0, r3
 8018208:	3720      	adds	r7, #32
 801820a:	46bd      	mov	sp, r7
 801820c:	bd80      	pop	{r7, pc}
 801820e:	bf00      	nop
 8018210:	0801de98 	.word	0x0801de98
 8018214:	0801ded4 	.word	0x0801ded4
 8018218:	0801dee0 	.word	0x0801dee0
 801821c:	0801df08 	.word	0x0801df08
 8018220:	0801df1c 	.word	0x0801df1c
 8018224:	2000d104 	.word	0x2000d104
 8018228:	0801df3c 	.word	0x0801df3c

0801822c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801822c:	b580      	push	{r7, lr}
 801822e:	b08a      	sub	sp, #40	; 0x28
 8018230:	af00      	add	r7, sp, #0
 8018232:	6078      	str	r0, [r7, #4]
 8018234:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018236:	2300      	movs	r3, #0
 8018238:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801823a:	2300      	movs	r3, #0
 801823c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801823e:	2300      	movs	r3, #0
 8018240:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018242:	2300      	movs	r3, #0
 8018244:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018246:	2300      	movs	r3, #0
 8018248:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801824a:	4b28      	ldr	r3, [pc, #160]	; (80182ec <ip_reass_remove_oldest_datagram+0xc0>)
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018250:	e030      	b.n	80182b4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018254:	695a      	ldr	r2, [r3, #20]
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	68db      	ldr	r3, [r3, #12]
 801825a:	429a      	cmp	r2, r3
 801825c:	d10c      	bne.n	8018278 <ip_reass_remove_oldest_datagram+0x4c>
 801825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018260:	699a      	ldr	r2, [r3, #24]
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	691b      	ldr	r3, [r3, #16]
 8018266:	429a      	cmp	r2, r3
 8018268:	d106      	bne.n	8018278 <ip_reass_remove_oldest_datagram+0x4c>
 801826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801826c:	899a      	ldrh	r2, [r3, #12]
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	889b      	ldrh	r3, [r3, #4]
 8018272:	b29b      	uxth	r3, r3
 8018274:	429a      	cmp	r2, r3
 8018276:	d014      	beq.n	80182a2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018278:	693b      	ldr	r3, [r7, #16]
 801827a:	3301      	adds	r3, #1
 801827c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801827e:	6a3b      	ldr	r3, [r7, #32]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d104      	bne.n	801828e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018286:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018288:	69fb      	ldr	r3, [r7, #28]
 801828a:	61bb      	str	r3, [r7, #24]
 801828c:	e009      	b.n	80182a2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018290:	7fda      	ldrb	r2, [r3, #31]
 8018292:	6a3b      	ldr	r3, [r7, #32]
 8018294:	7fdb      	ldrb	r3, [r3, #31]
 8018296:	429a      	cmp	r2, r3
 8018298:	d803      	bhi.n	80182a2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801829c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801829e:	69fb      	ldr	r3, [r7, #28]
 80182a0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80182a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d001      	beq.n	80182ae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80182aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182ac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80182ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80182b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d1cb      	bne.n	8018252 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80182ba:	6a3b      	ldr	r3, [r7, #32]
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d008      	beq.n	80182d2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80182c0:	69b9      	ldr	r1, [r7, #24]
 80182c2:	6a38      	ldr	r0, [r7, #32]
 80182c4:	f7ff ff0e 	bl	80180e4 <ip_reass_free_complete_datagram>
 80182c8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80182ca:	697a      	ldr	r2, [r7, #20]
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	4413      	add	r3, r2
 80182d0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80182d2:	697a      	ldr	r2, [r7, #20]
 80182d4:	683b      	ldr	r3, [r7, #0]
 80182d6:	429a      	cmp	r2, r3
 80182d8:	da02      	bge.n	80182e0 <ip_reass_remove_oldest_datagram+0xb4>
 80182da:	693b      	ldr	r3, [r7, #16]
 80182dc:	2b01      	cmp	r3, #1
 80182de:	dcac      	bgt.n	801823a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80182e0:	697b      	ldr	r3, [r7, #20]
}
 80182e2:	4618      	mov	r0, r3
 80182e4:	3728      	adds	r7, #40	; 0x28
 80182e6:	46bd      	mov	sp, r7
 80182e8:	bd80      	pop	{r7, pc}
 80182ea:	bf00      	nop
 80182ec:	2000d100 	.word	0x2000d100

080182f0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80182f0:	b580      	push	{r7, lr}
 80182f2:	b084      	sub	sp, #16
 80182f4:	af00      	add	r7, sp, #0
 80182f6:	6078      	str	r0, [r7, #4]
 80182f8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80182fa:	2004      	movs	r0, #4
 80182fc:	f7f4 fb06 	bl	800c90c <memp_malloc>
 8018300:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d110      	bne.n	801832a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018308:	6839      	ldr	r1, [r7, #0]
 801830a:	6878      	ldr	r0, [r7, #4]
 801830c:	f7ff ff8e 	bl	801822c <ip_reass_remove_oldest_datagram>
 8018310:	4602      	mov	r2, r0
 8018312:	683b      	ldr	r3, [r7, #0]
 8018314:	4293      	cmp	r3, r2
 8018316:	dc03      	bgt.n	8018320 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018318:	2004      	movs	r0, #4
 801831a:	f7f4 faf7 	bl	800c90c <memp_malloc>
 801831e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d101      	bne.n	801832a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018326:	2300      	movs	r3, #0
 8018328:	e016      	b.n	8018358 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801832a:	2220      	movs	r2, #32
 801832c:	2100      	movs	r1, #0
 801832e:	68f8      	ldr	r0, [r7, #12]
 8018330:	f001 f8ba 	bl	80194a8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	220f      	movs	r2, #15
 8018338:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801833a:	4b09      	ldr	r3, [pc, #36]	; (8018360 <ip_reass_enqueue_new_datagram+0x70>)
 801833c:	681a      	ldr	r2, [r3, #0]
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018342:	4a07      	ldr	r2, [pc, #28]	; (8018360 <ip_reass_enqueue_new_datagram+0x70>)
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	3308      	adds	r3, #8
 801834c:	2214      	movs	r2, #20
 801834e:	6879      	ldr	r1, [r7, #4]
 8018350:	4618      	mov	r0, r3
 8018352:	f001 f89b 	bl	801948c <memcpy>
  return ipr;
 8018356:	68fb      	ldr	r3, [r7, #12]
}
 8018358:	4618      	mov	r0, r3
 801835a:	3710      	adds	r7, #16
 801835c:	46bd      	mov	sp, r7
 801835e:	bd80      	pop	{r7, pc}
 8018360:	2000d100 	.word	0x2000d100

08018364 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b082      	sub	sp, #8
 8018368:	af00      	add	r7, sp, #0
 801836a:	6078      	str	r0, [r7, #4]
 801836c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801836e:	4b10      	ldr	r3, [pc, #64]	; (80183b0 <ip_reass_dequeue_datagram+0x4c>)
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	687a      	ldr	r2, [r7, #4]
 8018374:	429a      	cmp	r2, r3
 8018376:	d104      	bne.n	8018382 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	4a0c      	ldr	r2, [pc, #48]	; (80183b0 <ip_reass_dequeue_datagram+0x4c>)
 801837e:	6013      	str	r3, [r2, #0]
 8018380:	e00d      	b.n	801839e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018382:	683b      	ldr	r3, [r7, #0]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d106      	bne.n	8018396 <ip_reass_dequeue_datagram+0x32>
 8018388:	4b0a      	ldr	r3, [pc, #40]	; (80183b4 <ip_reass_dequeue_datagram+0x50>)
 801838a:	f240 1245 	movw	r2, #325	; 0x145
 801838e:	490a      	ldr	r1, [pc, #40]	; (80183b8 <ip_reass_dequeue_datagram+0x54>)
 8018390:	480a      	ldr	r0, [pc, #40]	; (80183bc <ip_reass_dequeue_datagram+0x58>)
 8018392:	f001 f971 	bl	8019678 <iprintf>
    prev->next = ipr->next;
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	681a      	ldr	r2, [r3, #0]
 801839a:	683b      	ldr	r3, [r7, #0]
 801839c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801839e:	6879      	ldr	r1, [r7, #4]
 80183a0:	2004      	movs	r0, #4
 80183a2:	f7f4 fb29 	bl	800c9f8 <memp_free>
}
 80183a6:	bf00      	nop
 80183a8:	3708      	adds	r7, #8
 80183aa:	46bd      	mov	sp, r7
 80183ac:	bd80      	pop	{r7, pc}
 80183ae:	bf00      	nop
 80183b0:	2000d100 	.word	0x2000d100
 80183b4:	0801de98 	.word	0x0801de98
 80183b8:	0801df60 	.word	0x0801df60
 80183bc:	0801dee0 	.word	0x0801dee0

080183c0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80183c0:	b580      	push	{r7, lr}
 80183c2:	b08c      	sub	sp, #48	; 0x30
 80183c4:	af00      	add	r7, sp, #0
 80183c6:	60f8      	str	r0, [r7, #12]
 80183c8:	60b9      	str	r1, [r7, #8]
 80183ca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80183cc:	2300      	movs	r3, #0
 80183ce:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80183d0:	2301      	movs	r3, #1
 80183d2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80183d4:	68bb      	ldr	r3, [r7, #8]
 80183d6:	685b      	ldr	r3, [r3, #4]
 80183d8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80183da:	69fb      	ldr	r3, [r7, #28]
 80183dc:	885b      	ldrh	r3, [r3, #2]
 80183de:	b29b      	uxth	r3, r3
 80183e0:	4618      	mov	r0, r3
 80183e2:	f7f3 fdbb 	bl	800bf5c <lwip_htons>
 80183e6:	4603      	mov	r3, r0
 80183e8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80183ea:	69fb      	ldr	r3, [r7, #28]
 80183ec:	781b      	ldrb	r3, [r3, #0]
 80183ee:	f003 030f 	and.w	r3, r3, #15
 80183f2:	b2db      	uxtb	r3, r3
 80183f4:	009b      	lsls	r3, r3, #2
 80183f6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80183f8:	7e7b      	ldrb	r3, [r7, #25]
 80183fa:	b29b      	uxth	r3, r3
 80183fc:	8b7a      	ldrh	r2, [r7, #26]
 80183fe:	429a      	cmp	r2, r3
 8018400:	d202      	bcs.n	8018408 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018406:	e135      	b.n	8018674 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018408:	7e7b      	ldrb	r3, [r7, #25]
 801840a:	b29b      	uxth	r3, r3
 801840c:	8b7a      	ldrh	r2, [r7, #26]
 801840e:	1ad3      	subs	r3, r2, r3
 8018410:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018412:	69fb      	ldr	r3, [r7, #28]
 8018414:	88db      	ldrh	r3, [r3, #6]
 8018416:	b29b      	uxth	r3, r3
 8018418:	4618      	mov	r0, r3
 801841a:	f7f3 fd9f 	bl	800bf5c <lwip_htons>
 801841e:	4603      	mov	r3, r0
 8018420:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018424:	b29b      	uxth	r3, r3
 8018426:	00db      	lsls	r3, r3, #3
 8018428:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801842a:	68bb      	ldr	r3, [r7, #8]
 801842c:	685b      	ldr	r3, [r3, #4]
 801842e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018432:	2200      	movs	r2, #0
 8018434:	701a      	strb	r2, [r3, #0]
 8018436:	2200      	movs	r2, #0
 8018438:	705a      	strb	r2, [r3, #1]
 801843a:	2200      	movs	r2, #0
 801843c:	709a      	strb	r2, [r3, #2]
 801843e:	2200      	movs	r2, #0
 8018440:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018444:	8afa      	ldrh	r2, [r7, #22]
 8018446:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018448:	8afa      	ldrh	r2, [r7, #22]
 801844a:	8b7b      	ldrh	r3, [r7, #26]
 801844c:	4413      	add	r3, r2
 801844e:	b29a      	uxth	r2, r3
 8018450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018452:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018456:	88db      	ldrh	r3, [r3, #6]
 8018458:	b29b      	uxth	r3, r3
 801845a:	8afa      	ldrh	r2, [r7, #22]
 801845c:	429a      	cmp	r2, r3
 801845e:	d902      	bls.n	8018466 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018464:	e106      	b.n	8018674 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	685b      	ldr	r3, [r3, #4]
 801846a:	627b      	str	r3, [r7, #36]	; 0x24
 801846c:	e068      	b.n	8018540 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018470:	685b      	ldr	r3, [r3, #4]
 8018472:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018476:	889b      	ldrh	r3, [r3, #4]
 8018478:	b29a      	uxth	r2, r3
 801847a:	693b      	ldr	r3, [r7, #16]
 801847c:	889b      	ldrh	r3, [r3, #4]
 801847e:	b29b      	uxth	r3, r3
 8018480:	429a      	cmp	r2, r3
 8018482:	d235      	bcs.n	80184f0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018488:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801848c:	2b00      	cmp	r3, #0
 801848e:	d020      	beq.n	80184d2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018492:	889b      	ldrh	r3, [r3, #4]
 8018494:	b29a      	uxth	r2, r3
 8018496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018498:	88db      	ldrh	r3, [r3, #6]
 801849a:	b29b      	uxth	r3, r3
 801849c:	429a      	cmp	r2, r3
 801849e:	d307      	bcc.n	80184b0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80184a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184a2:	88db      	ldrh	r3, [r3, #6]
 80184a4:	b29a      	uxth	r2, r3
 80184a6:	693b      	ldr	r3, [r7, #16]
 80184a8:	889b      	ldrh	r3, [r3, #4]
 80184aa:	b29b      	uxth	r3, r3
 80184ac:	429a      	cmp	r2, r3
 80184ae:	d902      	bls.n	80184b6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80184b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80184b4:	e0de      	b.n	8018674 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80184b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184b8:	68ba      	ldr	r2, [r7, #8]
 80184ba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80184bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184be:	88db      	ldrh	r3, [r3, #6]
 80184c0:	b29a      	uxth	r2, r3
 80184c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184c4:	889b      	ldrh	r3, [r3, #4]
 80184c6:	b29b      	uxth	r3, r3
 80184c8:	429a      	cmp	r2, r3
 80184ca:	d03d      	beq.n	8018548 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80184cc:	2300      	movs	r3, #0
 80184ce:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80184d0:	e03a      	b.n	8018548 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80184d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184d4:	88db      	ldrh	r3, [r3, #6]
 80184d6:	b29a      	uxth	r2, r3
 80184d8:	693b      	ldr	r3, [r7, #16]
 80184da:	889b      	ldrh	r3, [r3, #4]
 80184dc:	b29b      	uxth	r3, r3
 80184de:	429a      	cmp	r2, r3
 80184e0:	d902      	bls.n	80184e8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80184e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80184e6:	e0c5      	b.n	8018674 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	68ba      	ldr	r2, [r7, #8]
 80184ec:	605a      	str	r2, [r3, #4]
      break;
 80184ee:	e02b      	b.n	8018548 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80184f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184f2:	889b      	ldrh	r3, [r3, #4]
 80184f4:	b29a      	uxth	r2, r3
 80184f6:	693b      	ldr	r3, [r7, #16]
 80184f8:	889b      	ldrh	r3, [r3, #4]
 80184fa:	b29b      	uxth	r3, r3
 80184fc:	429a      	cmp	r2, r3
 80184fe:	d102      	bne.n	8018506 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018504:	e0b6      	b.n	8018674 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018508:	889b      	ldrh	r3, [r3, #4]
 801850a:	b29a      	uxth	r2, r3
 801850c:	693b      	ldr	r3, [r7, #16]
 801850e:	88db      	ldrh	r3, [r3, #6]
 8018510:	b29b      	uxth	r3, r3
 8018512:	429a      	cmp	r2, r3
 8018514:	d202      	bcs.n	801851c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801851a:	e0ab      	b.n	8018674 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801851c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801851e:	2b00      	cmp	r3, #0
 8018520:	d009      	beq.n	8018536 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018524:	88db      	ldrh	r3, [r3, #6]
 8018526:	b29a      	uxth	r2, r3
 8018528:	693b      	ldr	r3, [r7, #16]
 801852a:	889b      	ldrh	r3, [r3, #4]
 801852c:	b29b      	uxth	r3, r3
 801852e:	429a      	cmp	r2, r3
 8018530:	d001      	beq.n	8018536 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018532:	2300      	movs	r3, #0
 8018534:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018536:	693b      	ldr	r3, [r7, #16]
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801853c:	693b      	ldr	r3, [r7, #16]
 801853e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018542:	2b00      	cmp	r3, #0
 8018544:	d193      	bne.n	801846e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018546:	e000      	b.n	801854a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018548:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801854c:	2b00      	cmp	r3, #0
 801854e:	d12d      	bne.n	80185ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018552:	2b00      	cmp	r3, #0
 8018554:	d01c      	beq.n	8018590 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018558:	88db      	ldrh	r3, [r3, #6]
 801855a:	b29a      	uxth	r2, r3
 801855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801855e:	889b      	ldrh	r3, [r3, #4]
 8018560:	b29b      	uxth	r3, r3
 8018562:	429a      	cmp	r2, r3
 8018564:	d906      	bls.n	8018574 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018566:	4b45      	ldr	r3, [pc, #276]	; (801867c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018568:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801856c:	4944      	ldr	r1, [pc, #272]	; (8018680 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801856e:	4845      	ldr	r0, [pc, #276]	; (8018684 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018570:	f001 f882 	bl	8019678 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018576:	68ba      	ldr	r2, [r7, #8]
 8018578:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801857a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801857c:	88db      	ldrh	r3, [r3, #6]
 801857e:	b29a      	uxth	r2, r3
 8018580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018582:	889b      	ldrh	r3, [r3, #4]
 8018584:	b29b      	uxth	r3, r3
 8018586:	429a      	cmp	r2, r3
 8018588:	d010      	beq.n	80185ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801858a:	2300      	movs	r3, #0
 801858c:	623b      	str	r3, [r7, #32]
 801858e:	e00d      	b.n	80185ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	685b      	ldr	r3, [r3, #4]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d006      	beq.n	80185a6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018598:	4b38      	ldr	r3, [pc, #224]	; (801867c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801859a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801859e:	493a      	ldr	r1, [pc, #232]	; (8018688 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80185a0:	4838      	ldr	r0, [pc, #224]	; (8018684 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80185a2:	f001 f869 	bl	8019678 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	68ba      	ldr	r2, [r7, #8]
 80185aa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d105      	bne.n	80185be <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	7f9b      	ldrb	r3, [r3, #30]
 80185b6:	f003 0301 	and.w	r3, r3, #1
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d059      	beq.n	8018672 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80185be:	6a3b      	ldr	r3, [r7, #32]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d04f      	beq.n	8018664 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	685b      	ldr	r3, [r3, #4]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d006      	beq.n	80185da <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	685b      	ldr	r3, [r3, #4]
 80185d0:	685b      	ldr	r3, [r3, #4]
 80185d2:	889b      	ldrh	r3, [r3, #4]
 80185d4:	b29b      	uxth	r3, r3
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d002      	beq.n	80185e0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80185da:	2300      	movs	r3, #0
 80185dc:	623b      	str	r3, [r7, #32]
 80185de:	e041      	b.n	8018664 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80185e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185e2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80185e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80185ea:	e012      	b.n	8018612 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80185ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ee:	685b      	ldr	r3, [r3, #4]
 80185f0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80185f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185f4:	88db      	ldrh	r3, [r3, #6]
 80185f6:	b29a      	uxth	r2, r3
 80185f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185fa:	889b      	ldrh	r3, [r3, #4]
 80185fc:	b29b      	uxth	r3, r3
 80185fe:	429a      	cmp	r2, r3
 8018600:	d002      	beq.n	8018608 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018602:	2300      	movs	r3, #0
 8018604:	623b      	str	r3, [r7, #32]
            break;
 8018606:	e007      	b.n	8018618 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801860a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801860c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018614:	2b00      	cmp	r3, #0
 8018616:	d1e9      	bne.n	80185ec <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018618:	6a3b      	ldr	r3, [r7, #32]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d022      	beq.n	8018664 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	685b      	ldr	r3, [r3, #4]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d106      	bne.n	8018634 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018626:	4b15      	ldr	r3, [pc, #84]	; (801867c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018628:	f240 12df 	movw	r2, #479	; 0x1df
 801862c:	4917      	ldr	r1, [pc, #92]	; (801868c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801862e:	4815      	ldr	r0, [pc, #84]	; (8018684 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018630:	f001 f822 	bl	8019678 <iprintf>
          LWIP_ASSERT("sanity check",
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	685b      	ldr	r3, [r3, #4]
 8018638:	685b      	ldr	r3, [r3, #4]
 801863a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801863c:	429a      	cmp	r2, r3
 801863e:	d106      	bne.n	801864e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018640:	4b0e      	ldr	r3, [pc, #56]	; (801867c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018642:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018646:	4911      	ldr	r1, [pc, #68]	; (801868c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018648:	480e      	ldr	r0, [pc, #56]	; (8018684 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801864a:	f001 f815 	bl	8019678 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801864e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d006      	beq.n	8018664 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018656:	4b09      	ldr	r3, [pc, #36]	; (801867c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018658:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801865c:	490c      	ldr	r1, [pc, #48]	; (8018690 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801865e:	4809      	ldr	r0, [pc, #36]	; (8018684 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018660:	f001 f80a 	bl	8019678 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018664:	6a3b      	ldr	r3, [r7, #32]
 8018666:	2b00      	cmp	r3, #0
 8018668:	bf14      	ite	ne
 801866a:	2301      	movne	r3, #1
 801866c:	2300      	moveq	r3, #0
 801866e:	b2db      	uxtb	r3, r3
 8018670:	e000      	b.n	8018674 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018672:	2300      	movs	r3, #0
}
 8018674:	4618      	mov	r0, r3
 8018676:	3730      	adds	r7, #48	; 0x30
 8018678:	46bd      	mov	sp, r7
 801867a:	bd80      	pop	{r7, pc}
 801867c:	0801de98 	.word	0x0801de98
 8018680:	0801df7c 	.word	0x0801df7c
 8018684:	0801dee0 	.word	0x0801dee0
 8018688:	0801df9c 	.word	0x0801df9c
 801868c:	0801dfd4 	.word	0x0801dfd4
 8018690:	0801dfe4 	.word	0x0801dfe4

08018694 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b08e      	sub	sp, #56	; 0x38
 8018698:	af00      	add	r7, sp, #0
 801869a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	685b      	ldr	r3, [r3, #4]
 80186a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80186a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186a4:	781b      	ldrb	r3, [r3, #0]
 80186a6:	f003 030f 	and.w	r3, r3, #15
 80186aa:	b2db      	uxtb	r3, r3
 80186ac:	009b      	lsls	r3, r3, #2
 80186ae:	b2db      	uxtb	r3, r3
 80186b0:	2b14      	cmp	r3, #20
 80186b2:	f040 8171 	bne.w	8018998 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80186b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186b8:	88db      	ldrh	r3, [r3, #6]
 80186ba:	b29b      	uxth	r3, r3
 80186bc:	4618      	mov	r0, r3
 80186be:	f7f3 fc4d 	bl	800bf5c <lwip_htons>
 80186c2:	4603      	mov	r3, r0
 80186c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80186c8:	b29b      	uxth	r3, r3
 80186ca:	00db      	lsls	r3, r3, #3
 80186cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80186ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186d0:	885b      	ldrh	r3, [r3, #2]
 80186d2:	b29b      	uxth	r3, r3
 80186d4:	4618      	mov	r0, r3
 80186d6:	f7f3 fc41 	bl	800bf5c <lwip_htons>
 80186da:	4603      	mov	r3, r0
 80186dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80186de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186e0:	781b      	ldrb	r3, [r3, #0]
 80186e2:	f003 030f 	and.w	r3, r3, #15
 80186e6:	b2db      	uxtb	r3, r3
 80186e8:	009b      	lsls	r3, r3, #2
 80186ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80186ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80186f2:	b29b      	uxth	r3, r3
 80186f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80186f6:	429a      	cmp	r2, r3
 80186f8:	f0c0 8150 	bcc.w	801899c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80186fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018700:	b29b      	uxth	r3, r3
 8018702:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018704:	1ad3      	subs	r3, r2, r3
 8018706:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018708:	6878      	ldr	r0, [r7, #4]
 801870a:	f7f5 f8e5 	bl	800d8d8 <pbuf_clen>
 801870e:	4603      	mov	r3, r0
 8018710:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018712:	4b8c      	ldr	r3, [pc, #560]	; (8018944 <ip4_reass+0x2b0>)
 8018714:	881b      	ldrh	r3, [r3, #0]
 8018716:	461a      	mov	r2, r3
 8018718:	8c3b      	ldrh	r3, [r7, #32]
 801871a:	4413      	add	r3, r2
 801871c:	2b0a      	cmp	r3, #10
 801871e:	dd10      	ble.n	8018742 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018720:	8c3b      	ldrh	r3, [r7, #32]
 8018722:	4619      	mov	r1, r3
 8018724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018726:	f7ff fd81 	bl	801822c <ip_reass_remove_oldest_datagram>
 801872a:	4603      	mov	r3, r0
 801872c:	2b00      	cmp	r3, #0
 801872e:	f000 8137 	beq.w	80189a0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018732:	4b84      	ldr	r3, [pc, #528]	; (8018944 <ip4_reass+0x2b0>)
 8018734:	881b      	ldrh	r3, [r3, #0]
 8018736:	461a      	mov	r2, r3
 8018738:	8c3b      	ldrh	r3, [r7, #32]
 801873a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801873c:	2b0a      	cmp	r3, #10
 801873e:	f300 812f 	bgt.w	80189a0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018742:	4b81      	ldr	r3, [pc, #516]	; (8018948 <ip4_reass+0x2b4>)
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	633b      	str	r3, [r7, #48]	; 0x30
 8018748:	e015      	b.n	8018776 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801874c:	695a      	ldr	r2, [r3, #20]
 801874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018750:	68db      	ldr	r3, [r3, #12]
 8018752:	429a      	cmp	r2, r3
 8018754:	d10c      	bne.n	8018770 <ip4_reass+0xdc>
 8018756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018758:	699a      	ldr	r2, [r3, #24]
 801875a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801875c:	691b      	ldr	r3, [r3, #16]
 801875e:	429a      	cmp	r2, r3
 8018760:	d106      	bne.n	8018770 <ip4_reass+0xdc>
 8018762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018764:	899a      	ldrh	r2, [r3, #12]
 8018766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018768:	889b      	ldrh	r3, [r3, #4]
 801876a:	b29b      	uxth	r3, r3
 801876c:	429a      	cmp	r2, r3
 801876e:	d006      	beq.n	801877e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	633b      	str	r3, [r7, #48]	; 0x30
 8018776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018778:	2b00      	cmp	r3, #0
 801877a:	d1e6      	bne.n	801874a <ip4_reass+0xb6>
 801877c:	e000      	b.n	8018780 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801877e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018782:	2b00      	cmp	r3, #0
 8018784:	d109      	bne.n	801879a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018786:	8c3b      	ldrh	r3, [r7, #32]
 8018788:	4619      	mov	r1, r3
 801878a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801878c:	f7ff fdb0 	bl	80182f0 <ip_reass_enqueue_new_datagram>
 8018790:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018794:	2b00      	cmp	r3, #0
 8018796:	d11c      	bne.n	80187d2 <ip4_reass+0x13e>
      goto nullreturn;
 8018798:	e105      	b.n	80189a6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801879a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801879c:	88db      	ldrh	r3, [r3, #6]
 801879e:	b29b      	uxth	r3, r3
 80187a0:	4618      	mov	r0, r3
 80187a2:	f7f3 fbdb 	bl	800bf5c <lwip_htons>
 80187a6:	4603      	mov	r3, r0
 80187a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d110      	bne.n	80187d2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80187b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187b2:	89db      	ldrh	r3, [r3, #14]
 80187b4:	4618      	mov	r0, r3
 80187b6:	f7f3 fbd1 	bl	800bf5c <lwip_htons>
 80187ba:	4603      	mov	r3, r0
 80187bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d006      	beq.n	80187d2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80187c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187c6:	3308      	adds	r3, #8
 80187c8:	2214      	movs	r2, #20
 80187ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80187cc:	4618      	mov	r0, r3
 80187ce:	f000 fe5d 	bl	801948c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80187d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187d4:	88db      	ldrh	r3, [r3, #6]
 80187d6:	b29b      	uxth	r3, r3
 80187d8:	f003 0320 	and.w	r3, r3, #32
 80187dc:	2b00      	cmp	r3, #0
 80187de:	bf0c      	ite	eq
 80187e0:	2301      	moveq	r3, #1
 80187e2:	2300      	movne	r3, #0
 80187e4:	b2db      	uxtb	r3, r3
 80187e6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80187e8:	69fb      	ldr	r3, [r7, #28]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d00e      	beq.n	801880c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80187ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80187f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80187f2:	4413      	add	r3, r2
 80187f4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80187f6:	8b7a      	ldrh	r2, [r7, #26]
 80187f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80187fa:	429a      	cmp	r2, r3
 80187fc:	f0c0 80a0 	bcc.w	8018940 <ip4_reass+0x2ac>
 8018800:	8b7b      	ldrh	r3, [r7, #26]
 8018802:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018806:	4293      	cmp	r3, r2
 8018808:	f200 809a 	bhi.w	8018940 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801880c:	69fa      	ldr	r2, [r7, #28]
 801880e:	6879      	ldr	r1, [r7, #4]
 8018810:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018812:	f7ff fdd5 	bl	80183c0 <ip_reass_chain_frag_into_datagram_and_validate>
 8018816:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018818:	697b      	ldr	r3, [r7, #20]
 801881a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801881e:	f000 809b 	beq.w	8018958 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018822:	4b48      	ldr	r3, [pc, #288]	; (8018944 <ip4_reass+0x2b0>)
 8018824:	881a      	ldrh	r2, [r3, #0]
 8018826:	8c3b      	ldrh	r3, [r7, #32]
 8018828:	4413      	add	r3, r2
 801882a:	b29a      	uxth	r2, r3
 801882c:	4b45      	ldr	r3, [pc, #276]	; (8018944 <ip4_reass+0x2b0>)
 801882e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018830:	69fb      	ldr	r3, [r7, #28]
 8018832:	2b00      	cmp	r3, #0
 8018834:	d00d      	beq.n	8018852 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018836:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801883a:	4413      	add	r3, r2
 801883c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018840:	8a7a      	ldrh	r2, [r7, #18]
 8018842:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018846:	7f9b      	ldrb	r3, [r3, #30]
 8018848:	f043 0301 	orr.w	r3, r3, #1
 801884c:	b2da      	uxtb	r2, r3
 801884e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018850:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018852:	697b      	ldr	r3, [r7, #20]
 8018854:	2b01      	cmp	r3, #1
 8018856:	d171      	bne.n	801893c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801885a:	8b9b      	ldrh	r3, [r3, #28]
 801885c:	3314      	adds	r3, #20
 801885e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018862:	685b      	ldr	r3, [r3, #4]
 8018864:	685b      	ldr	r3, [r3, #4]
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801886c:	685b      	ldr	r3, [r3, #4]
 801886e:	685b      	ldr	r3, [r3, #4]
 8018870:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018874:	3308      	adds	r3, #8
 8018876:	2214      	movs	r2, #20
 8018878:	4619      	mov	r1, r3
 801887a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801887c:	f000 fe06 	bl	801948c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018880:	8a3b      	ldrh	r3, [r7, #16]
 8018882:	4618      	mov	r0, r3
 8018884:	f7f3 fb6a 	bl	800bf5c <lwip_htons>
 8018888:	4603      	mov	r3, r0
 801888a:	461a      	mov	r2, r3
 801888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801888e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018892:	2200      	movs	r2, #0
 8018894:	719a      	strb	r2, [r3, #6]
 8018896:	2200      	movs	r2, #0
 8018898:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801889c:	2200      	movs	r2, #0
 801889e:	729a      	strb	r2, [r3, #10]
 80188a0:	2200      	movs	r2, #0
 80188a2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80188a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188a6:	685b      	ldr	r3, [r3, #4]
 80188a8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80188aa:	e00d      	b.n	80188c8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80188ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188ae:	685b      	ldr	r3, [r3, #4]
 80188b0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80188b2:	2114      	movs	r1, #20
 80188b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80188b6:	f7f4 fec9 	bl	800d64c <pbuf_remove_header>
      pbuf_cat(p, r);
 80188ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80188bc:	6878      	ldr	r0, [r7, #4]
 80188be:	f7f5 f84b 	bl	800d958 <pbuf_cat>
      r = iprh->next_pbuf;
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80188c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d1ee      	bne.n	80188ac <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80188ce:	4b1e      	ldr	r3, [pc, #120]	; (8018948 <ip4_reass+0x2b4>)
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188d4:	429a      	cmp	r2, r3
 80188d6:	d102      	bne.n	80188de <ip4_reass+0x24a>
      ipr_prev = NULL;
 80188d8:	2300      	movs	r3, #0
 80188da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80188dc:	e010      	b.n	8018900 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80188de:	4b1a      	ldr	r3, [pc, #104]	; (8018948 <ip4_reass+0x2b4>)
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80188e4:	e007      	b.n	80188f6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80188e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188ec:	429a      	cmp	r2, r3
 80188ee:	d006      	beq.n	80188fe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80188f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80188f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d1f4      	bne.n	80188e6 <ip4_reass+0x252>
 80188fc:	e000      	b.n	8018900 <ip4_reass+0x26c>
          break;
 80188fe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018900:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018902:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018904:	f7ff fd2e 	bl	8018364 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018908:	6878      	ldr	r0, [r7, #4]
 801890a:	f7f4 ffe5 	bl	800d8d8 <pbuf_clen>
 801890e:	4603      	mov	r3, r0
 8018910:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018912:	4b0c      	ldr	r3, [pc, #48]	; (8018944 <ip4_reass+0x2b0>)
 8018914:	881b      	ldrh	r3, [r3, #0]
 8018916:	8c3a      	ldrh	r2, [r7, #32]
 8018918:	429a      	cmp	r2, r3
 801891a:	d906      	bls.n	801892a <ip4_reass+0x296>
 801891c:	4b0b      	ldr	r3, [pc, #44]	; (801894c <ip4_reass+0x2b8>)
 801891e:	f240 229b 	movw	r2, #667	; 0x29b
 8018922:	490b      	ldr	r1, [pc, #44]	; (8018950 <ip4_reass+0x2bc>)
 8018924:	480b      	ldr	r0, [pc, #44]	; (8018954 <ip4_reass+0x2c0>)
 8018926:	f000 fea7 	bl	8019678 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801892a:	4b06      	ldr	r3, [pc, #24]	; (8018944 <ip4_reass+0x2b0>)
 801892c:	881a      	ldrh	r2, [r3, #0]
 801892e:	8c3b      	ldrh	r3, [r7, #32]
 8018930:	1ad3      	subs	r3, r2, r3
 8018932:	b29a      	uxth	r2, r3
 8018934:	4b03      	ldr	r3, [pc, #12]	; (8018944 <ip4_reass+0x2b0>)
 8018936:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	e038      	b.n	80189ae <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801893c:	2300      	movs	r3, #0
 801893e:	e036      	b.n	80189ae <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018940:	bf00      	nop
 8018942:	e00a      	b.n	801895a <ip4_reass+0x2c6>
 8018944:	2000d104 	.word	0x2000d104
 8018948:	2000d100 	.word	0x2000d100
 801894c:	0801de98 	.word	0x0801de98
 8018950:	0801e008 	.word	0x0801e008
 8018954:	0801dee0 	.word	0x0801dee0
    goto nullreturn_ipr;
 8018958:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801895a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801895c:	2b00      	cmp	r3, #0
 801895e:	d106      	bne.n	801896e <ip4_reass+0x2da>
 8018960:	4b15      	ldr	r3, [pc, #84]	; (80189b8 <ip4_reass+0x324>)
 8018962:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018966:	4915      	ldr	r1, [pc, #84]	; (80189bc <ip4_reass+0x328>)
 8018968:	4815      	ldr	r0, [pc, #84]	; (80189c0 <ip4_reass+0x32c>)
 801896a:	f000 fe85 	bl	8019678 <iprintf>
  if (ipr->p == NULL) {
 801896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018970:	685b      	ldr	r3, [r3, #4]
 8018972:	2b00      	cmp	r3, #0
 8018974:	d116      	bne.n	80189a4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018976:	4b13      	ldr	r3, [pc, #76]	; (80189c4 <ip4_reass+0x330>)
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801897c:	429a      	cmp	r2, r3
 801897e:	d006      	beq.n	801898e <ip4_reass+0x2fa>
 8018980:	4b0d      	ldr	r3, [pc, #52]	; (80189b8 <ip4_reass+0x324>)
 8018982:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018986:	4910      	ldr	r1, [pc, #64]	; (80189c8 <ip4_reass+0x334>)
 8018988:	480d      	ldr	r0, [pc, #52]	; (80189c0 <ip4_reass+0x32c>)
 801898a:	f000 fe75 	bl	8019678 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801898e:	2100      	movs	r1, #0
 8018990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018992:	f7ff fce7 	bl	8018364 <ip_reass_dequeue_datagram>
 8018996:	e006      	b.n	80189a6 <ip4_reass+0x312>
    goto nullreturn;
 8018998:	bf00      	nop
 801899a:	e004      	b.n	80189a6 <ip4_reass+0x312>
    goto nullreturn;
 801899c:	bf00      	nop
 801899e:	e002      	b.n	80189a6 <ip4_reass+0x312>
      goto nullreturn;
 80189a0:	bf00      	nop
 80189a2:	e000      	b.n	80189a6 <ip4_reass+0x312>
  }

nullreturn:
 80189a4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80189a6:	6878      	ldr	r0, [r7, #4]
 80189a8:	f7f4 ff08 	bl	800d7bc <pbuf_free>
  return NULL;
 80189ac:	2300      	movs	r3, #0
}
 80189ae:	4618      	mov	r0, r3
 80189b0:	3738      	adds	r7, #56	; 0x38
 80189b2:	46bd      	mov	sp, r7
 80189b4:	bd80      	pop	{r7, pc}
 80189b6:	bf00      	nop
 80189b8:	0801de98 	.word	0x0801de98
 80189bc:	0801e024 	.word	0x0801e024
 80189c0:	0801dee0 	.word	0x0801dee0
 80189c4:	2000d100 	.word	0x2000d100
 80189c8:	0801e030 	.word	0x0801e030

080189cc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80189d0:	2005      	movs	r0, #5
 80189d2:	f7f3 ff9b 	bl	800c90c <memp_malloc>
 80189d6:	4603      	mov	r3, r0
}
 80189d8:	4618      	mov	r0, r3
 80189da:	bd80      	pop	{r7, pc}

080189dc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b082      	sub	sp, #8
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d106      	bne.n	80189f8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80189ea:	4b07      	ldr	r3, [pc, #28]	; (8018a08 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80189ec:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80189f0:	4906      	ldr	r1, [pc, #24]	; (8018a0c <ip_frag_free_pbuf_custom_ref+0x30>)
 80189f2:	4807      	ldr	r0, [pc, #28]	; (8018a10 <ip_frag_free_pbuf_custom_ref+0x34>)
 80189f4:	f000 fe40 	bl	8019678 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80189f8:	6879      	ldr	r1, [r7, #4]
 80189fa:	2005      	movs	r0, #5
 80189fc:	f7f3 fffc 	bl	800c9f8 <memp_free>
}
 8018a00:	bf00      	nop
 8018a02:	3708      	adds	r7, #8
 8018a04:	46bd      	mov	sp, r7
 8018a06:	bd80      	pop	{r7, pc}
 8018a08:	0801de98 	.word	0x0801de98
 8018a0c:	0801e050 	.word	0x0801e050
 8018a10:	0801dee0 	.word	0x0801dee0

08018a14 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018a14:	b580      	push	{r7, lr}
 8018a16:	b084      	sub	sp, #16
 8018a18:	af00      	add	r7, sp, #0
 8018a1a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d106      	bne.n	8018a34 <ipfrag_free_pbuf_custom+0x20>
 8018a26:	4b11      	ldr	r3, [pc, #68]	; (8018a6c <ipfrag_free_pbuf_custom+0x58>)
 8018a28:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018a2c:	4910      	ldr	r1, [pc, #64]	; (8018a70 <ipfrag_free_pbuf_custom+0x5c>)
 8018a2e:	4811      	ldr	r0, [pc, #68]	; (8018a74 <ipfrag_free_pbuf_custom+0x60>)
 8018a30:	f000 fe22 	bl	8019678 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018a34:	68fa      	ldr	r2, [r7, #12]
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	429a      	cmp	r2, r3
 8018a3a:	d006      	beq.n	8018a4a <ipfrag_free_pbuf_custom+0x36>
 8018a3c:	4b0b      	ldr	r3, [pc, #44]	; (8018a6c <ipfrag_free_pbuf_custom+0x58>)
 8018a3e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018a42:	490d      	ldr	r1, [pc, #52]	; (8018a78 <ipfrag_free_pbuf_custom+0x64>)
 8018a44:	480b      	ldr	r0, [pc, #44]	; (8018a74 <ipfrag_free_pbuf_custom+0x60>)
 8018a46:	f000 fe17 	bl	8019678 <iprintf>
  if (pcr->original != NULL) {
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	695b      	ldr	r3, [r3, #20]
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d004      	beq.n	8018a5c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	695b      	ldr	r3, [r3, #20]
 8018a56:	4618      	mov	r0, r3
 8018a58:	f7f4 feb0 	bl	800d7bc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018a5c:	68f8      	ldr	r0, [r7, #12]
 8018a5e:	f7ff ffbd 	bl	80189dc <ip_frag_free_pbuf_custom_ref>
}
 8018a62:	bf00      	nop
 8018a64:	3710      	adds	r7, #16
 8018a66:	46bd      	mov	sp, r7
 8018a68:	bd80      	pop	{r7, pc}
 8018a6a:	bf00      	nop
 8018a6c:	0801de98 	.word	0x0801de98
 8018a70:	0801e05c 	.word	0x0801e05c
 8018a74:	0801dee0 	.word	0x0801dee0
 8018a78:	0801e068 	.word	0x0801e068

08018a7c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018a7c:	b580      	push	{r7, lr}
 8018a7e:	b094      	sub	sp, #80	; 0x50
 8018a80:	af02      	add	r7, sp, #8
 8018a82:	60f8      	str	r0, [r7, #12]
 8018a84:	60b9      	str	r1, [r7, #8]
 8018a86:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018a88:	2300      	movs	r3, #0
 8018a8a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018a8e:	68bb      	ldr	r3, [r7, #8]
 8018a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018a92:	3b14      	subs	r3, #20
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	da00      	bge.n	8018a9a <ip4_frag+0x1e>
 8018a98:	3307      	adds	r3, #7
 8018a9a:	10db      	asrs	r3, r3, #3
 8018a9c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018a9e:	2314      	movs	r3, #20
 8018aa0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018aa2:	68fb      	ldr	r3, [r7, #12]
 8018aa4:	685b      	ldr	r3, [r3, #4]
 8018aa6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018aaa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aae:	781b      	ldrb	r3, [r3, #0]
 8018ab0:	f003 030f 	and.w	r3, r3, #15
 8018ab4:	b2db      	uxtb	r3, r3
 8018ab6:	009b      	lsls	r3, r3, #2
 8018ab8:	b2db      	uxtb	r3, r3
 8018aba:	2b14      	cmp	r3, #20
 8018abc:	d002      	beq.n	8018ac4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018abe:	f06f 0305 	mvn.w	r3, #5
 8018ac2:	e110      	b.n	8018ce6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	895b      	ldrh	r3, [r3, #10]
 8018ac8:	2b13      	cmp	r3, #19
 8018aca:	d809      	bhi.n	8018ae0 <ip4_frag+0x64>
 8018acc:	4b88      	ldr	r3, [pc, #544]	; (8018cf0 <ip4_frag+0x274>)
 8018ace:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018ad2:	4988      	ldr	r1, [pc, #544]	; (8018cf4 <ip4_frag+0x278>)
 8018ad4:	4888      	ldr	r0, [pc, #544]	; (8018cf8 <ip4_frag+0x27c>)
 8018ad6:	f000 fdcf 	bl	8019678 <iprintf>
 8018ada:	f06f 0305 	mvn.w	r3, #5
 8018ade:	e102      	b.n	8018ce6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ae2:	88db      	ldrh	r3, [r3, #6]
 8018ae4:	b29b      	uxth	r3, r3
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	f7f3 fa38 	bl	800bf5c <lwip_htons>
 8018aec:	4603      	mov	r3, r0
 8018aee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018af0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018af2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018af6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018afa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018b00:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018b02:	68fb      	ldr	r3, [r7, #12]
 8018b04:	891b      	ldrh	r3, [r3, #8]
 8018b06:	3b14      	subs	r3, #20
 8018b08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018b0c:	e0e1      	b.n	8018cd2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018b0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018b10:	00db      	lsls	r3, r3, #3
 8018b12:	b29b      	uxth	r3, r3
 8018b14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018b18:	4293      	cmp	r3, r2
 8018b1a:	bf28      	it	cs
 8018b1c:	4613      	movcs	r3, r2
 8018b1e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018b20:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018b24:	2114      	movs	r1, #20
 8018b26:	200e      	movs	r0, #14
 8018b28:	f7f4 fb32 	bl	800d190 <pbuf_alloc>
 8018b2c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	f000 80d5 	beq.w	8018ce0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b38:	895b      	ldrh	r3, [r3, #10]
 8018b3a:	2b13      	cmp	r3, #19
 8018b3c:	d806      	bhi.n	8018b4c <ip4_frag+0xd0>
 8018b3e:	4b6c      	ldr	r3, [pc, #432]	; (8018cf0 <ip4_frag+0x274>)
 8018b40:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018b44:	496d      	ldr	r1, [pc, #436]	; (8018cfc <ip4_frag+0x280>)
 8018b46:	486c      	ldr	r0, [pc, #432]	; (8018cf8 <ip4_frag+0x27c>)
 8018b48:	f000 fd96 	bl	8019678 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b4e:	685b      	ldr	r3, [r3, #4]
 8018b50:	2214      	movs	r2, #20
 8018b52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018b54:	4618      	mov	r0, r3
 8018b56:	f000 fc99 	bl	801948c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b5c:	685b      	ldr	r3, [r3, #4]
 8018b5e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018b60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018b62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018b66:	e064      	b.n	8018c32 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	895a      	ldrh	r2, [r3, #10]
 8018b6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018b6e:	1ad3      	subs	r3, r2, r3
 8018b70:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	895b      	ldrh	r3, [r3, #10]
 8018b76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018b78:	429a      	cmp	r2, r3
 8018b7a:	d906      	bls.n	8018b8a <ip4_frag+0x10e>
 8018b7c:	4b5c      	ldr	r3, [pc, #368]	; (8018cf0 <ip4_frag+0x274>)
 8018b7e:	f240 322d 	movw	r2, #813	; 0x32d
 8018b82:	495f      	ldr	r1, [pc, #380]	; (8018d00 <ip4_frag+0x284>)
 8018b84:	485c      	ldr	r0, [pc, #368]	; (8018cf8 <ip4_frag+0x27c>)
 8018b86:	f000 fd77 	bl	8019678 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018b8a:	8bfa      	ldrh	r2, [r7, #30]
 8018b8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018b90:	4293      	cmp	r3, r2
 8018b92:	bf28      	it	cs
 8018b94:	4613      	movcs	r3, r2
 8018b96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018b9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d105      	bne.n	8018bae <ip4_frag+0x132>
        poff = 0;
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	60fb      	str	r3, [r7, #12]
        continue;
 8018bac:	e041      	b.n	8018c32 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018bae:	f7ff ff0d 	bl	80189cc <ip_frag_alloc_pbuf_custom_ref>
 8018bb2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018bb4:	69bb      	ldr	r3, [r7, #24]
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d103      	bne.n	8018bc2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018bba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018bbc:	f7f4 fdfe 	bl	800d7bc <pbuf_free>
        goto memerr;
 8018bc0:	e08f      	b.n	8018ce2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018bc2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018bc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018bca:	4413      	add	r3, r2
 8018bcc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018bd0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018bd4:	9201      	str	r2, [sp, #4]
 8018bd6:	9300      	str	r3, [sp, #0]
 8018bd8:	4603      	mov	r3, r0
 8018bda:	2241      	movs	r2, #65	; 0x41
 8018bdc:	2000      	movs	r0, #0
 8018bde:	f7f4 fc01 	bl	800d3e4 <pbuf_alloced_custom>
 8018be2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018be4:	697b      	ldr	r3, [r7, #20]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d106      	bne.n	8018bf8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018bea:	69b8      	ldr	r0, [r7, #24]
 8018bec:	f7ff fef6 	bl	80189dc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018bf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018bf2:	f7f4 fde3 	bl	800d7bc <pbuf_free>
        goto memerr;
 8018bf6:	e074      	b.n	8018ce2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018bf8:	68f8      	ldr	r0, [r7, #12]
 8018bfa:	f7f4 fe85 	bl	800d908 <pbuf_ref>
      pcr->original = p;
 8018bfe:	69bb      	ldr	r3, [r7, #24]
 8018c00:	68fa      	ldr	r2, [r7, #12]
 8018c02:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018c04:	69bb      	ldr	r3, [r7, #24]
 8018c06:	4a3f      	ldr	r2, [pc, #252]	; (8018d04 <ip4_frag+0x288>)
 8018c08:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018c0a:	6979      	ldr	r1, [r7, #20]
 8018c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018c0e:	f7f4 fea3 	bl	800d958 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018c12:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018c16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018c1a:	1ad3      	subs	r3, r2, r3
 8018c1c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018c20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d004      	beq.n	8018c32 <ip4_frag+0x1b6>
        poff = 0;
 8018c28:	2300      	movs	r3, #0
 8018c2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018c32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d196      	bne.n	8018b68 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018c3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018c3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018c40:	4413      	add	r3, r2
 8018c42:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018c44:	68bb      	ldr	r3, [r7, #8]
 8018c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018c48:	f1a3 0213 	sub.w	r2, r3, #19
 8018c4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018c50:	429a      	cmp	r2, r3
 8018c52:	bfcc      	ite	gt
 8018c54:	2301      	movgt	r3, #1
 8018c56:	2300      	movle	r3, #0
 8018c58:	b2db      	uxtb	r3, r3
 8018c5a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018c5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018c64:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018c66:	6a3b      	ldr	r3, [r7, #32]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d002      	beq.n	8018c72 <ip4_frag+0x1f6>
 8018c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d003      	beq.n	8018c7a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018c72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018c74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018c78:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018c7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	f7f3 f96d 	bl	800bf5c <lwip_htons>
 8018c82:	4603      	mov	r3, r0
 8018c84:	461a      	mov	r2, r3
 8018c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c88:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018c8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018c8c:	3314      	adds	r3, #20
 8018c8e:	b29b      	uxth	r3, r3
 8018c90:	4618      	mov	r0, r3
 8018c92:	f7f3 f963 	bl	800bf5c <lwip_htons>
 8018c96:	4603      	mov	r3, r0
 8018c98:	461a      	mov	r2, r3
 8018c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c9c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ca0:	2200      	movs	r2, #0
 8018ca2:	729a      	strb	r2, [r3, #10]
 8018ca4:	2200      	movs	r2, #0
 8018ca6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018ca8:	68bb      	ldr	r3, [r7, #8]
 8018caa:	695b      	ldr	r3, [r3, #20]
 8018cac:	687a      	ldr	r2, [r7, #4]
 8018cae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018cb0:	68b8      	ldr	r0, [r7, #8]
 8018cb2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018cb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018cb6:	f7f4 fd81 	bl	800d7bc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018cba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018cbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018cc0:	1ad3      	subs	r3, r2, r3
 8018cc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018cc6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018cca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018ccc:	4413      	add	r3, r2
 8018cce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018cd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	f47f af19 	bne.w	8018b0e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018cdc:	2300      	movs	r3, #0
 8018cde:	e002      	b.n	8018ce6 <ip4_frag+0x26a>
      goto memerr;
 8018ce0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018ce6:	4618      	mov	r0, r3
 8018ce8:	3748      	adds	r7, #72	; 0x48
 8018cea:	46bd      	mov	sp, r7
 8018cec:	bd80      	pop	{r7, pc}
 8018cee:	bf00      	nop
 8018cf0:	0801de98 	.word	0x0801de98
 8018cf4:	0801e074 	.word	0x0801e074
 8018cf8:	0801dee0 	.word	0x0801dee0
 8018cfc:	0801e090 	.word	0x0801e090
 8018d00:	0801e0b0 	.word	0x0801e0b0
 8018d04:	08018a15 	.word	0x08018a15

08018d08 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	b086      	sub	sp, #24
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	6078      	str	r0, [r7, #4]
 8018d10:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018d12:	230e      	movs	r3, #14
 8018d14:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	895b      	ldrh	r3, [r3, #10]
 8018d1a:	2b0e      	cmp	r3, #14
 8018d1c:	d96e      	bls.n	8018dfc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	7bdb      	ldrb	r3, [r3, #15]
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d106      	bne.n	8018d34 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018d26:	683b      	ldr	r3, [r7, #0]
 8018d28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018d2c:	3301      	adds	r3, #1
 8018d2e:	b2da      	uxtb	r2, r3
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	685b      	ldr	r3, [r3, #4]
 8018d38:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018d3a:	693b      	ldr	r3, [r7, #16]
 8018d3c:	7b1a      	ldrb	r2, [r3, #12]
 8018d3e:	7b5b      	ldrb	r3, [r3, #13]
 8018d40:	021b      	lsls	r3, r3, #8
 8018d42:	4313      	orrs	r3, r2
 8018d44:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018d46:	693b      	ldr	r3, [r7, #16]
 8018d48:	781b      	ldrb	r3, [r3, #0]
 8018d4a:	f003 0301 	and.w	r3, r3, #1
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d023      	beq.n	8018d9a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018d52:	693b      	ldr	r3, [r7, #16]
 8018d54:	781b      	ldrb	r3, [r3, #0]
 8018d56:	2b01      	cmp	r3, #1
 8018d58:	d10f      	bne.n	8018d7a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018d5a:	693b      	ldr	r3, [r7, #16]
 8018d5c:	785b      	ldrb	r3, [r3, #1]
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d11b      	bne.n	8018d9a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018d62:	693b      	ldr	r3, [r7, #16]
 8018d64:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018d66:	2b5e      	cmp	r3, #94	; 0x5e
 8018d68:	d117      	bne.n	8018d9a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	7b5b      	ldrb	r3, [r3, #13]
 8018d6e:	f043 0310 	orr.w	r3, r3, #16
 8018d72:	b2da      	uxtb	r2, r3
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	735a      	strb	r2, [r3, #13]
 8018d78:	e00f      	b.n	8018d9a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018d7a:	693b      	ldr	r3, [r7, #16]
 8018d7c:	2206      	movs	r2, #6
 8018d7e:	4928      	ldr	r1, [pc, #160]	; (8018e20 <ethernet_input+0x118>)
 8018d80:	4618      	mov	r0, r3
 8018d82:	f000 fb73 	bl	801946c <memcmp>
 8018d86:	4603      	mov	r3, r0
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d106      	bne.n	8018d9a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	7b5b      	ldrb	r3, [r3, #13]
 8018d90:	f043 0308 	orr.w	r3, r3, #8
 8018d94:	b2da      	uxtb	r2, r3
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018d9a:	89fb      	ldrh	r3, [r7, #14]
 8018d9c:	2b08      	cmp	r3, #8
 8018d9e:	d003      	beq.n	8018da8 <ethernet_input+0xa0>
 8018da0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018da4:	d014      	beq.n	8018dd0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018da6:	e032      	b.n	8018e0e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018da8:	683b      	ldr	r3, [r7, #0]
 8018daa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018dae:	f003 0308 	and.w	r3, r3, #8
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d024      	beq.n	8018e00 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018db6:	8afb      	ldrh	r3, [r7, #22]
 8018db8:	4619      	mov	r1, r3
 8018dba:	6878      	ldr	r0, [r7, #4]
 8018dbc:	f7f4 fc46 	bl	800d64c <pbuf_remove_header>
 8018dc0:	4603      	mov	r3, r0
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d11e      	bne.n	8018e04 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018dc6:	6839      	ldr	r1, [r7, #0]
 8018dc8:	6878      	ldr	r0, [r7, #4]
 8018dca:	f7fe fe73 	bl	8017ab4 <ip4_input>
      break;
 8018dce:	e013      	b.n	8018df8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018dd0:	683b      	ldr	r3, [r7, #0]
 8018dd2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018dd6:	f003 0308 	and.w	r3, r3, #8
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d014      	beq.n	8018e08 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018dde:	8afb      	ldrh	r3, [r7, #22]
 8018de0:	4619      	mov	r1, r3
 8018de2:	6878      	ldr	r0, [r7, #4]
 8018de4:	f7f4 fc32 	bl	800d64c <pbuf_remove_header>
 8018de8:	4603      	mov	r3, r0
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d10e      	bne.n	8018e0c <ethernet_input+0x104>
        etharp_input(p, netif);
 8018dee:	6839      	ldr	r1, [r7, #0]
 8018df0:	6878      	ldr	r0, [r7, #4]
 8018df2:	f7fe f80f 	bl	8016e14 <etharp_input>
      break;
 8018df6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018df8:	2300      	movs	r3, #0
 8018dfa:	e00c      	b.n	8018e16 <ethernet_input+0x10e>
    goto free_and_return;
 8018dfc:	bf00      	nop
 8018dfe:	e006      	b.n	8018e0e <ethernet_input+0x106>
        goto free_and_return;
 8018e00:	bf00      	nop
 8018e02:	e004      	b.n	8018e0e <ethernet_input+0x106>
        goto free_and_return;
 8018e04:	bf00      	nop
 8018e06:	e002      	b.n	8018e0e <ethernet_input+0x106>
        goto free_and_return;
 8018e08:	bf00      	nop
 8018e0a:	e000      	b.n	8018e0e <ethernet_input+0x106>
        goto free_and_return;
 8018e0c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018e0e:	6878      	ldr	r0, [r7, #4]
 8018e10:	f7f4 fcd4 	bl	800d7bc <pbuf_free>
  return ERR_OK;
 8018e14:	2300      	movs	r3, #0
}
 8018e16:	4618      	mov	r0, r3
 8018e18:	3718      	adds	r7, #24
 8018e1a:	46bd      	mov	sp, r7
 8018e1c:	bd80      	pop	{r7, pc}
 8018e1e:	bf00      	nop
 8018e20:	0801e30c 	.word	0x0801e30c

08018e24 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b086      	sub	sp, #24
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	60f8      	str	r0, [r7, #12]
 8018e2c:	60b9      	str	r1, [r7, #8]
 8018e2e:	607a      	str	r2, [r7, #4]
 8018e30:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018e32:	8c3b      	ldrh	r3, [r7, #32]
 8018e34:	4618      	mov	r0, r3
 8018e36:	f7f3 f891 	bl	800bf5c <lwip_htons>
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018e3e:	210e      	movs	r1, #14
 8018e40:	68b8      	ldr	r0, [r7, #8]
 8018e42:	f7f4 fbf3 	bl	800d62c <pbuf_add_header>
 8018e46:	4603      	mov	r3, r0
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d125      	bne.n	8018e98 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018e4c:	68bb      	ldr	r3, [r7, #8]
 8018e4e:	685b      	ldr	r3, [r3, #4]
 8018e50:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018e52:	693b      	ldr	r3, [r7, #16]
 8018e54:	8afa      	ldrh	r2, [r7, #22]
 8018e56:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018e58:	693b      	ldr	r3, [r7, #16]
 8018e5a:	2206      	movs	r2, #6
 8018e5c:	6839      	ldr	r1, [r7, #0]
 8018e5e:	4618      	mov	r0, r3
 8018e60:	f000 fb14 	bl	801948c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018e64:	693b      	ldr	r3, [r7, #16]
 8018e66:	3306      	adds	r3, #6
 8018e68:	2206      	movs	r2, #6
 8018e6a:	6879      	ldr	r1, [r7, #4]
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	f000 fb0d 	bl	801948c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018e72:	68fb      	ldr	r3, [r7, #12]
 8018e74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018e78:	2b06      	cmp	r3, #6
 8018e7a:	d006      	beq.n	8018e8a <ethernet_output+0x66>
 8018e7c:	4b0a      	ldr	r3, [pc, #40]	; (8018ea8 <ethernet_output+0x84>)
 8018e7e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018e82:	490a      	ldr	r1, [pc, #40]	; (8018eac <ethernet_output+0x88>)
 8018e84:	480a      	ldr	r0, [pc, #40]	; (8018eb0 <ethernet_output+0x8c>)
 8018e86:	f000 fbf7 	bl	8019678 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	699b      	ldr	r3, [r3, #24]
 8018e8e:	68b9      	ldr	r1, [r7, #8]
 8018e90:	68f8      	ldr	r0, [r7, #12]
 8018e92:	4798      	blx	r3
 8018e94:	4603      	mov	r3, r0
 8018e96:	e002      	b.n	8018e9e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018e98:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018e9a:	f06f 0301 	mvn.w	r3, #1
}
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	3718      	adds	r7, #24
 8018ea2:	46bd      	mov	sp, r7
 8018ea4:	bd80      	pop	{r7, pc}
 8018ea6:	bf00      	nop
 8018ea8:	0801e0c0 	.word	0x0801e0c0
 8018eac:	0801e0f8 	.word	0x0801e0f8
 8018eb0:	0801e12c 	.word	0x0801e12c

08018eb4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018eb4:	b580      	push	{r7, lr}
 8018eb6:	b082      	sub	sp, #8
 8018eb8:	af00      	add	r7, sp, #0
 8018eba:	6078      	str	r0, [r7, #4]
 8018ebc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8018ebe:	683b      	ldr	r3, [r7, #0]
 8018ec0:	2200      	movs	r2, #0
 8018ec2:	2104      	movs	r1, #4
 8018ec4:	4618      	mov	r0, r3
 8018ec6:	f7ec fa6d 	bl	80053a4 <osMessageQueueNew>
 8018eca:	4602      	mov	r2, r0
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d102      	bne.n	8018ede <sys_mbox_new+0x2a>
    return ERR_MEM;
 8018ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018edc:	e000      	b.n	8018ee0 <sys_mbox_new+0x2c>

  return ERR_OK;
 8018ede:	2300      	movs	r3, #0
}
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	3708      	adds	r7, #8
 8018ee4:	46bd      	mov	sp, r7
 8018ee6:	bd80      	pop	{r7, pc}

08018ee8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b082      	sub	sp, #8
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	f7ec fb87 	bl	8005608 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	4618      	mov	r0, r3
 8018f00:	f7ec fba2 	bl	8005648 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018f04:	bf00      	nop
 8018f06:	3708      	adds	r7, #8
 8018f08:	46bd      	mov	sp, r7
 8018f0a:	bd80      	pop	{r7, pc}

08018f0c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018f0c:	b580      	push	{r7, lr}
 8018f0e:	b084      	sub	sp, #16
 8018f10:	af00      	add	r7, sp, #0
 8018f12:	6078      	str	r0, [r7, #4]
 8018f14:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	6818      	ldr	r0, [r3, #0]
 8018f1a:	4639      	mov	r1, r7
 8018f1c:	2300      	movs	r3, #0
 8018f1e:	2200      	movs	r2, #0
 8018f20:	f7ec fab4 	bl	800548c <osMessageQueuePut>
 8018f24:	4603      	mov	r3, r0
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d102      	bne.n	8018f30 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	73fb      	strb	r3, [r7, #15]
 8018f2e:	e001      	b.n	8018f34 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018f30:	23ff      	movs	r3, #255	; 0xff
 8018f32:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018f38:	4618      	mov	r0, r3
 8018f3a:	3710      	adds	r7, #16
 8018f3c:	46bd      	mov	sp, r7
 8018f3e:	bd80      	pop	{r7, pc}

08018f40 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b086      	sub	sp, #24
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	60f8      	str	r0, [r7, #12]
 8018f48:	60b9      	str	r1, [r7, #8]
 8018f4a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8018f4c:	f7eb ff16 	bl	8004d7c <osKernelGetTickCount>
 8018f50:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d013      	beq.n	8018f80 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	6818      	ldr	r0, [r3, #0]
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	2200      	movs	r2, #0
 8018f60:	68b9      	ldr	r1, [r7, #8]
 8018f62:	f7ec faf3 	bl	800554c <osMessageQueueGet>
 8018f66:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8018f68:	693b      	ldr	r3, [r7, #16]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d105      	bne.n	8018f7a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8018f6e:	f7eb ff05 	bl	8004d7c <osKernelGetTickCount>
 8018f72:	4602      	mov	r2, r0
 8018f74:	697b      	ldr	r3, [r7, #20]
 8018f76:	1ad3      	subs	r3, r2, r3
 8018f78:	e00f      	b.n	8018f9a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018f7e:	e00c      	b.n	8018f9a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	6818      	ldr	r0, [r3, #0]
 8018f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018f88:	2200      	movs	r2, #0
 8018f8a:	68b9      	ldr	r1, [r7, #8]
 8018f8c:	f7ec fade 	bl	800554c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018f90:	f7eb fef4 	bl	8004d7c <osKernelGetTickCount>
 8018f94:	4602      	mov	r2, r0
 8018f96:	697b      	ldr	r3, [r7, #20]
 8018f98:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	3718      	adds	r7, #24
 8018f9e:	46bd      	mov	sp, r7
 8018fa0:	bd80      	pop	{r7, pc}

08018fa2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018fa2:	b580      	push	{r7, lr}
 8018fa4:	b082      	sub	sp, #8
 8018fa6:	af00      	add	r7, sp, #0
 8018fa8:	6078      	str	r0, [r7, #4]
 8018faa:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	6818      	ldr	r0, [r3, #0]
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	2200      	movs	r2, #0
 8018fb4:	6839      	ldr	r1, [r7, #0]
 8018fb6:	f7ec fac9 	bl	800554c <osMessageQueueGet>
 8018fba:	4603      	mov	r3, r0
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d101      	bne.n	8018fc4 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8018fc0:	2300      	movs	r3, #0
 8018fc2:	e001      	b.n	8018fc8 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8018fc8:	4618      	mov	r0, r3
 8018fca:	3708      	adds	r7, #8
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	bd80      	pop	{r7, pc}

08018fd0 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018fd0:	b480      	push	{r7}
 8018fd2:	b083      	sub	sp, #12
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d101      	bne.n	8018fe4 <sys_mbox_valid+0x14>
    return 0;
 8018fe0:	2300      	movs	r3, #0
 8018fe2:	e000      	b.n	8018fe6 <sys_mbox_valid+0x16>
  else
    return 1;
 8018fe4:	2301      	movs	r3, #1
}
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	370c      	adds	r7, #12
 8018fea:	46bd      	mov	sp, r7
 8018fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ff0:	4770      	bx	lr

08018ff2 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018ff2:	b480      	push	{r7}
 8018ff4:	b083      	sub	sp, #12
 8018ff6:	af00      	add	r7, sp, #0
 8018ff8:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	2200      	movs	r2, #0
 8018ffe:	601a      	str	r2, [r3, #0]
}
 8019000:	bf00      	nop
 8019002:	370c      	adds	r7, #12
 8019004:	46bd      	mov	sp, r7
 8019006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801900a:	4770      	bx	lr

0801900c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801900c:	b580      	push	{r7, lr}
 801900e:	b082      	sub	sp, #8
 8019010:	af00      	add	r7, sp, #0
 8019012:	6078      	str	r0, [r7, #4]
 8019014:	460b      	mov	r3, r1
 8019016:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8019018:	78fb      	ldrb	r3, [r7, #3]
 801901a:	2200      	movs	r2, #0
 801901c:	4619      	mov	r1, r3
 801901e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019022:	f7ec f87b 	bl	800511c <osSemaphoreNew>
 8019026:	4602      	mov	r2, r0
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	2b00      	cmp	r3, #0
 8019032:	d102      	bne.n	801903a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019038:	e009      	b.n	801904e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801903a:	78fb      	ldrb	r3, [r7, #3]
 801903c:	2b00      	cmp	r3, #0
 801903e:	d105      	bne.n	801904c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	2100      	movs	r1, #0
 8019046:	4618      	mov	r0, r3
 8019048:	f7ec f8f2 	bl	8005230 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801904c:	2300      	movs	r3, #0
}
 801904e:	4618      	mov	r0, r3
 8019050:	3708      	adds	r7, #8
 8019052:	46bd      	mov	sp, r7
 8019054:	bd80      	pop	{r7, pc}

08019056 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8019056:	b580      	push	{r7, lr}
 8019058:	b084      	sub	sp, #16
 801905a:	af00      	add	r7, sp, #0
 801905c:	6078      	str	r0, [r7, #4]
 801905e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8019060:	f7eb fe8c 	bl	8004d7c <osKernelGetTickCount>
 8019064:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8019066:	683b      	ldr	r3, [r7, #0]
 8019068:	2b00      	cmp	r3, #0
 801906a:	d011      	beq.n	8019090 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	6839      	ldr	r1, [r7, #0]
 8019072:	4618      	mov	r0, r3
 8019074:	f7ec f8dc 	bl	8005230 <osSemaphoreAcquire>
 8019078:	4603      	mov	r3, r0
 801907a:	2b00      	cmp	r3, #0
 801907c:	d105      	bne.n	801908a <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801907e:	f7eb fe7d 	bl	8004d7c <osKernelGetTickCount>
 8019082:	4602      	mov	r2, r0
 8019084:	68fb      	ldr	r3, [r7, #12]
 8019086:	1ad3      	subs	r3, r2, r3
 8019088:	e012      	b.n	80190b0 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801908a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801908e:	e00f      	b.n	80190b0 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8019090:	bf00      	nop
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801909a:	4618      	mov	r0, r3
 801909c:	f7ec f8c8 	bl	8005230 <osSemaphoreAcquire>
 80190a0:	4603      	mov	r3, r0
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d1f5      	bne.n	8019092 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80190a6:	f7eb fe69 	bl	8004d7c <osKernelGetTickCount>
 80190aa:	4602      	mov	r2, r0
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80190b0:	4618      	mov	r0, r3
 80190b2:	3710      	adds	r7, #16
 80190b4:	46bd      	mov	sp, r7
 80190b6:	bd80      	pop	{r7, pc}

080190b8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80190b8:	b580      	push	{r7, lr}
 80190ba:	b082      	sub	sp, #8
 80190bc:	af00      	add	r7, sp, #0
 80190be:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	4618      	mov	r0, r3
 80190c6:	f7ec f905 	bl	80052d4 <osSemaphoreRelease>
}
 80190ca:	bf00      	nop
 80190cc:	3708      	adds	r7, #8
 80190ce:	46bd      	mov	sp, r7
 80190d0:	bd80      	pop	{r7, pc}

080190d2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80190d2:	b580      	push	{r7, lr}
 80190d4:	b082      	sub	sp, #8
 80190d6:	af00      	add	r7, sp, #0
 80190d8:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	4618      	mov	r0, r3
 80190e0:	f7ec f93c 	bl	800535c <osSemaphoreDelete>
}
 80190e4:	bf00      	nop
 80190e6:	3708      	adds	r7, #8
 80190e8:	46bd      	mov	sp, r7
 80190ea:	bd80      	pop	{r7, pc}

080190ec <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80190ec:	b480      	push	{r7}
 80190ee:	b083      	sub	sp, #12
 80190f0:	af00      	add	r7, sp, #0
 80190f2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d101      	bne.n	8019100 <sys_sem_valid+0x14>
    return 0;
 80190fc:	2300      	movs	r3, #0
 80190fe:	e000      	b.n	8019102 <sys_sem_valid+0x16>
  else
    return 1;
 8019100:	2301      	movs	r3, #1
}
 8019102:	4618      	mov	r0, r3
 8019104:	370c      	adds	r7, #12
 8019106:	46bd      	mov	sp, r7
 8019108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801910c:	4770      	bx	lr

0801910e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801910e:	b480      	push	{r7}
 8019110:	b083      	sub	sp, #12
 8019112:	af00      	add	r7, sp, #0
 8019114:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	2200      	movs	r2, #0
 801911a:	601a      	str	r2, [r3, #0]
}
 801911c:	bf00      	nop
 801911e:	370c      	adds	r7, #12
 8019120:	46bd      	mov	sp, r7
 8019122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019126:	4770      	bx	lr

08019128 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019128:	b580      	push	{r7, lr}
 801912a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801912c:	2000      	movs	r0, #0
 801912e:	f7eb fee7 	bl	8004f00 <osMutexNew>
 8019132:	4603      	mov	r3, r0
 8019134:	4a01      	ldr	r2, [pc, #4]	; (801913c <sys_init+0x14>)
 8019136:	6013      	str	r3, [r2, #0]
#endif
}
 8019138:	bf00      	nop
 801913a:	bd80      	pop	{r7, pc}
 801913c:	2000d108 	.word	0x2000d108

08019140 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019140:	b580      	push	{r7, lr}
 8019142:	b082      	sub	sp, #8
 8019144:	af00      	add	r7, sp, #0
 8019146:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8019148:	2000      	movs	r0, #0
 801914a:	f7eb fed9 	bl	8004f00 <osMutexNew>
 801914e:	4602      	mov	r2, r0
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d102      	bne.n	8019162 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801915c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019160:	e000      	b.n	8019164 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019162:	2300      	movs	r3, #0
}
 8019164:	4618      	mov	r0, r3
 8019166:	3708      	adds	r7, #8
 8019168:	46bd      	mov	sp, r7
 801916a:	bd80      	pop	{r7, pc}

0801916c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801916c:	b580      	push	{r7, lr}
 801916e:	b082      	sub	sp, #8
 8019170:	af00      	add	r7, sp, #0
 8019172:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801917c:	4618      	mov	r0, r3
 801917e:	f7eb ff45 	bl	800500c <osMutexAcquire>
#endif
}
 8019182:	bf00      	nop
 8019184:	3708      	adds	r7, #8
 8019186:	46bd      	mov	sp, r7
 8019188:	bd80      	pop	{r7, pc}

0801918a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801918a:	b580      	push	{r7, lr}
 801918c:	b082      	sub	sp, #8
 801918e:	af00      	add	r7, sp, #0
 8019190:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	4618      	mov	r0, r3
 8019198:	f7eb ff83 	bl	80050a2 <osMutexRelease>
}
 801919c:	bf00      	nop
 801919e:	3708      	adds	r7, #8
 80191a0:	46bd      	mov	sp, r7
 80191a2:	bd80      	pop	{r7, pc}

080191a4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80191a4:	b580      	push	{r7, lr}
 80191a6:	b08e      	sub	sp, #56	; 0x38
 80191a8:	af00      	add	r7, sp, #0
 80191aa:	60f8      	str	r0, [r7, #12]
 80191ac:	60b9      	str	r1, [r7, #8]
 80191ae:	607a      	str	r2, [r7, #4]
 80191b0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80191b2:	f107 0314 	add.w	r3, r7, #20
 80191b6:	2224      	movs	r2, #36	; 0x24
 80191b8:	2100      	movs	r1, #0
 80191ba:	4618      	mov	r0, r3
 80191bc:	f000 f974 	bl	80194a8 <memset>
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	617b      	str	r3, [r7, #20]
 80191c4:	683b      	ldr	r3, [r7, #0]
 80191c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80191c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80191ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80191cc:	f107 0314 	add.w	r3, r7, #20
 80191d0:	461a      	mov	r2, r3
 80191d2:	6879      	ldr	r1, [r7, #4]
 80191d4:	68b8      	ldr	r0, [r7, #8]
 80191d6:	f7eb fde6 	bl	8004da6 <osThreadNew>
 80191da:	4603      	mov	r3, r0
#endif
}
 80191dc:	4618      	mov	r0, r3
 80191de:	3738      	adds	r7, #56	; 0x38
 80191e0:	46bd      	mov	sp, r7
 80191e2:	bd80      	pop	{r7, pc}

080191e4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80191e4:	b580      	push	{r7, lr}
 80191e6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80191e8:	4b04      	ldr	r3, [pc, #16]	; (80191fc <sys_arch_protect+0x18>)
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80191f0:	4618      	mov	r0, r3
 80191f2:	f7eb ff0b 	bl	800500c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80191f6:	2301      	movs	r3, #1
}
 80191f8:	4618      	mov	r0, r3
 80191fa:	bd80      	pop	{r7, pc}
 80191fc:	2000d108 	.word	0x2000d108

08019200 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019200:	b580      	push	{r7, lr}
 8019202:	b082      	sub	sp, #8
 8019204:	af00      	add	r7, sp, #0
 8019206:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019208:	4b04      	ldr	r3, [pc, #16]	; (801921c <sys_arch_unprotect+0x1c>)
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	4618      	mov	r0, r3
 801920e:	f7eb ff48 	bl	80050a2 <osMutexRelease>
}
 8019212:	bf00      	nop
 8019214:	3708      	adds	r7, #8
 8019216:	46bd      	mov	sp, r7
 8019218:	bd80      	pop	{r7, pc}
 801921a:	bf00      	nop
 801921c:	2000d108 	.word	0x2000d108

08019220 <std>:
 8019220:	2300      	movs	r3, #0
 8019222:	b510      	push	{r4, lr}
 8019224:	4604      	mov	r4, r0
 8019226:	e9c0 3300 	strd	r3, r3, [r0]
 801922a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801922e:	6083      	str	r3, [r0, #8]
 8019230:	8181      	strh	r1, [r0, #12]
 8019232:	6643      	str	r3, [r0, #100]	; 0x64
 8019234:	81c2      	strh	r2, [r0, #14]
 8019236:	6183      	str	r3, [r0, #24]
 8019238:	4619      	mov	r1, r3
 801923a:	2208      	movs	r2, #8
 801923c:	305c      	adds	r0, #92	; 0x5c
 801923e:	f000 f933 	bl	80194a8 <memset>
 8019242:	4b05      	ldr	r3, [pc, #20]	; (8019258 <std+0x38>)
 8019244:	6263      	str	r3, [r4, #36]	; 0x24
 8019246:	4b05      	ldr	r3, [pc, #20]	; (801925c <std+0x3c>)
 8019248:	62a3      	str	r3, [r4, #40]	; 0x28
 801924a:	4b05      	ldr	r3, [pc, #20]	; (8019260 <std+0x40>)
 801924c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801924e:	4b05      	ldr	r3, [pc, #20]	; (8019264 <std+0x44>)
 8019250:	6224      	str	r4, [r4, #32]
 8019252:	6323      	str	r3, [r4, #48]	; 0x30
 8019254:	bd10      	pop	{r4, pc}
 8019256:	bf00      	nop
 8019258:	08019905 	.word	0x08019905
 801925c:	08019927 	.word	0x08019927
 8019260:	0801995f 	.word	0x0801995f
 8019264:	08019983 	.word	0x08019983

08019268 <_cleanup_r>:
 8019268:	4901      	ldr	r1, [pc, #4]	; (8019270 <_cleanup_r+0x8>)
 801926a:	f000 b8af 	b.w	80193cc <_fwalk_reent>
 801926e:	bf00      	nop
 8019270:	08019c99 	.word	0x08019c99

08019274 <__sfmoreglue>:
 8019274:	b570      	push	{r4, r5, r6, lr}
 8019276:	2268      	movs	r2, #104	; 0x68
 8019278:	1e4d      	subs	r5, r1, #1
 801927a:	4355      	muls	r5, r2
 801927c:	460e      	mov	r6, r1
 801927e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019282:	f000 f985 	bl	8019590 <_malloc_r>
 8019286:	4604      	mov	r4, r0
 8019288:	b140      	cbz	r0, 801929c <__sfmoreglue+0x28>
 801928a:	2100      	movs	r1, #0
 801928c:	e9c0 1600 	strd	r1, r6, [r0]
 8019290:	300c      	adds	r0, #12
 8019292:	60a0      	str	r0, [r4, #8]
 8019294:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019298:	f000 f906 	bl	80194a8 <memset>
 801929c:	4620      	mov	r0, r4
 801929e:	bd70      	pop	{r4, r5, r6, pc}

080192a0 <__sfp_lock_acquire>:
 80192a0:	4801      	ldr	r0, [pc, #4]	; (80192a8 <__sfp_lock_acquire+0x8>)
 80192a2:	f000 b8d8 	b.w	8019456 <__retarget_lock_acquire_recursive>
 80192a6:	bf00      	nop
 80192a8:	2000d10d 	.word	0x2000d10d

080192ac <__sfp_lock_release>:
 80192ac:	4801      	ldr	r0, [pc, #4]	; (80192b4 <__sfp_lock_release+0x8>)
 80192ae:	f000 b8d3 	b.w	8019458 <__retarget_lock_release_recursive>
 80192b2:	bf00      	nop
 80192b4:	2000d10d 	.word	0x2000d10d

080192b8 <__sinit_lock_acquire>:
 80192b8:	4801      	ldr	r0, [pc, #4]	; (80192c0 <__sinit_lock_acquire+0x8>)
 80192ba:	f000 b8cc 	b.w	8019456 <__retarget_lock_acquire_recursive>
 80192be:	bf00      	nop
 80192c0:	2000d10e 	.word	0x2000d10e

080192c4 <__sinit_lock_release>:
 80192c4:	4801      	ldr	r0, [pc, #4]	; (80192cc <__sinit_lock_release+0x8>)
 80192c6:	f000 b8c7 	b.w	8019458 <__retarget_lock_release_recursive>
 80192ca:	bf00      	nop
 80192cc:	2000d10e 	.word	0x2000d10e

080192d0 <__sinit>:
 80192d0:	b510      	push	{r4, lr}
 80192d2:	4604      	mov	r4, r0
 80192d4:	f7ff fff0 	bl	80192b8 <__sinit_lock_acquire>
 80192d8:	69a3      	ldr	r3, [r4, #24]
 80192da:	b11b      	cbz	r3, 80192e4 <__sinit+0x14>
 80192dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80192e0:	f7ff bff0 	b.w	80192c4 <__sinit_lock_release>
 80192e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80192e8:	6523      	str	r3, [r4, #80]	; 0x50
 80192ea:	4b13      	ldr	r3, [pc, #76]	; (8019338 <__sinit+0x68>)
 80192ec:	4a13      	ldr	r2, [pc, #76]	; (801933c <__sinit+0x6c>)
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80192f2:	42a3      	cmp	r3, r4
 80192f4:	bf04      	itt	eq
 80192f6:	2301      	moveq	r3, #1
 80192f8:	61a3      	streq	r3, [r4, #24]
 80192fa:	4620      	mov	r0, r4
 80192fc:	f000 f820 	bl	8019340 <__sfp>
 8019300:	6060      	str	r0, [r4, #4]
 8019302:	4620      	mov	r0, r4
 8019304:	f000 f81c 	bl	8019340 <__sfp>
 8019308:	60a0      	str	r0, [r4, #8]
 801930a:	4620      	mov	r0, r4
 801930c:	f000 f818 	bl	8019340 <__sfp>
 8019310:	2200      	movs	r2, #0
 8019312:	60e0      	str	r0, [r4, #12]
 8019314:	2104      	movs	r1, #4
 8019316:	6860      	ldr	r0, [r4, #4]
 8019318:	f7ff ff82 	bl	8019220 <std>
 801931c:	68a0      	ldr	r0, [r4, #8]
 801931e:	2201      	movs	r2, #1
 8019320:	2109      	movs	r1, #9
 8019322:	f7ff ff7d 	bl	8019220 <std>
 8019326:	68e0      	ldr	r0, [r4, #12]
 8019328:	2202      	movs	r2, #2
 801932a:	2112      	movs	r1, #18
 801932c:	f7ff ff78 	bl	8019220 <std>
 8019330:	2301      	movs	r3, #1
 8019332:	61a3      	str	r3, [r4, #24]
 8019334:	e7d2      	b.n	80192dc <__sinit+0xc>
 8019336:	bf00      	nop
 8019338:	0801e37c 	.word	0x0801e37c
 801933c:	08019269 	.word	0x08019269

08019340 <__sfp>:
 8019340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019342:	4607      	mov	r7, r0
 8019344:	f7ff ffac 	bl	80192a0 <__sfp_lock_acquire>
 8019348:	4b1e      	ldr	r3, [pc, #120]	; (80193c4 <__sfp+0x84>)
 801934a:	681e      	ldr	r6, [r3, #0]
 801934c:	69b3      	ldr	r3, [r6, #24]
 801934e:	b913      	cbnz	r3, 8019356 <__sfp+0x16>
 8019350:	4630      	mov	r0, r6
 8019352:	f7ff ffbd 	bl	80192d0 <__sinit>
 8019356:	3648      	adds	r6, #72	; 0x48
 8019358:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801935c:	3b01      	subs	r3, #1
 801935e:	d503      	bpl.n	8019368 <__sfp+0x28>
 8019360:	6833      	ldr	r3, [r6, #0]
 8019362:	b30b      	cbz	r3, 80193a8 <__sfp+0x68>
 8019364:	6836      	ldr	r6, [r6, #0]
 8019366:	e7f7      	b.n	8019358 <__sfp+0x18>
 8019368:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801936c:	b9d5      	cbnz	r5, 80193a4 <__sfp+0x64>
 801936e:	4b16      	ldr	r3, [pc, #88]	; (80193c8 <__sfp+0x88>)
 8019370:	60e3      	str	r3, [r4, #12]
 8019372:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019376:	6665      	str	r5, [r4, #100]	; 0x64
 8019378:	f000 f86c 	bl	8019454 <__retarget_lock_init_recursive>
 801937c:	f7ff ff96 	bl	80192ac <__sfp_lock_release>
 8019380:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019384:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019388:	6025      	str	r5, [r4, #0]
 801938a:	61a5      	str	r5, [r4, #24]
 801938c:	2208      	movs	r2, #8
 801938e:	4629      	mov	r1, r5
 8019390:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019394:	f000 f888 	bl	80194a8 <memset>
 8019398:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801939c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80193a0:	4620      	mov	r0, r4
 80193a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193a4:	3468      	adds	r4, #104	; 0x68
 80193a6:	e7d9      	b.n	801935c <__sfp+0x1c>
 80193a8:	2104      	movs	r1, #4
 80193aa:	4638      	mov	r0, r7
 80193ac:	f7ff ff62 	bl	8019274 <__sfmoreglue>
 80193b0:	4604      	mov	r4, r0
 80193b2:	6030      	str	r0, [r6, #0]
 80193b4:	2800      	cmp	r0, #0
 80193b6:	d1d5      	bne.n	8019364 <__sfp+0x24>
 80193b8:	f7ff ff78 	bl	80192ac <__sfp_lock_release>
 80193bc:	230c      	movs	r3, #12
 80193be:	603b      	str	r3, [r7, #0]
 80193c0:	e7ee      	b.n	80193a0 <__sfp+0x60>
 80193c2:	bf00      	nop
 80193c4:	0801e37c 	.word	0x0801e37c
 80193c8:	ffff0001 	.word	0xffff0001

080193cc <_fwalk_reent>:
 80193cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193d0:	4606      	mov	r6, r0
 80193d2:	4688      	mov	r8, r1
 80193d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80193d8:	2700      	movs	r7, #0
 80193da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80193de:	f1b9 0901 	subs.w	r9, r9, #1
 80193e2:	d505      	bpl.n	80193f0 <_fwalk_reent+0x24>
 80193e4:	6824      	ldr	r4, [r4, #0]
 80193e6:	2c00      	cmp	r4, #0
 80193e8:	d1f7      	bne.n	80193da <_fwalk_reent+0xe>
 80193ea:	4638      	mov	r0, r7
 80193ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193f0:	89ab      	ldrh	r3, [r5, #12]
 80193f2:	2b01      	cmp	r3, #1
 80193f4:	d907      	bls.n	8019406 <_fwalk_reent+0x3a>
 80193f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80193fa:	3301      	adds	r3, #1
 80193fc:	d003      	beq.n	8019406 <_fwalk_reent+0x3a>
 80193fe:	4629      	mov	r1, r5
 8019400:	4630      	mov	r0, r6
 8019402:	47c0      	blx	r8
 8019404:	4307      	orrs	r7, r0
 8019406:	3568      	adds	r5, #104	; 0x68
 8019408:	e7e9      	b.n	80193de <_fwalk_reent+0x12>
	...

0801940c <__libc_init_array>:
 801940c:	b570      	push	{r4, r5, r6, lr}
 801940e:	4d0d      	ldr	r5, [pc, #52]	; (8019444 <__libc_init_array+0x38>)
 8019410:	4c0d      	ldr	r4, [pc, #52]	; (8019448 <__libc_init_array+0x3c>)
 8019412:	1b64      	subs	r4, r4, r5
 8019414:	10a4      	asrs	r4, r4, #2
 8019416:	2600      	movs	r6, #0
 8019418:	42a6      	cmp	r6, r4
 801941a:	d109      	bne.n	8019430 <__libc_init_array+0x24>
 801941c:	4d0b      	ldr	r5, [pc, #44]	; (801944c <__libc_init_array+0x40>)
 801941e:	4c0c      	ldr	r4, [pc, #48]	; (8019450 <__libc_init_array+0x44>)
 8019420:	f001 f87a 	bl	801a518 <_init>
 8019424:	1b64      	subs	r4, r4, r5
 8019426:	10a4      	asrs	r4, r4, #2
 8019428:	2600      	movs	r6, #0
 801942a:	42a6      	cmp	r6, r4
 801942c:	d105      	bne.n	801943a <__libc_init_array+0x2e>
 801942e:	bd70      	pop	{r4, r5, r6, pc}
 8019430:	f855 3b04 	ldr.w	r3, [r5], #4
 8019434:	4798      	blx	r3
 8019436:	3601      	adds	r6, #1
 8019438:	e7ee      	b.n	8019418 <__libc_init_array+0xc>
 801943a:	f855 3b04 	ldr.w	r3, [r5], #4
 801943e:	4798      	blx	r3
 8019440:	3601      	adds	r6, #1
 8019442:	e7f2      	b.n	801942a <__libc_init_array+0x1e>
 8019444:	0801e46c 	.word	0x0801e46c
 8019448:	0801e46c 	.word	0x0801e46c
 801944c:	0801e46c 	.word	0x0801e46c
 8019450:	0801e470 	.word	0x0801e470

08019454 <__retarget_lock_init_recursive>:
 8019454:	4770      	bx	lr

08019456 <__retarget_lock_acquire_recursive>:
 8019456:	4770      	bx	lr

08019458 <__retarget_lock_release_recursive>:
 8019458:	4770      	bx	lr
	...

0801945c <malloc>:
 801945c:	4b02      	ldr	r3, [pc, #8]	; (8019468 <malloc+0xc>)
 801945e:	4601      	mov	r1, r0
 8019460:	6818      	ldr	r0, [r3, #0]
 8019462:	f000 b895 	b.w	8019590 <_malloc_r>
 8019466:	bf00      	nop
 8019468:	20000034 	.word	0x20000034

0801946c <memcmp>:
 801946c:	b510      	push	{r4, lr}
 801946e:	3901      	subs	r1, #1
 8019470:	4402      	add	r2, r0
 8019472:	4290      	cmp	r0, r2
 8019474:	d101      	bne.n	801947a <memcmp+0xe>
 8019476:	2000      	movs	r0, #0
 8019478:	e005      	b.n	8019486 <memcmp+0x1a>
 801947a:	7803      	ldrb	r3, [r0, #0]
 801947c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019480:	42a3      	cmp	r3, r4
 8019482:	d001      	beq.n	8019488 <memcmp+0x1c>
 8019484:	1b18      	subs	r0, r3, r4
 8019486:	bd10      	pop	{r4, pc}
 8019488:	3001      	adds	r0, #1
 801948a:	e7f2      	b.n	8019472 <memcmp+0x6>

0801948c <memcpy>:
 801948c:	440a      	add	r2, r1
 801948e:	4291      	cmp	r1, r2
 8019490:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019494:	d100      	bne.n	8019498 <memcpy+0xc>
 8019496:	4770      	bx	lr
 8019498:	b510      	push	{r4, lr}
 801949a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801949e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80194a2:	4291      	cmp	r1, r2
 80194a4:	d1f9      	bne.n	801949a <memcpy+0xe>
 80194a6:	bd10      	pop	{r4, pc}

080194a8 <memset>:
 80194a8:	4402      	add	r2, r0
 80194aa:	4603      	mov	r3, r0
 80194ac:	4293      	cmp	r3, r2
 80194ae:	d100      	bne.n	80194b2 <memset+0xa>
 80194b0:	4770      	bx	lr
 80194b2:	f803 1b01 	strb.w	r1, [r3], #1
 80194b6:	e7f9      	b.n	80194ac <memset+0x4>

080194b8 <_free_r>:
 80194b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80194ba:	2900      	cmp	r1, #0
 80194bc:	d044      	beq.n	8019548 <_free_r+0x90>
 80194be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80194c2:	9001      	str	r0, [sp, #4]
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	f1a1 0404 	sub.w	r4, r1, #4
 80194ca:	bfb8      	it	lt
 80194cc:	18e4      	addlt	r4, r4, r3
 80194ce:	f000 fca9 	bl	8019e24 <__malloc_lock>
 80194d2:	4a1e      	ldr	r2, [pc, #120]	; (801954c <_free_r+0x94>)
 80194d4:	9801      	ldr	r0, [sp, #4]
 80194d6:	6813      	ldr	r3, [r2, #0]
 80194d8:	b933      	cbnz	r3, 80194e8 <_free_r+0x30>
 80194da:	6063      	str	r3, [r4, #4]
 80194dc:	6014      	str	r4, [r2, #0]
 80194de:	b003      	add	sp, #12
 80194e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80194e4:	f000 bca4 	b.w	8019e30 <__malloc_unlock>
 80194e8:	42a3      	cmp	r3, r4
 80194ea:	d908      	bls.n	80194fe <_free_r+0x46>
 80194ec:	6825      	ldr	r5, [r4, #0]
 80194ee:	1961      	adds	r1, r4, r5
 80194f0:	428b      	cmp	r3, r1
 80194f2:	bf01      	itttt	eq
 80194f4:	6819      	ldreq	r1, [r3, #0]
 80194f6:	685b      	ldreq	r3, [r3, #4]
 80194f8:	1949      	addeq	r1, r1, r5
 80194fa:	6021      	streq	r1, [r4, #0]
 80194fc:	e7ed      	b.n	80194da <_free_r+0x22>
 80194fe:	461a      	mov	r2, r3
 8019500:	685b      	ldr	r3, [r3, #4]
 8019502:	b10b      	cbz	r3, 8019508 <_free_r+0x50>
 8019504:	42a3      	cmp	r3, r4
 8019506:	d9fa      	bls.n	80194fe <_free_r+0x46>
 8019508:	6811      	ldr	r1, [r2, #0]
 801950a:	1855      	adds	r5, r2, r1
 801950c:	42a5      	cmp	r5, r4
 801950e:	d10b      	bne.n	8019528 <_free_r+0x70>
 8019510:	6824      	ldr	r4, [r4, #0]
 8019512:	4421      	add	r1, r4
 8019514:	1854      	adds	r4, r2, r1
 8019516:	42a3      	cmp	r3, r4
 8019518:	6011      	str	r1, [r2, #0]
 801951a:	d1e0      	bne.n	80194de <_free_r+0x26>
 801951c:	681c      	ldr	r4, [r3, #0]
 801951e:	685b      	ldr	r3, [r3, #4]
 8019520:	6053      	str	r3, [r2, #4]
 8019522:	4421      	add	r1, r4
 8019524:	6011      	str	r1, [r2, #0]
 8019526:	e7da      	b.n	80194de <_free_r+0x26>
 8019528:	d902      	bls.n	8019530 <_free_r+0x78>
 801952a:	230c      	movs	r3, #12
 801952c:	6003      	str	r3, [r0, #0]
 801952e:	e7d6      	b.n	80194de <_free_r+0x26>
 8019530:	6825      	ldr	r5, [r4, #0]
 8019532:	1961      	adds	r1, r4, r5
 8019534:	428b      	cmp	r3, r1
 8019536:	bf04      	itt	eq
 8019538:	6819      	ldreq	r1, [r3, #0]
 801953a:	685b      	ldreq	r3, [r3, #4]
 801953c:	6063      	str	r3, [r4, #4]
 801953e:	bf04      	itt	eq
 8019540:	1949      	addeq	r1, r1, r5
 8019542:	6021      	streq	r1, [r4, #0]
 8019544:	6054      	str	r4, [r2, #4]
 8019546:	e7ca      	b.n	80194de <_free_r+0x26>
 8019548:	b003      	add	sp, #12
 801954a:	bd30      	pop	{r4, r5, pc}
 801954c:	2000d110 	.word	0x2000d110

08019550 <sbrk_aligned>:
 8019550:	b570      	push	{r4, r5, r6, lr}
 8019552:	4e0e      	ldr	r6, [pc, #56]	; (801958c <sbrk_aligned+0x3c>)
 8019554:	460c      	mov	r4, r1
 8019556:	6831      	ldr	r1, [r6, #0]
 8019558:	4605      	mov	r5, r0
 801955a:	b911      	cbnz	r1, 8019562 <sbrk_aligned+0x12>
 801955c:	f000 f9c2 	bl	80198e4 <_sbrk_r>
 8019560:	6030      	str	r0, [r6, #0]
 8019562:	4621      	mov	r1, r4
 8019564:	4628      	mov	r0, r5
 8019566:	f000 f9bd 	bl	80198e4 <_sbrk_r>
 801956a:	1c43      	adds	r3, r0, #1
 801956c:	d00a      	beq.n	8019584 <sbrk_aligned+0x34>
 801956e:	1cc4      	adds	r4, r0, #3
 8019570:	f024 0403 	bic.w	r4, r4, #3
 8019574:	42a0      	cmp	r0, r4
 8019576:	d007      	beq.n	8019588 <sbrk_aligned+0x38>
 8019578:	1a21      	subs	r1, r4, r0
 801957a:	4628      	mov	r0, r5
 801957c:	f000 f9b2 	bl	80198e4 <_sbrk_r>
 8019580:	3001      	adds	r0, #1
 8019582:	d101      	bne.n	8019588 <sbrk_aligned+0x38>
 8019584:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019588:	4620      	mov	r0, r4
 801958a:	bd70      	pop	{r4, r5, r6, pc}
 801958c:	2000d114 	.word	0x2000d114

08019590 <_malloc_r>:
 8019590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019594:	1ccd      	adds	r5, r1, #3
 8019596:	f025 0503 	bic.w	r5, r5, #3
 801959a:	3508      	adds	r5, #8
 801959c:	2d0c      	cmp	r5, #12
 801959e:	bf38      	it	cc
 80195a0:	250c      	movcc	r5, #12
 80195a2:	2d00      	cmp	r5, #0
 80195a4:	4607      	mov	r7, r0
 80195a6:	db01      	blt.n	80195ac <_malloc_r+0x1c>
 80195a8:	42a9      	cmp	r1, r5
 80195aa:	d905      	bls.n	80195b8 <_malloc_r+0x28>
 80195ac:	230c      	movs	r3, #12
 80195ae:	603b      	str	r3, [r7, #0]
 80195b0:	2600      	movs	r6, #0
 80195b2:	4630      	mov	r0, r6
 80195b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195b8:	4e2e      	ldr	r6, [pc, #184]	; (8019674 <_malloc_r+0xe4>)
 80195ba:	f000 fc33 	bl	8019e24 <__malloc_lock>
 80195be:	6833      	ldr	r3, [r6, #0]
 80195c0:	461c      	mov	r4, r3
 80195c2:	bb34      	cbnz	r4, 8019612 <_malloc_r+0x82>
 80195c4:	4629      	mov	r1, r5
 80195c6:	4638      	mov	r0, r7
 80195c8:	f7ff ffc2 	bl	8019550 <sbrk_aligned>
 80195cc:	1c43      	adds	r3, r0, #1
 80195ce:	4604      	mov	r4, r0
 80195d0:	d14d      	bne.n	801966e <_malloc_r+0xde>
 80195d2:	6834      	ldr	r4, [r6, #0]
 80195d4:	4626      	mov	r6, r4
 80195d6:	2e00      	cmp	r6, #0
 80195d8:	d140      	bne.n	801965c <_malloc_r+0xcc>
 80195da:	6823      	ldr	r3, [r4, #0]
 80195dc:	4631      	mov	r1, r6
 80195de:	4638      	mov	r0, r7
 80195e0:	eb04 0803 	add.w	r8, r4, r3
 80195e4:	f000 f97e 	bl	80198e4 <_sbrk_r>
 80195e8:	4580      	cmp	r8, r0
 80195ea:	d13a      	bne.n	8019662 <_malloc_r+0xd2>
 80195ec:	6821      	ldr	r1, [r4, #0]
 80195ee:	3503      	adds	r5, #3
 80195f0:	1a6d      	subs	r5, r5, r1
 80195f2:	f025 0503 	bic.w	r5, r5, #3
 80195f6:	3508      	adds	r5, #8
 80195f8:	2d0c      	cmp	r5, #12
 80195fa:	bf38      	it	cc
 80195fc:	250c      	movcc	r5, #12
 80195fe:	4629      	mov	r1, r5
 8019600:	4638      	mov	r0, r7
 8019602:	f7ff ffa5 	bl	8019550 <sbrk_aligned>
 8019606:	3001      	adds	r0, #1
 8019608:	d02b      	beq.n	8019662 <_malloc_r+0xd2>
 801960a:	6823      	ldr	r3, [r4, #0]
 801960c:	442b      	add	r3, r5
 801960e:	6023      	str	r3, [r4, #0]
 8019610:	e00e      	b.n	8019630 <_malloc_r+0xa0>
 8019612:	6822      	ldr	r2, [r4, #0]
 8019614:	1b52      	subs	r2, r2, r5
 8019616:	d41e      	bmi.n	8019656 <_malloc_r+0xc6>
 8019618:	2a0b      	cmp	r2, #11
 801961a:	d916      	bls.n	801964a <_malloc_r+0xba>
 801961c:	1961      	adds	r1, r4, r5
 801961e:	42a3      	cmp	r3, r4
 8019620:	6025      	str	r5, [r4, #0]
 8019622:	bf18      	it	ne
 8019624:	6059      	strne	r1, [r3, #4]
 8019626:	6863      	ldr	r3, [r4, #4]
 8019628:	bf08      	it	eq
 801962a:	6031      	streq	r1, [r6, #0]
 801962c:	5162      	str	r2, [r4, r5]
 801962e:	604b      	str	r3, [r1, #4]
 8019630:	4638      	mov	r0, r7
 8019632:	f104 060b 	add.w	r6, r4, #11
 8019636:	f000 fbfb 	bl	8019e30 <__malloc_unlock>
 801963a:	f026 0607 	bic.w	r6, r6, #7
 801963e:	1d23      	adds	r3, r4, #4
 8019640:	1af2      	subs	r2, r6, r3
 8019642:	d0b6      	beq.n	80195b2 <_malloc_r+0x22>
 8019644:	1b9b      	subs	r3, r3, r6
 8019646:	50a3      	str	r3, [r4, r2]
 8019648:	e7b3      	b.n	80195b2 <_malloc_r+0x22>
 801964a:	6862      	ldr	r2, [r4, #4]
 801964c:	42a3      	cmp	r3, r4
 801964e:	bf0c      	ite	eq
 8019650:	6032      	streq	r2, [r6, #0]
 8019652:	605a      	strne	r2, [r3, #4]
 8019654:	e7ec      	b.n	8019630 <_malloc_r+0xa0>
 8019656:	4623      	mov	r3, r4
 8019658:	6864      	ldr	r4, [r4, #4]
 801965a:	e7b2      	b.n	80195c2 <_malloc_r+0x32>
 801965c:	4634      	mov	r4, r6
 801965e:	6876      	ldr	r6, [r6, #4]
 8019660:	e7b9      	b.n	80195d6 <_malloc_r+0x46>
 8019662:	230c      	movs	r3, #12
 8019664:	603b      	str	r3, [r7, #0]
 8019666:	4638      	mov	r0, r7
 8019668:	f000 fbe2 	bl	8019e30 <__malloc_unlock>
 801966c:	e7a1      	b.n	80195b2 <_malloc_r+0x22>
 801966e:	6025      	str	r5, [r4, #0]
 8019670:	e7de      	b.n	8019630 <_malloc_r+0xa0>
 8019672:	bf00      	nop
 8019674:	2000d110 	.word	0x2000d110

08019678 <iprintf>:
 8019678:	b40f      	push	{r0, r1, r2, r3}
 801967a:	4b0a      	ldr	r3, [pc, #40]	; (80196a4 <iprintf+0x2c>)
 801967c:	b513      	push	{r0, r1, r4, lr}
 801967e:	681c      	ldr	r4, [r3, #0]
 8019680:	b124      	cbz	r4, 801968c <iprintf+0x14>
 8019682:	69a3      	ldr	r3, [r4, #24]
 8019684:	b913      	cbnz	r3, 801968c <iprintf+0x14>
 8019686:	4620      	mov	r0, r4
 8019688:	f7ff fe22 	bl	80192d0 <__sinit>
 801968c:	ab05      	add	r3, sp, #20
 801968e:	9a04      	ldr	r2, [sp, #16]
 8019690:	68a1      	ldr	r1, [r4, #8]
 8019692:	9301      	str	r3, [sp, #4]
 8019694:	4620      	mov	r0, r4
 8019696:	f000 fbfb 	bl	8019e90 <_vfiprintf_r>
 801969a:	b002      	add	sp, #8
 801969c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80196a0:	b004      	add	sp, #16
 80196a2:	4770      	bx	lr
 80196a4:	20000034 	.word	0x20000034

080196a8 <_puts_r>:
 80196a8:	b570      	push	{r4, r5, r6, lr}
 80196aa:	460e      	mov	r6, r1
 80196ac:	4605      	mov	r5, r0
 80196ae:	b118      	cbz	r0, 80196b8 <_puts_r+0x10>
 80196b0:	6983      	ldr	r3, [r0, #24]
 80196b2:	b90b      	cbnz	r3, 80196b8 <_puts_r+0x10>
 80196b4:	f7ff fe0c 	bl	80192d0 <__sinit>
 80196b8:	69ab      	ldr	r3, [r5, #24]
 80196ba:	68ac      	ldr	r4, [r5, #8]
 80196bc:	b913      	cbnz	r3, 80196c4 <_puts_r+0x1c>
 80196be:	4628      	mov	r0, r5
 80196c0:	f7ff fe06 	bl	80192d0 <__sinit>
 80196c4:	4b2c      	ldr	r3, [pc, #176]	; (8019778 <_puts_r+0xd0>)
 80196c6:	429c      	cmp	r4, r3
 80196c8:	d120      	bne.n	801970c <_puts_r+0x64>
 80196ca:	686c      	ldr	r4, [r5, #4]
 80196cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80196ce:	07db      	lsls	r3, r3, #31
 80196d0:	d405      	bmi.n	80196de <_puts_r+0x36>
 80196d2:	89a3      	ldrh	r3, [r4, #12]
 80196d4:	0598      	lsls	r0, r3, #22
 80196d6:	d402      	bmi.n	80196de <_puts_r+0x36>
 80196d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80196da:	f7ff febc 	bl	8019456 <__retarget_lock_acquire_recursive>
 80196de:	89a3      	ldrh	r3, [r4, #12]
 80196e0:	0719      	lsls	r1, r3, #28
 80196e2:	d51d      	bpl.n	8019720 <_puts_r+0x78>
 80196e4:	6923      	ldr	r3, [r4, #16]
 80196e6:	b1db      	cbz	r3, 8019720 <_puts_r+0x78>
 80196e8:	3e01      	subs	r6, #1
 80196ea:	68a3      	ldr	r3, [r4, #8]
 80196ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80196f0:	3b01      	subs	r3, #1
 80196f2:	60a3      	str	r3, [r4, #8]
 80196f4:	bb39      	cbnz	r1, 8019746 <_puts_r+0x9e>
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	da38      	bge.n	801976c <_puts_r+0xc4>
 80196fa:	4622      	mov	r2, r4
 80196fc:	210a      	movs	r1, #10
 80196fe:	4628      	mov	r0, r5
 8019700:	f000 f944 	bl	801998c <__swbuf_r>
 8019704:	3001      	adds	r0, #1
 8019706:	d011      	beq.n	801972c <_puts_r+0x84>
 8019708:	250a      	movs	r5, #10
 801970a:	e011      	b.n	8019730 <_puts_r+0x88>
 801970c:	4b1b      	ldr	r3, [pc, #108]	; (801977c <_puts_r+0xd4>)
 801970e:	429c      	cmp	r4, r3
 8019710:	d101      	bne.n	8019716 <_puts_r+0x6e>
 8019712:	68ac      	ldr	r4, [r5, #8]
 8019714:	e7da      	b.n	80196cc <_puts_r+0x24>
 8019716:	4b1a      	ldr	r3, [pc, #104]	; (8019780 <_puts_r+0xd8>)
 8019718:	429c      	cmp	r4, r3
 801971a:	bf08      	it	eq
 801971c:	68ec      	ldreq	r4, [r5, #12]
 801971e:	e7d5      	b.n	80196cc <_puts_r+0x24>
 8019720:	4621      	mov	r1, r4
 8019722:	4628      	mov	r0, r5
 8019724:	f000 f996 	bl	8019a54 <__swsetup_r>
 8019728:	2800      	cmp	r0, #0
 801972a:	d0dd      	beq.n	80196e8 <_puts_r+0x40>
 801972c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8019730:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019732:	07da      	lsls	r2, r3, #31
 8019734:	d405      	bmi.n	8019742 <_puts_r+0x9a>
 8019736:	89a3      	ldrh	r3, [r4, #12]
 8019738:	059b      	lsls	r3, r3, #22
 801973a:	d402      	bmi.n	8019742 <_puts_r+0x9a>
 801973c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801973e:	f7ff fe8b 	bl	8019458 <__retarget_lock_release_recursive>
 8019742:	4628      	mov	r0, r5
 8019744:	bd70      	pop	{r4, r5, r6, pc}
 8019746:	2b00      	cmp	r3, #0
 8019748:	da04      	bge.n	8019754 <_puts_r+0xac>
 801974a:	69a2      	ldr	r2, [r4, #24]
 801974c:	429a      	cmp	r2, r3
 801974e:	dc06      	bgt.n	801975e <_puts_r+0xb6>
 8019750:	290a      	cmp	r1, #10
 8019752:	d004      	beq.n	801975e <_puts_r+0xb6>
 8019754:	6823      	ldr	r3, [r4, #0]
 8019756:	1c5a      	adds	r2, r3, #1
 8019758:	6022      	str	r2, [r4, #0]
 801975a:	7019      	strb	r1, [r3, #0]
 801975c:	e7c5      	b.n	80196ea <_puts_r+0x42>
 801975e:	4622      	mov	r2, r4
 8019760:	4628      	mov	r0, r5
 8019762:	f000 f913 	bl	801998c <__swbuf_r>
 8019766:	3001      	adds	r0, #1
 8019768:	d1bf      	bne.n	80196ea <_puts_r+0x42>
 801976a:	e7df      	b.n	801972c <_puts_r+0x84>
 801976c:	6823      	ldr	r3, [r4, #0]
 801976e:	250a      	movs	r5, #10
 8019770:	1c5a      	adds	r2, r3, #1
 8019772:	6022      	str	r2, [r4, #0]
 8019774:	701d      	strb	r5, [r3, #0]
 8019776:	e7db      	b.n	8019730 <_puts_r+0x88>
 8019778:	0801e33c 	.word	0x0801e33c
 801977c:	0801e35c 	.word	0x0801e35c
 8019780:	0801e31c 	.word	0x0801e31c

08019784 <puts>:
 8019784:	4b02      	ldr	r3, [pc, #8]	; (8019790 <puts+0xc>)
 8019786:	4601      	mov	r1, r0
 8019788:	6818      	ldr	r0, [r3, #0]
 801978a:	f7ff bf8d 	b.w	80196a8 <_puts_r>
 801978e:	bf00      	nop
 8019790:	20000034 	.word	0x20000034

08019794 <rand>:
 8019794:	4b16      	ldr	r3, [pc, #88]	; (80197f0 <rand+0x5c>)
 8019796:	b510      	push	{r4, lr}
 8019798:	681c      	ldr	r4, [r3, #0]
 801979a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801979c:	b9b3      	cbnz	r3, 80197cc <rand+0x38>
 801979e:	2018      	movs	r0, #24
 80197a0:	f7ff fe5c 	bl	801945c <malloc>
 80197a4:	63a0      	str	r0, [r4, #56]	; 0x38
 80197a6:	b928      	cbnz	r0, 80197b4 <rand+0x20>
 80197a8:	4602      	mov	r2, r0
 80197aa:	4b12      	ldr	r3, [pc, #72]	; (80197f4 <rand+0x60>)
 80197ac:	4812      	ldr	r0, [pc, #72]	; (80197f8 <rand+0x64>)
 80197ae:	214e      	movs	r1, #78	; 0x4e
 80197b0:	f000 f9be 	bl	8019b30 <__assert_func>
 80197b4:	4a11      	ldr	r2, [pc, #68]	; (80197fc <rand+0x68>)
 80197b6:	4b12      	ldr	r3, [pc, #72]	; (8019800 <rand+0x6c>)
 80197b8:	e9c0 2300 	strd	r2, r3, [r0]
 80197bc:	4b11      	ldr	r3, [pc, #68]	; (8019804 <rand+0x70>)
 80197be:	6083      	str	r3, [r0, #8]
 80197c0:	230b      	movs	r3, #11
 80197c2:	8183      	strh	r3, [r0, #12]
 80197c4:	2201      	movs	r2, #1
 80197c6:	2300      	movs	r3, #0
 80197c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80197cc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80197ce:	4a0e      	ldr	r2, [pc, #56]	; (8019808 <rand+0x74>)
 80197d0:	6920      	ldr	r0, [r4, #16]
 80197d2:	6963      	ldr	r3, [r4, #20]
 80197d4:	490d      	ldr	r1, [pc, #52]	; (801980c <rand+0x78>)
 80197d6:	4342      	muls	r2, r0
 80197d8:	fb01 2203 	mla	r2, r1, r3, r2
 80197dc:	fba0 0101 	umull	r0, r1, r0, r1
 80197e0:	1c43      	adds	r3, r0, #1
 80197e2:	eb42 0001 	adc.w	r0, r2, r1
 80197e6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80197ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80197ee:	bd10      	pop	{r4, pc}
 80197f0:	20000034 	.word	0x20000034
 80197f4:	0801e380 	.word	0x0801e380
 80197f8:	0801e397 	.word	0x0801e397
 80197fc:	abcd330e 	.word	0xabcd330e
 8019800:	e66d1234 	.word	0xe66d1234
 8019804:	0005deec 	.word	0x0005deec
 8019808:	5851f42d 	.word	0x5851f42d
 801980c:	4c957f2d 	.word	0x4c957f2d

08019810 <cleanup_glue>:
 8019810:	b538      	push	{r3, r4, r5, lr}
 8019812:	460c      	mov	r4, r1
 8019814:	6809      	ldr	r1, [r1, #0]
 8019816:	4605      	mov	r5, r0
 8019818:	b109      	cbz	r1, 801981e <cleanup_glue+0xe>
 801981a:	f7ff fff9 	bl	8019810 <cleanup_glue>
 801981e:	4621      	mov	r1, r4
 8019820:	4628      	mov	r0, r5
 8019822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019826:	f7ff be47 	b.w	80194b8 <_free_r>
	...

0801982c <_reclaim_reent>:
 801982c:	4b2c      	ldr	r3, [pc, #176]	; (80198e0 <_reclaim_reent+0xb4>)
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	4283      	cmp	r3, r0
 8019832:	b570      	push	{r4, r5, r6, lr}
 8019834:	4604      	mov	r4, r0
 8019836:	d051      	beq.n	80198dc <_reclaim_reent+0xb0>
 8019838:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801983a:	b143      	cbz	r3, 801984e <_reclaim_reent+0x22>
 801983c:	68db      	ldr	r3, [r3, #12]
 801983e:	2b00      	cmp	r3, #0
 8019840:	d14a      	bne.n	80198d8 <_reclaim_reent+0xac>
 8019842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019844:	6819      	ldr	r1, [r3, #0]
 8019846:	b111      	cbz	r1, 801984e <_reclaim_reent+0x22>
 8019848:	4620      	mov	r0, r4
 801984a:	f7ff fe35 	bl	80194b8 <_free_r>
 801984e:	6961      	ldr	r1, [r4, #20]
 8019850:	b111      	cbz	r1, 8019858 <_reclaim_reent+0x2c>
 8019852:	4620      	mov	r0, r4
 8019854:	f7ff fe30 	bl	80194b8 <_free_r>
 8019858:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801985a:	b111      	cbz	r1, 8019862 <_reclaim_reent+0x36>
 801985c:	4620      	mov	r0, r4
 801985e:	f7ff fe2b 	bl	80194b8 <_free_r>
 8019862:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019864:	b111      	cbz	r1, 801986c <_reclaim_reent+0x40>
 8019866:	4620      	mov	r0, r4
 8019868:	f7ff fe26 	bl	80194b8 <_free_r>
 801986c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801986e:	b111      	cbz	r1, 8019876 <_reclaim_reent+0x4a>
 8019870:	4620      	mov	r0, r4
 8019872:	f7ff fe21 	bl	80194b8 <_free_r>
 8019876:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8019878:	b111      	cbz	r1, 8019880 <_reclaim_reent+0x54>
 801987a:	4620      	mov	r0, r4
 801987c:	f7ff fe1c 	bl	80194b8 <_free_r>
 8019880:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8019882:	b111      	cbz	r1, 801988a <_reclaim_reent+0x5e>
 8019884:	4620      	mov	r0, r4
 8019886:	f7ff fe17 	bl	80194b8 <_free_r>
 801988a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801988c:	b111      	cbz	r1, 8019894 <_reclaim_reent+0x68>
 801988e:	4620      	mov	r0, r4
 8019890:	f7ff fe12 	bl	80194b8 <_free_r>
 8019894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019896:	b111      	cbz	r1, 801989e <_reclaim_reent+0x72>
 8019898:	4620      	mov	r0, r4
 801989a:	f7ff fe0d 	bl	80194b8 <_free_r>
 801989e:	69a3      	ldr	r3, [r4, #24]
 80198a0:	b1e3      	cbz	r3, 80198dc <_reclaim_reent+0xb0>
 80198a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80198a4:	4620      	mov	r0, r4
 80198a6:	4798      	blx	r3
 80198a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80198aa:	b1b9      	cbz	r1, 80198dc <_reclaim_reent+0xb0>
 80198ac:	4620      	mov	r0, r4
 80198ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80198b2:	f7ff bfad 	b.w	8019810 <cleanup_glue>
 80198b6:	5949      	ldr	r1, [r1, r5]
 80198b8:	b941      	cbnz	r1, 80198cc <_reclaim_reent+0xa0>
 80198ba:	3504      	adds	r5, #4
 80198bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80198be:	2d80      	cmp	r5, #128	; 0x80
 80198c0:	68d9      	ldr	r1, [r3, #12]
 80198c2:	d1f8      	bne.n	80198b6 <_reclaim_reent+0x8a>
 80198c4:	4620      	mov	r0, r4
 80198c6:	f7ff fdf7 	bl	80194b8 <_free_r>
 80198ca:	e7ba      	b.n	8019842 <_reclaim_reent+0x16>
 80198cc:	680e      	ldr	r6, [r1, #0]
 80198ce:	4620      	mov	r0, r4
 80198d0:	f7ff fdf2 	bl	80194b8 <_free_r>
 80198d4:	4631      	mov	r1, r6
 80198d6:	e7ef      	b.n	80198b8 <_reclaim_reent+0x8c>
 80198d8:	2500      	movs	r5, #0
 80198da:	e7ef      	b.n	80198bc <_reclaim_reent+0x90>
 80198dc:	bd70      	pop	{r4, r5, r6, pc}
 80198de:	bf00      	nop
 80198e0:	20000034 	.word	0x20000034

080198e4 <_sbrk_r>:
 80198e4:	b538      	push	{r3, r4, r5, lr}
 80198e6:	4d06      	ldr	r5, [pc, #24]	; (8019900 <_sbrk_r+0x1c>)
 80198e8:	2300      	movs	r3, #0
 80198ea:	4604      	mov	r4, r0
 80198ec:	4608      	mov	r0, r1
 80198ee:	602b      	str	r3, [r5, #0]
 80198f0:	f7e7 f8f8 	bl	8000ae4 <_sbrk>
 80198f4:	1c43      	adds	r3, r0, #1
 80198f6:	d102      	bne.n	80198fe <_sbrk_r+0x1a>
 80198f8:	682b      	ldr	r3, [r5, #0]
 80198fa:	b103      	cbz	r3, 80198fe <_sbrk_r+0x1a>
 80198fc:	6023      	str	r3, [r4, #0]
 80198fe:	bd38      	pop	{r3, r4, r5, pc}
 8019900:	2000d118 	.word	0x2000d118

08019904 <__sread>:
 8019904:	b510      	push	{r4, lr}
 8019906:	460c      	mov	r4, r1
 8019908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801990c:	f000 fd84 	bl	801a418 <_read_r>
 8019910:	2800      	cmp	r0, #0
 8019912:	bfab      	itete	ge
 8019914:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019916:	89a3      	ldrhlt	r3, [r4, #12]
 8019918:	181b      	addge	r3, r3, r0
 801991a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801991e:	bfac      	ite	ge
 8019920:	6563      	strge	r3, [r4, #84]	; 0x54
 8019922:	81a3      	strhlt	r3, [r4, #12]
 8019924:	bd10      	pop	{r4, pc}

08019926 <__swrite>:
 8019926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801992a:	461f      	mov	r7, r3
 801992c:	898b      	ldrh	r3, [r1, #12]
 801992e:	05db      	lsls	r3, r3, #23
 8019930:	4605      	mov	r5, r0
 8019932:	460c      	mov	r4, r1
 8019934:	4616      	mov	r6, r2
 8019936:	d505      	bpl.n	8019944 <__swrite+0x1e>
 8019938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801993c:	2302      	movs	r3, #2
 801993e:	2200      	movs	r2, #0
 8019940:	f000 f9f8 	bl	8019d34 <_lseek_r>
 8019944:	89a3      	ldrh	r3, [r4, #12]
 8019946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801994a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801994e:	81a3      	strh	r3, [r4, #12]
 8019950:	4632      	mov	r2, r6
 8019952:	463b      	mov	r3, r7
 8019954:	4628      	mov	r0, r5
 8019956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801995a:	f000 b869 	b.w	8019a30 <_write_r>

0801995e <__sseek>:
 801995e:	b510      	push	{r4, lr}
 8019960:	460c      	mov	r4, r1
 8019962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019966:	f000 f9e5 	bl	8019d34 <_lseek_r>
 801996a:	1c43      	adds	r3, r0, #1
 801996c:	89a3      	ldrh	r3, [r4, #12]
 801996e:	bf15      	itete	ne
 8019970:	6560      	strne	r0, [r4, #84]	; 0x54
 8019972:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019976:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801997a:	81a3      	strheq	r3, [r4, #12]
 801997c:	bf18      	it	ne
 801997e:	81a3      	strhne	r3, [r4, #12]
 8019980:	bd10      	pop	{r4, pc}

08019982 <__sclose>:
 8019982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019986:	f000 b8f1 	b.w	8019b6c <_close_r>
	...

0801998c <__swbuf_r>:
 801998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801998e:	460e      	mov	r6, r1
 8019990:	4614      	mov	r4, r2
 8019992:	4605      	mov	r5, r0
 8019994:	b118      	cbz	r0, 801999e <__swbuf_r+0x12>
 8019996:	6983      	ldr	r3, [r0, #24]
 8019998:	b90b      	cbnz	r3, 801999e <__swbuf_r+0x12>
 801999a:	f7ff fc99 	bl	80192d0 <__sinit>
 801999e:	4b21      	ldr	r3, [pc, #132]	; (8019a24 <__swbuf_r+0x98>)
 80199a0:	429c      	cmp	r4, r3
 80199a2:	d12b      	bne.n	80199fc <__swbuf_r+0x70>
 80199a4:	686c      	ldr	r4, [r5, #4]
 80199a6:	69a3      	ldr	r3, [r4, #24]
 80199a8:	60a3      	str	r3, [r4, #8]
 80199aa:	89a3      	ldrh	r3, [r4, #12]
 80199ac:	071a      	lsls	r2, r3, #28
 80199ae:	d52f      	bpl.n	8019a10 <__swbuf_r+0x84>
 80199b0:	6923      	ldr	r3, [r4, #16]
 80199b2:	b36b      	cbz	r3, 8019a10 <__swbuf_r+0x84>
 80199b4:	6923      	ldr	r3, [r4, #16]
 80199b6:	6820      	ldr	r0, [r4, #0]
 80199b8:	1ac0      	subs	r0, r0, r3
 80199ba:	6963      	ldr	r3, [r4, #20]
 80199bc:	b2f6      	uxtb	r6, r6
 80199be:	4283      	cmp	r3, r0
 80199c0:	4637      	mov	r7, r6
 80199c2:	dc04      	bgt.n	80199ce <__swbuf_r+0x42>
 80199c4:	4621      	mov	r1, r4
 80199c6:	4628      	mov	r0, r5
 80199c8:	f000 f966 	bl	8019c98 <_fflush_r>
 80199cc:	bb30      	cbnz	r0, 8019a1c <__swbuf_r+0x90>
 80199ce:	68a3      	ldr	r3, [r4, #8]
 80199d0:	3b01      	subs	r3, #1
 80199d2:	60a3      	str	r3, [r4, #8]
 80199d4:	6823      	ldr	r3, [r4, #0]
 80199d6:	1c5a      	adds	r2, r3, #1
 80199d8:	6022      	str	r2, [r4, #0]
 80199da:	701e      	strb	r6, [r3, #0]
 80199dc:	6963      	ldr	r3, [r4, #20]
 80199de:	3001      	adds	r0, #1
 80199e0:	4283      	cmp	r3, r0
 80199e2:	d004      	beq.n	80199ee <__swbuf_r+0x62>
 80199e4:	89a3      	ldrh	r3, [r4, #12]
 80199e6:	07db      	lsls	r3, r3, #31
 80199e8:	d506      	bpl.n	80199f8 <__swbuf_r+0x6c>
 80199ea:	2e0a      	cmp	r6, #10
 80199ec:	d104      	bne.n	80199f8 <__swbuf_r+0x6c>
 80199ee:	4621      	mov	r1, r4
 80199f0:	4628      	mov	r0, r5
 80199f2:	f000 f951 	bl	8019c98 <_fflush_r>
 80199f6:	b988      	cbnz	r0, 8019a1c <__swbuf_r+0x90>
 80199f8:	4638      	mov	r0, r7
 80199fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199fc:	4b0a      	ldr	r3, [pc, #40]	; (8019a28 <__swbuf_r+0x9c>)
 80199fe:	429c      	cmp	r4, r3
 8019a00:	d101      	bne.n	8019a06 <__swbuf_r+0x7a>
 8019a02:	68ac      	ldr	r4, [r5, #8]
 8019a04:	e7cf      	b.n	80199a6 <__swbuf_r+0x1a>
 8019a06:	4b09      	ldr	r3, [pc, #36]	; (8019a2c <__swbuf_r+0xa0>)
 8019a08:	429c      	cmp	r4, r3
 8019a0a:	bf08      	it	eq
 8019a0c:	68ec      	ldreq	r4, [r5, #12]
 8019a0e:	e7ca      	b.n	80199a6 <__swbuf_r+0x1a>
 8019a10:	4621      	mov	r1, r4
 8019a12:	4628      	mov	r0, r5
 8019a14:	f000 f81e 	bl	8019a54 <__swsetup_r>
 8019a18:	2800      	cmp	r0, #0
 8019a1a:	d0cb      	beq.n	80199b4 <__swbuf_r+0x28>
 8019a1c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019a20:	e7ea      	b.n	80199f8 <__swbuf_r+0x6c>
 8019a22:	bf00      	nop
 8019a24:	0801e33c 	.word	0x0801e33c
 8019a28:	0801e35c 	.word	0x0801e35c
 8019a2c:	0801e31c 	.word	0x0801e31c

08019a30 <_write_r>:
 8019a30:	b538      	push	{r3, r4, r5, lr}
 8019a32:	4d07      	ldr	r5, [pc, #28]	; (8019a50 <_write_r+0x20>)
 8019a34:	4604      	mov	r4, r0
 8019a36:	4608      	mov	r0, r1
 8019a38:	4611      	mov	r1, r2
 8019a3a:	2200      	movs	r2, #0
 8019a3c:	602a      	str	r2, [r5, #0]
 8019a3e:	461a      	mov	r2, r3
 8019a40:	f7e6 ffff 	bl	8000a42 <_write>
 8019a44:	1c43      	adds	r3, r0, #1
 8019a46:	d102      	bne.n	8019a4e <_write_r+0x1e>
 8019a48:	682b      	ldr	r3, [r5, #0]
 8019a4a:	b103      	cbz	r3, 8019a4e <_write_r+0x1e>
 8019a4c:	6023      	str	r3, [r4, #0]
 8019a4e:	bd38      	pop	{r3, r4, r5, pc}
 8019a50:	2000d118 	.word	0x2000d118

08019a54 <__swsetup_r>:
 8019a54:	4b32      	ldr	r3, [pc, #200]	; (8019b20 <__swsetup_r+0xcc>)
 8019a56:	b570      	push	{r4, r5, r6, lr}
 8019a58:	681d      	ldr	r5, [r3, #0]
 8019a5a:	4606      	mov	r6, r0
 8019a5c:	460c      	mov	r4, r1
 8019a5e:	b125      	cbz	r5, 8019a6a <__swsetup_r+0x16>
 8019a60:	69ab      	ldr	r3, [r5, #24]
 8019a62:	b913      	cbnz	r3, 8019a6a <__swsetup_r+0x16>
 8019a64:	4628      	mov	r0, r5
 8019a66:	f7ff fc33 	bl	80192d0 <__sinit>
 8019a6a:	4b2e      	ldr	r3, [pc, #184]	; (8019b24 <__swsetup_r+0xd0>)
 8019a6c:	429c      	cmp	r4, r3
 8019a6e:	d10f      	bne.n	8019a90 <__swsetup_r+0x3c>
 8019a70:	686c      	ldr	r4, [r5, #4]
 8019a72:	89a3      	ldrh	r3, [r4, #12]
 8019a74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019a78:	0719      	lsls	r1, r3, #28
 8019a7a:	d42c      	bmi.n	8019ad6 <__swsetup_r+0x82>
 8019a7c:	06dd      	lsls	r5, r3, #27
 8019a7e:	d411      	bmi.n	8019aa4 <__swsetup_r+0x50>
 8019a80:	2309      	movs	r3, #9
 8019a82:	6033      	str	r3, [r6, #0]
 8019a84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019a88:	81a3      	strh	r3, [r4, #12]
 8019a8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a8e:	e03e      	b.n	8019b0e <__swsetup_r+0xba>
 8019a90:	4b25      	ldr	r3, [pc, #148]	; (8019b28 <__swsetup_r+0xd4>)
 8019a92:	429c      	cmp	r4, r3
 8019a94:	d101      	bne.n	8019a9a <__swsetup_r+0x46>
 8019a96:	68ac      	ldr	r4, [r5, #8]
 8019a98:	e7eb      	b.n	8019a72 <__swsetup_r+0x1e>
 8019a9a:	4b24      	ldr	r3, [pc, #144]	; (8019b2c <__swsetup_r+0xd8>)
 8019a9c:	429c      	cmp	r4, r3
 8019a9e:	bf08      	it	eq
 8019aa0:	68ec      	ldreq	r4, [r5, #12]
 8019aa2:	e7e6      	b.n	8019a72 <__swsetup_r+0x1e>
 8019aa4:	0758      	lsls	r0, r3, #29
 8019aa6:	d512      	bpl.n	8019ace <__swsetup_r+0x7a>
 8019aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019aaa:	b141      	cbz	r1, 8019abe <__swsetup_r+0x6a>
 8019aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ab0:	4299      	cmp	r1, r3
 8019ab2:	d002      	beq.n	8019aba <__swsetup_r+0x66>
 8019ab4:	4630      	mov	r0, r6
 8019ab6:	f7ff fcff 	bl	80194b8 <_free_r>
 8019aba:	2300      	movs	r3, #0
 8019abc:	6363      	str	r3, [r4, #52]	; 0x34
 8019abe:	89a3      	ldrh	r3, [r4, #12]
 8019ac0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019ac4:	81a3      	strh	r3, [r4, #12]
 8019ac6:	2300      	movs	r3, #0
 8019ac8:	6063      	str	r3, [r4, #4]
 8019aca:	6923      	ldr	r3, [r4, #16]
 8019acc:	6023      	str	r3, [r4, #0]
 8019ace:	89a3      	ldrh	r3, [r4, #12]
 8019ad0:	f043 0308 	orr.w	r3, r3, #8
 8019ad4:	81a3      	strh	r3, [r4, #12]
 8019ad6:	6923      	ldr	r3, [r4, #16]
 8019ad8:	b94b      	cbnz	r3, 8019aee <__swsetup_r+0x9a>
 8019ada:	89a3      	ldrh	r3, [r4, #12]
 8019adc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019ae4:	d003      	beq.n	8019aee <__swsetup_r+0x9a>
 8019ae6:	4621      	mov	r1, r4
 8019ae8:	4630      	mov	r0, r6
 8019aea:	f000 f95b 	bl	8019da4 <__smakebuf_r>
 8019aee:	89a0      	ldrh	r0, [r4, #12]
 8019af0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019af4:	f010 0301 	ands.w	r3, r0, #1
 8019af8:	d00a      	beq.n	8019b10 <__swsetup_r+0xbc>
 8019afa:	2300      	movs	r3, #0
 8019afc:	60a3      	str	r3, [r4, #8]
 8019afe:	6963      	ldr	r3, [r4, #20]
 8019b00:	425b      	negs	r3, r3
 8019b02:	61a3      	str	r3, [r4, #24]
 8019b04:	6923      	ldr	r3, [r4, #16]
 8019b06:	b943      	cbnz	r3, 8019b1a <__swsetup_r+0xc6>
 8019b08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019b0c:	d1ba      	bne.n	8019a84 <__swsetup_r+0x30>
 8019b0e:	bd70      	pop	{r4, r5, r6, pc}
 8019b10:	0781      	lsls	r1, r0, #30
 8019b12:	bf58      	it	pl
 8019b14:	6963      	ldrpl	r3, [r4, #20]
 8019b16:	60a3      	str	r3, [r4, #8]
 8019b18:	e7f4      	b.n	8019b04 <__swsetup_r+0xb0>
 8019b1a:	2000      	movs	r0, #0
 8019b1c:	e7f7      	b.n	8019b0e <__swsetup_r+0xba>
 8019b1e:	bf00      	nop
 8019b20:	20000034 	.word	0x20000034
 8019b24:	0801e33c 	.word	0x0801e33c
 8019b28:	0801e35c 	.word	0x0801e35c
 8019b2c:	0801e31c 	.word	0x0801e31c

08019b30 <__assert_func>:
 8019b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019b32:	4614      	mov	r4, r2
 8019b34:	461a      	mov	r2, r3
 8019b36:	4b09      	ldr	r3, [pc, #36]	; (8019b5c <__assert_func+0x2c>)
 8019b38:	681b      	ldr	r3, [r3, #0]
 8019b3a:	4605      	mov	r5, r0
 8019b3c:	68d8      	ldr	r0, [r3, #12]
 8019b3e:	b14c      	cbz	r4, 8019b54 <__assert_func+0x24>
 8019b40:	4b07      	ldr	r3, [pc, #28]	; (8019b60 <__assert_func+0x30>)
 8019b42:	9100      	str	r1, [sp, #0]
 8019b44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019b48:	4906      	ldr	r1, [pc, #24]	; (8019b64 <__assert_func+0x34>)
 8019b4a:	462b      	mov	r3, r5
 8019b4c:	f000 f8e0 	bl	8019d10 <fiprintf>
 8019b50:	f000 fc74 	bl	801a43c <abort>
 8019b54:	4b04      	ldr	r3, [pc, #16]	; (8019b68 <__assert_func+0x38>)
 8019b56:	461c      	mov	r4, r3
 8019b58:	e7f3      	b.n	8019b42 <__assert_func+0x12>
 8019b5a:	bf00      	nop
 8019b5c:	20000034 	.word	0x20000034
 8019b60:	0801e3f2 	.word	0x0801e3f2
 8019b64:	0801e3ff 	.word	0x0801e3ff
 8019b68:	0801e42d 	.word	0x0801e42d

08019b6c <_close_r>:
 8019b6c:	b538      	push	{r3, r4, r5, lr}
 8019b6e:	4d06      	ldr	r5, [pc, #24]	; (8019b88 <_close_r+0x1c>)
 8019b70:	2300      	movs	r3, #0
 8019b72:	4604      	mov	r4, r0
 8019b74:	4608      	mov	r0, r1
 8019b76:	602b      	str	r3, [r5, #0]
 8019b78:	f7e6 ff7f 	bl	8000a7a <_close>
 8019b7c:	1c43      	adds	r3, r0, #1
 8019b7e:	d102      	bne.n	8019b86 <_close_r+0x1a>
 8019b80:	682b      	ldr	r3, [r5, #0]
 8019b82:	b103      	cbz	r3, 8019b86 <_close_r+0x1a>
 8019b84:	6023      	str	r3, [r4, #0]
 8019b86:	bd38      	pop	{r3, r4, r5, pc}
 8019b88:	2000d118 	.word	0x2000d118

08019b8c <__sflush_r>:
 8019b8c:	898a      	ldrh	r2, [r1, #12]
 8019b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b92:	4605      	mov	r5, r0
 8019b94:	0710      	lsls	r0, r2, #28
 8019b96:	460c      	mov	r4, r1
 8019b98:	d458      	bmi.n	8019c4c <__sflush_r+0xc0>
 8019b9a:	684b      	ldr	r3, [r1, #4]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	dc05      	bgt.n	8019bac <__sflush_r+0x20>
 8019ba0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	dc02      	bgt.n	8019bac <__sflush_r+0x20>
 8019ba6:	2000      	movs	r0, #0
 8019ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019bae:	2e00      	cmp	r6, #0
 8019bb0:	d0f9      	beq.n	8019ba6 <__sflush_r+0x1a>
 8019bb2:	2300      	movs	r3, #0
 8019bb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019bb8:	682f      	ldr	r7, [r5, #0]
 8019bba:	602b      	str	r3, [r5, #0]
 8019bbc:	d032      	beq.n	8019c24 <__sflush_r+0x98>
 8019bbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019bc0:	89a3      	ldrh	r3, [r4, #12]
 8019bc2:	075a      	lsls	r2, r3, #29
 8019bc4:	d505      	bpl.n	8019bd2 <__sflush_r+0x46>
 8019bc6:	6863      	ldr	r3, [r4, #4]
 8019bc8:	1ac0      	subs	r0, r0, r3
 8019bca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019bcc:	b10b      	cbz	r3, 8019bd2 <__sflush_r+0x46>
 8019bce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019bd0:	1ac0      	subs	r0, r0, r3
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	4602      	mov	r2, r0
 8019bd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019bd8:	6a21      	ldr	r1, [r4, #32]
 8019bda:	4628      	mov	r0, r5
 8019bdc:	47b0      	blx	r6
 8019bde:	1c43      	adds	r3, r0, #1
 8019be0:	89a3      	ldrh	r3, [r4, #12]
 8019be2:	d106      	bne.n	8019bf2 <__sflush_r+0x66>
 8019be4:	6829      	ldr	r1, [r5, #0]
 8019be6:	291d      	cmp	r1, #29
 8019be8:	d82c      	bhi.n	8019c44 <__sflush_r+0xb8>
 8019bea:	4a2a      	ldr	r2, [pc, #168]	; (8019c94 <__sflush_r+0x108>)
 8019bec:	40ca      	lsrs	r2, r1
 8019bee:	07d6      	lsls	r6, r2, #31
 8019bf0:	d528      	bpl.n	8019c44 <__sflush_r+0xb8>
 8019bf2:	2200      	movs	r2, #0
 8019bf4:	6062      	str	r2, [r4, #4]
 8019bf6:	04d9      	lsls	r1, r3, #19
 8019bf8:	6922      	ldr	r2, [r4, #16]
 8019bfa:	6022      	str	r2, [r4, #0]
 8019bfc:	d504      	bpl.n	8019c08 <__sflush_r+0x7c>
 8019bfe:	1c42      	adds	r2, r0, #1
 8019c00:	d101      	bne.n	8019c06 <__sflush_r+0x7a>
 8019c02:	682b      	ldr	r3, [r5, #0]
 8019c04:	b903      	cbnz	r3, 8019c08 <__sflush_r+0x7c>
 8019c06:	6560      	str	r0, [r4, #84]	; 0x54
 8019c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019c0a:	602f      	str	r7, [r5, #0]
 8019c0c:	2900      	cmp	r1, #0
 8019c0e:	d0ca      	beq.n	8019ba6 <__sflush_r+0x1a>
 8019c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019c14:	4299      	cmp	r1, r3
 8019c16:	d002      	beq.n	8019c1e <__sflush_r+0x92>
 8019c18:	4628      	mov	r0, r5
 8019c1a:	f7ff fc4d 	bl	80194b8 <_free_r>
 8019c1e:	2000      	movs	r0, #0
 8019c20:	6360      	str	r0, [r4, #52]	; 0x34
 8019c22:	e7c1      	b.n	8019ba8 <__sflush_r+0x1c>
 8019c24:	6a21      	ldr	r1, [r4, #32]
 8019c26:	2301      	movs	r3, #1
 8019c28:	4628      	mov	r0, r5
 8019c2a:	47b0      	blx	r6
 8019c2c:	1c41      	adds	r1, r0, #1
 8019c2e:	d1c7      	bne.n	8019bc0 <__sflush_r+0x34>
 8019c30:	682b      	ldr	r3, [r5, #0]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d0c4      	beq.n	8019bc0 <__sflush_r+0x34>
 8019c36:	2b1d      	cmp	r3, #29
 8019c38:	d001      	beq.n	8019c3e <__sflush_r+0xb2>
 8019c3a:	2b16      	cmp	r3, #22
 8019c3c:	d101      	bne.n	8019c42 <__sflush_r+0xb6>
 8019c3e:	602f      	str	r7, [r5, #0]
 8019c40:	e7b1      	b.n	8019ba6 <__sflush_r+0x1a>
 8019c42:	89a3      	ldrh	r3, [r4, #12]
 8019c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c48:	81a3      	strh	r3, [r4, #12]
 8019c4a:	e7ad      	b.n	8019ba8 <__sflush_r+0x1c>
 8019c4c:	690f      	ldr	r7, [r1, #16]
 8019c4e:	2f00      	cmp	r7, #0
 8019c50:	d0a9      	beq.n	8019ba6 <__sflush_r+0x1a>
 8019c52:	0793      	lsls	r3, r2, #30
 8019c54:	680e      	ldr	r6, [r1, #0]
 8019c56:	bf08      	it	eq
 8019c58:	694b      	ldreq	r3, [r1, #20]
 8019c5a:	600f      	str	r7, [r1, #0]
 8019c5c:	bf18      	it	ne
 8019c5e:	2300      	movne	r3, #0
 8019c60:	eba6 0807 	sub.w	r8, r6, r7
 8019c64:	608b      	str	r3, [r1, #8]
 8019c66:	f1b8 0f00 	cmp.w	r8, #0
 8019c6a:	dd9c      	ble.n	8019ba6 <__sflush_r+0x1a>
 8019c6c:	6a21      	ldr	r1, [r4, #32]
 8019c6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019c70:	4643      	mov	r3, r8
 8019c72:	463a      	mov	r2, r7
 8019c74:	4628      	mov	r0, r5
 8019c76:	47b0      	blx	r6
 8019c78:	2800      	cmp	r0, #0
 8019c7a:	dc06      	bgt.n	8019c8a <__sflush_r+0xfe>
 8019c7c:	89a3      	ldrh	r3, [r4, #12]
 8019c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c82:	81a3      	strh	r3, [r4, #12]
 8019c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c88:	e78e      	b.n	8019ba8 <__sflush_r+0x1c>
 8019c8a:	4407      	add	r7, r0
 8019c8c:	eba8 0800 	sub.w	r8, r8, r0
 8019c90:	e7e9      	b.n	8019c66 <__sflush_r+0xda>
 8019c92:	bf00      	nop
 8019c94:	20400001 	.word	0x20400001

08019c98 <_fflush_r>:
 8019c98:	b538      	push	{r3, r4, r5, lr}
 8019c9a:	690b      	ldr	r3, [r1, #16]
 8019c9c:	4605      	mov	r5, r0
 8019c9e:	460c      	mov	r4, r1
 8019ca0:	b913      	cbnz	r3, 8019ca8 <_fflush_r+0x10>
 8019ca2:	2500      	movs	r5, #0
 8019ca4:	4628      	mov	r0, r5
 8019ca6:	bd38      	pop	{r3, r4, r5, pc}
 8019ca8:	b118      	cbz	r0, 8019cb2 <_fflush_r+0x1a>
 8019caa:	6983      	ldr	r3, [r0, #24]
 8019cac:	b90b      	cbnz	r3, 8019cb2 <_fflush_r+0x1a>
 8019cae:	f7ff fb0f 	bl	80192d0 <__sinit>
 8019cb2:	4b14      	ldr	r3, [pc, #80]	; (8019d04 <_fflush_r+0x6c>)
 8019cb4:	429c      	cmp	r4, r3
 8019cb6:	d11b      	bne.n	8019cf0 <_fflush_r+0x58>
 8019cb8:	686c      	ldr	r4, [r5, #4]
 8019cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d0ef      	beq.n	8019ca2 <_fflush_r+0xa>
 8019cc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019cc4:	07d0      	lsls	r0, r2, #31
 8019cc6:	d404      	bmi.n	8019cd2 <_fflush_r+0x3a>
 8019cc8:	0599      	lsls	r1, r3, #22
 8019cca:	d402      	bmi.n	8019cd2 <_fflush_r+0x3a>
 8019ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019cce:	f7ff fbc2 	bl	8019456 <__retarget_lock_acquire_recursive>
 8019cd2:	4628      	mov	r0, r5
 8019cd4:	4621      	mov	r1, r4
 8019cd6:	f7ff ff59 	bl	8019b8c <__sflush_r>
 8019cda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019cdc:	07da      	lsls	r2, r3, #31
 8019cde:	4605      	mov	r5, r0
 8019ce0:	d4e0      	bmi.n	8019ca4 <_fflush_r+0xc>
 8019ce2:	89a3      	ldrh	r3, [r4, #12]
 8019ce4:	059b      	lsls	r3, r3, #22
 8019ce6:	d4dd      	bmi.n	8019ca4 <_fflush_r+0xc>
 8019ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019cea:	f7ff fbb5 	bl	8019458 <__retarget_lock_release_recursive>
 8019cee:	e7d9      	b.n	8019ca4 <_fflush_r+0xc>
 8019cf0:	4b05      	ldr	r3, [pc, #20]	; (8019d08 <_fflush_r+0x70>)
 8019cf2:	429c      	cmp	r4, r3
 8019cf4:	d101      	bne.n	8019cfa <_fflush_r+0x62>
 8019cf6:	68ac      	ldr	r4, [r5, #8]
 8019cf8:	e7df      	b.n	8019cba <_fflush_r+0x22>
 8019cfa:	4b04      	ldr	r3, [pc, #16]	; (8019d0c <_fflush_r+0x74>)
 8019cfc:	429c      	cmp	r4, r3
 8019cfe:	bf08      	it	eq
 8019d00:	68ec      	ldreq	r4, [r5, #12]
 8019d02:	e7da      	b.n	8019cba <_fflush_r+0x22>
 8019d04:	0801e33c 	.word	0x0801e33c
 8019d08:	0801e35c 	.word	0x0801e35c
 8019d0c:	0801e31c 	.word	0x0801e31c

08019d10 <fiprintf>:
 8019d10:	b40e      	push	{r1, r2, r3}
 8019d12:	b503      	push	{r0, r1, lr}
 8019d14:	4601      	mov	r1, r0
 8019d16:	ab03      	add	r3, sp, #12
 8019d18:	4805      	ldr	r0, [pc, #20]	; (8019d30 <fiprintf+0x20>)
 8019d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d1e:	6800      	ldr	r0, [r0, #0]
 8019d20:	9301      	str	r3, [sp, #4]
 8019d22:	f000 f8b5 	bl	8019e90 <_vfiprintf_r>
 8019d26:	b002      	add	sp, #8
 8019d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8019d2c:	b003      	add	sp, #12
 8019d2e:	4770      	bx	lr
 8019d30:	20000034 	.word	0x20000034

08019d34 <_lseek_r>:
 8019d34:	b538      	push	{r3, r4, r5, lr}
 8019d36:	4d07      	ldr	r5, [pc, #28]	; (8019d54 <_lseek_r+0x20>)
 8019d38:	4604      	mov	r4, r0
 8019d3a:	4608      	mov	r0, r1
 8019d3c:	4611      	mov	r1, r2
 8019d3e:	2200      	movs	r2, #0
 8019d40:	602a      	str	r2, [r5, #0]
 8019d42:	461a      	mov	r2, r3
 8019d44:	f7e6 fec0 	bl	8000ac8 <_lseek>
 8019d48:	1c43      	adds	r3, r0, #1
 8019d4a:	d102      	bne.n	8019d52 <_lseek_r+0x1e>
 8019d4c:	682b      	ldr	r3, [r5, #0]
 8019d4e:	b103      	cbz	r3, 8019d52 <_lseek_r+0x1e>
 8019d50:	6023      	str	r3, [r4, #0]
 8019d52:	bd38      	pop	{r3, r4, r5, pc}
 8019d54:	2000d118 	.word	0x2000d118

08019d58 <__swhatbuf_r>:
 8019d58:	b570      	push	{r4, r5, r6, lr}
 8019d5a:	460e      	mov	r6, r1
 8019d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d60:	2900      	cmp	r1, #0
 8019d62:	b096      	sub	sp, #88	; 0x58
 8019d64:	4614      	mov	r4, r2
 8019d66:	461d      	mov	r5, r3
 8019d68:	da08      	bge.n	8019d7c <__swhatbuf_r+0x24>
 8019d6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019d6e:	2200      	movs	r2, #0
 8019d70:	602a      	str	r2, [r5, #0]
 8019d72:	061a      	lsls	r2, r3, #24
 8019d74:	d410      	bmi.n	8019d98 <__swhatbuf_r+0x40>
 8019d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019d7a:	e00e      	b.n	8019d9a <__swhatbuf_r+0x42>
 8019d7c:	466a      	mov	r2, sp
 8019d7e:	f000 fb65 	bl	801a44c <_fstat_r>
 8019d82:	2800      	cmp	r0, #0
 8019d84:	dbf1      	blt.n	8019d6a <__swhatbuf_r+0x12>
 8019d86:	9a01      	ldr	r2, [sp, #4]
 8019d88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019d8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019d90:	425a      	negs	r2, r3
 8019d92:	415a      	adcs	r2, r3
 8019d94:	602a      	str	r2, [r5, #0]
 8019d96:	e7ee      	b.n	8019d76 <__swhatbuf_r+0x1e>
 8019d98:	2340      	movs	r3, #64	; 0x40
 8019d9a:	2000      	movs	r0, #0
 8019d9c:	6023      	str	r3, [r4, #0]
 8019d9e:	b016      	add	sp, #88	; 0x58
 8019da0:	bd70      	pop	{r4, r5, r6, pc}
	...

08019da4 <__smakebuf_r>:
 8019da4:	898b      	ldrh	r3, [r1, #12]
 8019da6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019da8:	079d      	lsls	r5, r3, #30
 8019daa:	4606      	mov	r6, r0
 8019dac:	460c      	mov	r4, r1
 8019dae:	d507      	bpl.n	8019dc0 <__smakebuf_r+0x1c>
 8019db0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019db4:	6023      	str	r3, [r4, #0]
 8019db6:	6123      	str	r3, [r4, #16]
 8019db8:	2301      	movs	r3, #1
 8019dba:	6163      	str	r3, [r4, #20]
 8019dbc:	b002      	add	sp, #8
 8019dbe:	bd70      	pop	{r4, r5, r6, pc}
 8019dc0:	ab01      	add	r3, sp, #4
 8019dc2:	466a      	mov	r2, sp
 8019dc4:	f7ff ffc8 	bl	8019d58 <__swhatbuf_r>
 8019dc8:	9900      	ldr	r1, [sp, #0]
 8019dca:	4605      	mov	r5, r0
 8019dcc:	4630      	mov	r0, r6
 8019dce:	f7ff fbdf 	bl	8019590 <_malloc_r>
 8019dd2:	b948      	cbnz	r0, 8019de8 <__smakebuf_r+0x44>
 8019dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019dd8:	059a      	lsls	r2, r3, #22
 8019dda:	d4ef      	bmi.n	8019dbc <__smakebuf_r+0x18>
 8019ddc:	f023 0303 	bic.w	r3, r3, #3
 8019de0:	f043 0302 	orr.w	r3, r3, #2
 8019de4:	81a3      	strh	r3, [r4, #12]
 8019de6:	e7e3      	b.n	8019db0 <__smakebuf_r+0xc>
 8019de8:	4b0d      	ldr	r3, [pc, #52]	; (8019e20 <__smakebuf_r+0x7c>)
 8019dea:	62b3      	str	r3, [r6, #40]	; 0x28
 8019dec:	89a3      	ldrh	r3, [r4, #12]
 8019dee:	6020      	str	r0, [r4, #0]
 8019df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019df4:	81a3      	strh	r3, [r4, #12]
 8019df6:	9b00      	ldr	r3, [sp, #0]
 8019df8:	6163      	str	r3, [r4, #20]
 8019dfa:	9b01      	ldr	r3, [sp, #4]
 8019dfc:	6120      	str	r0, [r4, #16]
 8019dfe:	b15b      	cbz	r3, 8019e18 <__smakebuf_r+0x74>
 8019e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019e04:	4630      	mov	r0, r6
 8019e06:	f000 fb33 	bl	801a470 <_isatty_r>
 8019e0a:	b128      	cbz	r0, 8019e18 <__smakebuf_r+0x74>
 8019e0c:	89a3      	ldrh	r3, [r4, #12]
 8019e0e:	f023 0303 	bic.w	r3, r3, #3
 8019e12:	f043 0301 	orr.w	r3, r3, #1
 8019e16:	81a3      	strh	r3, [r4, #12]
 8019e18:	89a0      	ldrh	r0, [r4, #12]
 8019e1a:	4305      	orrs	r5, r0
 8019e1c:	81a5      	strh	r5, [r4, #12]
 8019e1e:	e7cd      	b.n	8019dbc <__smakebuf_r+0x18>
 8019e20:	08019269 	.word	0x08019269

08019e24 <__malloc_lock>:
 8019e24:	4801      	ldr	r0, [pc, #4]	; (8019e2c <__malloc_lock+0x8>)
 8019e26:	f7ff bb16 	b.w	8019456 <__retarget_lock_acquire_recursive>
 8019e2a:	bf00      	nop
 8019e2c:	2000d10c 	.word	0x2000d10c

08019e30 <__malloc_unlock>:
 8019e30:	4801      	ldr	r0, [pc, #4]	; (8019e38 <__malloc_unlock+0x8>)
 8019e32:	f7ff bb11 	b.w	8019458 <__retarget_lock_release_recursive>
 8019e36:	bf00      	nop
 8019e38:	2000d10c 	.word	0x2000d10c

08019e3c <__sfputc_r>:
 8019e3c:	6893      	ldr	r3, [r2, #8]
 8019e3e:	3b01      	subs	r3, #1
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	b410      	push	{r4}
 8019e44:	6093      	str	r3, [r2, #8]
 8019e46:	da08      	bge.n	8019e5a <__sfputc_r+0x1e>
 8019e48:	6994      	ldr	r4, [r2, #24]
 8019e4a:	42a3      	cmp	r3, r4
 8019e4c:	db01      	blt.n	8019e52 <__sfputc_r+0x16>
 8019e4e:	290a      	cmp	r1, #10
 8019e50:	d103      	bne.n	8019e5a <__sfputc_r+0x1e>
 8019e52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e56:	f7ff bd99 	b.w	801998c <__swbuf_r>
 8019e5a:	6813      	ldr	r3, [r2, #0]
 8019e5c:	1c58      	adds	r0, r3, #1
 8019e5e:	6010      	str	r0, [r2, #0]
 8019e60:	7019      	strb	r1, [r3, #0]
 8019e62:	4608      	mov	r0, r1
 8019e64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e68:	4770      	bx	lr

08019e6a <__sfputs_r>:
 8019e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e6c:	4606      	mov	r6, r0
 8019e6e:	460f      	mov	r7, r1
 8019e70:	4614      	mov	r4, r2
 8019e72:	18d5      	adds	r5, r2, r3
 8019e74:	42ac      	cmp	r4, r5
 8019e76:	d101      	bne.n	8019e7c <__sfputs_r+0x12>
 8019e78:	2000      	movs	r0, #0
 8019e7a:	e007      	b.n	8019e8c <__sfputs_r+0x22>
 8019e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e80:	463a      	mov	r2, r7
 8019e82:	4630      	mov	r0, r6
 8019e84:	f7ff ffda 	bl	8019e3c <__sfputc_r>
 8019e88:	1c43      	adds	r3, r0, #1
 8019e8a:	d1f3      	bne.n	8019e74 <__sfputs_r+0xa>
 8019e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019e90 <_vfiprintf_r>:
 8019e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e94:	460d      	mov	r5, r1
 8019e96:	b09d      	sub	sp, #116	; 0x74
 8019e98:	4614      	mov	r4, r2
 8019e9a:	4698      	mov	r8, r3
 8019e9c:	4606      	mov	r6, r0
 8019e9e:	b118      	cbz	r0, 8019ea8 <_vfiprintf_r+0x18>
 8019ea0:	6983      	ldr	r3, [r0, #24]
 8019ea2:	b90b      	cbnz	r3, 8019ea8 <_vfiprintf_r+0x18>
 8019ea4:	f7ff fa14 	bl	80192d0 <__sinit>
 8019ea8:	4b89      	ldr	r3, [pc, #548]	; (801a0d0 <_vfiprintf_r+0x240>)
 8019eaa:	429d      	cmp	r5, r3
 8019eac:	d11b      	bne.n	8019ee6 <_vfiprintf_r+0x56>
 8019eae:	6875      	ldr	r5, [r6, #4]
 8019eb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019eb2:	07d9      	lsls	r1, r3, #31
 8019eb4:	d405      	bmi.n	8019ec2 <_vfiprintf_r+0x32>
 8019eb6:	89ab      	ldrh	r3, [r5, #12]
 8019eb8:	059a      	lsls	r2, r3, #22
 8019eba:	d402      	bmi.n	8019ec2 <_vfiprintf_r+0x32>
 8019ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019ebe:	f7ff faca 	bl	8019456 <__retarget_lock_acquire_recursive>
 8019ec2:	89ab      	ldrh	r3, [r5, #12]
 8019ec4:	071b      	lsls	r3, r3, #28
 8019ec6:	d501      	bpl.n	8019ecc <_vfiprintf_r+0x3c>
 8019ec8:	692b      	ldr	r3, [r5, #16]
 8019eca:	b9eb      	cbnz	r3, 8019f08 <_vfiprintf_r+0x78>
 8019ecc:	4629      	mov	r1, r5
 8019ece:	4630      	mov	r0, r6
 8019ed0:	f7ff fdc0 	bl	8019a54 <__swsetup_r>
 8019ed4:	b1c0      	cbz	r0, 8019f08 <_vfiprintf_r+0x78>
 8019ed6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ed8:	07dc      	lsls	r4, r3, #31
 8019eda:	d50e      	bpl.n	8019efa <_vfiprintf_r+0x6a>
 8019edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ee0:	b01d      	add	sp, #116	; 0x74
 8019ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ee6:	4b7b      	ldr	r3, [pc, #492]	; (801a0d4 <_vfiprintf_r+0x244>)
 8019ee8:	429d      	cmp	r5, r3
 8019eea:	d101      	bne.n	8019ef0 <_vfiprintf_r+0x60>
 8019eec:	68b5      	ldr	r5, [r6, #8]
 8019eee:	e7df      	b.n	8019eb0 <_vfiprintf_r+0x20>
 8019ef0:	4b79      	ldr	r3, [pc, #484]	; (801a0d8 <_vfiprintf_r+0x248>)
 8019ef2:	429d      	cmp	r5, r3
 8019ef4:	bf08      	it	eq
 8019ef6:	68f5      	ldreq	r5, [r6, #12]
 8019ef8:	e7da      	b.n	8019eb0 <_vfiprintf_r+0x20>
 8019efa:	89ab      	ldrh	r3, [r5, #12]
 8019efc:	0598      	lsls	r0, r3, #22
 8019efe:	d4ed      	bmi.n	8019edc <_vfiprintf_r+0x4c>
 8019f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019f02:	f7ff faa9 	bl	8019458 <__retarget_lock_release_recursive>
 8019f06:	e7e9      	b.n	8019edc <_vfiprintf_r+0x4c>
 8019f08:	2300      	movs	r3, #0
 8019f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8019f0c:	2320      	movs	r3, #32
 8019f0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019f12:	f8cd 800c 	str.w	r8, [sp, #12]
 8019f16:	2330      	movs	r3, #48	; 0x30
 8019f18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a0dc <_vfiprintf_r+0x24c>
 8019f1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019f20:	f04f 0901 	mov.w	r9, #1
 8019f24:	4623      	mov	r3, r4
 8019f26:	469a      	mov	sl, r3
 8019f28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019f2c:	b10a      	cbz	r2, 8019f32 <_vfiprintf_r+0xa2>
 8019f2e:	2a25      	cmp	r2, #37	; 0x25
 8019f30:	d1f9      	bne.n	8019f26 <_vfiprintf_r+0x96>
 8019f32:	ebba 0b04 	subs.w	fp, sl, r4
 8019f36:	d00b      	beq.n	8019f50 <_vfiprintf_r+0xc0>
 8019f38:	465b      	mov	r3, fp
 8019f3a:	4622      	mov	r2, r4
 8019f3c:	4629      	mov	r1, r5
 8019f3e:	4630      	mov	r0, r6
 8019f40:	f7ff ff93 	bl	8019e6a <__sfputs_r>
 8019f44:	3001      	adds	r0, #1
 8019f46:	f000 80aa 	beq.w	801a09e <_vfiprintf_r+0x20e>
 8019f4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f4c:	445a      	add	r2, fp
 8019f4e:	9209      	str	r2, [sp, #36]	; 0x24
 8019f50:	f89a 3000 	ldrb.w	r3, [sl]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	f000 80a2 	beq.w	801a09e <_vfiprintf_r+0x20e>
 8019f5a:	2300      	movs	r3, #0
 8019f5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019f60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019f64:	f10a 0a01 	add.w	sl, sl, #1
 8019f68:	9304      	str	r3, [sp, #16]
 8019f6a:	9307      	str	r3, [sp, #28]
 8019f6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019f70:	931a      	str	r3, [sp, #104]	; 0x68
 8019f72:	4654      	mov	r4, sl
 8019f74:	2205      	movs	r2, #5
 8019f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f7a:	4858      	ldr	r0, [pc, #352]	; (801a0dc <_vfiprintf_r+0x24c>)
 8019f7c:	f7e6 f928 	bl	80001d0 <memchr>
 8019f80:	9a04      	ldr	r2, [sp, #16]
 8019f82:	b9d8      	cbnz	r0, 8019fbc <_vfiprintf_r+0x12c>
 8019f84:	06d1      	lsls	r1, r2, #27
 8019f86:	bf44      	itt	mi
 8019f88:	2320      	movmi	r3, #32
 8019f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f8e:	0713      	lsls	r3, r2, #28
 8019f90:	bf44      	itt	mi
 8019f92:	232b      	movmi	r3, #43	; 0x2b
 8019f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f98:	f89a 3000 	ldrb.w	r3, [sl]
 8019f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8019f9e:	d015      	beq.n	8019fcc <_vfiprintf_r+0x13c>
 8019fa0:	9a07      	ldr	r2, [sp, #28]
 8019fa2:	4654      	mov	r4, sl
 8019fa4:	2000      	movs	r0, #0
 8019fa6:	f04f 0c0a 	mov.w	ip, #10
 8019faa:	4621      	mov	r1, r4
 8019fac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019fb0:	3b30      	subs	r3, #48	; 0x30
 8019fb2:	2b09      	cmp	r3, #9
 8019fb4:	d94e      	bls.n	801a054 <_vfiprintf_r+0x1c4>
 8019fb6:	b1b0      	cbz	r0, 8019fe6 <_vfiprintf_r+0x156>
 8019fb8:	9207      	str	r2, [sp, #28]
 8019fba:	e014      	b.n	8019fe6 <_vfiprintf_r+0x156>
 8019fbc:	eba0 0308 	sub.w	r3, r0, r8
 8019fc0:	fa09 f303 	lsl.w	r3, r9, r3
 8019fc4:	4313      	orrs	r3, r2
 8019fc6:	9304      	str	r3, [sp, #16]
 8019fc8:	46a2      	mov	sl, r4
 8019fca:	e7d2      	b.n	8019f72 <_vfiprintf_r+0xe2>
 8019fcc:	9b03      	ldr	r3, [sp, #12]
 8019fce:	1d19      	adds	r1, r3, #4
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	9103      	str	r1, [sp, #12]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	bfbb      	ittet	lt
 8019fd8:	425b      	neglt	r3, r3
 8019fda:	f042 0202 	orrlt.w	r2, r2, #2
 8019fde:	9307      	strge	r3, [sp, #28]
 8019fe0:	9307      	strlt	r3, [sp, #28]
 8019fe2:	bfb8      	it	lt
 8019fe4:	9204      	strlt	r2, [sp, #16]
 8019fe6:	7823      	ldrb	r3, [r4, #0]
 8019fe8:	2b2e      	cmp	r3, #46	; 0x2e
 8019fea:	d10c      	bne.n	801a006 <_vfiprintf_r+0x176>
 8019fec:	7863      	ldrb	r3, [r4, #1]
 8019fee:	2b2a      	cmp	r3, #42	; 0x2a
 8019ff0:	d135      	bne.n	801a05e <_vfiprintf_r+0x1ce>
 8019ff2:	9b03      	ldr	r3, [sp, #12]
 8019ff4:	1d1a      	adds	r2, r3, #4
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	9203      	str	r2, [sp, #12]
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	bfb8      	it	lt
 8019ffe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a002:	3402      	adds	r4, #2
 801a004:	9305      	str	r3, [sp, #20]
 801a006:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a0ec <_vfiprintf_r+0x25c>
 801a00a:	7821      	ldrb	r1, [r4, #0]
 801a00c:	2203      	movs	r2, #3
 801a00e:	4650      	mov	r0, sl
 801a010:	f7e6 f8de 	bl	80001d0 <memchr>
 801a014:	b140      	cbz	r0, 801a028 <_vfiprintf_r+0x198>
 801a016:	2340      	movs	r3, #64	; 0x40
 801a018:	eba0 000a 	sub.w	r0, r0, sl
 801a01c:	fa03 f000 	lsl.w	r0, r3, r0
 801a020:	9b04      	ldr	r3, [sp, #16]
 801a022:	4303      	orrs	r3, r0
 801a024:	3401      	adds	r4, #1
 801a026:	9304      	str	r3, [sp, #16]
 801a028:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a02c:	482c      	ldr	r0, [pc, #176]	; (801a0e0 <_vfiprintf_r+0x250>)
 801a02e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a032:	2206      	movs	r2, #6
 801a034:	f7e6 f8cc 	bl	80001d0 <memchr>
 801a038:	2800      	cmp	r0, #0
 801a03a:	d03f      	beq.n	801a0bc <_vfiprintf_r+0x22c>
 801a03c:	4b29      	ldr	r3, [pc, #164]	; (801a0e4 <_vfiprintf_r+0x254>)
 801a03e:	bb1b      	cbnz	r3, 801a088 <_vfiprintf_r+0x1f8>
 801a040:	9b03      	ldr	r3, [sp, #12]
 801a042:	3307      	adds	r3, #7
 801a044:	f023 0307 	bic.w	r3, r3, #7
 801a048:	3308      	adds	r3, #8
 801a04a:	9303      	str	r3, [sp, #12]
 801a04c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a04e:	443b      	add	r3, r7
 801a050:	9309      	str	r3, [sp, #36]	; 0x24
 801a052:	e767      	b.n	8019f24 <_vfiprintf_r+0x94>
 801a054:	fb0c 3202 	mla	r2, ip, r2, r3
 801a058:	460c      	mov	r4, r1
 801a05a:	2001      	movs	r0, #1
 801a05c:	e7a5      	b.n	8019faa <_vfiprintf_r+0x11a>
 801a05e:	2300      	movs	r3, #0
 801a060:	3401      	adds	r4, #1
 801a062:	9305      	str	r3, [sp, #20]
 801a064:	4619      	mov	r1, r3
 801a066:	f04f 0c0a 	mov.w	ip, #10
 801a06a:	4620      	mov	r0, r4
 801a06c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a070:	3a30      	subs	r2, #48	; 0x30
 801a072:	2a09      	cmp	r2, #9
 801a074:	d903      	bls.n	801a07e <_vfiprintf_r+0x1ee>
 801a076:	2b00      	cmp	r3, #0
 801a078:	d0c5      	beq.n	801a006 <_vfiprintf_r+0x176>
 801a07a:	9105      	str	r1, [sp, #20]
 801a07c:	e7c3      	b.n	801a006 <_vfiprintf_r+0x176>
 801a07e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a082:	4604      	mov	r4, r0
 801a084:	2301      	movs	r3, #1
 801a086:	e7f0      	b.n	801a06a <_vfiprintf_r+0x1da>
 801a088:	ab03      	add	r3, sp, #12
 801a08a:	9300      	str	r3, [sp, #0]
 801a08c:	462a      	mov	r2, r5
 801a08e:	4b16      	ldr	r3, [pc, #88]	; (801a0e8 <_vfiprintf_r+0x258>)
 801a090:	a904      	add	r1, sp, #16
 801a092:	4630      	mov	r0, r6
 801a094:	f3af 8000 	nop.w
 801a098:	4607      	mov	r7, r0
 801a09a:	1c78      	adds	r0, r7, #1
 801a09c:	d1d6      	bne.n	801a04c <_vfiprintf_r+0x1bc>
 801a09e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a0a0:	07d9      	lsls	r1, r3, #31
 801a0a2:	d405      	bmi.n	801a0b0 <_vfiprintf_r+0x220>
 801a0a4:	89ab      	ldrh	r3, [r5, #12]
 801a0a6:	059a      	lsls	r2, r3, #22
 801a0a8:	d402      	bmi.n	801a0b0 <_vfiprintf_r+0x220>
 801a0aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a0ac:	f7ff f9d4 	bl	8019458 <__retarget_lock_release_recursive>
 801a0b0:	89ab      	ldrh	r3, [r5, #12]
 801a0b2:	065b      	lsls	r3, r3, #25
 801a0b4:	f53f af12 	bmi.w	8019edc <_vfiprintf_r+0x4c>
 801a0b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a0ba:	e711      	b.n	8019ee0 <_vfiprintf_r+0x50>
 801a0bc:	ab03      	add	r3, sp, #12
 801a0be:	9300      	str	r3, [sp, #0]
 801a0c0:	462a      	mov	r2, r5
 801a0c2:	4b09      	ldr	r3, [pc, #36]	; (801a0e8 <_vfiprintf_r+0x258>)
 801a0c4:	a904      	add	r1, sp, #16
 801a0c6:	4630      	mov	r0, r6
 801a0c8:	f000 f880 	bl	801a1cc <_printf_i>
 801a0cc:	e7e4      	b.n	801a098 <_vfiprintf_r+0x208>
 801a0ce:	bf00      	nop
 801a0d0:	0801e33c 	.word	0x0801e33c
 801a0d4:	0801e35c 	.word	0x0801e35c
 801a0d8:	0801e31c 	.word	0x0801e31c
 801a0dc:	0801e42e 	.word	0x0801e42e
 801a0e0:	0801e438 	.word	0x0801e438
 801a0e4:	00000000 	.word	0x00000000
 801a0e8:	08019e6b 	.word	0x08019e6b
 801a0ec:	0801e434 	.word	0x0801e434

0801a0f0 <_printf_common>:
 801a0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0f4:	4616      	mov	r6, r2
 801a0f6:	4699      	mov	r9, r3
 801a0f8:	688a      	ldr	r2, [r1, #8]
 801a0fa:	690b      	ldr	r3, [r1, #16]
 801a0fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a100:	4293      	cmp	r3, r2
 801a102:	bfb8      	it	lt
 801a104:	4613      	movlt	r3, r2
 801a106:	6033      	str	r3, [r6, #0]
 801a108:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a10c:	4607      	mov	r7, r0
 801a10e:	460c      	mov	r4, r1
 801a110:	b10a      	cbz	r2, 801a116 <_printf_common+0x26>
 801a112:	3301      	adds	r3, #1
 801a114:	6033      	str	r3, [r6, #0]
 801a116:	6823      	ldr	r3, [r4, #0]
 801a118:	0699      	lsls	r1, r3, #26
 801a11a:	bf42      	ittt	mi
 801a11c:	6833      	ldrmi	r3, [r6, #0]
 801a11e:	3302      	addmi	r3, #2
 801a120:	6033      	strmi	r3, [r6, #0]
 801a122:	6825      	ldr	r5, [r4, #0]
 801a124:	f015 0506 	ands.w	r5, r5, #6
 801a128:	d106      	bne.n	801a138 <_printf_common+0x48>
 801a12a:	f104 0a19 	add.w	sl, r4, #25
 801a12e:	68e3      	ldr	r3, [r4, #12]
 801a130:	6832      	ldr	r2, [r6, #0]
 801a132:	1a9b      	subs	r3, r3, r2
 801a134:	42ab      	cmp	r3, r5
 801a136:	dc26      	bgt.n	801a186 <_printf_common+0x96>
 801a138:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a13c:	1e13      	subs	r3, r2, #0
 801a13e:	6822      	ldr	r2, [r4, #0]
 801a140:	bf18      	it	ne
 801a142:	2301      	movne	r3, #1
 801a144:	0692      	lsls	r2, r2, #26
 801a146:	d42b      	bmi.n	801a1a0 <_printf_common+0xb0>
 801a148:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a14c:	4649      	mov	r1, r9
 801a14e:	4638      	mov	r0, r7
 801a150:	47c0      	blx	r8
 801a152:	3001      	adds	r0, #1
 801a154:	d01e      	beq.n	801a194 <_printf_common+0xa4>
 801a156:	6823      	ldr	r3, [r4, #0]
 801a158:	68e5      	ldr	r5, [r4, #12]
 801a15a:	6832      	ldr	r2, [r6, #0]
 801a15c:	f003 0306 	and.w	r3, r3, #6
 801a160:	2b04      	cmp	r3, #4
 801a162:	bf08      	it	eq
 801a164:	1aad      	subeq	r5, r5, r2
 801a166:	68a3      	ldr	r3, [r4, #8]
 801a168:	6922      	ldr	r2, [r4, #16]
 801a16a:	bf0c      	ite	eq
 801a16c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a170:	2500      	movne	r5, #0
 801a172:	4293      	cmp	r3, r2
 801a174:	bfc4      	itt	gt
 801a176:	1a9b      	subgt	r3, r3, r2
 801a178:	18ed      	addgt	r5, r5, r3
 801a17a:	2600      	movs	r6, #0
 801a17c:	341a      	adds	r4, #26
 801a17e:	42b5      	cmp	r5, r6
 801a180:	d11a      	bne.n	801a1b8 <_printf_common+0xc8>
 801a182:	2000      	movs	r0, #0
 801a184:	e008      	b.n	801a198 <_printf_common+0xa8>
 801a186:	2301      	movs	r3, #1
 801a188:	4652      	mov	r2, sl
 801a18a:	4649      	mov	r1, r9
 801a18c:	4638      	mov	r0, r7
 801a18e:	47c0      	blx	r8
 801a190:	3001      	adds	r0, #1
 801a192:	d103      	bne.n	801a19c <_printf_common+0xac>
 801a194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a19c:	3501      	adds	r5, #1
 801a19e:	e7c6      	b.n	801a12e <_printf_common+0x3e>
 801a1a0:	18e1      	adds	r1, r4, r3
 801a1a2:	1c5a      	adds	r2, r3, #1
 801a1a4:	2030      	movs	r0, #48	; 0x30
 801a1a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a1aa:	4422      	add	r2, r4
 801a1ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a1b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a1b4:	3302      	adds	r3, #2
 801a1b6:	e7c7      	b.n	801a148 <_printf_common+0x58>
 801a1b8:	2301      	movs	r3, #1
 801a1ba:	4622      	mov	r2, r4
 801a1bc:	4649      	mov	r1, r9
 801a1be:	4638      	mov	r0, r7
 801a1c0:	47c0      	blx	r8
 801a1c2:	3001      	adds	r0, #1
 801a1c4:	d0e6      	beq.n	801a194 <_printf_common+0xa4>
 801a1c6:	3601      	adds	r6, #1
 801a1c8:	e7d9      	b.n	801a17e <_printf_common+0x8e>
	...

0801a1cc <_printf_i>:
 801a1cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a1d0:	7e0f      	ldrb	r7, [r1, #24]
 801a1d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a1d4:	2f78      	cmp	r7, #120	; 0x78
 801a1d6:	4691      	mov	r9, r2
 801a1d8:	4680      	mov	r8, r0
 801a1da:	460c      	mov	r4, r1
 801a1dc:	469a      	mov	sl, r3
 801a1de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a1e2:	d807      	bhi.n	801a1f4 <_printf_i+0x28>
 801a1e4:	2f62      	cmp	r7, #98	; 0x62
 801a1e6:	d80a      	bhi.n	801a1fe <_printf_i+0x32>
 801a1e8:	2f00      	cmp	r7, #0
 801a1ea:	f000 80d8 	beq.w	801a39e <_printf_i+0x1d2>
 801a1ee:	2f58      	cmp	r7, #88	; 0x58
 801a1f0:	f000 80a3 	beq.w	801a33a <_printf_i+0x16e>
 801a1f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a1f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a1fc:	e03a      	b.n	801a274 <_printf_i+0xa8>
 801a1fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a202:	2b15      	cmp	r3, #21
 801a204:	d8f6      	bhi.n	801a1f4 <_printf_i+0x28>
 801a206:	a101      	add	r1, pc, #4	; (adr r1, 801a20c <_printf_i+0x40>)
 801a208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a20c:	0801a265 	.word	0x0801a265
 801a210:	0801a279 	.word	0x0801a279
 801a214:	0801a1f5 	.word	0x0801a1f5
 801a218:	0801a1f5 	.word	0x0801a1f5
 801a21c:	0801a1f5 	.word	0x0801a1f5
 801a220:	0801a1f5 	.word	0x0801a1f5
 801a224:	0801a279 	.word	0x0801a279
 801a228:	0801a1f5 	.word	0x0801a1f5
 801a22c:	0801a1f5 	.word	0x0801a1f5
 801a230:	0801a1f5 	.word	0x0801a1f5
 801a234:	0801a1f5 	.word	0x0801a1f5
 801a238:	0801a385 	.word	0x0801a385
 801a23c:	0801a2a9 	.word	0x0801a2a9
 801a240:	0801a367 	.word	0x0801a367
 801a244:	0801a1f5 	.word	0x0801a1f5
 801a248:	0801a1f5 	.word	0x0801a1f5
 801a24c:	0801a3a7 	.word	0x0801a3a7
 801a250:	0801a1f5 	.word	0x0801a1f5
 801a254:	0801a2a9 	.word	0x0801a2a9
 801a258:	0801a1f5 	.word	0x0801a1f5
 801a25c:	0801a1f5 	.word	0x0801a1f5
 801a260:	0801a36f 	.word	0x0801a36f
 801a264:	682b      	ldr	r3, [r5, #0]
 801a266:	1d1a      	adds	r2, r3, #4
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	602a      	str	r2, [r5, #0]
 801a26c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a274:	2301      	movs	r3, #1
 801a276:	e0a3      	b.n	801a3c0 <_printf_i+0x1f4>
 801a278:	6820      	ldr	r0, [r4, #0]
 801a27a:	6829      	ldr	r1, [r5, #0]
 801a27c:	0606      	lsls	r6, r0, #24
 801a27e:	f101 0304 	add.w	r3, r1, #4
 801a282:	d50a      	bpl.n	801a29a <_printf_i+0xce>
 801a284:	680e      	ldr	r6, [r1, #0]
 801a286:	602b      	str	r3, [r5, #0]
 801a288:	2e00      	cmp	r6, #0
 801a28a:	da03      	bge.n	801a294 <_printf_i+0xc8>
 801a28c:	232d      	movs	r3, #45	; 0x2d
 801a28e:	4276      	negs	r6, r6
 801a290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a294:	485e      	ldr	r0, [pc, #376]	; (801a410 <_printf_i+0x244>)
 801a296:	230a      	movs	r3, #10
 801a298:	e019      	b.n	801a2ce <_printf_i+0x102>
 801a29a:	680e      	ldr	r6, [r1, #0]
 801a29c:	602b      	str	r3, [r5, #0]
 801a29e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a2a2:	bf18      	it	ne
 801a2a4:	b236      	sxthne	r6, r6
 801a2a6:	e7ef      	b.n	801a288 <_printf_i+0xbc>
 801a2a8:	682b      	ldr	r3, [r5, #0]
 801a2aa:	6820      	ldr	r0, [r4, #0]
 801a2ac:	1d19      	adds	r1, r3, #4
 801a2ae:	6029      	str	r1, [r5, #0]
 801a2b0:	0601      	lsls	r1, r0, #24
 801a2b2:	d501      	bpl.n	801a2b8 <_printf_i+0xec>
 801a2b4:	681e      	ldr	r6, [r3, #0]
 801a2b6:	e002      	b.n	801a2be <_printf_i+0xf2>
 801a2b8:	0646      	lsls	r6, r0, #25
 801a2ba:	d5fb      	bpl.n	801a2b4 <_printf_i+0xe8>
 801a2bc:	881e      	ldrh	r6, [r3, #0]
 801a2be:	4854      	ldr	r0, [pc, #336]	; (801a410 <_printf_i+0x244>)
 801a2c0:	2f6f      	cmp	r7, #111	; 0x6f
 801a2c2:	bf0c      	ite	eq
 801a2c4:	2308      	moveq	r3, #8
 801a2c6:	230a      	movne	r3, #10
 801a2c8:	2100      	movs	r1, #0
 801a2ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a2ce:	6865      	ldr	r5, [r4, #4]
 801a2d0:	60a5      	str	r5, [r4, #8]
 801a2d2:	2d00      	cmp	r5, #0
 801a2d4:	bfa2      	ittt	ge
 801a2d6:	6821      	ldrge	r1, [r4, #0]
 801a2d8:	f021 0104 	bicge.w	r1, r1, #4
 801a2dc:	6021      	strge	r1, [r4, #0]
 801a2de:	b90e      	cbnz	r6, 801a2e4 <_printf_i+0x118>
 801a2e0:	2d00      	cmp	r5, #0
 801a2e2:	d04d      	beq.n	801a380 <_printf_i+0x1b4>
 801a2e4:	4615      	mov	r5, r2
 801a2e6:	fbb6 f1f3 	udiv	r1, r6, r3
 801a2ea:	fb03 6711 	mls	r7, r3, r1, r6
 801a2ee:	5dc7      	ldrb	r7, [r0, r7]
 801a2f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a2f4:	4637      	mov	r7, r6
 801a2f6:	42bb      	cmp	r3, r7
 801a2f8:	460e      	mov	r6, r1
 801a2fa:	d9f4      	bls.n	801a2e6 <_printf_i+0x11a>
 801a2fc:	2b08      	cmp	r3, #8
 801a2fe:	d10b      	bne.n	801a318 <_printf_i+0x14c>
 801a300:	6823      	ldr	r3, [r4, #0]
 801a302:	07de      	lsls	r6, r3, #31
 801a304:	d508      	bpl.n	801a318 <_printf_i+0x14c>
 801a306:	6923      	ldr	r3, [r4, #16]
 801a308:	6861      	ldr	r1, [r4, #4]
 801a30a:	4299      	cmp	r1, r3
 801a30c:	bfde      	ittt	le
 801a30e:	2330      	movle	r3, #48	; 0x30
 801a310:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a314:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801a318:	1b52      	subs	r2, r2, r5
 801a31a:	6122      	str	r2, [r4, #16]
 801a31c:	f8cd a000 	str.w	sl, [sp]
 801a320:	464b      	mov	r3, r9
 801a322:	aa03      	add	r2, sp, #12
 801a324:	4621      	mov	r1, r4
 801a326:	4640      	mov	r0, r8
 801a328:	f7ff fee2 	bl	801a0f0 <_printf_common>
 801a32c:	3001      	adds	r0, #1
 801a32e:	d14c      	bne.n	801a3ca <_printf_i+0x1fe>
 801a330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a334:	b004      	add	sp, #16
 801a336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a33a:	4835      	ldr	r0, [pc, #212]	; (801a410 <_printf_i+0x244>)
 801a33c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a340:	6829      	ldr	r1, [r5, #0]
 801a342:	6823      	ldr	r3, [r4, #0]
 801a344:	f851 6b04 	ldr.w	r6, [r1], #4
 801a348:	6029      	str	r1, [r5, #0]
 801a34a:	061d      	lsls	r5, r3, #24
 801a34c:	d514      	bpl.n	801a378 <_printf_i+0x1ac>
 801a34e:	07df      	lsls	r7, r3, #31
 801a350:	bf44      	itt	mi
 801a352:	f043 0320 	orrmi.w	r3, r3, #32
 801a356:	6023      	strmi	r3, [r4, #0]
 801a358:	b91e      	cbnz	r6, 801a362 <_printf_i+0x196>
 801a35a:	6823      	ldr	r3, [r4, #0]
 801a35c:	f023 0320 	bic.w	r3, r3, #32
 801a360:	6023      	str	r3, [r4, #0]
 801a362:	2310      	movs	r3, #16
 801a364:	e7b0      	b.n	801a2c8 <_printf_i+0xfc>
 801a366:	6823      	ldr	r3, [r4, #0]
 801a368:	f043 0320 	orr.w	r3, r3, #32
 801a36c:	6023      	str	r3, [r4, #0]
 801a36e:	2378      	movs	r3, #120	; 0x78
 801a370:	4828      	ldr	r0, [pc, #160]	; (801a414 <_printf_i+0x248>)
 801a372:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a376:	e7e3      	b.n	801a340 <_printf_i+0x174>
 801a378:	0659      	lsls	r1, r3, #25
 801a37a:	bf48      	it	mi
 801a37c:	b2b6      	uxthmi	r6, r6
 801a37e:	e7e6      	b.n	801a34e <_printf_i+0x182>
 801a380:	4615      	mov	r5, r2
 801a382:	e7bb      	b.n	801a2fc <_printf_i+0x130>
 801a384:	682b      	ldr	r3, [r5, #0]
 801a386:	6826      	ldr	r6, [r4, #0]
 801a388:	6961      	ldr	r1, [r4, #20]
 801a38a:	1d18      	adds	r0, r3, #4
 801a38c:	6028      	str	r0, [r5, #0]
 801a38e:	0635      	lsls	r5, r6, #24
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	d501      	bpl.n	801a398 <_printf_i+0x1cc>
 801a394:	6019      	str	r1, [r3, #0]
 801a396:	e002      	b.n	801a39e <_printf_i+0x1d2>
 801a398:	0670      	lsls	r0, r6, #25
 801a39a:	d5fb      	bpl.n	801a394 <_printf_i+0x1c8>
 801a39c:	8019      	strh	r1, [r3, #0]
 801a39e:	2300      	movs	r3, #0
 801a3a0:	6123      	str	r3, [r4, #16]
 801a3a2:	4615      	mov	r5, r2
 801a3a4:	e7ba      	b.n	801a31c <_printf_i+0x150>
 801a3a6:	682b      	ldr	r3, [r5, #0]
 801a3a8:	1d1a      	adds	r2, r3, #4
 801a3aa:	602a      	str	r2, [r5, #0]
 801a3ac:	681d      	ldr	r5, [r3, #0]
 801a3ae:	6862      	ldr	r2, [r4, #4]
 801a3b0:	2100      	movs	r1, #0
 801a3b2:	4628      	mov	r0, r5
 801a3b4:	f7e5 ff0c 	bl	80001d0 <memchr>
 801a3b8:	b108      	cbz	r0, 801a3be <_printf_i+0x1f2>
 801a3ba:	1b40      	subs	r0, r0, r5
 801a3bc:	6060      	str	r0, [r4, #4]
 801a3be:	6863      	ldr	r3, [r4, #4]
 801a3c0:	6123      	str	r3, [r4, #16]
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a3c8:	e7a8      	b.n	801a31c <_printf_i+0x150>
 801a3ca:	6923      	ldr	r3, [r4, #16]
 801a3cc:	462a      	mov	r2, r5
 801a3ce:	4649      	mov	r1, r9
 801a3d0:	4640      	mov	r0, r8
 801a3d2:	47d0      	blx	sl
 801a3d4:	3001      	adds	r0, #1
 801a3d6:	d0ab      	beq.n	801a330 <_printf_i+0x164>
 801a3d8:	6823      	ldr	r3, [r4, #0]
 801a3da:	079b      	lsls	r3, r3, #30
 801a3dc:	d413      	bmi.n	801a406 <_printf_i+0x23a>
 801a3de:	68e0      	ldr	r0, [r4, #12]
 801a3e0:	9b03      	ldr	r3, [sp, #12]
 801a3e2:	4298      	cmp	r0, r3
 801a3e4:	bfb8      	it	lt
 801a3e6:	4618      	movlt	r0, r3
 801a3e8:	e7a4      	b.n	801a334 <_printf_i+0x168>
 801a3ea:	2301      	movs	r3, #1
 801a3ec:	4632      	mov	r2, r6
 801a3ee:	4649      	mov	r1, r9
 801a3f0:	4640      	mov	r0, r8
 801a3f2:	47d0      	blx	sl
 801a3f4:	3001      	adds	r0, #1
 801a3f6:	d09b      	beq.n	801a330 <_printf_i+0x164>
 801a3f8:	3501      	adds	r5, #1
 801a3fa:	68e3      	ldr	r3, [r4, #12]
 801a3fc:	9903      	ldr	r1, [sp, #12]
 801a3fe:	1a5b      	subs	r3, r3, r1
 801a400:	42ab      	cmp	r3, r5
 801a402:	dcf2      	bgt.n	801a3ea <_printf_i+0x21e>
 801a404:	e7eb      	b.n	801a3de <_printf_i+0x212>
 801a406:	2500      	movs	r5, #0
 801a408:	f104 0619 	add.w	r6, r4, #25
 801a40c:	e7f5      	b.n	801a3fa <_printf_i+0x22e>
 801a40e:	bf00      	nop
 801a410:	0801e43f 	.word	0x0801e43f
 801a414:	0801e450 	.word	0x0801e450

0801a418 <_read_r>:
 801a418:	b538      	push	{r3, r4, r5, lr}
 801a41a:	4d07      	ldr	r5, [pc, #28]	; (801a438 <_read_r+0x20>)
 801a41c:	4604      	mov	r4, r0
 801a41e:	4608      	mov	r0, r1
 801a420:	4611      	mov	r1, r2
 801a422:	2200      	movs	r2, #0
 801a424:	602a      	str	r2, [r5, #0]
 801a426:	461a      	mov	r2, r3
 801a428:	f7e6 faee 	bl	8000a08 <_read>
 801a42c:	1c43      	adds	r3, r0, #1
 801a42e:	d102      	bne.n	801a436 <_read_r+0x1e>
 801a430:	682b      	ldr	r3, [r5, #0]
 801a432:	b103      	cbz	r3, 801a436 <_read_r+0x1e>
 801a434:	6023      	str	r3, [r4, #0]
 801a436:	bd38      	pop	{r3, r4, r5, pc}
 801a438:	2000d118 	.word	0x2000d118

0801a43c <abort>:
 801a43c:	b508      	push	{r3, lr}
 801a43e:	2006      	movs	r0, #6
 801a440:	f000 f84e 	bl	801a4e0 <raise>
 801a444:	2001      	movs	r0, #1
 801a446:	f7e6 fad5 	bl	80009f4 <_exit>
	...

0801a44c <_fstat_r>:
 801a44c:	b538      	push	{r3, r4, r5, lr}
 801a44e:	4d07      	ldr	r5, [pc, #28]	; (801a46c <_fstat_r+0x20>)
 801a450:	2300      	movs	r3, #0
 801a452:	4604      	mov	r4, r0
 801a454:	4608      	mov	r0, r1
 801a456:	4611      	mov	r1, r2
 801a458:	602b      	str	r3, [r5, #0]
 801a45a:	f7e6 fb1a 	bl	8000a92 <_fstat>
 801a45e:	1c43      	adds	r3, r0, #1
 801a460:	d102      	bne.n	801a468 <_fstat_r+0x1c>
 801a462:	682b      	ldr	r3, [r5, #0]
 801a464:	b103      	cbz	r3, 801a468 <_fstat_r+0x1c>
 801a466:	6023      	str	r3, [r4, #0]
 801a468:	bd38      	pop	{r3, r4, r5, pc}
 801a46a:	bf00      	nop
 801a46c:	2000d118 	.word	0x2000d118

0801a470 <_isatty_r>:
 801a470:	b538      	push	{r3, r4, r5, lr}
 801a472:	4d06      	ldr	r5, [pc, #24]	; (801a48c <_isatty_r+0x1c>)
 801a474:	2300      	movs	r3, #0
 801a476:	4604      	mov	r4, r0
 801a478:	4608      	mov	r0, r1
 801a47a:	602b      	str	r3, [r5, #0]
 801a47c:	f7e6 fb19 	bl	8000ab2 <_isatty>
 801a480:	1c43      	adds	r3, r0, #1
 801a482:	d102      	bne.n	801a48a <_isatty_r+0x1a>
 801a484:	682b      	ldr	r3, [r5, #0]
 801a486:	b103      	cbz	r3, 801a48a <_isatty_r+0x1a>
 801a488:	6023      	str	r3, [r4, #0]
 801a48a:	bd38      	pop	{r3, r4, r5, pc}
 801a48c:	2000d118 	.word	0x2000d118

0801a490 <_raise_r>:
 801a490:	291f      	cmp	r1, #31
 801a492:	b538      	push	{r3, r4, r5, lr}
 801a494:	4604      	mov	r4, r0
 801a496:	460d      	mov	r5, r1
 801a498:	d904      	bls.n	801a4a4 <_raise_r+0x14>
 801a49a:	2316      	movs	r3, #22
 801a49c:	6003      	str	r3, [r0, #0]
 801a49e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a4a2:	bd38      	pop	{r3, r4, r5, pc}
 801a4a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a4a6:	b112      	cbz	r2, 801a4ae <_raise_r+0x1e>
 801a4a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a4ac:	b94b      	cbnz	r3, 801a4c2 <_raise_r+0x32>
 801a4ae:	4620      	mov	r0, r4
 801a4b0:	f000 f830 	bl	801a514 <_getpid_r>
 801a4b4:	462a      	mov	r2, r5
 801a4b6:	4601      	mov	r1, r0
 801a4b8:	4620      	mov	r0, r4
 801a4ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a4be:	f000 b817 	b.w	801a4f0 <_kill_r>
 801a4c2:	2b01      	cmp	r3, #1
 801a4c4:	d00a      	beq.n	801a4dc <_raise_r+0x4c>
 801a4c6:	1c59      	adds	r1, r3, #1
 801a4c8:	d103      	bne.n	801a4d2 <_raise_r+0x42>
 801a4ca:	2316      	movs	r3, #22
 801a4cc:	6003      	str	r3, [r0, #0]
 801a4ce:	2001      	movs	r0, #1
 801a4d0:	e7e7      	b.n	801a4a2 <_raise_r+0x12>
 801a4d2:	2400      	movs	r4, #0
 801a4d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a4d8:	4628      	mov	r0, r5
 801a4da:	4798      	blx	r3
 801a4dc:	2000      	movs	r0, #0
 801a4de:	e7e0      	b.n	801a4a2 <_raise_r+0x12>

0801a4e0 <raise>:
 801a4e0:	4b02      	ldr	r3, [pc, #8]	; (801a4ec <raise+0xc>)
 801a4e2:	4601      	mov	r1, r0
 801a4e4:	6818      	ldr	r0, [r3, #0]
 801a4e6:	f7ff bfd3 	b.w	801a490 <_raise_r>
 801a4ea:	bf00      	nop
 801a4ec:	20000034 	.word	0x20000034

0801a4f0 <_kill_r>:
 801a4f0:	b538      	push	{r3, r4, r5, lr}
 801a4f2:	4d07      	ldr	r5, [pc, #28]	; (801a510 <_kill_r+0x20>)
 801a4f4:	2300      	movs	r3, #0
 801a4f6:	4604      	mov	r4, r0
 801a4f8:	4608      	mov	r0, r1
 801a4fa:	4611      	mov	r1, r2
 801a4fc:	602b      	str	r3, [r5, #0]
 801a4fe:	f7e6 fa67 	bl	80009d0 <_kill>
 801a502:	1c43      	adds	r3, r0, #1
 801a504:	d102      	bne.n	801a50c <_kill_r+0x1c>
 801a506:	682b      	ldr	r3, [r5, #0]
 801a508:	b103      	cbz	r3, 801a50c <_kill_r+0x1c>
 801a50a:	6023      	str	r3, [r4, #0]
 801a50c:	bd38      	pop	{r3, r4, r5, pc}
 801a50e:	bf00      	nop
 801a510:	2000d118 	.word	0x2000d118

0801a514 <_getpid_r>:
 801a514:	f7e6 ba54 	b.w	80009c0 <_getpid>

0801a518 <_init>:
 801a518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a51a:	bf00      	nop
 801a51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a51e:	bc08      	pop	{r3}
 801a520:	469e      	mov	lr, r3
 801a522:	4770      	bx	lr

0801a524 <_fini>:
 801a524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a526:	bf00      	nop
 801a528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a52a:	bc08      	pop	{r3}
 801a52c:	469e      	mov	lr, r3
 801a52e:	4770      	bx	lr
